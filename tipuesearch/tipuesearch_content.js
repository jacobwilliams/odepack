var tipuesearch = {"pages":[{"title":" odepack ","text":"odepack module ODEPACK This is a WIP(Work In Progress) to evaluate the effort required and\nfeasibility of updating older Fortran code from the netlib repository\nusing a combination of the commercial plusFORT/spag software and GNU\nutilities as well as conventional manual refactoring. Many thanks to plusFORT for making an evaluation copy available for\nseveral months to the Fortran Community. The plusFORT tools were crucial\nto this study and unmatched in my experience for removing deprecated\nsyntax from pre-f2003 code. This began with ODEPACK the ODEPACK package has been selected as a significant code that is well\ndocumented and structured for its vintage, and available on the netlib\nsite and covered by a public domain license. preliminary targets for phase I: remove obsolescent syntax (trying plusFORT and spag) able to build using fpm(1)  (the Fortran Package Manager) in debug mode (ongoing) with ifort, gfortran, nvfortran text viewable in ford(1) and extractable as markup that can run through pandoc(1) (ongoing) available on github (or equivalent) no common blocks no equivalences build as a (single?) module M_odepack (ongoing) complete set of unit tests (tests currently only use the original examples) The originally bundled subset of BLAS/LAPACK routines are\nbeing included in the module.  In production, this might not be done in\norder to be able to easily call external optimized versions. The biggest hinderance is some storage used for both INTEGER and DOUBLE\nPRECISION values. One take-away is how critical unit tests are to enable rapid development\n(which so far this package does not have) The initial pass was done just using the original sample programs as\nunit tests. This may have allowed for introduction of errors as this\nis a WIP but the original samples run with the same output as the original. plusFORT was invaluable and reduced the effort by an estimated 85\npercent. The results have been encouraging enough to inspire completing\nthe transformation. Phase II ? Some of the goals of phase I are incomplete, but The results of this first\npass were significant enough that this project will hopefully continue. A complete unit test suite is required to allow development to proceed\nrapidily. Contributions, especially from current ODEPACK users are\nparticularly welcome. Another major issue is the remaining non-standard code.  Non-standard (but\nat the time de-facto fortran standard) such as equivalencing different\ntypes, creating scratch space that is used as different numeric types,\nand treating scalars as arrays and vice-versa as well as passing the same\narrays or values multiple times are the most time-consuming usages to\ncorrect to standard-conforming, particularly since spag(1) had already\ndone an excellent job with updating the pre-f2003 code. spag(1) is not\n(currently?) sufficient by itself to automate the additional refactoring\ndesired, which includes using post-f95 features and code restructuring,\nso the remaining work requires manual recoding. The type-mismatch issues have not been eliminated enough to include all\nthe routines in the module, so  those in the files “M_da1/dprep.inc”\n“M_da1/dainvgs.inc” “M_da1/dprepi.inc” “M_da1/dstodi.inc” and\n“M_da1_/dstode.inc” still require being built without an interface\ndefinition. building with fpm(1) This version of ODEPACK already builds with an included make(1) file\nand as an fpm(1) package with the current options: fpm run                     --compiler nvfortran --example '*' fpm run --profile release   --compiler ifort     --example '*' fpm run --flag -std = legacy  --compiler gfortran  --example '*' building with make(1) cd src # gfortran make clean\nmake gfortran\nmake run\nmake test # ifort make clean\nmake ifort\nmake run\nmake test # nvfortran make clean\nmake nvfortran\nmake run\nmake test To rebuild the documentation with ford(1), use ford ford.md The code is far more readable after having been refactored by\na combination of using spag(1) from the plusFORT package and manual\nediting, and is believed as useable as the original. There are a few notes in src/M_odepack.f90 concerning continuing issues. Current users of ODEPACK are encouraged to try this version and provide\nfeedback. Hopefully as a community we can complete creating a new maintained\nproduction-quality version of this venerable and still-valuable package. Documentation The ongoing API documentation for the current master branch can\nbe found here .\nThis is generated by processing the source files with FORD . Solvers for explicitly given systems. Links to the solver-specific documenation for the main procedures (as described below): dlsoda dlsodar dlsode dlsodes dlsodi dlsodis dlsodkr dlsodpk dlsoibt Here is an overview primarily from the original documentation  … Brief Description of ODEPACK - A Systematized Collection of ODE Solvers (Double Precision Version) Alan C. Hindmarsh\nCenter for Applied Scientific Computing, L-561\nLawrence Livermore National Laboratory\nLivermore, CA 94551, U.S.A.\n\n20 June 2001 Work performed under the auspices of the U.S. Department of Energy\nby the Lawrence Livermore National Laboratory under contract\nNo. W-7405-Eng-48, and supported (formerly) by the DOE Office of\nEnergy Research, Applied Mathematical Sciences Research Program. ODEPACK is a collection of Fortran solvers for the initial value\nproblem for ordinary differential equation systems.  It consists of nine\nsolvers, namely a basic solver called LSODE and eight variants of it –\nLSODES, LSODA, LSODAR, LSODPK, LSODKR, LSODI, LSOIBT, and LSODIS.\nThe collection is suitable for both stiff and nonstiff systems.  It\nincludes solvers for systems given in explicit form, dy/dt = f(t,y),\nand also solvers for systems given in linearly implicit form,\nA(t,y) dy/dt = g(t,y).  Two of the solvers use general sparse matrix\nsolvers for the linear systems that arise.  Two others use iterative\n(preconditioned Krylov) methods instead of direct methods for these\nlinear systems.  The most recent addition is LSODIS, which solves\nimplicit problems with general sparse treatment of all matrices involved. The ODEPACK solvers are written in standard Fortran 77, with a few\nexceptions, and with minimal machine dependencies.  There are separate\ndouble and single precision versions of ODEPACK.  The actual solver\nnames are those given above with a prefix of D- or S- for the double\nor single precision version, respectively, i.e. DLSODE/SLSODE, etc.\nEach solver consists of a main driver subroutine having the same name\nas the solver and some number of subordinate routines.  For each\nsolver, there is also a demonstration program, which solves one or two\nsimple problems in a somewhat self-checking manner. Recently, the ODEPACK solvers were upgraded to improve their\nportability in numerous ways.  Among the improvements are (a) renaming\nof routines and Common blocks to distinguish double and single\nprecision versions, (b) use of generic intrinsic function names, (c)\nelimination of the Block Data subprogram, (d) use of a portable\nroutine to set the unit roundoff, and (e) passing of quoted strings to\nthe error message handler.  In addition, the prologue and internal\ncomments were reformatted, and use mixed upper/lower case.  Numerous\nminor corrections and improvements were also made. The above upgrade operations were applied to LSODE earlier than they\nwere to the rest of ODEPACK, and the two upgrades were done somewhat\nindependently.  As a result, some differences will be apparent in the\nsource files of LSODE and the other solvers – primarily in the\nformatting of the comment line prologue of the main driver routine.\nIn Subroutines DLSODE/SLSODE and their subordinate routines, the\nprologue was written in “SLATEC format”, while for the other solvers a\nmore relaxed style was used.  The differences are entirely cosmetic,\nhowever, and do not affect performance. Documentation on the usage of each solver is provided in the\ninitial block of comment lines in the source file, which (in most\ncases) includes a simple example.  A demonstration program (in\nseparate double/single precision versions) is also available. What follows is a summary of the capabilities of ODEPACK, comments\nabout usage documentation, and notes about installing the collection.\nFor additional documentation on ODEPACK, see also the papers [1], [2]\n(for LSODE), and [3] (for LSODPK and LSODKR), and in the references\ncited there.  (However, the document [2] does not reflect the upgrade\noperations described above.) References: A. C. Hindmarsh, “ ODEPACK, A Systematized Collection of ODE Solvers ,”\n     in Scientific Computing, R. S. Stepleman et al. (eds.), North-Holland,\n     Amsterdam, 1983 (vol. 1 of IMACS Transactions on Scientific Computation),\n     pp. 55-64. K. Radhakrishnan and A. C. Hindmarsh, “ Description and Use of LSODE,\n     the Livermore Solver for Ordinary Differential Equations ,” LLNL\n     report UCRL-ID-113855, December 1993. P. N. Brown and A. C. Hindmarsh, “ Reduced Storage Matrix Methods\n     in Stiff ODE Systems ,” J. Appl. Math. & Comp., 31 (1989), pp.40-91. I. Summary of the ODEPACK Solvers A. Solvers for explicitly given systems. For each of the following solvers, it is assumed that the ODEs are\ngiven explicitly, so that the system can be written in the form\ndy/dt = f(t,y), where y is the vector of dependent variables, and t is\nthe independent variable. LSODE (Livermore Solver for Ordinary Differential Equations) is the\n   basic solver of the collection.  It solves stiff and nonstiff systems\n   of the form dy/dt = f.  In the stiff case, it treats the Jacobian\n   matrix df/dy as either a dense (full) or a banded matrix, and as either\n   user-supplied or internally approximated by difference quotients.\n   It uses Adams methods (predictor-corrector) in the nonstiff case,\n   and Backward Differentiation Formula (BDF) methods (the Gear methods)\n   in the stiff case.  The linear systems that arise are solved by direct\n   methods (LU factor/solve).  LSODE supersedes the older GEAR and GEARB\n   packages, and reflects a complete redesign of the user interface\n   and internal organization, with some algorithmic improvements. LSODES, written jointly with A. H. Sherman, solves systems dy/dt = f\n   and in the stiff case treats the Jacobian matrix in general sparse\n   form.  It determines the sparsity structure on its own, or optionally\n   accepts this information from the user.  It then uses parts of the\n   Yale Sparse Matrix Package (YSMP) to solve the linear systems that\n   arise, by a sparse (direct) LU factorization/backsolve method.\n   LSODES supersedes, and improves upon, the older GEARS package. LSODA, written jointly with L. R. Petzold, solves systems dy/dt = f\n   with a dense or banded Jacobian when the problem is stiff, but it\n   automatically selects between nonstiff (Adams) and stiff (BDF)\n   methods.  It uses the nonstiff method initially, and dynamically\n   monitors data in order to decide which method to use. LSODAR, also written jointly with L. R. Petzold, is a variant of\n   LSODA with a rootfinding capability added.  Thus it solves problems\n   dy/dt = f with dense or banded Jacobian and automatic method\n   selection, and at the same time, it finds the roots of any of a\n   set of given functions of the form g(t,y).  This is often useful\n   for finding stop conditions, or for finding points at which a switch\n   is to be made in the function f. LSODPK, written jointly with Peter N. Brown, is a variant of LSODE\n   in which the direct solvers for the linear systems have been replaced\n   by a selection of four preconditioned Krylov (iterative) solvers.\n   The user must supply a pair of routine to evaluate, preprocess, and\n   solve the (left and/or right) preconditioner matrices.  LSODPK also\n   includes an option for a user-supplied linear system solver to be used\n   without Krylov iteration. LSODKR is a variant of LSODPK with the addition of the same\n   rootfinding capability as in LSODAR, and also of automatic switching\n   between functional and Newton iteration.  The nonlinear iteration\n   method-switching differs from the method-switching in LSODA and LSODAR,\n   but provides similar savings by using the cheaper method in the non-stiff\n   regions of the problem.  LSODKR also improves on the Krylov methods in\n   LSODPK by offering the option to save and reuse the approximate Jacobian\n   data underlying the preconditioner. B. Solvers for linearly implicit systems. The following solvers treat systems in the linearly implicit form\nA(t,y) dy/dt = g(t,y), A = a square matrix, i.e. with the derivative\ndy/dt implicit, but linearly so.  These solvers allow A to be\nsingular, in which case the system is a differential-algebraic\nequation (DAE) system.  In that case, the user must be very careful\nto supply a well-posed problem with consistent initial conditions. LSODI, written jointly with J. F. Painter, solves linearly implicit\n   systems in which the matrices involved (A, dg/dy, and d(A dy/dt)/dy)\n   are all assumed to be either dense or banded.  LSODI supersedes the\n   older GEARIB solver and improves upon it in numerous ways. LSOIBT, written jointly with C. S. Kenney, solves linearly implicit\n   systems in which the matrices involved are all assumed to be\n   block-tridiagonal.  Linear systems are solved by the LU method. LSODIS, written jointly with S. Balsdon, solves linearly implicit\n   systems in which the matrices involved are all assumed to be sparse.\n   Like LSODES, LSODIS either determines the sparsity structure or\n   accepts it from the user, and uses parts of the Yale Sparse Matrix\n   Package to solve the linear systems that arise, by a direct method. II. Usage Documentation Each of the solvers in the ODEPACK collection is headed by a\nuser-callable driver subroutine, with the same name as the solver\n(DLSODE, etc.).  The call sequence of the driver routine includes the\nnames of one or more user-supplied subroutines that define the ODE\nsystem, and various other problem and solution parameters.  Complete\nuser documentation is given in the initial block of comment lines\n(the prologue) in the driver routine.  In each case, this prologue is\norganized as follows: Summary of Usage (short, for standard modes of use) Example Problem, with code and output (except for LSODPK and LSODKR) Full Description of User Interface, further divided as follows: Call sequence description (including optional inputs/outputs) Optionally callable routines Descriptions of internal Common blocks Optionally user-replaceable routines Revision History, showing date written and dates of revisions Other Routines, a list of all subordinate routines for the solver First-time users should read only the Summary of Usage and look at the\nthe Example Problem (or demonstration program), then later refer to the\nFull Description if and when more details or nonstandard options are needed. III. Installation Notes Use of supplied matrix procedures THe src/M_matrix/ directory  includes modified versions of routines from the\nLINPACK and BLAS collections that are needed by the solvers (and by two\nof the demonstration programs), for the solution of dense and banded\nlinear systems and associated basic linear algebra operations.\nThese routine are: _From LINPACK_ :  DGEFA, DGESL, DGBFA, DGBSL\n   _From the BLAS_: DAXPY, DCOPY, DDOT, DSCAL, DNRM2, IDAMAX If your computer system already has these routines, and especially if it\nhas machine-optimized versions, the copies provided in the M_module\nmodule should probably not be called by your program if high performance\nis required. The message package The second auxiliary source file directory M_da1/ includes a set of five\nroutines – XERRWD, XSETUN, XSETF, IXSAV, IUMACH – which handle error\nmessages from the solvers. These routines are slated for elimination and replacement with a \nmore intuitive interface. This set is in fact a reduced version (sufficient for the needs of\nODEPACK) of a much larger error handling package from the SLATEC Library.\nIf your computer system already has the full SLATEC error handler, the\nversion provided here can be ignored.  If the reduced version is used,\nits machine-dependent features should be checked first; see comments in\nSubroutine XERRWD. Non-standard code ODEPACK contains a few instances where the Fortran Standard is violated: (a) In various places in the LSODES and LSODIS solvers, a call to a\n   subroutine has a subscripted real array as an argument where the\n   subroutine called expects an integer array.  Calls of this form\n   occur in Subroutine DLSODES (to DSTODE), in DIPREP (to DPREP),\n   in Subroutine DLSODIS (to DSTODI), and in DIPREPI (to DPREPI).\n   Another such call occurs in the DLSODES demonstration program,\n   from the main program to Subroutine SSOUT. This is done in order\n   to use work space in an efficient manner, as the same space is\n   sometimes used for real work space and sometimes for integer work\n   space.  If your compiler does not accept this feature, one possible\n   way to get the desired result is to compile the called routines\n   and calling routines in separate jobs, and then combine the binary\n   modules in an appropriate manner. If this procedure is still not\n   acceptable under your system, it will be necessary to radically\n   alter the structure of the array RWORK within the LSODES or LSODIS\n   solver package.  (See also Note 5 below.) (b) Each ODEPACK solver treats the arguments NEQ, Y, RTOL, and ATOL\n   as arrays, even though the length may be only 1.  Moreover,\n   except for Y, the usage instructions say that these arguments\n   may be either arrays or scalars.  If your system does not allow\n   such a mismatch, then the documentation of these arguments\n   should be changed accordingly. For maximum storage economy, the LSODES and LSODIS solvers make use\nof the real to integer wordlength ratio.  This is assumed to be an\ninteger L such that if a real array R and an integer array M occupy\nthe same space in memory, R(1) having the same bit address as M(1),\nthen R(I) has the same address as M((I-1)*L+1).  This ratio L is\nusually 2 for double precision, and this is the value used in the\ndouble precision version supplied.  If this value is incorrect, it\nneeds to be changed in two places: (a) The integer LENRAT is DATA-loaded in Subroutines DLSODES and\n      DLSODIS to this ratio, shortly below the prologue. (b) The integer LRATIO is DATA-loaded in Subroutine CDRV to this\n      ratio, shortly below the prologue of that routine. (See comments in both places.)  If the ratio is not an integer, use\nthe greatest integer not exceeding the ratio. For installation of ODEPACK on a Cray computer, the source files\nsupplied include compiler directives for the CFT compiler.  These have\nthe form CDIR$ IVDEP and occur prior to certain loops that involve\nsubscript shifts (and would otherwise not be vectorized).  These\ndirectives are (or should be) treated as comments by any other compiler. On first obtaining ODEPACK, the demonstration programs should be\ncompiled and executed prior to any other use of the solvers.  In most\ncases, these exercise all of the major method options in each solver,\nand are self-checking.  (In the case of LSODPK and LSODKR, the\ndemonstration programs are not self-checking, and for LSODKR only one\nmajor method option is used.)  In any case, the output can be compared\nwith the sample output supplied, which was generated from the double\nprecision version of ODEPACK on a 32-bit computer.  When comparing your\noutput with that supplied, differences of 10-20% in the final values of\nthe various statistical counters can be attributed to differences in\nthe roundoff properties of different computer systems. If some subset of the whole ODEPACK collection is desired, without\nunneeded routines, the appropriate routines must be extracted\naccordingly.  The following lists give the routines needed for the\ndouble precision version of each solver. The DLSODE solver consists of the routines\n  DLSODE, DINTDY, DSTODE, DCFODE, DPREPJ, DSOLSY, DEWSET, DVNORM, DSRCOM,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODES solver consists of the routines\n  DLSODES, DIPREP, DPREP, JGROUP, ADJLR, CNTNZU, DINTDY, DSTODE, DCFODE,\n  DPRJS, DSOLSS, DEWSET, DVNORM, DSRCMS,\n  ODRV, MD, MDI, MDM, MDP, MDU, SRO,\n  CDRV, NROC, NSFC, NNFC, NNSC, NNTC,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODA solver consists of the routines\n  DLSODA, DINTDY, DSTODA, DCFODE, DPRJA, DSOLSY, DEWSET,\n  DMNORM, DFNORM, DBNORM, DSRCMA,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODAR solver consists of the routines\n  DLSODAR, DRCHEK, DROOTS, DINTDY, DSTODA, DCFODE, DPRJA, DSOLSY, DEWSET,\n  DMNORM, DFNORM, DBNORM, DSRCAR,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, DCOPY, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODPK solver consists of the routines\n  DLSODPK, DINTDY, DEWSET, DVNORM, DSTODPK, DCFODE, DPKSET, DSOLPK,\n  DSPIOM, DATV, DORTHOG, DHEFA, DHESL, DSPIGMR, DHEQR, DHELS,\n  DPCG, DPCGS, DATP, DUSOL, DSRCPK,\n  DAXPY, DSCAL, DCOPY, DDOT, DNRM2, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODKR solver consists of the routines\n  DLSODKR, DRCHEK, DROOTS, DLHIN, DINTDY, DEWSET, DVNORM, DSTOKA,\n  DCFODE, DSETPK, DSOLPK, DSPIOM, DATV, DORTHOG, DHEFA, DHESL, DSPIGMR,\n  DHEQR, DHELS, DPCG, DPCGS, DATP, DUSOL, DSRCKR,\n  DAXPY, DSCAL, DCOPY, DDOT, DNRM2, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODI solver consists of the routines\n  DLSODI, DAINVG, DINTDY, DSTODI, DCFODE, DPREPJI, DSOLSY, DEWSET,\n  DVNORM, DSRCOM,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSOIBT solver consists of the routines\n  DLSOIBT, DAIGBT, DINTDY, DSTODI, DCFODE, DPJIBT, DSLSBT, DEWSET,\n  DVNORM, DSRCOM, DDECBT, DSOLBT,\n  DGEFA, DGESL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODIS solver consists of the routines\n  DLSODIS, DAINVGS, DIPREPI, DPREPI, JGROUP, ADJLR, CNTNZU, DINTDY,\n  DSTODI, DCFODE, DPRJIS, DSOLSS, DEWSET, DVNORM, DSRCMS,\n  ODRV, MD, MDI, MDM, MDP, MDU, SRO,\n  CDRV, NROC, NSFC, NNFC, NNSC, NNTC,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH Developer Info Alan C. Hindmarsh as modified by John S. Urban, Jacob Williams","tags":"home","loc":"index.html"},{"title":"dprep – odepack","text":"subroutine dprep(Neq, Y, Yh, Savf, Ewt, Ftem, Ia, Ja, Wk, Iwk, Ipper, f, jac) Uses M_odepack proc~~dprep~~UsesGraph proc~dprep dprep module~m_odepack M_odepack proc~dprep->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This routine performs preprocessing related to the sparse linear\nsystems that must be solved if MITER = 1 or 2. The operations that are performed here are: compute sparseness structure of Jacobian according to MOSS, compute grouping of column indices (MITER = 2), compute a new ordering of rows and columns of the matrix, reorder JA corresponding to the new ordering, perform a symbolic LU factorization of the matrix, and set pointers for segments of the IWK/WK array. In addition to variables described previously, DPREP uses the\nfollowing for communication: YH the history array.  Only the first column, containing the\ncurrent Y vector, is used.  Used only if MOSS .ne. 0. SAVF a work array of length NEQ, used only if MOSS .ne. 0. EWT array of length NEQ containing (inverted) error weights.\nUsed only if MOSS = 2 or if ISTATE = MOSS = 1. FTEM a work array of length NEQ, identical to ACOR in the driver,\nused only if MOSS = 2. WK a real work array of length LENWK, identical to WM in\nthe driver. IWK integer work array, assumed to occupy the same space as WK. LENWK the length of the work arrays WK and IWK. ISTATC a copy of the driver input argument ISTATE (= 1 on the\nfirst call, = 3 on a continuation call). IYS flag value from ODRV or CDRV. IPPER output error flag with the following values and meanings:\n     0  no error.\n    -1  insufficient storage for internal structure pointers.\n    -2  insufficient storage for JGROUP.\n    -3  insufficient storage for ODRV.\n    -4  other error flag from ODRV (should never occur).\n    -5  insufficient storage for CDRV.\n    -6  other error flag from CDRV. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Ftem (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) real(kind=dp) :: Wk (*) integer, intent(inout) :: Iwk (*) integer, intent(out) :: Ipper real :: f integer :: jac Calls proc~~dprep~~CallsGraph proc~dprep dprep none~wrapup500 wrapup500 proc~dprep->none~wrapup500 proc~odrv odrv proc~dprep->proc~odrv proc~jgroup jgroup proc~dprep->proc~jgroup proc~cdrv cdrv proc~dprep->proc~cdrv none~wrapup400 wrapup400 proc~dprep->none~wrapup400 none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~adjlr adjlr proc~dprep->proc~adjlr iwk iwk none~wrapup600->iwk proc~cntnzu cntnzu none~wrapup600->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dprep~~CalledByGraph proc~dprep dprep proc~diprep~2 diprep proc~diprep~2->proc~dprep proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp dq dyj erwt fac i ibr ier ipil ipiu iptt1 iptt2 j jfound k kmax kmin knew ldif lenigp liwk maxg np1 nzsut yj Subroutines wrapup400 wrapup500 wrapup600 wrapup700 Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dq real(kind=dp), public :: dyj real(kind=dp), public :: erwt real(kind=dp), public :: fac integer, public :: i integer, public :: ibr integer, public :: ier integer, public :: ipil integer, public :: ipiu integer, public :: iptt1 integer, public :: iptt2 integer, public :: j integer, public :: jfound integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: knew integer, public :: ldif integer, public :: lenigp integer, public :: liwk integer, public :: maxg integer, public :: np1 integer, public :: nzsut real(kind=dp), public :: yj Subroutines subroutine wrapup400() Arguments None subroutine wrapup500() Arguments None subroutine wrapup600() Arguments None subroutine wrapup700() Arguments None","tags":"","loc":"proc/dprep.html"},{"title":"dainvgs – odepack","text":"subroutine dainvgs(Neq, T, Y, Wk, Iwk, Tem, Ydot, Ier, res, adda) Uses M_odepack proc~~dainvgs~~UsesGraph proc~dainvgs dainvgs module~m_odepack M_odepack proc~dainvgs->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This subroutine computes the initial value of the vector YDOT\nsatisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSODIS for initialization\nonly, when ISTATE = 0.  The matrix A is subjected to LU\ndecomposition in CDRV.  Then the system A*YDOT = g(t,y) is solved\nin CDRV. In addition to variables described previously, communication\nwith DAINVGS uses the following: Y array of initial values. WK real work space for matrices.  On output it contains A and\n  its LU decomposition.  The LU decomposition is not entirely\n  sparse unless the structure of the matrix A is identical to\n  the structure of the Jacobian matrix dr/dy.\n  Storage of matrix elements starts at WK(3).\n  WK(1) = SQRT(UROUND), not used here. IWK integer work space for matrix-related data, assumed to\n  be equivalenced to WK.  In addition, WK(IPRSP) and WK(IPISP)\n  are assumed to have identical locations. TEM vector of work space of length N (ACOR in DSTODI). YDOT output vector containing the initial dy/dt. YDOT(i) contains\n  dy(i)/dt when the matrix A is non-singular. IER output error flag with the following values and meanings:\n  = 0  if DAINVGS was successful.\n  = 1  if the A-matrix was found to be singular.\n  = 2  if RES returned an error flag IRES = IER = 2.\n  = 3  if RES returned an error flag IRES = IER = 3.\n  = 4  if insufficient storage for CDRV (should not occur here).\n  = 5  if other error found in CDRV (should not occur here). Arguments Type Intent Optional Attributes Name integer :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: Tem (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Ier real :: res real :: adda Calls proc~~dainvgs~~CallsGraph proc~dainvgs dainvgs proc~cdrv cdrv proc~dainvgs->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dainvgs~~CalledByGraph proc~dainvgs dainvgs proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dainvgs proc~dlsodis dlsodis proc~dlsodis->proc~dainvgs Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp i imul j k kmax kmin Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) integer, public :: i integer, public :: imul integer, public :: j integer, public :: k integer, public :: kmax integer, public :: kmin","tags":"","loc":"proc/dainvgs.html"},{"title":"dprepi – odepack","text":"subroutine dprepi(Neq, Y, S, Yh, Savr, Ewt, Rtem, Ia, Ja, Ic, Jc, Wk, Iwk, Ipper, res, jac, adda) Uses M_odepack proc~~dprepi~~UsesGraph proc~dprepi dprepi module~m_odepack M_odepack proc~dprepi->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This routine performs preprocessing related to the sparse linear\nsystems that must be solved. The operations that are performed here are: compute sparseness structure of the iteration matrix\n     P = A - con*J  according to MOSS, compute grouping of column indices (MITER = 2), compute a new ordering of rows and columns of the matrix, reorder JA corresponding to the new ordering, perform a symbolic LU factorization of the matrix, and set pointers for segments of the IWK/WK array. In addition to variables described previously, DPREPI uses the\nfollowing for communication: YH the history array.  Only the first column, containing the\ncurrent Y vector, is used.  Used only if MOSS .ne. 0. S array of length NEQ, identical to YDOTI in the driver, used\nonly if MOSS .ne. 0. SAVR a work array of length NEQ, used only if MOSS .ne. 0. EWT array of length NEQ containing (inverted) error weights.\nUsed only if MOSS = 2 or 4 or if ISTATE = MOSS = 1. RTEM a work array of length NEQ, identical to ACOR in the driver,\nused only if MOSS = 2 or 4. WK a real work array of length LENWK, identical to WM in\nthe driver. IWK integer work array, assumed to occupy the same space as WK. LENWK the length of the work arrays WK and IWK. ISTATC a copy of the driver input argument ISTATE (= 1 on the\nfirst call, = 3 on a continuation call). IYS flag value from ODRV or CDRV. IPPER output error flag, with the following values and meanings:\n   =   0  no error.\n   =  -1  insufficient storage for internal structure pointers.\n   =  -2  insufficient storage for JGROUP.\n   =  -3  insufficient storage for ODRV.\n   =  -4  other error flag from ODRV (should never occur).\n   =  -5  insufficient storage for CDRV.\n   =  -6  other error flag from CDRV.\n   =  -7  if the RES routine returned error flag IRES = IER = 2.\n   =  -8  if the RES routine returned error flag IRES = IER = 3. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(in) :: Yh (*) real(kind=dp), intent(inout) :: Savr (*) real(kind=dp), intent(in) :: Ewt (*) real(kind=dp), intent(inout) :: Rtem (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(in) :: Ic (*) integer, intent(in) :: Jc (*) real(kind=dp), intent(inout) :: Wk (*) integer, intent(inout) :: Iwk (*) integer, intent(out) :: Ipper real :: res integer :: jac real :: adda Calls proc~~dprepi~~CallsGraph proc~dprepi dprepi proc~jgroup jgroup proc~dprepi->proc~jgroup proc~odrv odrv proc~dprepi->proc~odrv proc~cdrv cdrv proc~dprepi->proc~cdrv proc~cntnzu cntnzu proc~dprepi->proc~cntnzu proc~adjlr adjlr proc~dprepi->proc~adjlr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dprepi~~CalledByGraph proc~dprepi dprepi proc~diprepi~2 diprepi proc~diprepi~2->proc~dprepi proc~diprepi diprepi proc~diprepi->proc~dprepi proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~diprepi~2 proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp erwt fac i ibr ier ipil ipiu iptt1 iptt2 j k kamax kamin kcmax kcmin knew ldif lenigp lenwk1 liwk ljfo maxg np1 nzsut yj Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: erwt real(kind=dp), public :: fac integer, public :: i integer, public :: ibr integer, public :: ier integer, public :: ipil integer, public :: ipiu integer, public :: iptt1 integer, public :: iptt2 integer, public :: j integer, public :: k integer, public :: kamax integer, public :: kamin integer, public :: kcmax integer, public :: kcmin integer, public :: knew integer, public :: ldif integer, public :: lenigp integer, public :: lenwk1 integer, public :: liwk integer, public :: ljfo integer, public :: maxg integer, public :: np1 integer, public :: nzsut real(kind=dp), public :: yj","tags":"","loc":"proc/dprepi.html"},{"title":"dstodi – odepack","text":"subroutine dstodi(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savr, Acor, Wm, Iwm, res, adda, jac, pjac, slvs) Uses M_odepack proc~~dstodi~~UsesGraph proc~dstodi dstodi module~m_odepack M_odepack proc~dstodi->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. DSTODI performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. Note: DSTODI is independent of the value of the iteration method\nindicator MITER, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTODI is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to RES, ADDA,\nand JAC. Y an array of length .ge. N used as the Y argument in\nall calls to RES, JAC, and ADDA. NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls tO RES, G, ADDA,\nand JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where LMAX MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N. also used for\ninput of YH(*,MAXORD+2) when JSTART = -1 and MAXORD is less\nthan the current order NQ.\nSame as YDOTI in the driver. SAVR an array of working storage, of length N. ACOR a work array of length N used for the accumulated\ncorrections. On a succesful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration. PJAC name of routine to evaluate and preprocess Jacobian matrix. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in H*EL0 before PJAC is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n  . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return , JSTART is set to 1 to facilitate continuation . KFLAG a completion code with the following meanings: 0 the step was succesful . - 1 the requested error could not be achieved . - 2 corrector convergence could not be achieved . - 3 RES ordered immediate return . - 4 error condition from RES could not be avoided . - 5 fatal error in PJAC or SLVS . A return with KFLAG = -1, -2, or -4 means either ABS(H) HMIN or 10 consecutive failures occurred. On a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls. MXNCF maximum number of convergence failures allowed.\nMETH/MITER = the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Savf real(kind=dp), dimension(*) :: Savr real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res real :: adda integer :: jac real :: pjac real :: slvs Calls proc~~dstodi~~CallsGraph proc~dstodi dstodi proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dvnorm dvnorm proc~dstodi->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstodi~~CalledByGraph proc~dstodi dstodi proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dstodi proc~dlsodi dlsodi proc~dlsodi->proc~dstodi proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dstodi proc~dlsodis dlsodis proc~dlsodis->proc~dstodi proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dstodi proc~dlsoibt dlsoibt proc~dlsoibt->proc~dstodi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dp dsm dup el1h eljh exdn exsm exup i i1 iredo ires iret j jb kgo m ncf newq r rh rhdn rhsm rhup told Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: el1h real(kind=dp), public :: eljh real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: ires integer, public :: iret integer, public :: j integer, public :: jb integer, public :: kgo integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told","tags":"","loc":"proc/dstodi.html"},{"title":"dstode – odepack","text":"subroutine dstode(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) Uses M_odepack proc~~dstode~~UsesGraph proc~dstode dstode module~m_odepack M_odepack proc~dstode->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. NAME dstode(3f) - [M_odepack] Performs one step of an ODEPACK integration. DESCRIPTION DSTODE performs one step of the integration of an initial value\n  problem for a system of ordinary differential equations. Note:  DSTODE is independent of the value of the iteration method\n  indicator MITER, when this is .ne. 0, and hence is independent\n  of the type of chord method used, or the Jacobian structure. Communication with DSTODE is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\n  passed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\n  all calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\n  and their approximate scaled derivatives, where\n  LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\n  j-th derivative of y(i), scaled by h**j/factorial(j)\n  (j = 0,1,…,NQ).  on entry for the first step, the first\n  two columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\n  for local error measurements.  Local errors in Y(i) are\n  compared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\n  Also used for input of YH(*,MAXORD+2) when JSTART = -1\n  and MAXORD .lt. the current order NQ. ACOR a work array of length N, used for the accumulated\n  corrections.  On a successful return, ACOR(i) contains\n  the estimated one-step local error in Y(i). WM,IWM real and integer work arrays associated with matrix\n  operations in chord iteration (MITER .ne. 0). PJAC name of routine to evaluate and preprocess Jacobian matrix\n  and P = I - h el0 JAC, if a chord method is being used. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in h*el0 before PJAC is called. H the step size to be attempted on the next step.\n  H is altered by the error control algorithm during the\n  problem.  H can be either positive or negative, but its\n  sign must remain constant throughout the problem. HMIN the minimum absolute value of the step size h to be used. HMXI inverse of the maximum absolute value of h to be used.\n  HMXI = 0.0 is allowed and corresponds to an infinite hmax.\n  HMIN and HMXI may be changed at any time, but will not\n  take effect until the next change of h is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\n  values and meanings:\n            0  perform the first step.\n        .gt.0  take a new step continuing from the last.\n           -1  take the next step with a new value of H, MAXORD,\n               N, METH, MITER, and/or matrix parameters.\n           -2  take the next step with a new value of H,\n               but with other inputs unchanged.\n  On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings:\n        0  the step was succesful.\n       -1  the requested error could not be achieved.\n       -2  corrector convergence could not be achieved.\n       -3  fatal error in PJAC or SLVS. A return with KFLAG = -1 or -2 means either\n  abs(H) = HMIN or 10 consecutive failures occurred.\n  On a return with KFLAG negative, the values of TN and\n  the YH array are as of the beginning of the last\n  step, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH/MITER the method flags.  See description in driver. N the number of first-order differential equations. The values of CCMAX, H, HMIN, HMXI, TN, JSTART, KFLAG, MAXORD,\n  MAXCOR, MSBP, MXNCF, METH, MITER, and N are communicated via COMMON. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs Calls proc~~dstode~~CallsGraph proc~dstode dstode proc~dcfode dcfode proc~dstode->proc~dcfode proc~dvnorm dvnorm proc~dstode->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstode~~CalledByGraph proc~dstode dstode proc~dlsode~2 dlsode proc~dlsode~2->proc~dstode proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dstode proc~dlsodes dlsodes proc~dlsodes->proc~dstode proc~dlsode dlsode proc~dlsode->proc~dstode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dp dsm dup exdn exsm exup i i1 iredo iret j jb m ncf newq r rh rhdn rhsm rhup told Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: iret integer, public :: j integer, public :: jb integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told","tags":"","loc":"proc/dstode.html"},{"title":"adjlr – odepack","text":"subroutine adjlr(N, Isp, Ldif) This routine computes an adjustment, LDIF, to the required\ninteger storage space in IWK (sparse matrix work space). It is called only if the word length ratio is LRAT = 1.\nThis is to account for the possibility that the symbolic LU phase\nmay require more storage than the numerical LU and solution phases. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Isp (*) integer, intent(out) :: Ldif Contents Variables ip jlmax jumax lnfc lsfc nzlu Source Code adjlr Variables Type Visibility Attributes Name Initial integer, public :: ip integer, public :: jlmax integer, public :: jumax integer, public :: lnfc integer, public :: lsfc integer, public :: nzlu Source Code subroutine adjlr ( N , Isp , Ldif ) integer , intent ( in ) :: N integer , intent ( in ) :: Isp ( * ) integer , intent ( out ) :: Ldif integer :: ip , jlmax , jumax , lnfc , lsfc , nzlu ip = 2 * N + 1 ! Get JLMAX = IJL(N) and JUMAX = IJU(N) (sizes of JL and JU). ------- ! jlmax = Isp ( ip ) jumax = Isp ( ip + ip ) ! NZLU = (size of L) + (size of U) = (IL(N+1)-IL(1)) + (IU(N+1)-IU(1)). ! nzlu = Isp ( N + 1 ) - Isp ( 1 ) + Isp ( ip + N + 1 ) - Isp ( ip + 1 ) lsfc = 12 * N + 3 + 2 * max ( jlmax , jumax ) lnfc = 9 * N + 2 + jlmax + jumax + nzlu Ldif = max ( 0 , lsfc - lnfc ) end subroutine adjlr","tags":"","loc":"proc/adjlr~2.html"},{"title":"mdp – odepack","text":"subroutine mdp(K, Ek, Tail, V, L, Head, Last, Next, Mark) mdp – purge inactive elements and do mass elimination Arguments Type Intent Optional Attributes Name integer, intent(inout) :: K integer, intent(in) :: Ek integer, intent(inout) :: Tail integer, intent(inout) :: V (*) integer, intent(inout) :: L (*) integer, intent(out) :: Head (*) integer, intent(inout) :: Last (*) integer, intent(inout) :: Next (*) integer, intent(inout) :: Mark (*) Called by proc~~mdp~2~~CalledByGraph proc~mdp~2 mdp proc~md~2 md proc~md~2->proc~mdp~2 proc~odrv~2 odrv proc~odrv~2->proc~md~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables es evi free i ilp ilpmax li ls lvi s tag vi Source Code mdp Variables Type Visibility Attributes Name Initial integer, public :: es integer, public :: evi integer, public :: free integer, public :: i integer, public :: ilp integer, public :: ilpmax integer, public :: li integer, public :: ls integer, public :: lvi integer, public :: s integer, public :: tag integer, public :: vi Source Code subroutine mdp ( K , Ek , Tail , V , L , Head , Last , Next , Mark ) ! integer , intent ( inout ) :: K integer , intent ( in ) :: Ek integer , intent ( inout ) :: Tail integer , intent ( inout ) :: V ( * ) integer , intent ( inout ) :: L ( * ) integer , intent ( out ) :: Head ( * ) integer , intent ( inout ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) ! integer :: es , evi , i , ilp , ilpmax , li , ls , lvi , s , tag , vi integer :: free free =- 1 ! !----initialize tag tag = Mark ( Ek ) ! !----for each vertex vi in ek li = Ek ilpmax = Last ( Ek ) if ( ilpmax > 0 ) then do ilp = 1 , ilpmax i = li li = L ( i ) vi = V ( li ) ! !------remove vi from degree list if ( Last ( vi ) /= 0 ) then if ( Last ( vi ) > 0 ) then Next ( Last ( vi )) = Next ( vi ) else Head ( - Last ( vi )) = Next ( vi ) endif if ( Next ( vi ) > 0 ) Last ( Next ( vi )) = Last ( vi ) endif ! !------remove inactive items from element list of vi ls = vi do s = ls ls = L ( s ) if ( ls == 0 ) then ! !------if vi is interior vertex, then remove from list and eliminate lvi = L ( vi ) if ( lvi /= 0 ) then ! !------else ... !--------classify vertex vi if ( L ( lvi ) /= 0 ) then ! !----------else mark vi to compute degree Last ( vi ) = - Ek else evi = V ( lvi ) if ( Next ( evi ) >= 0 ) then Last ( vi ) = - Ek elseif ( Mark ( evi ) < 0 ) then ! !----------else if vi is duplicate vertex, then mark as such and adjust !----------overlap count for corresponding element Last ( vi ) = 0 Mark ( evi ) = Mark ( evi ) - 1 else ! !----------if vi is prototype vertex, then mark as such, initialize !----------overlap count for corresponding element, and move vi to end !----------of boundary list Last ( vi ) = evi Mark ( evi ) = - 1 L ( Tail ) = li Tail = li L ( i ) = L ( li ) li = i endif endif ! !--------insert ek in element list of vi if ( free > 0 ) then V ( free ) = Ek L ( free ) = L ( vi ) L ( vi ) = free else stop '*mdp* is uninitialized but being used' endif else L ( i ) = L ( li ) li = i K = K + 1 Next ( vi ) = - K Last ( Ek ) = Last ( Ek ) - 1 endif exit else es = V ( ls ) if ( Mark ( es ) >= tag ) then free = ls L ( s ) = L ( ls ) ls = s endif endif enddo enddo endif ! !----terminate boundary list L ( Tail ) = 0 end subroutine mdp","tags":"","loc":"proc/mdp~2.html"},{"title":"dfnorm – odepack","text":"pure function dfnorm(n, a, w) This function computes the norm of a full N by N matrix,\nstored in the array A, that is consistent with the weighted max-norm\non vectors, with weights stored in the array W: DFNORM = MAX(i=1,...,N) ( W(i) * Sum(j=1,...,N) ABS(a(i,j))/W(j) ) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: a (n,n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dfnorm~2~~CalledByGraph proc~dfnorm~2 dfnorm proc~dprja~2 dprja proc~dprja~2->proc~dfnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables an i j sum Source Code dfnorm Variables Type Visibility Attributes Name Initial real(kind=dp), public :: an integer, public :: i integer, public :: j real(kind=dp), public :: sum Source Code pure function dfnorm ( n , a , w ) integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: a ( n , n ) real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dfnorm real ( kind = dp ) an , sum integer i , j an = 0.0d0 do i = 1 , n sum = 0.0d0 do j = 1 , n sum = sum + abs ( a ( i , j )) / w ( j ) enddo an = max ( an , sum * w ( i )) enddo dfnorm = an end function dfnorm","tags":"","loc":"proc/dfnorm~2.html"},{"title":"dprja – odepack","text":"subroutine dprja(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPRJA is called by DSTODA to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian. Here J is computed by the user-supplied routine JAC if\nMITER = 1 or 4 or by finite differencing if MITER = 2 or 5. J, scaled by -H*EL(1), is stored in WM.  Then the norm of J (the\nmatrix norm consistent with the weighted max-norm on vectors given\nby DMNORM) is computed, and J is overwritten by P. P is then\nsubjected to LU decomposition in preparation for later solution\nof linear systems with P as coefficient matrix.  This is done\nby DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. In addition to variables described previously, communication\nwith DPRJA uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODA). SAVF array containing f evaluated at predicted y. WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).   IWM also contains the band parameters\nML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 EL(1) (input). PDNORM norm of Jacobian matrix. (Output). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nP matrix found to be singular. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Ftem real(kind=dp), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac Calls proc~~dprja~2~~CallsGraph proc~dprja~2 dprja proc~dmnorm~2 dmnorm proc~dprja~2->proc~dmnorm~2 proc~dfnorm~2 dfnorm proc~dprja~2->proc~dfnorm~2 none~wrapup wrapup proc~dprja~2->none~wrapup proc~dgefa~2 dgefa proc~dprja~2->proc~dgefa~2 wm wm none~wrapup->wm proc~dgbfa~2 dgbfa none~wrapup->proc~dgbfa~2 proc~dbnorm~2 dbnorm none~wrapup->proc~dbnorm~2 iwm iwm none~wrapup->iwm proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~dgbfa~2->proc~daxpy~2 proc~dgbfa~2->proc~idamax~2 proc~dgbfa~2->proc~dscal~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables con fac hl0 i i1 i2 ier ii j j1 jj lenp mba mband meb1 meband ml ml3 mu np1 r r0 srur yi yj yjj Subroutines wrapup Source Code dprja Variables Type Visibility Attributes Name Initial real(kind=dp), public :: con real(kind=dp), public :: fac real(kind=dp), public :: hl0 integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: ii integer, public :: j integer, public :: j1 integer, public :: jj integer, public :: lenp integer, public :: mba integer, public :: mband integer, public :: meb1 integer, public :: meband integer, public :: ml integer, public :: ml3 integer, public :: mu integer, public :: np1 real(kind=dp), public :: r real(kind=dp), public :: r0 real(kind=dp), public :: srur real(kind=dp), public :: yi real(kind=dp), public :: yj real(kind=dp), public :: yjj Subroutines subroutine wrapup() Arguments None Source Code subroutine dprja ( Neq , Y , Yh , Nyh , Ewt , Ftem , Savf , Wm , Iwm , f , jac ) ! integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), dimension ( * ) :: Ftem real ( kind = dp ), dimension ( * ) :: Savf real ( kind = dp ), intent ( inout ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external :: f external :: jac ! real ( kind = dp ) :: con , fac , hl0 , r , r0 , srur , yi , yj , yjj integer :: i , i1 , i2 , ier , ii , j , j1 , jj , lenp , mba , mband , meb1 , meband , ml , ml3 , mu , np1 ! dls1 % nje = dls1 % nje + 1 dls1 % ierpj = 0 dls1 % jcur = 1 hl0 = dls1 % h * dls1 % el0 select case ( dls1 % miter ) case ( 2 ) !  If MITER = 2, make N calls to F to approximate J. -------------------- fac = dmnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 srur = Wm ( 1 ) j1 = 2 do j = 1 , dls1 % n yj = Y ( j ) r = max ( srur * abs ( yj ), r0 / Ewt ( j )) Y ( j ) = Y ( j ) + r fac = - hl0 / r call f ( Neq , dls1 % tn , Y , Ftem ) do i = 1 , dls1 % n Wm ( i + j1 ) = ( Ftem ( i ) - Savf ( i )) * fac enddo Y ( j ) = yj j1 = j1 + dls1 % n enddo dls1 % nfe = dls1 % nfe + dls1 % n case ( 3 ) !  Dummy block only, since MITER is never 3 in this routine. ------------ return case ( 4 ) !  If MITER = 4, call JAC and multiply by scalar. ----------------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 meband = mband + ml lenp = meband * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , ml , mu , Wm ( ml3 ), meband ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo call wrapup () return case ( 5 ) !  If MITER = 5, make MBAND calls to F to approximate J. ---------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) mband = ml + mu + 1 mba = min ( mband , dls1 % n ) meband = mband + ml meb1 = meband - 1 srur = Wm ( 1 ) fac = dmnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 do j = 1 , mba do i = j , dls1 % n , mband yi = Y ( i ) r = max ( srur * abs ( yi ), r0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call f ( Neq , dls1 % tn , Y , Ftem ) do jj = j , dls1 % n , mband Y ( jj ) = Yh ( jj , 1 ) yjj = Y ( jj ) r = max ( srur * abs ( yjj ), r0 / Ewt ( jj )) fac = - hl0 / r i1 = max ( jj - mu , 1 ) i2 = min ( jj + ml , dls1 % n ) ii = jj * meb1 - ml + 2 do i = i1 , i2 Wm ( ii + i ) = ( Ftem ( i ) - Savf ( i )) * fac enddo enddo enddo dls1 % nfe = dls1 % nfe + mba call wrapup () return case default !  If MITER = 1, call JAC and multiply by scalar. ----------------------- lenp = dls1 % n * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , 0 , 0 , Wm ( 3 ), dls1 % n ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endselect !  Compute norm of Jacobian. -------------------------------------------- dlsa % pdnorm = dfnorm ( dls1 % n , Wm ( 3 ), Ewt ) / abs ( hl0 ) !  Add identity matrix. ------------------------------------------------- j = 3 np1 = dls1 % n + 1 do i = 1 , dls1 % n Wm ( j ) = Wm ( j ) + 1.0D0 j = j + np1 enddo !  Do LU decomposition on P. -------------------------------------------- call dgefa ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 return contains subroutine wrapup () !  Compute norm of Jacobian. -------------------------------------------- dlsa % pdnorm = dbnorm ( dls1 % n , Wm ( ml + 3 ), meband , ml , mu , Ewt ) / abs ( hl0 ) !  Add identity matrix. ------------------------------------------------- ii = mband + 2 do i = 1 , dls1 % n Wm ( ii ) = Wm ( ii ) + 1.0D0 ii = ii + meband enddo !  Do LU decomposition of P. -------------------------------------------- call dgbfa ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine wrapup end subroutine dprja","tags":"","loc":"proc/dprja~2.html"},{"title":"datp – odepack","text":"subroutine datp(Neq, Y, Savf, P, Wght, Hl0, Wk, f, W) This routine computes the product w = (I - hl0*df/dy)*p This is computed by a call to F and a difference quotient. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). P real array of length N. WGHT array of length N containing scale factors.\n   1/WGHT(i) are the diagonal elements of the matrix D. WK work array of length N. On return W array of length N containing desired\n   matrix-vector product. In addition, this routine uses the Common variables TN, N, NFE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(in) :: Savf (*) real(kind=dp) :: P (*) real(kind=dp) :: Wght (*) real(kind=dp), intent(in) :: Hl0 real(kind=dp) :: Wk (*) real :: f real(kind=dp), intent(inout) :: W (*) Calls proc~~datp~2~~CallsGraph proc~datp~2 datp proc~dvnorm~2 dvnorm proc~datp~2->proc~dvnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~datp~2~~CalledByGraph proc~datp~2 datp proc~dpcg~2 dpcg proc~dpcg~2->proc~datp~2 proc~dpcgs~2 dpcgs proc~dpcgs~2->proc~datp~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dpcg~2 proc~dsolpk~2->proc~dpcgs~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables fac i pnrm rpnrm Source Code datp Variables Type Visibility Attributes Name Initial real(kind=dp), public :: fac integer, public :: i real(kind=dp), public :: pnrm real(kind=dp), public :: rpnrm Source Code subroutine datp ( Neq , Y , Savf , P , Wght , Hl0 , Wk , f , W ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ), intent ( in ) :: Savf ( * ) real ( kind = dp ) :: P ( * ) real ( kind = dp ) :: Wght ( * ) real ( kind = dp ), intent ( in ) :: Hl0 real ( kind = dp ) :: Wk ( * ) external :: f real ( kind = dp ), intent ( inout ) :: W ( * ) real ( kind = dp ) :: fac , pnrm , rpnrm integer :: i pnrm = dvnorm ( dls1 % n , P , Wght ) rpnrm = 1.0D0 / pnrm !X!call dcopy(dls1%n,Y,1,W,1) W ( 1 : dls1 % n ) = Y ( 1 : dls1 % n ) do i = 1 , dls1 % n Y ( i ) = W ( i ) + P ( i ) * rpnrm enddo call f ( Neq , dls1 % tn , Y , Wk ) dls1 % nfe = dls1 % nfe + 1 !X!call dcopy(dls1%n,W,1,Y,1) Y ( 1 : dls1 % n ) = W ( 1 : dls1 % n ) fac = Hl0 * pnrm do i = 1 , dls1 % n W ( i ) = P ( i ) - fac * ( Wk ( i ) - Savf ( i )) enddo end subroutine datp","tags":"","loc":"proc/datp~2.html"},{"title":"dorthog – odepack","text":"subroutine dorthog(Vnew, V, Hes, N, Ll, Ldhes, Kmp, Snormw) This routine orthogonalizes the vector VNEW against the previous\n KMP vectors in the V array.  It uses a modified Gram-Schmidt\n orthogonalization procedure with conditional reorthogonalization.\n This is the version of 28 may 1986. On entry VNEW the vector of length N containing a scaled product\n of the Jacobian and the vector V(*,LL). V the N x l array containing the previous LL\n orthogonal vectors v( ,1) to v( ,LL). HES an LL x LL upper Hessenberg matrix containing,\n in HES(i,k), k.lt.LL, scaled inner products of\n A V( ,k) and V(*,i). LDHES the leading dimension of the HES array. N the order of the matrix A, and the length of VNEW. LL the current order of the matrix HES. KMP the number of previous vectors the new vector VNEW\n must be made orthogonal to (KMP .le. MAXL). On return VNEW the new vector orthogonal to V( ,i0) to V( ,LL),\n where i0 = MAX(1, LL-KMP+1). HES upper Hessenberg matrix with column LL filled in with\n scaled inner products of A V( ,LL) and V(*,i). SNORMW L-2 norm of VNEW. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Vnew (*) real(kind=dp) :: V (N,*) real(kind=dp), intent(inout) :: Hes (Ldhes,*) integer :: N integer, intent(in) :: Ll integer, intent(in) :: Ldhes integer, intent(in) :: Kmp real(kind=dp), intent(inout) :: Snormw Calls proc~~dorthog~2~~CallsGraph proc~dorthog~2 dorthog proc~dnrm2~2 DNRM2 proc~dorthog~2->proc~dnrm2~2 proc~daxpy~2 daxpy proc~dorthog~2->proc~daxpy~2 proc~ddot~2 ddot proc~dorthog~2->proc~ddot~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dorthog~2~~CalledByGraph proc~dorthog~2 dorthog proc~dspigmr~2 dspigmr proc~dspigmr~2->proc~dorthog~2 proc~dspiom~2 dspiom proc~dspiom~2->proc~dorthog~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspigmr~2 proc~dsolpk~2->proc~dspiom~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables arg i i0 sumdsq tem vnrm Source Code dorthog Variables Type Visibility Attributes Name Initial real(kind=dp), public :: arg integer, public :: i integer, public :: i0 real(kind=dp), public :: sumdsq real(kind=dp), public :: tem real(kind=dp), public :: vnrm Source Code subroutine dorthog ( Vnew , V , Hes , N , Ll , Ldhes , Kmp , Snormw ) real ( kind = dp ) :: Vnew ( * ) integer :: N real ( kind = dp ) :: V ( N , * ) integer , intent ( in ) :: Ldhes real ( kind = dp ), intent ( inout ) :: Hes ( Ldhes , * ) integer , intent ( in ) :: Ll integer , intent ( in ) :: Kmp real ( kind = dp ), intent ( inout ) :: Snormw real ( kind = dp ) :: arg , sumdsq , tem , vnrm integer :: i , i0 !  Get norm of unaltered VNEW for later use. ---------------------------- vnrm = dnrm2 ( N , Vnew , 1 ) !----------------------------------------------------------------------- !  Do modified Gram-Schmidt on VNEW = A*v(LL). !  Scaled inner products give new column of HES. !  Projections of earlier vectors are subtracted from VNEW. !----------------------------------------------------------------------- i0 = max ( 1 , Ll - Kmp + 1 ) do i = i0 , Ll Hes ( i , Ll ) = ddot ( N , V ( 1 , i ), 1 , Vnew , 1 ) tem = - Hes ( i , Ll ) call daxpy ( N , tem , V ( 1 , i ), 1 , Vnew , 1 ) enddo !----------------------------------------------------------------------- !  Compute SNORMW = norm of VNEW. !  If VNEW is small compared to its input value (in norm), then !  reorthogonalize VNEW to V(*,1) through V(*,LL). !  Correct if relative correction exceeds 1000*(unit roundoff). !  finally, correct SNORMW using the dot products involved. !----------------------------------------------------------------------- Snormw = dnrm2 ( N , Vnew , 1 ) if ( vnrm + 0.001D0 * Snormw /= vnrm ) return sumdsq = 0.0D0 do i = i0 , Ll tem = - ddot ( N , V ( 1 , i ), 1 , Vnew , 1 ) if ( Hes ( i , Ll ) + 0.001D0 * tem /= Hes ( i , Ll ) ) then Hes ( i , Ll ) = Hes ( i , Ll ) - tem call daxpy ( N , tem , V ( 1 , i ), 1 , Vnew , 1 ) sumdsq = sumdsq + tem ** 2 endif enddo if ( sumdsq == 0.0D0 ) return arg = max ( 0.0D0 , Snormw ** 2 - sumdsq ) Snormw = sqrt ( arg ) end subroutine dorthog","tags":"","loc":"proc/dorthog~2.html"},{"title":"dvnorm – odepack","text":"pure function dvnorm(n, v, w) NAME dvnorm(3f) - [M_odepack] Weighted root-mean-square vector norm. DESCRIPTION This function routine computes the weighted root-mean-square norm\n  of the vector of length N contained in the array V, with weights\n  contained in the array W of length N: DVNORM = SQRT( (1/N) * SUM( V(i)*W(i) )**2 ) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dvnorm~2~~CalledByGraph proc~dvnorm~2 dvnorm proc~datp~2 datp proc~datp~2->proc~dvnorm~2 proc~dprjs~2 dprjs proc~dprjs~2->proc~dvnorm~2 proc~dprepj~2 dprepj proc~dprepj~2->proc~dvnorm~2 proc~dusol~2 dusol proc~dusol~2->proc~dvnorm~2 proc~dlsode~2 dlsode proc~dlsode~2->proc~dvnorm~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dvnorm~2 proc~dstodpk~2 dstodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dvnorm~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dvnorm~2 proc~dpcg~2 dpcg proc~dpcg~2->proc~dvnorm~2 proc~dpcg~2->proc~datp~2 proc~dpcgs~2 dpcgs proc~dpcgs~2->proc~dvnorm~2 proc~dpcgs~2->proc~datp~2 proc~dstodpk~2->proc~dvnorm~2 proc~dsolpk~2 dsolpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dvnorm~2 proc~dstoka~2->proc~dsolpk~2 proc~dlhin~2 dlhin proc~dlhin~2->proc~dvnorm~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dvnorm~2 proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dvnorm~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dvnorm~2 proc~dlsodkr~2->proc~dstoka~2 proc~dlsodkr~2->proc~dlhin~2 proc~dsolpk~2->proc~dusol~2 proc~dsolpk~2->proc~dpcg~2 proc~dsolpk~2->proc~dpcgs~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i sum Source Code dvnorm Variables Type Visibility Attributes Name Initial integer, public :: i real(kind=dp), public :: sum Source Code pure function dvnorm ( n , v , w ) integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: v ( n ) real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dvnorm integer :: i real ( kind = dp ) :: sum sum = 0.0d0 do i = 1 , n sum = sum + ( v ( i ) * w ( i )) ** 2 enddo dvnorm = sqrt ( sum / n ) end function dvnorm","tags":"","loc":"proc/dvnorm~2.html"},{"title":"dusol – odepack","text":"subroutine dusol(Neq, Tn, Y, Savf, B, Wght, N, Delta, Hl0, Mnewt, psol, Npsl, X, Wp, Iwp, Wk, Iflag) This routine solves the linear system A * x = b using only a call\n to the user-supplied routine PSOL (no Krylov iteration).\n If the norm of the right-hand side vector b is smaller than DELTA,\n the vector X returned is X = b (if MNEWT = 0) or X = 0 otherwise.\n PSOL is called with an LR argument of 0. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). TN current value of t. Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). B the right hand side of the system A*x = b. WGHT the vector of length N containing the nonzero\n elements of the diagonal scaling matrix. N the order of the matrix A, and the lengths\n of the vectors WGHT, B and X. DELTA tolerance on residuals b - A*x in weighted RMS-norm. HL0 current value of (step size h) * (coefficient l0). MNEWT Newton iteration counter (.ge. 0). WK real work array used by PSOL. WP real work array used by preconditioner PSOL. IWP integer work array used by preconditioner PSOL. On return X the final computed approximation to the solution\n of the system A*x = b. NPSL the number of calls to PSOL. IFLAG integer error flag: 0 means no trouble occurred.\n        3 means there was a recoverable error in PSOL\n          caused by the preconditioner being out of date.\n       -1 means there was a nonrecoverable error in PSOL. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp) :: Tn real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Savf real(kind=dp), dimension(*) :: B real(kind=dp), dimension(*) :: Wght integer :: N real(kind=dp), intent(in) :: Delta real(kind=dp) :: Hl0 integer, intent(in) :: Mnewt real :: psol integer, intent(out) :: Npsl real(kind=dp), dimension(*) :: X real(kind=dp), dimension(*) :: Wp integer, dimension(*) :: Iwp real(kind=dp), dimension(*) :: Wk integer, intent(out) :: Iflag Calls proc~~dusol~2~~CallsGraph proc~dusol~2 dusol proc~dvnorm~2 dvnorm proc~dusol~2->proc~dvnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dusol~2~~CalledByGraph proc~dusol~2 dusol proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dusol~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables bnrm i ier Source Code dusol Variables Type Visibility Attributes Name Initial real(kind=dp), public :: bnrm integer, public :: i integer, public :: ier Source Code subroutine dusol ( Neq , Tn , Y , Savf , B , Wght , N , Delta , Hl0 , Mnewt , psol , Npsl , X , Wp , Iwp , Wk , Iflag ) ! integer , dimension ( * ) :: Neq real ( kind = dp ) :: Tn real ( kind = dp ) , dimension ( * ) :: Y real ( kind = dp ) , dimension ( * ) :: Savf real ( kind = dp ) , dimension ( * ) :: B real ( kind = dp ) , dimension ( * ) :: Wght integer :: N real ( kind = dp ) , intent ( in ) :: Delta real ( kind = dp ) :: Hl0 integer , intent ( in ) :: Mnewt external :: psol ! real ( kind = dp ) :: bnrm integer :: i , ier integer , intent ( out ) :: Iflag , Npsl integer , dimension ( * ) :: Iwp real ( kind = dp ) , dimension ( * ) :: Wk , Wp , X ! Iflag = 0 Npsl = 0 !----------------------------------------------------------------------- !  Test for an immediate return with X = 0 or X = b. !----------------------------------------------------------------------- bnrm = dvnorm ( N , B , Wght ) if ( bnrm > Delta ) then !  Make call to PSOL and copy result from B to X. ----------------------- ier = 0 call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , B , 0 , ier ) Npsl = 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif elseif ( Mnewt > 0 ) then do i = 1 , N X ( i ) = 0.0D0 enddo return else !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) return endif !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) end subroutine dusol","tags":"","loc":"proc/dusol~2.html"},{"title":"dhels – odepack","text":"subroutine dhels(A, Lda, N, Q, B) This is part of the LINPACK routine DGESL with changes\n due to the fact that A is an upper Hessenberg matrix. DHELS solves the least squares problem min (b-A*x, b-A*x)\n\n using the factors computed by DHEQR. On entry A       DOUBLE PRECISION(LDA, N)\n            the output from DHEQR which contains the upper\n            triangular factor R in the QR decomposition of A.\n\n    LDA     INTEGER\n            the leading dimension of the array  A .\n\n    N       INTEGER\n            A is originally an (N+1) by N matrix.\n\n    Q       DOUBLE PRECISION(2*N)\n            The coefficients of the N givens rotations\n            used in the QR factorization of A.\n\n    B       DOUBLE PRECISION(N+1)\n            the right hand side vector. On return B       the solution vector  x . Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N real(kind=dp), intent(in) :: Q (*) real(kind=dp), intent(inout) :: B (*) Calls proc~~dhels~2~~CallsGraph proc~dhels~2 dhels proc~daxpy~2 daxpy proc~dhels~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dhels~2~~CalledByGraph proc~dhels~2 dhels none~approximate approximate none~approximate->proc~dhels~2 proc~dspigmr~2 dspigmr proc~dspigmr~2->none~approximate proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspigmr~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables c iq k kb kp1 s t t1 t2 Source Code dhels Variables Type Visibility Attributes Name Initial real(kind=dp), public :: c integer, public :: iq integer, public :: k integer, public :: kb integer, public :: kp1 real(kind=dp), public :: s real(kind=dp), public :: t real(kind=dp), public :: t1 real(kind=dp), public :: t2 Source Code subroutine dhels ( A , Lda , N , Q , B ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: A ( Lda , * ) integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Q ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) ! real ( kind = dp ) :: c , s , t , t1 , t2 integer :: iq , k , kb , kp1 ! !         Minimize (b-A*x, b-A*x) !         First form Q*b. ! do k = 1 , N kp1 = k + 1 iq = 2 * ( k - 1 ) + 1 c = Q ( iq ) s = Q ( iq + 1 ) t1 = B ( k ) t2 = B ( kp1 ) B ( k ) = c * t1 - s * t2 B ( kp1 ) = s * t1 + c * t2 enddo ! !         Now solve  R*x = Q*b. ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / A ( k , k ) t = - B ( k ) call daxpy ( k - 1 , t , A ( 1 , k ), 1 , B ( 1 ), 1 ) enddo end subroutine dhels","tags":"","loc":"proc/dhels~2.html"},{"title":"dstodpk – odepack","text":"subroutine dstodpk(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTODPK performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. The following changes were made to generate Subroutine DSTODPK\nfrom Subroutine DSTODE: The array SAVX was added to the call sequence. PJAC and SLVS were replaced by PSOL in the call sequence. The Common block /DLPK01/ was added for communication. The test constant EPCON is loaded into Common below statement\n   numbers 125 and 155, and used below statement 400. The Newton iteration counter MNEWT is set below 220 and 400. The call to PJAC was replaced with a call to DPKSET (fixed name),\n   with a longer call sequence, called depending on JACFLG. The corrector residual is stored in SAVX (not Y) at 360,\n   and the solution vector is in SAVX in the 380 loop. SLVS was renamed DSOLPK and includes NEQ, SAVX, EWT, F, and JAC.\n   SAVX was added because DSOLPK now needs Y and SAVF undisturbed. The nonlinear convergence failure count NCFN is set at 430. Note: DSTODPK is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTODPK is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\nAlso used for input of YH(*,MAXORD+2) when JSTART = -1\nand MAXORD .lt. the current order NQ. SAVX an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). CCMAX maximum relative change in H*EL0 before DPKSET is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings: 0  the step was succesful.\n    -1  the requested error could not be achieved.\n    -2  corrector convergence could not be achieved.\n    -3  fatal error in DPKSET or DSOLPK. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between DPKSET calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH/MITER the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol Calls proc~~dstodpk~2~~CallsGraph proc~dstodpk~2 dstodpk proc~dcfode~2 dcfode proc~dstodpk~2->proc~dcfode~2 proc~dpkset~2 dpkset proc~dstodpk~2->proc~dpkset~2 proc~dsolpk~2 dsolpk proc~dstodpk~2->proc~dsolpk~2 proc~dvnorm~2 dvnorm proc~dstodpk~2->proc~dvnorm~2 proc~dusol~2 dusol proc~dsolpk~2->proc~dusol~2 proc~dspiom~2 dspiom proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dpcgs~2 dpcgs proc~dsolpk~2->proc~dpcgs~2 proc~dscal~2 dscal proc~dsolpk~2->proc~dscal~2 proc~dpcg~2 dpcg proc~dsolpk~2->proc~dpcg~2 proc~dusol~2->proc~dvnorm~2 proc~dspiom~2->proc~dscal~2 proc~dnrm2~2 DNRM2 proc~dspiom~2->proc~dnrm2~2 proc~datv~2 datv proc~dspiom~2->proc~datv~2 none~approximate~2 approximate proc~dspiom~2->none~approximate~2 proc~dhefa~2 dhefa proc~dspiom~2->proc~dhefa~2 proc~dorthog~2 dorthog proc~dspiom~2->proc~dorthog~2 proc~dspigmr~2->proc~dscal~2 proc~dspigmr~2->proc~dnrm2~2 proc~dspigmr~2->proc~datv~2 none~approximate approximate proc~dspigmr~2->none~approximate proc~dspigmr~2->proc~dorthog~2 proc~dheqr~2 dheqr proc~dspigmr~2->proc~dheqr~2 proc~dpcgs~2->proc~dvnorm~2 proc~datp~2 datp proc~dpcgs~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcgs~2->proc~daxpy~2 proc~dpcg~2->proc~dvnorm~2 proc~dpcg~2->proc~datp~2 proc~dpcg~2->proc~daxpy~2 proc~ddot~2 ddot proc~dpcg~2->proc~ddot~2 proc~datv~2->proc~dnrm2~2 none~approximate~2->proc~daxpy~2 x x none~approximate~2->x wght wght none~approximate~2->wght b b none~approximate~2->b v v none~approximate~2->v proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 psol psol none~approximate~2->psol none~approximate->proc~daxpy~2 none~approximate->x none~approximate->wght proc~dhels~2 dhels none~approximate->proc~dhels~2 none~approximate->b none~approximate->v none~approximate->psol proc~datp~2->proc~dvnorm~2 proc~dhefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~dorthog~2->proc~ddot~2 proc~dhels~2->proc~daxpy~2 proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstodpk~2~~CalledByGraph proc~dstodpk~2 dstodpk proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dsm dup exdn exsm exup i i1 iredo iret j jb m ncf newq r rh rhdn rhsm rhup told Source Code dstodpk Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: iret integer, public :: j integer, public :: jb integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told Source Code subroutine dstodpk ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Savx , Acor , Wm , Iwm , f , jac , psol ) integer , dimension ( * ) :: Neq real ( kind = dp ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( inout ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( inout ), dimension ( * ) :: Yh1 real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savf real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savx real ( kind = dp ), intent ( inout ), dimension ( * ) :: Acor real ( kind = dp ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external f external jac external psol real ( kind = dp ) :: dcon , ddn , del , delp , dsm , dup , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , told integer :: i , i1 , iredo , iret , j , jb , m , ncf , newq dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  The flag IPUP is set according to whether matrix data is involved !  (JACFLG .ne. 0) or not (JACFLG = 0), to trigger a call to DPKSET. !  IPUP is set to MITER when RC differs from 1 by more than CCMAX, !  and at least every MSBP steps, when JACFLG = 1. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !----------------------------------------------------------------------- 400 continue if ( dlpk % jacflg /= 0 ) then if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter else dls1 % ipup = 0 dls1 % crate = 0.7D0 endif dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 dlpk % mnewt = 0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, DPKSET is called to update any matrix data needed, !  before starting the corrector iteration. !  IPUP is set to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call dpkset ( Neq , Y , Yh1 , Ewt , Acor , Savf , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls1 % miter /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savx ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo call dsolpk ( Neq , Y , Savf , Savx , Ewt , Wm , Iwm , f , psol ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dvnorm ( dls1 % n , Savx , Ewt ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Savx ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo endif !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. !----------------------------------------------------------------------- if ( m /= 0 ) dls1 % crate = max ( 0.2D0 * dls1 % crate , del / delp ) dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / dlpk % epcon if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1300 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  the largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then dlpk % mnewt = m delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If MITER .ne. 0 and the Jacobian is out of date, DPKSET is called for !  the next try.  Otherwise the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue if ( dls1 % miter /= 0 . and . dls1 % jcur /= 1 . and . dlpk % jacflg /= 0 ) then dls1 % icf = 1 dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dlpk % ncfn = dlpk % ncfn + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1300 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1300 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1300 else rh = 0.5D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1200 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstodpk","tags":"","loc":"proc/dstodpk~2.html"},{"title":"diprep – odepack","text":"subroutine diprep(Neq, Y, Rwork, Ia, Ja, Ipflag, f, jac) This routine serves as an interface between the driver and\nSubroutine DPREP.  It is called only if MITER is 1 or 2.\nTasks performed here are: call DPREP, reset the required WM segment length LENWK, move YH back to its final location (following WM in RWORK), reset pointers for YH, SAVF, EWT, and ACOR, and move EWT to its new position if ISTATE = 1. IPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREP error flag IPPER\nif there was trouble in Subroutine DPREP. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer, intent(inout) :: Ipflag real :: f integer :: jac Calls proc~~diprep~2~~CallsGraph proc~diprep~2 diprep proc~dprep dprep proc~diprep~2->proc~dprep none~wrapup500 wrapup500 proc~dprep->none~wrapup500 proc~odrv odrv proc~dprep->proc~odrv proc~jgroup jgroup proc~dprep->proc~jgroup proc~cdrv cdrv proc~dprep->proc~cdrv none~wrapup400 wrapup400 proc~dprep->none~wrapup400 none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~adjlr adjlr proc~dprep->proc~adjlr iwk iwk none~wrapup600->iwk proc~cntnzu cntnzu none~wrapup600->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~diprep~2~~CalledByGraph proc~diprep~2 diprep proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i imax lewtn lyhd lyhn Source Code diprep Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: imax integer, public :: lewtn integer, public :: lyhd integer, public :: lyhn Source Code subroutine diprep ( Neq , Y , Rwork , Ia , Ja , Ipflag , f , jac ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ), intent ( inout ) :: Rwork ( * ) integer :: Ia ( * ) integer :: Ja ( * ) integer , intent ( inout ) :: Ipflag external :: f external :: jac integer :: i , imax , lewtn , lyhd , lyhn !integer :: Iwork2(size(Rwork)*2) !SCRATCH SPACE Ipflag = 0 ! =============================================== ! subroutine dprep (neq, y, yh, savf, ewt, ftem, ia, ja, wk, iwk, ipper, f, jac) ! integer          :: neq(*) ! double precision :: y(*) ! double precision :: yh(*) ! double precision :: savf(*) ! double precision :: ewt(*) ! double precision :: ftem(*) ! integer          :: ia(*) ! integer          :: ja(*) ! double precision :: wk(*) ! integer          :: iwk(*) ! integer          :: ipper ! external         :: f ! external         :: jac ! =============================================== !  Call DPREP to do matrix preprocessing operations. -------------------- call dprep ( Neq , Y , & & Rwork ( dls1 % lyh ), Rwork ( dls1 % lsavf ), Rwork ( dls1 % lewt ), Rwork ( dls1 % lacor ), & & Ia , Ja , & & Rwork ( dls1 % lwm ), & & Rwork ( dls1 % lwm ), & & Ipflag , & & f , jac ) dlss % lenwk = max ( dlss % lreq , dlss % lwmin ) if ( Ipflag < 0 ) return !  If DPREP was successful, move YH to end of required space for WM. ---- lyhn = dls1 % lwm + dlss % lenwk if ( lyhn > dls1 % lyh ) return lyhd = dls1 % lyh - lyhn if ( lyhd /= 0 ) then imax = lyhn - 1 + dlss % lenyhm do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo dls1 % lyh = lyhn endif !  Reset pointers for SAVF, EWT, and ACOR. ------------------------------ dls1 % lsavf = dls1 % lyh + dlss % lenyh lewtn = dls1 % lsavf + dls1 % n dls1 % lacor = lewtn + dls1 % n if ( dlss % istatc /= 3 ) then !  If ISTATE = 1, move EWT (left) to its new position. ------------------ if ( lewtn > dls1 % lewt ) return do i = 1 , dls1 % n Rwork ( i + lewtn - 1 ) = Rwork ( i + dls1 % lewt - 1 ) enddo endif dls1 % lewt = lewtn end subroutine diprep","tags":"","loc":"proc/diprep~2.html"},{"title":"dhesl – odepack","text":"subroutine dhesl(A, Lda, N, Ipvt, B) This is essentially the LINPACK routine DGESL except for changes\n   due to the fact that A is an upper Hessenberg matrix. DHESL solves the real system A * x = b\n   using the factors computed by DHEFA. On entry A       DOUBLE PRECISION(LDA, N)\n            the output from DHEFA.\n\n    LDA     INTEGER\n            the leading dimension of the array  A .\n\n    N       INTEGER\n            the order of the matrix  A .\n\n    IPVT    INTEGER(N)\n            the pivot vector from DHEFA.\n\n    B       DOUBLE PRECISION(N)\n            the right hand side vector. On return B       the solution vector  x . Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) Calls proc~~dhesl~2~~CallsGraph proc~dhesl~2 dhesl proc~daxpy~2 daxpy proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dhesl~2~~CalledByGraph proc~dhesl~2 dhesl none~approximate~2 approximate none~approximate~2->proc~dhesl~2 proc~dspiom~2 dspiom proc~dspiom~2->none~approximate~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspiom~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables k kb l nm1 t Source Code dhesl Variables Type Visibility Attributes Name Initial integer, public :: k integer, public :: kb integer, public :: l integer, public :: nm1 real(kind=dp), public :: t Source Code subroutine dhesl ( A , Lda , N , Ipvt , B ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ipvt ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) ! integer :: k , kb , l , nm1 real ( kind = dp ) :: t ! ! nm1 = N - 1 ! !         Solve  A * x = b !         First solve  L*y = b ! if ( nm1 >= 1 ) then do k = 1 , nm1 l = Ipvt ( k ) t = B ( l ) if ( l /= k ) then B ( l ) = B ( k ) B ( k ) = t endif B ( k + 1 ) = B ( k + 1 ) + t * A ( k + 1 , k ) enddo endif ! !         Now solve  U*x = y ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / A ( k , k ) t = - B ( k ) call daxpy ( k - 1 , t , A ( 1 , k ), 1 , B ( 1 ), 1 ) enddo end subroutine dhesl","tags":"","loc":"proc/dhesl~2.html"},{"title":"mdu – odepack","text":"subroutine mdu(Ek, Dmin, V, L, Head, Last, Next, Mark) mdu – update degrees of uneliminated vertices in ek Arguments Type Intent Optional Attributes Name integer, intent(in) :: Ek integer, intent(inout) :: Dmin integer, intent(in) :: V (*) integer, intent(in) :: L (*) integer, intent(inout) :: Head (*) integer, intent(inout) :: Last (*) integer, intent(inout) :: Next (*) integer, intent(inout) :: Mark (*) Called by proc~~mdu~2~~CalledByGraph proc~mdu~2 mdu proc~md~2 md proc~md~2->proc~mdu~2 proc~odrv~2 odrv proc~odrv~2->proc~md~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables b blp blpmax dvi es evi i ilp ilpmax s tag vb vi vs Source Code mdu Variables Type Visibility Attributes Name Initial integer, public :: b integer, public :: blp integer, public :: blpmax integer, public :: dvi integer, public :: es integer, public :: evi integer, public :: i integer, public :: ilp integer, public :: ilpmax integer, public :: s integer, public :: tag integer, public :: vb integer, public :: vi integer, public :: vs Source Code subroutine mdu ( Ek , Dmin , V , L , Head , Last , Next , Mark ) ! integer , intent ( in ) :: Ek integer , intent ( inout ) :: Dmin integer , intent ( in ) :: V ( * ) integer , intent ( in ) :: L ( * ) integer , intent ( inout ) :: Head ( * ) integer , intent ( inout ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) integer :: b , blp , blpmax , dvi , es , evi , i , ilp , ilpmax , s , tag , vb , vi , vs equivalence ( vs , es ) ! !----initialize tag tag = Mark ( Ek ) - Last ( Ek ) ! !----for each vertex vi in ek i = Ek ilpmax = Last ( Ek ) if ( ilpmax > 0 ) then MAIN : do ilp = 1 , ilpmax i = L ( i ) vi = V ( i ) if ( Last ( vi ) < 0 ) then ! !------if vi neither prototype nor duplicate vertex, then merge elements !------to compute degree tag = tag + 1 dvi = Last ( Ek ) ! !--------for each vertex/element vs/es in element list of vi s = L ( vi ) do s = L ( s ) if ( s == 0 ) exit vs = V ( s ) if ( Next ( vs ) >= 0 ) then ! !----------if vs is uneliminated vertex, then tag and adjust degree Mark ( vs ) = tag dvi = dvi + 1 ! !----------if es is active element, then expand !------------check for outmatched vertex elseif ( Mark ( es ) < 0 ) then ! !------else if vi is outmatched vertex, then adjust overlaps but do not !------compute degree Last ( vi ) = 0 Mark ( es ) = Mark ( es ) - 1 do s = L ( s ) if ( s == 0 ) cycle MAIN es = V ( s ) if ( Mark ( es ) < 0 ) Mark ( es ) = Mark ( es ) - 1 enddo else ! !------------for each vertex vb in es b = es blpmax = Last ( es ) do blp = 1 , blpmax b = L ( b ) vb = V ( b ) ! !--------------if vb is untagged, then tag and adjust degree if ( Mark ( vb ) < tag ) then Mark ( vb ) = tag dvi = dvi + 1 endif ! enddo endif enddo elseif ( Last ( vi ) == 0 ) then cycle else ! !------else if vi is prototype vertex, then calculate degree by !------inclusion/exclusion and reset overlap count evi = Last ( vi ) dvi = Last ( Ek ) + Last ( evi ) + Mark ( evi ) Mark ( evi ) = 0 endif ! !------insert vi in appropriate degree list Next ( vi ) = Head ( dvi ) Head ( dvi ) = vi Last ( vi ) = - dvi if ( Next ( vi ) > 0 ) Last ( Next ( vi )) = vi if ( dvi < Dmin ) Dmin = dvi ! enddo MAIN endif end subroutine mdu","tags":"","loc":"proc/mdu~2.html"},{"title":"dsolpk – odepack","text":"subroutine dsolpk(Neq, Y, Savf, X, Ewt, Wm, Iwm, f, psol) This routine interfaces to one of DSPIOM, DSPIGMR, DPCG, DPCGS, or\nDUSOL, for the solution of the linear system arising from a Newton\niteration.  It is called if MITER .ne. 0.\nIn addition to variables described elsewhere,\ncommunication with DSOLPK uses the following variables: WM real work space containing data for the algorithm (Krylov basis vectors, Hessenberg matrix, etc.) IWM integer work space containing data for the algorithm X the right-hand side vector on input, and the solution vector\non output, of length N. IERSL output flag (in Common):\n  ERSL =  0 means no trouble occurred.\n  ERSL =  1 means the iterative method failed to converge.\n            If the preconditioner is out of date, the step\n            is repeated with a new preconditioner.\n            Otherwise, the stepsize is reduced (forcing a\n            new evaluation of the preconditioner) and the\n            step is repeated.\n  ERSL = -1 means there was a nonrecoverable error in the\n            iterative solver, and an error exit occurs. This routine also uses the Common variables TN, EL0, H, N, MITER,\nDELT, EPCON, SQRTN, RSQRTN, MAXL, KMP, MNEWT, NNI, NLI, NPS, NCFL,\nLOCWP, LOCIWP. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Savf (*) real(kind=dp) :: X (*) real(kind=dp) :: Ewt (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f real :: psol Calls proc~~dsolpk~2~~CallsGraph proc~dsolpk~2 dsolpk proc~dusol~2 dusol proc~dsolpk~2->proc~dusol~2 proc~dspiom~2 dspiom proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dpcgs~2 dpcgs proc~dsolpk~2->proc~dpcgs~2 proc~dscal~2 dscal proc~dsolpk~2->proc~dscal~2 proc~dpcg~2 dpcg proc~dsolpk~2->proc~dpcg~2 proc~dvnorm~2 dvnorm proc~dusol~2->proc~dvnorm~2 proc~dspiom~2->proc~dscal~2 proc~datv~2 datv proc~dspiom~2->proc~datv~2 proc~dnrm2~2 DNRM2 proc~dspiom~2->proc~dnrm2~2 none~approximate~2 approximate proc~dspiom~2->none~approximate~2 proc~dhefa~2 dhefa proc~dspiom~2->proc~dhefa~2 proc~dorthog~2 dorthog proc~dspiom~2->proc~dorthog~2 proc~dspigmr~2->proc~dscal~2 proc~dspigmr~2->proc~datv~2 proc~dspigmr~2->proc~dnrm2~2 none~approximate approximate proc~dspigmr~2->none~approximate proc~dspigmr~2->proc~dorthog~2 proc~dheqr~2 dheqr proc~dspigmr~2->proc~dheqr~2 proc~datp~2 datp proc~dpcgs~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcgs~2->proc~daxpy~2 proc~dpcgs~2->proc~dvnorm~2 proc~dpcg~2->proc~datp~2 proc~dpcg~2->proc~daxpy~2 proc~dpcg~2->proc~dvnorm~2 proc~ddot~2 ddot proc~dpcg~2->proc~ddot~2 proc~datv~2->proc~dnrm2~2 none~approximate~2->proc~daxpy~2 x x none~approximate~2->x wght wght none~approximate~2->wght b b none~approximate~2->b v v none~approximate~2->v proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 psol psol none~approximate~2->psol none~approximate->proc~daxpy~2 none~approximate->x none~approximate->wght proc~dhels~2 dhels none~approximate->proc~dhels~2 none~approximate->b none~approximate->v none~approximate->psol proc~datp~2->proc~dvnorm~2 proc~dhefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~dorthog~2->proc~ddot~2 proc~dhels~2->proc~daxpy~2 proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dsolpk~2~~CalledByGraph proc~dsolpk~2 dsolpk proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables delta hl0 iflag lb ldl lgmr lhes liom lp lpcg lq lr lv lw lwk lz maxlp1 npsl Source Code dsolpk Variables Type Visibility Attributes Name Initial real(kind=dp), public :: delta real(kind=dp), public :: hl0 integer, public :: iflag integer, public :: lb integer, public :: ldl integer, public :: lgmr integer, public :: lhes integer, public :: liom integer, public :: lp integer, public :: lpcg integer, public :: lq integer, public :: lr integer, public :: lv integer, public :: lw integer, public :: lwk integer, public :: lz integer, public :: maxlp1 integer, public :: npsl Source Code subroutine dsolpk ( Neq , Y , Savf , X , Ewt , Wm , Iwm , f , psol ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ) :: X ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: psol real ( kind = dp ) :: delta , hl0 integer :: iflag , lb , ldl , lgmr , lhes , liom , lp , lpcg , lq , lr , lv , lw , lwk , lz , maxlp1 , npsl dls1 % iersl = 0 hl0 = dls1 % h * dls1 % el0 delta = dlpk % delt * dlpk % epcon select case ( dls1 % miter ) case ( 2 ) !----------------------------------------------------------------------- !  Use the SPIGMR algorithm to solve the linear system P*x = -f. !----------------------------------------------------------------------- maxlp1 = dlpk % maxl + 1 lv = 1 lb = lv + dls1 % n * dlpk % maxl lhes = lb + dls1 % n + 1 lq = lhes + dlpk % maxl * maxlp1 lwk = lq + 2 * dlpk % maxl ldl = lwk + min ( 1 , dlpk % maxl - dlpk % kmp ) * dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lb),1) Wm ( lb : lb + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dscal ( dls1 % n , dlpk % rsqrtn , Ewt , 1 ) call dspigmr ( Neq , dls1 % tn , Y , Savf , Wm ( lb ), Ewt , dls1 % n , dlpk % maxl , maxlp1 , & & dlpk % kmp , delta , hl0 , dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , & & Wm ( lv ), Wm ( lhes ), Wm ( lq ), lgmr , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), Wm ( ldl ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + lgmr dlpk % nps = dlpk % nps + npsl call dscal ( dls1 % n , dlpk % sqrtn , Ewt , 1 ) if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case ( 3 ) !----------------------------------------------------------------------- !  Use DPCG to solve the linear system P*x = -f !----------------------------------------------------------------------- lr = 1 lp = lr + dls1 % n lw = lp + dls1 % n lz = lw + dls1 % n lwk = lz + dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lr),1) Wm ( lr : lr + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dpcg ( Neq , dls1 % tn , Y , Savf , Wm ( lr ), Ewt , dls1 % n , dlpk % maxl , delta , hl0 , & & dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , Wm ( lp ), Wm ( lw ), Wm ( lz ), & & lpcg , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + lpcg dlpk % nps = dlpk % nps + npsl if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case ( 4 ) !----------------------------------------------------------------------- !  Use DPCGS to solve the linear system P*x = -f !----------------------------------------------------------------------- lr = 1 lp = lr + dls1 % n lw = lp + dls1 % n lz = lw + dls1 % n lwk = lz + dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lr),1) Wm ( lr : lr + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dpcgs ( Neq , dls1 % tn , Y , Savf , Wm ( lr ), Ewt , dls1 % n , dlpk % maxl , delta , hl0 , & & dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , Wm ( lp ), Wm ( lw ), Wm ( lz ),& & lpcg , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + lpcg dlpk % nps = dlpk % nps + npsl if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case ( 5 , 6 , 7 , 8 , 9 ) !----------------------------------------------------------------------- !  Use DUSOL, which interfaces to PSOL, to solve the linear system !  (no Krylov iteration). !----------------------------------------------------------------------- lb = 1 lwk = lb + dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lb),1) Wm ( lb : lb + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dusol ( Neq , dls1 % tn , Y , Savf , Wm ( lb ), Ewt , dls1 % n , delta , hl0 , dlpk % mnewt , & & psol , npsl , X , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nps = dlpk % nps + npsl if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag == 3 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case default !----------------------------------------------------------------------- !  Use the SPIOM algorithm to solve the linear system P*x = -f. !----------------------------------------------------------------------- lv = 1 lb = lv + dls1 % n * dlpk % maxl lhes = lb + dls1 % n lwk = lhes + dlpk % maxl * dlpk % maxl !X!call dcopy(dls1%n,X,1,Wm(lb),1) Wm ( lb : lb + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dscal ( dls1 % n , dlpk % rsqrtn , Ewt , 1 ) call dspiom ( Neq , dls1 % tn , Y , Savf , Wm ( lb ), Ewt , dls1 % n , dlpk % maxl , dlpk % kmp , & & delta , hl0 , dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , Wm ( lv ), & & Wm ( lhes ), Iwm , liom , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + liom dlpk % nps = dlpk % nps + npsl call dscal ( dls1 % n , dlpk % sqrtn , Ewt , 1 ) if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 endselect end subroutine dsolpk","tags":"","loc":"proc/dsolpk~2.html"},{"title":"dprepji – odepack","text":"subroutine dprepji(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPREPJI is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s. Here J is computed by the user-supplied\nroutine JAC if MITER = 1 or 4, or by finite differencing if MITER =\n2 or 5. J is stored in WM, rescaled, and ADDA is called to generate\nP. P is then subjected to LU decomposition in preparation\nfor later solution of linear systems with P as coefficient\nmatrix.  This is done by DGEFA if MITER = 1 or 2, and by\nDGBFA if MITER = 4 or 5. In addition to variables described previously, communication\nwith DPREPJI uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array used for output only.  On output it contains the\nresidual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains the band parameters\nML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 el(1) (input). IERPJ output error flag.\n    = 0 if no trouble occurred,\n    = 1 if the P matrix was found to be singular,\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Rtem (*) real(kind=dp) :: Savr (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: res integer :: jac real :: adda Calls proc~~dprepji~2~~CallsGraph proc~dprepji~2 dprepji none~wrapup~2 wrapup proc~dprepji~2->none~wrapup~2 proc~dgefa~2 dgefa proc~dprepji~2->proc~dgefa~2 wm wm none~wrapup~2->wm proc~dgbfa~2 dgbfa none~wrapup~2->proc~dgbfa~2 iwm iwm none~wrapup~2->iwm adda adda none~wrapup~2->adda proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~dgbfa~2->proc~daxpy~2 proc~dgbfa~2->proc~idamax~2 proc~dgbfa~2->proc~dscal~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables con fac hl0 i i1 i2 ier ii ires j j1 jj lenp mba mband meb1 meband ml ml3 mu r srur yi yj yjj Subroutines wrapup Source Code dprepji Variables Type Visibility Attributes Name Initial real(kind=dp), public :: con real(kind=dp), public :: fac real(kind=dp), public :: hl0 integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: ii integer, public :: ires integer, public :: j integer, public :: j1 integer, public :: jj integer, public :: lenp integer, public :: mba integer, public :: mband integer, public :: meb1 integer, public :: meband integer, public :: ml integer, public :: ml3 integer, public :: mu real(kind=dp), public :: r real(kind=dp), public :: srur real(kind=dp), public :: yi real(kind=dp), public :: yj real(kind=dp), public :: yjj Subroutines subroutine wrapup() Arguments None Source Code subroutine dprepji ( Neq , Y , Yh , Nyh , Ewt , Rtem , Savr , S , Wm , Iwm , res , jac , adda ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( in ) :: Ewt ( * ) real ( kind = dp ) :: Rtem ( * ) real ( kind = dp ) :: Savr ( * ) real ( kind = dp ) :: S ( * ) real ( kind = dp ), intent ( inout ) :: Wm ( * ) integer :: Iwm ( * ) external adda external jac external res ! real ( kind = dp ) :: con , fac , hl0 , r , srur , yi , yj , yjj integer :: i , i1 , i2 , ier , ii , ires , j , j1 , jj , lenp , mba , mband , meb1 , meband , ml , ml3 , mu ! dls1 % nje = dls1 % nje + 1 hl0 = dls1 % h * dls1 % el0 dls1 % ierpj = 0 dls1 % jcur = 1 select case ( dls1 % miter ) case ( 2 ) !  If MITER = 2, make N + 1 calls to RES to approximate J. -------------- ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then !  Error return for IRES = 2 or IRES = 3 return from RES. --------------- dls1 % ierpj = ires return else srur = Wm ( 1 ) j1 = 2 do j = 1 , dls1 % n yj = Y ( j ) r = max ( srur * abs ( yj ), 0.01D0 / Ewt ( j )) Y ( j ) = Y ( j ) + r fac = - hl0 / r call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do i = 1 , dls1 % n Wm ( i + j1 ) = ( Rtem ( i ) - Savr ( i )) * fac enddo Y ( j ) = yj j1 = j1 + dls1 % n endif enddo ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return endif endif case ( 3 ) !  Dummy section for MITER = 3 return case ( 4 ) !  If MITER = 4, call RES, then JAC, and multiply by scalar. ------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 meband = mband + ml lenp = meband * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , ml , mu , Wm ( ml3 ), meband ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo call wrapup () return endif case ( 5 ) !  If MITER = 5, make ML + MU + 2 calls to RES to approximate J. -------- ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 mba = min ( mband , dls1 % n ) meband = mband + ml meb1 = meband - 1 srur = Wm ( 1 ) do j = 1 , mba do i = j , dls1 % n , mband yi = Y ( i ) r = max ( srur * abs ( yi ), 0.01D0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do jj = j , dls1 % n , mband Y ( jj ) = Yh ( jj , 1 ) yjj = Y ( jj ) r = max ( srur * abs ( yjj ), 0.01D0 / Ewt ( jj )) fac = - hl0 / r i1 = max ( jj - mu , 1 ) i2 = min ( jj + ml , dls1 % n ) ii = jj * meb1 - ml + 2 do i = i1 , i2 Wm ( ii + i ) = ( Rtem ( i ) - Savr ( i )) * fac enddo enddo endif enddo ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires <= 1 ) then call wrapup () return endif dls1 % ierpj = ires return endif case default !  If MITER = 1, call RES, then JAC, and multiply by scalar. ------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else lenp = dls1 % n * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , 0 , 0 , Wm ( 3 ), dls1 % n ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endif endselect !  Add matrix A. -------------------------------------------------------- call adda ( Neq , dls1 % tn , Y , 0 , 0 , Wm ( 3 ), dls1 % n ) !  Do LU decomposition on P. -------------------------------------------- call dgefa ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 contains subroutine wrapup () !  Add matrix A. -------------------------------------------------------- call adda ( Neq , dls1 % tn , Y , ml , mu , Wm ( ml3 ), meband ) !  Do LU decomposition of P. -------------------------------------------- call dgbfa ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine wrapup end subroutine dprepji","tags":"","loc":"proc/dprepji~2.html"},{"title":"droots – odepack","text":"subroutine droots(Ng, Hmin, Jflag, X0, X1, G0, G1, Gx, X, Jroot) This subroutine finds the leftmost root of a set of arbitrary\n functions gi(x) (i = 1,…,NG) in an interval (X0,X1).  Only roots\n of odd multiplicity (i.e. changes of sign of the gi) are found.\n Here the sign of X1 - X0 is arbitrary, but is constant for a given\n problem, and -leftmost- means nearest to X0.\n The values of the vector-valued function g(x) = (gi, i=1…NG)\n are communicated through the call sequence of DROOTS.\n The method used is the Illinois algorithm. #### Reference:\n Kathie L. Hiebert and Lawrence F. Shampine, Implicitly Defined\n Output Points for Solutions of ODEs, Sandia Report SAND80-0180,\n February 1980. Description of parameters. NG number of functions gi, or the number of components of\n the vector valued function g(x).  Input only. HMIN resolution parameter in X.  Input only.  When a root is\n found, it is located only to within an error of HMIN in X.\n Typically, HMIN should be set to something on the order of\n               100 * UROUND * MAX(ABS(X0),ABS(X1)),\n where UROUND is the unit roundoff of the machine. JFLAG integer flag for input and output communication. On input, set JFLAG = 0 on the first call for the problem,\n and leave it unchanged until the problem is completed.\n (The problem is completed when JFLAG .ge. 2 on return.) On output JFLAG :JFLAG has the following values and meanings: JFLAG = 1 means DROOTS needs a value of g(x).  Set GX = g(X)\n                and call DROOTS again.\n      JFLAG = 2 means a root has been found.  The root is\n                at X, and GX contains g(X).  (Actually, X is the\n                rightmost approximation to the root on an interval\n                (X0,X1) of size HMIN or less.)\n      JFLAG = 3 means X = X1 is a root, with one or more of the gi\n                being zero at X1 and no sign changes in (X0,X1).\n                GX contains g(X) on output.\n      JFLAG = 4 means no roots (of odd multiplicity) were\n                found in (X0,X1) (no sign changes). X0,X1 endpoints of the interval where roots are sought.\n X1 and X0 are input when JFLAG = 0 (first call), and\n must be left unchanged between calls until the problem is\n completed.  X0 and X1 must be distinct, but X1 - X0 may be\n of either sign.  However, the notion of -left- and -right-\n will be used to mean nearer to X0 or X1, respectively.\n When JFLAG .ge. 2 on return, X0 and X1 are output, and\n are the endpoints of the relevant interval. G0,G1 arrays of length NG containing the vectors g(X0) and g(X1),\n respectively.  When JFLAG = 0, G0 and G1 are input and\n none of the G0(i) should be zero.\n When JFLAG .ge. 2 on return, G0 and G1 are output. GX array of length NG containing g(X).  GX is input\n when JFLAG = 1, and output when JFLAG .ge. 2. X independent variable value.  Output only.\n When JFLAG = 1 on output, X is the point at which g(x)\n is to be evaluated and loaded into GX. When JFLAG = 2 or 3, X is the root.\n\n  When JFLAG = 4, X is the right endpoint of the interval, X1. JROOT integer array of length NG.  Output only.\n When JFLAG = 2 or 3, JROOT indicates which components\n of g(x) have a root at X.  JROOT(i) is 1 if the i-th\n component has a root, and JROOT(i) = 0 otherwise. Arguments Type Intent Optional Attributes Name integer :: Ng real(kind=dp), intent(in) :: Hmin integer, intent(inout) :: Jflag real(kind=dp), intent(inout) :: X0 real(kind=dp), intent(inout) :: X1 real(kind=dp) :: G0 (Ng) real(kind=dp) :: G1 (Ng) real(kind=dp) :: Gx (Ng) real(kind=dp), intent(out) :: X integer, intent(out) :: Jroot (Ng) Called by proc~~droots~2~~CalledByGraph proc~droots~2 droots proc~drchek~2 drchek proc~drchek~2->proc~droots~2 proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~drchek~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~drchek~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables five fracint fracsub half i imxold nxlast sgnchg t2 tenth tmax xroot zero zroot Source Code droots Variables Type Visibility Attributes Name Initial real(kind=dp), public, parameter :: five = 5.0d0 real(kind=dp), public :: fracint real(kind=dp), public :: fracsub real(kind=dp), public, parameter :: half = 0.5d0 integer, public :: i integer, public :: imxold integer, public :: nxlast logical, public :: sgnchg real(kind=dp), public :: t2 real(kind=dp), public, parameter :: tenth = 0.1d0 real(kind=dp), public :: tmax logical, public :: xroot real(kind=dp), public, parameter :: zero = 0.0d0 logical, public :: zroot Source Code subroutine droots ( Ng , Hmin , Jflag , X0 , X1 , G0 , G1 , Gx , X , Jroot ) ! integer :: Ng real ( kind = dp ), intent ( in ) :: Hmin integer , intent ( inout ) :: Jflag real ( kind = dp ), intent ( inout ) :: X0 real ( kind = dp ), intent ( inout ) :: X1 real ( kind = dp ) :: G0 ( Ng ) real ( kind = dp ) :: G1 ( Ng ) real ( kind = dp ) :: Gx ( Ng ) real ( kind = dp ), intent ( out ) :: X integer , intent ( out ) :: Jroot ( Ng ) ! real ( kind = dp ) :: fracint , fracsub , t2 , tmax integer :: i , imxold , nxlast logical :: sgnchg , xroot , zroot ! real ( kind = dp ) , parameter :: five = 5.0d0 , half = 0.5d0 , tenth = 0.1d0 , zero = 0.0d0 ! if ( Jflag == 1 ) then !  Check to see in which interval g changes sign. ----------------------- imxold = dlsr % imax dlsr % imax = 0 tmax = zero zroot = . false . do i = 1 , Ng if ( abs ( Gx ( i )) <= zero ) then zroot = . true . !  Neither G0(i) nor GX(i) can be zero at this point. ------------------- elseif ( sign ( 1.0D0 , G0 ( i )) /= sign ( 1.0D0 , Gx ( i )) ) then t2 = abs ( Gx ( i ) / ( Gx ( i ) - G0 ( i ))) if ( t2 > tmax ) then tmax = t2 dlsr % imax = i endif endif enddo if ( dlsr % imax > 0 ) then sgnchg = . true . else sgnchg = . false . dlsr % imax = imxold endif nxlast = dlsr % last if ( sgnchg ) then !  Sign change between X0 and X2, so replace X1 with X2. ---------------- X1 = dlsr % x2 !X!call dcopy(Ng,Gx,1,G1,1) G1 ( 1 : Ng ) = Gx ( 1 : Ng ) dlsr % last = 1 xroot = . false . elseif ( . not . zroot ) then !  No sign change between X0 and X2.  Replace X0 with X2. --------------- !X!call dcopy(Ng,Gx,1,G0,1) G0 ( 1 : Ng ) = Gx ( 1 : Ng ) X0 = dlsr % x2 dlsr % last = 0 xroot = . false . else !  Zero value at X2 and no sign change in (X0,X2), so X2 is a root. ----- X1 = dlsr % x2 !X!call dcopy(Ng,Gx,1,G1,1) G1 ( 1 : Ng ) = Gx ( 1 : Ng ) xroot = . true . endif if ( abs ( X1 - X0 ) <= Hmin ) xroot = . true . else !  JFLAG .ne. 1.  Check for change in sign of g or zero at X1. ---------- dlsr % imax = 0 tmax = zero zroot = . false . do i = 1 , Ng if ( abs ( G1 ( i )) <= zero ) then zroot = . true . !  At this point, G0(i) has been checked and cannot be zero. ------------ elseif ( sign ( 1.0D0 , G0 ( i )) /= sign ( 1.0D0 , G1 ( i )) ) then t2 = abs ( G1 ( i ) / ( G1 ( i ) - G0 ( i ))) if ( t2 > tmax ) then tmax = t2 dlsr % imax = i endif endif enddo if ( dlsr % imax > 0 ) then sgnchg = . true . else sgnchg = . false . endif if ( . not . sgnchg ) then ! !  No sign change in the interval.  Check for zero at right endpoint. --- if ( zroot ) then ! !  Zero value at X1 and no sign change in (X0,X1).  Return JFLAG = 3. --- X = X1 !X!call dcopy(Ng,G1,1,Gx,1) Gx ( 1 : Ng ) = G1 ( 1 : Ng ) do i = 1 , Ng Jroot ( i ) = 0 if ( abs ( G1 ( i )) <= zero ) Jroot ( i ) = 1 enddo Jflag = 3 return endif ! !  No sign changes in this interval.  Set X = X1, return JFLAG = 4. ----- !X!call dcopy(Ng,G1,1,Gx,1) Gx ( 1 : Ng ) = G1 ( 1 : Ng ) X = X1 Jflag = 4 return else !  There is a sign change.  Find the first root in the interval. -------- xroot = . false . nxlast = 0 dlsr % last = 1 endif endif ! !  Repeat until the first root in the interval is found.  Loop point. --- if ( xroot ) then ! !  Return with X1 as the root.  Set JROOT.  Set X = X1 and GX = G1. ----- Jflag = 2 X = X1 !X!call dcopy(Ng,G1,1,Gx,1) Gx ( 1 : Ng ) = G1 ( 1 : Ng ) do i = 1 , Ng Jroot ( i ) = 0 if ( abs ( G1 ( i )) > zero ) then if ( sign ( 1.0D0 , G0 ( i )) /= sign ( 1.0D0 , G1 ( i )) ) Jroot ( i ) = 1 else Jroot ( i ) = 1 endif enddo else if ( nxlast /= dlsr % last ) then dlsr % alpha = 1.0D0 elseif ( dlsr % last == 0 ) then dlsr % alpha = 2.0D0 * dlsr % alpha else dlsr % alpha = 0.5D0 * dlsr % alpha endif dlsr % x2 = X1 - ( X1 - X0 ) * G1 ( dlsr % imax ) / ( G1 ( dlsr % imax ) - dlsr % alpha * G0 ( dlsr % imax )) !  If X2 is too close to X0 or X1, adjust it inward, by a fractional ---- !  distance that is between 0.1 and 0.5. -------------------------------- if ( abs ( dlsr % x2 - X0 ) < half * Hmin ) then fracint = abs ( X1 - X0 ) / Hmin fracsub = tenth if ( fracint <= five ) fracsub = half / fracint dlsr % x2 = X0 + fracsub * ( X1 - X0 ) endif if ( abs ( X1 - dlsr % x2 ) < half * Hmin ) then fracint = abs ( X1 - X0 ) / Hmin fracsub = tenth if ( fracint <= five ) fracsub = half / fracint dlsr % x2 = X1 - fracsub * ( X1 - X0 ) endif Jflag = 1 X = dlsr % x2 !  Return to the calling routine to get a value of GX = g(X). ----------- endif end subroutine droots","tags":"","loc":"proc/droots~2.html"},{"title":"dpkset – odepack","text":"subroutine dpkset(Neq, Y, Ysv, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPKSET is called by DSTODPK to interface with the user-supplied\nroutine JAC, to compute and process relevant parts of\nthe matrix P = I - H EL(1) J, where J is the Jacobian df/dy,\nas need for preconditioning matrix operations later. In addition to variables described previously, communication\nwith DPKSET uses the following: Y array containing predicted values on entry. YSV array containing predicted y, to be saved (YH1 in DSTODPK). FTEM work array of length N (ACOR in DSTODPK). SAVF array containing f evaluated at predicted y. WM real work space for matrices.\nSpace for preconditioning data starts at WM(LOCWP). IWM integer work space.\nSpace for preconditioning data starts at IWM(LOCIWP). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nJAC returned an error flag. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses Common variables EL0, H, TN, IERPJ, JCUR, NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ysv (*) real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac Called by proc~~dpkset~2~~CalledByGraph proc~dpkset~2 dpkset proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dpkset~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables hl0 ier Source Code dpkset Variables Type Visibility Attributes Name Initial real(kind=dp), public :: hl0 integer, public :: ier Source Code subroutine dpkset ( Neq , Y , Ysv , Ewt , Ftem , Savf , Wm , Iwm , f , jac ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ysv ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: jac real ( kind = dp ) :: hl0 integer :: ier dls1 % ierpj = 0 dls1 % jcur = 1 hl0 = dls1 % el0 * dls1 % h call jac ( f , Neq , dls1 % tn , Y , Ysv , Ewt , Savf , Ftem , hl0 , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), ier ) dls1 % nje = dls1 % nje + 1 if ( ier /= 0 ) then dls1 % ierpj = 1 endif end subroutine dpkset","tags":"","loc":"proc/dpkset~2.html"},{"title":"dsrcpk – odepack","text":"subroutine dsrcpk(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe internal types used internally by the DLSODPK solver. RSAV real array of length 222 or more. ISAV integer array of length 50 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job Calls proc~~dsrcpk~2~~CallsGraph proc~dsrcpk~2 dsrcpk return_dls1_real return_dls1_real proc~dsrcpk~2->return_dls1_real return_dls1_int return_dls1_int proc~dsrcpk~2->return_dls1_int set_dls1_real set_dls1_real proc~dsrcpk~2->set_dls1_real set_dls1_int set_dls1_int proc~dsrcpk~2->set_dls1_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables lenils lenrls Source Code dsrcpk Variables Type Visibility Attributes Name Initial integer, public, parameter :: lenils = 37 integer, public, parameter :: lenrls = 218 Source Code subroutine dsrcpk ( rsav , isav , job ) real ( kind = dp ) :: Rsav ( * ) integer :: Isav ( * ) integer , intent ( in ) :: Job integer , parameter :: lenils = 37 , lenrls = 218 select case ( job ) case ( 1 ) rsav ( 1 : lenrls ) = return_dls1_real () rsav ( lenrls + 1 ) = dlpk % delt rsav ( lenrls + 2 ) = dlpk % epcon rsav ( lenrls + 3 ) = dlpk % sqrtn rsav ( lenrls + 4 ) = dlpk % rsqrtn isav ( 1 : lenils ) = return_dls1_int () isav ( lenils + 1 ) = dlpk % jpre isav ( lenils + 2 ) = dlpk % jacflg isav ( lenils + 3 ) = dlpk % locwp isav ( lenils + 4 ) = dlpk % lociwp isav ( lenils + 5 ) = dlpk % lsavx isav ( lenils + 6 ) = dlpk % kmp isav ( lenils + 7 ) = dlpk % maxl isav ( lenils + 8 ) = dlpk % mnewt isav ( lenils + 9 ) = dlpk % nni isav ( lenils + 10 ) = dlpk % nli isav ( lenils + 11 ) = dlpk % nps isav ( lenils + 12 ) = dlpk % ncfn isav ( lenils + 13 ) = dlpk % ncfl case ( 2 ) call set_dls1_real ( rsav ( 1 : lenrls )) dlpk % delt = rsav ( lenrls + 1 ) dlpk % epcon = rsav ( lenrls + 2 ) dlpk % sqrtn = rsav ( lenrls + 3 ) dlpk % rsqrtn = rsav ( lenrls + 4 ) call set_dls1_int ( isav ( 1 : lenils )) dlpk % jpre = isav ( lenils + 1 ) dlpk % jacflg = isav ( lenils + 2 ) dlpk % locwp = isav ( lenils + 3 ) dlpk % lociwp = isav ( lenils + 4 ) dlpk % lsavx = isav ( lenils + 5 ) dlpk % kmp = isav ( lenils + 6 ) dlpk % maxl = isav ( lenils + 7 ) dlpk % mnewt = isav ( lenils + 8 ) dlpk % nni = isav ( lenils + 9 ) dlpk % nli = isav ( lenils + 10 ) dlpk % nps = isav ( lenils + 11 ) dlpk % ncfn = isav ( lenils + 12 ) dlpk % ncfl = isav ( lenils + 13 ) case default write ( * , * ) '<ERROR>*dsrcpk* unknown value for JOB=' , Job stop 1 end select end subroutine dsrcpk","tags":"","loc":"proc/dsrcpk~2.html"},{"title":"jgroup – odepack","text":"subroutine jgroup(N, Ia, Ja, Maxg, Ngrp, Igp, Jgp, Incl, Jdone, Ier) This subroutine constructs groupings of the column indices of\n the Jacobian matrix, used in the numerical evaluation of the\n Jacobian by finite differences. Input: N the order of the matrix. IA,JA sparse structure descriptors of the matrix by rows. MAXG length of available storage in the IGP array. Output: NGRP number of groups. JGP array of length N containing the column indices by groups. IGP pointer array of length NGRP + 1 to the locations in JGP\n of the beginning of each group. IER error indicator.  IER = 0 if no error occurred, or 1 if\n MAXG was insufficient. INCL and JDONE are working arrays of length N. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: Ia integer, intent(in), dimension(*) :: Ja integer, intent(in) :: Maxg integer, intent(out) :: Ngrp integer, intent(inout), dimension(*) :: Igp integer, intent(out), dimension(*) :: Jgp integer, intent(inout), dimension(*) :: Incl integer, intent(inout), dimension(*) :: Jdone integer, intent(out) :: Ier Contents Variables i j k kmax kmin ncol ng Source Code jgroup Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: j integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: ncol integer, public :: ng Source Code subroutine jgroup ( N , Ia , Ja , Maxg , Ngrp , Igp , Jgp , Incl , Jdone , Ier ) ! integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: Ia integer , intent ( in ) , dimension ( * ) :: Ja integer , intent ( in ) :: Maxg integer , intent ( out ) :: Ngrp integer , intent ( inout ) , dimension ( * ) :: Igp integer , intent ( out ) , dimension ( * ) :: Jgp integer , intent ( inout ) , dimension ( * ) :: Incl integer , intent ( inout ) , dimension ( * ) :: Jdone integer , intent ( out ) :: Ier ! integer :: i , j , k , kmax , kmin , ncol , ng ! Ier = 0 do j = 1 , N Jdone ( j ) = 0 enddo ncol = 1 do ng = 1 , Maxg Igp ( ng ) = ncol do i = 1 , N Incl ( i ) = 0 enddo TEST : do j = 1 , N ! Reject column J if it is already in a group.-------------------------- if ( Jdone ( j ) /= 1 ) then kmin = Ia ( j ) kmax = Ia ( j + 1 ) - 1 do k = kmin , kmax ! Reject column J if it overlaps any column already in this group.------ i = Ja ( k ) if ( Incl ( i ) == 1 ) cycle TEST enddo ! Accept column J into group NG.---------------------------------------- Jgp ( ncol ) = j ncol = ncol + 1 Jdone ( j ) = 1 do k = kmin , kmax i = Ja ( k ) Incl ( i ) = 1 enddo endif enddo TEST ! Stop if this group is empty (grouping is complete).------------------- if ( ncol == Igp ( ng ) ) then Ngrp = ng - 1 return endif enddo ! Error return if not all columns were chosen (MAXG too small).--------- if ( ncol <= N ) then Ier = 1 return else ng = Maxg endif Ngrp = ng - 1 end subroutine jgroup","tags":"","loc":"proc/jgroup~2.html"},{"title":"nroc – odepack","text":"subroutine nroc(N, Ic, Ia, Ja, A, Jar, Ar, P, Flag) yale sparse matrix package - nonsymmetric codes\n                solving the system of equations mx = b i.   calling sequences the coefficient matrix can be processed by an ordering routine ( e . g ., to reduce fillin or ensure numerical stability ) before using the remaining subroutines . if no reordering is done , then set r ( i ) = c ( i ) = ic ( i ) = i for i = 1 ,..., n . if an ordering subroutine is used , then nroc should be used to reorder the coefficient matrix the calling sequence is – (       (matrix ordering))\n        (nroc   (matrix reordering))\n         nsfc   (symbolic factorization to determine where fillin will\n                  occur during numeric factorization)\n         nnfc   (numeric factorization into product ldu of unit lower\n                  triangular matrix l, diagonal matrix d, and unit\n                  upper triangular matrix u, and solution of linear\n                  system)\n         nnsc   (solution of linear system for additional right-hand\n                  side using ldu factorization from nnfc) ( if only one system of equations is to be solved , then the subroutine trk should be used . ) ii.  storage of sparse matrices the nonzero entries of the coefficient matrix m are stored row - by - row in the array a . to identify the individual nonzero entries in each row , we need to know in which column each entry lies . the column indices which correspond to the nonzero entries of m are stored in the array ja . i . e ., if a ( k ) = m ( i , j ) , then ja ( k ) = j . in addition , we need to know where each row starts and how long it is . the index positions in ja and a where the rows of m begin are stored in the array ia . i . e ., if m ( i , j ) is the first ( leftmost ) entry in the i - th row and a ( k ) = m ( i , j ) , then ia ( i ) = k . moreover , the index in ja and a of the first location following the last element in the last row is stored in ia ( n + 1 ) . thus , the number of entries in the i - th row is given by ia ( i + 1 ) - ia ( i ) , the nonzero entries of the i - th row are stored consecutively in a ( ia ( i )) , a ( ia ( i ) + 1 ) ,  ..., a ( ia ( i + 1 ) - 1 ) , and the corresponding column indices are stored consecutively in ja ( ia ( i )) , ja ( ia ( i ) + 1 ) , ..., ja ( ia ( i + 1 ) - 1 ) . for example , the 5 by 5 matrix ( 1. 0. 2. 0. 0.)\n                ( 0. 3. 0. 0. 0.)\n            m = ( 0. 4. 5. 6. 0.)\n                ( 0. 0. 0. 7. 0.)\n                ( 0. 0. 0. 8. 9.) would be stored as - 1  2  3  4  5  6  7  8  9\n            ---+--------------------------\n            ia - 1  3  4  7  8 10\n            ja - 1  3  2  2  3  4  4  4  5\n             a - 1. 2. 3. 4. 5. 6. 7. 8. 9.         . the strict upper ( lower ) triangular portion of the matrix u ( l ) is stored in a similar fashion using the arrays iu , ju , u ( il , jl , l ) except that an additional array iju ( ijl ) is used to compress storage of ju ( jl ) by allowing some sequences of column ( row ) indices to used for more than one row ( column ) ( n . b ., l is stored by columns ) . iju ( k ) ( ijl ( k )) points to the starting location in ju ( jl ) of entries for the kth row ( column ) . compression in ju ( jl ) occurs in two ways . first , if a row ( column ) i was merged into the current row ( column ) k , and the number of elements merged in from ( the tail portion of ) row ( column ) i is the same as the final length of row ( column ) k , then the kth row ( column ) and the tail of row ( column ) i are identical and iju ( k ) ( ijl ( k )) points to the start of the tail . second , if some tail portion of the ( k - 1 ) st row ( column ) is identical to the head of the kth row ( column ) , then iju ( k ) ( ijl ( k )) points to the start of that tail portion . for example , the nonzero structure of the strict upper triangular part of the matrix d 0 x x x\n            0 d 0 x x\n            0 0 d x 0\n            0 0 0 d x\n            0 0 0 0 d would be represented as - 1 2 3 4 5 6\n            ----+------------\n             iu - 1 4 6 7 8 8\n             ju - 3 4 5 4\n            iju - 1 2 4 3           . the diagonal entries of l and u are assumed to be equal to one and\nare not stored.  the array d contains the reciprocals of the\ndiagonal entries of the matrix d. iii. additional storage savings in nsfc , r and ic can be the same array in the calling sequence if no reordering of the coefficient matrix has been done . in nnfc , r , c , and ic can all be the same array if no reordering has been done . if only the rows have been reordered , then c and ic can be the same array . if the row and column orderings are the same , then r and c can be the same array . z and row can be the same array . in nnsc or nntc , r and c can be the same array if no reordering has been done or if the row and column orderings are the same . z and b can be the same array . however , then b will be destroyed . iv.  parameters following is a list of parameters to the programs . names are uniform among the various subroutines . class abbreviations are -- n - integer variable\n       f - real variable\n       v - supplies a value to a subroutine\n       r - returns a result from a subroutine\n       i - used internally by a subroutine\n       a - array\n\n class - parameter\n ------+----------\n fva   - a     - nonzero entries of the coefficient matrix m, stored\n       -           by rows.\n       -           size = number of nonzero entries in m.\n fva   - b     - right-hand side b.\n       -           size = n.\n nva   - c     - ordering of the columns of m.\n       -           size = n.\n fvra  - d     - reciprocals of the diagonal entries of the matrix d.\n       -           size = n.\n nr    - flag  - error flag.  values and their meanings are --\n       -            0     no errors detected\n       -            n+k   null row in a  --  row = k\n       -           2n+k   duplicate entry in a  --  row = k\n       -           3n+k   insufficient storage for jl  --  row = k\n       -           4n+1   insufficient storage for l\n       -           5n+k   null pivot  --  row = k\n       -           6n+k   insufficient storage for ju  --  row = k\n       -           7n+1   insufficient storage for u\n       -           8n+k   zero pivot  --  row = k\n nva   - ia    - pointers to delimit the rows of a.\n       -           size = n+1.\n nvra  - ijl   - pointers to the first element in each column in jl,\n       -           used to compress storage in jl.\n       -           size = n.\n nvra  - iju   - pointers to the first element in each row in ju, used\n       -           to compress storage in ju.\n       -           size = n.\n nvra  - il    - pointers to delimit the columns of l.\n       -           size = n+1.\n nvra  - iu    - pointers to delimit the rows of u.\n       -           size = n+1.\n nva   - ja    - column numbers corresponding to the elements of a.\n       -           size = size of a.\n nvra  - jl    - row numbers corresponding to the elements of l.\n       -           size = jlmax.\n nv    - jlmax - declared dimension of jl.  jlmax must be larger than\n       -           the number of nonzeros in the strict lower triangle\n       -           of m plus fillin minus compression.\n nvra  - ju    - column numbers corresponding to the elements of u.\n       -           size = jumax.\n nv    - jumax - declared dimension of ju.  jumax must be larger than\n       -           the number of nonzeros in the strict upper triangle\n       -           of m plus fillin minus compression.\n fvra  - l     - nonzero entries in the strict lower triangular portion\n       -           of the matrix l, stored by columns.\n       -           size = lmax.\n nv    - lmax  - declared dimension of l.  lmax must be larger than\n       -           the number of nonzeros in the strict lower triangle\n       -           of m plus fillin  (il(n+1)-1 after nsfc).\n nv    - n     - number of variables/equations.\n nva   - r     - ordering of the rows of m.\n       -           size = n.\n fvra  - u     - nonzero entries in the strict upper triangular portion\n       -           of the matrix u, stored by rows.\n       -           size = umax.\n nv    - umax  - declared dimension of u.  umax must be larger than\n       -           the number of nonzeros in the strict upper triangle\n       -           of m plus fillin  (iu(n+1)-1 after nsfc).\n fra   - z     - solution x.\n       -           size = n. ---------------------------------------------------------------- subroutine nroc reorders rows of a, leaving row order unchanged input parameters.. n, ic, ia, ja, a\n   output parameters.. ja, a, flag\n\n   parameters used internally.. nia   - p     - at the kth step, p is a linked list of the reordered\n       -           column indices of the kth row of a.  p(n+1) points\n       -           to the first entry in the list.\n       -           size = n+1.\n nia   - jar   - at the kth step,jar contains the elements of the\n       -           reordered column indices of a.\n       -           size = n.\n fia   - ar    - at the kth step, ar contains the elements of the\n       -           reordered row of a.\n       -           size = n. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: Ic integer, intent(in), dimension(*) :: Ia integer, intent(inout), dimension(*) :: Ja real(kind=dp), intent(inout), dimension(*) :: A integer, intent(inout), dimension(*) :: Jar real(kind=dp), intent(inout), dimension(*) :: Ar integer, intent(inout), dimension(*) :: P integer, intent(out) :: Flag Called by proc~~nroc~2~~CalledByGraph proc~nroc~2 nroc proc~cdrv~2 cdrv proc~cdrv~2->proc~nroc~2 none~wrapup~3 wrapup none~wrapup~3->proc~cdrv~2 proc~dprjis~2 dprjis proc~dprjis~2->proc~cdrv~2 proc~dsolss~2 dsolss proc~dsolss~2->proc~cdrv~2 proc~dprjs~2 dprjs proc~dprjs~2->none~wrapup~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i j jmax jmin k newj Source Code nroc Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: j integer, public :: jmax integer, public :: jmin integer, public :: k integer, public :: newj Source Code subroutine nroc ( N , Ic , Ia , Ja , A , Jar , Ar , P , Flag ) ! !      real  a(*), ar(*) integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: Ic integer , intent ( in ) , dimension ( * ) :: Ia integer , intent ( inout ) , dimension ( * ) :: Ja real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: A integer , intent ( inout ) , dimension ( * ) :: Jar real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Ar integer , intent ( inout ) , dimension ( * ) :: P integer , intent ( out ) :: Flag ! integer :: i , j , jmax , jmin , k , newj ! !   ******  for each nonempty row  ******************************* do k = 1 , N jmin = Ia ( k ) jmax = Ia ( k + 1 ) - 1 if ( jmin <= jmax ) then P ( N + 1 ) = N + 1 !   ******  insert each element in the list  ********************* do j = jmin , jmax newj = Ic ( Ja ( j )) i = N + 1 do while ( P ( i ) < newj ) i = P ( i ) enddo if ( P ( i ) == newj ) then ! !  ** error.. duplicate entry in a Flag = N + k return else P ( newj ) = P ( i ) P ( i ) = newj Jar ( newj ) = Ja ( j ) Ar ( newj ) = A ( j ) endif enddo !   ******  replace old row in ja and a  ************************* i = N + 1 do j = jmin , jmax i = P ( i ) Ja ( j ) = Jar ( i ) A ( j ) = Ar ( i ) enddo endif enddo Flag = 0 end subroutine nroc","tags":"","loc":"proc/nroc~2.html"},{"title":"nsfc – odepack","text":"subroutine nsfc(N, R, Ic, Ia, Ja, Jlmax, Il, Jl, Ijl, Jumax, Iu, Ju, Iju, Q, Ira, Jra, Irac, Irl, Jrl, Iru, Jru, Flag) subroutine nsfc symbolic ldu-factorization of nonsymmetric sparse matrix ( compressed pointer storage ) input variables .. n , r , ic , ia , ja , jlmax , jumax . output variables .. il , jl , ijl , iu , ju , iju , flag . parameters used internally .. nia   - q     - suppose  m*  is the result of reordering  m.  if\n       -           processing of the ith row of  m*  (hence the ith\n       -           row of  u) is being done,  q(j)  is initially\n       -           nonzero if  m*(i,j) is nonzero (j.ge.i).  since\n       -           values need not be stored, each entry points to the\n       -           next nonzero and  q(n+1)  points to the first.  n+1\n       -           indicates the end of the list.  for example, if n=9\n       -           and the 5th row of  m*  is\n       -              0 x x 0 x 0 0 x 0\n       -           then  q  will initially be\n       -              a a a a 8 a a 10 5           (a - arbitrary).\n       -           as the algorithm proceeds, other elements of  q\n       -           are inserted in the list because of fillin.\n       -           q  is used in an analogous manner to compute the\n       -           ith column of  l.\n       -           size = n+1.\n nia   - ira,  - vectors used to find the columns of  m.  at the kth\n nia   - jra,      step of the factorization,  irac(k)  points to the\n nia   - irac      head of a linked list in  jra  of row indices i\n       -           such that i .ge. k and  m(i,k)  is nonzero.  zero\n       -           indicates the end of the list.  ira(i)  (i.ge.k)\n       -           points to the smallest j such that j .ge. k and\n       -           m(i,j)  is nonzero.\n       -           size of each = n.\n nia   - irl,  - vectors used to find the rows of  l.  at the kth step\n nia   - jrl       of the factorization,  jrl(k)  points to the head\n       -           of a linked list in  jrl  of column indices j\n       -           such j .lt. k and  l(k,j)  is nonzero.  zero\n       -           indicates the end of the list.  irl(j)  (j.lt.k)\n       -           points to the smallest i such that i .ge. k and\n       -           l(i,j)  is nonzero.\n       -           size of each = n.\n nia   - iru,  - vectors used in a manner analogous to  irl and jrl\n nia   - jru       to find the columns of  u.\n       -           size of each = n. internal variables.. jlptr - points to the last position used in  jl.\n    juptr - points to the last position used in  ju.\n    jmin,jmax - are the indices in  a or u  of the first and last\n                elements to be examined in a given row.\n                for example,  jmin=ia(k), jmax=ia(k+1)-1. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(inout) :: R (*) integer, intent(in) :: Ic (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(in) :: Jlmax integer, intent(inout) :: Il (*) integer, intent(inout) :: Jl (*) integer, intent(inout) :: Ijl (*) integer, intent(in) :: Jumax integer, intent(inout) :: Iu (*) integer, intent(inout) :: Ju (*) integer, intent(inout) :: Iju (*) integer, intent(inout) :: Q (*) integer, intent(inout) :: Ira (*) integer, intent(inout) :: Jra (*) integer, intent(inout) :: Irac (*) integer, intent(inout) :: Irl (*) integer, intent(inout) :: Jrl (*) integer, intent(inout) :: Iru (*) integer, intent(inout) :: Jru (*) integer, intent(out) :: Flag Called by proc~~nsfc~2~~CalledByGraph proc~nsfc~2 nsfc proc~cdrv~2 cdrv proc~cdrv~2->proc~nsfc~2 none~wrapup~3 wrapup none~wrapup~3->proc~cdrv~2 proc~dprjis~2 dprjis proc~dprjis~2->proc~cdrv~2 proc~dsolss~2 dsolss proc~dsolss~2->proc~cdrv~2 proc~dprjs~2 dprjs proc~dprjs~2->none~wrapup~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables cend i i1 iak irai irll irul j jaiak jairai jlmin jlptr jmax jmin jtmp jumin juptr k lasti lastid long luk m np1 qm rend rk vj Source Code nsfc Variables Type Visibility Attributes Name Initial integer, public :: cend integer, public :: i integer, public :: i1 integer, public :: iak integer, public :: irai integer, public :: irll integer, public :: irul integer, public :: j integer, public :: jaiak integer, public :: jairai integer, public :: jlmin integer, public :: jlptr integer, public :: jmax integer, public :: jmin integer, public :: jtmp integer, public :: jumin integer, public :: juptr integer, public :: k integer, public :: lasti integer, public :: lastid integer, public :: long integer, public :: luk integer, public :: m integer, public :: np1 integer, public :: qm integer, public :: rend integer, public :: rk integer, public :: vj Source Code subroutine nsfc ( N , R , Ic , Ia , Ja , Jlmax , Il , Jl , Ijl , Jumax , Iu , Ju , Iju , Q , Ira , Jra , Irac , Irl , Jrl , Iru , Jru , Flag ) ! integer , intent ( in ) :: N integer , intent ( inout ) :: R ( * ) integer , intent ( in ) :: Ic ( * ) integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( in ) :: Jlmax integer , intent ( inout ) :: Il ( * ) integer , intent ( inout ) :: Jl ( * ) integer , intent ( inout ) :: Ijl ( * ) integer , intent ( in ) :: Jumax integer , intent ( inout ) :: Iu ( * ) integer , intent ( inout ) :: Ju ( * ) integer , intent ( inout ) :: Iju ( * ) integer , intent ( inout ) :: Q ( * ) integer , intent ( inout ) :: Ira ( * ) integer , intent ( inout ) :: Jra ( * ) integer , intent ( inout ) :: Irac ( * ) integer , intent ( inout ) :: Irl ( * ) integer , intent ( inout ) :: Jrl ( * ) integer , intent ( inout ) :: Iru ( * ) integer , intent ( inout ) :: Jru ( * ) integer , intent ( out ) :: Flag ! integer :: cend , i , i1 , iak , irai , irll , irul , j , jaiak , jairai , jlmin , jlptr , jmax , jmin , jtmp , jumin , juptr , k , & & lasti , lastid , long , luk , m , np1 , qm , rend , rk , vj ! !   ******  initialize pointers  **************************************** np1 = N + 1 jlmin = 1 jlptr = 0 Il ( 1 ) = 1 jumin = 1 juptr = 0 Iu ( 1 ) = 1 do k = 1 , N Irac ( k ) = 0 Jra ( k ) = 0 Jrl ( k ) = 0 Jru ( k ) = 0 enddo !   ******  initialize column pointers for a  *************************** do k = 1 , N rk = R ( k ) iak = Ia ( rk ) if ( iak >= Ia ( rk + 1 ) ) then ! !  ** error.. null row in a Flag = N + rk return else jaiak = Ic ( Ja ( iak )) if ( jaiak > k ) then !  ** error.. null pivot Flag = 5 * N + k return endif Jra ( k ) = Irac ( jaiak ) Irac ( jaiak ) = k Ira ( k ) = iak endif enddo ! !   ******  for each column of l and row of u  ************************** ALL : do k = 1 , N ! !   ******  initialize q for computing kth column of l  ***************** Q ( np1 ) = np1 luk = - 1 !   ******  by filling in kth column of a  ****************************** vj = Irac ( k ) if ( vj /= 0 ) then qm = np1 do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm == vj ) then !  ** error.. duplicate entry in a Flag = 2 * N + rk return endif luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm vj = Jra ( vj ) if ( vj == 0 ) exit qm = np1 endif enddo endif !   ******  link through jru  ******************************************* lastid = 0 lasti = 0 Ijl ( k ) = jlptr i = k LOOP : do i = Jru ( i ) if ( i == 0 ) then !   ******  lasti is the longest column merged into the kth  ************ !   ******  see if it equals the entire kth column  ********************* qm = Q ( np1 ) if ( qm /= k ) then !  ** error.. null pivot Flag = 5 * N + k return endif LUKZ : if ( luk /= 0 ) then if ( lastid /= luk ) then !   ******  if not, see if kth column can overlap the previous one  ***** KTHCOL : if ( jlmin <= jlptr ) then qm = Q ( qm ) do j = jlmin , jlptr if ( Jl ( j ) < qm ) cycle if ( Jl ( j ) == qm ) then Ijl ( k ) = j do i = j , jlptr if ( Jl ( i ) /= qm ) exit KTHCOL qm = Q ( qm ) if ( qm > N ) exit LUKZ enddo jlptr = j - 1 endif exit enddo endif KTHCOL !   ******  move column indices from q to jl, update vectors  *********** jlmin = jlptr + 1 Ijl ( k ) = jlmin if ( luk /= 0 ) then jlptr = jlptr + luk if ( jlptr > Jlmax ) then !  ** error.. insufficient storage for jl Flag = 3 * N + k return else qm = Q ( np1 ) do j = jlmin , jlptr qm = Q ( qm ) Jl ( j ) = qm enddo endif endif else !   ******  if so, jl can be compressed  ******************************** irll = Irl ( lasti ) Ijl ( k ) = irll + 1 if ( Jl ( irll ) /= k ) Ijl ( k ) = Ijl ( k ) - 1 endif endif LUKZ Irl ( k ) = Ijl ( k ) Il ( k + 1 ) = Il ( k ) + luk ! !   ******  initialize q for computing kth row of u  ******************** Q ( np1 ) = np1 luk = - 1 !   ******  by filling in kth row of reordered a  *********************** rk = R ( k ) jmin = Ira ( k ) jmax = Ia ( rk + 1 ) - 1 if ( jmin <= jmax ) then do j = jmin , jmax vj = Ic ( Ja ( j )) qm = np1 do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm == vj ) then !  ** error.. duplicate entry in a Flag = 2 * N + rk return endif luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm exit endif enddo enddo endif !   ******  link through jrl,  ****************************************** lastid = 0 lasti = 0 Iju ( k ) = juptr i = k i1 = Jrl ( k ) do i = i1 if ( i == 0 ) then !   ******  update jrl(k) and irl(k)  *********************************** if ( Il ( k + 1 ) > Il ( k ) ) then j = Jl ( Irl ( k )) Jrl ( k ) = Jrl ( j ) Jrl ( j ) = k endif !   ******  lasti is the longest row merged into the kth  *************** !   ******  see if it equals the entire kth row  ************************ qm = Q ( np1 ) if ( qm /= k ) then !  ** error.. null pivot Flag = 5 * N + k return endif LUKY : if ( luk /= 0 ) then if ( lastid /= luk ) then !   ******  if not, see if kth row can overlap the previous one  ******** KTHROW : if ( jumin <= juptr ) then qm = Q ( qm ) do j = jumin , juptr if ( Ju ( j ) < qm ) cycle if ( Ju ( j ) == qm ) then Iju ( k ) = j do i = j , juptr if ( Ju ( i ) /= qm ) exit KTHROW qm = Q ( qm ) if ( qm > N ) exit LUKY enddo juptr = j - 1 endif exit enddo endif KTHROW !   ******  move row indices from q to ju, update vectors  ************** jumin = juptr + 1 Iju ( k ) = jumin if ( luk /= 0 ) then juptr = juptr + luk if ( juptr > Jumax ) then !  ** error.. insufficient storage for ju Flag = 6 * N + k return else qm = Q ( np1 ) do j = jumin , juptr qm = Q ( qm ) Ju ( j ) = qm enddo endif endif else !   ******  if so, ju can be compressed  ******************************** irul = Iru ( lasti ) Iju ( k ) = irul + 1 if ( Ju ( irul ) /= k ) Iju ( k ) = Iju ( k ) - 1 endif endif LUKY Iru ( k ) = Iju ( k ) Iu ( k + 1 ) = Iu ( k ) + luk ! !   ******  update iru, jru  ******************************************** i = k exit LOOP else i1 = Jrl ( i ) qm = np1 jmin = Iru ( i ) jmax = Iju ( i ) + Iu ( i + 1 ) - Iu ( i ) - 1 long = jmax - jmin if ( long >= 0 ) then jtmp = Ju ( jmin ) if ( jtmp /= k ) then !   ******  update irl and jrl, ***************************************** long = long + 1 cend = Ijl ( i ) + Il ( i + 1 ) - Il ( i ) Irl ( i ) = Irl ( i ) + 1 if ( Irl ( i ) < cend ) then j = Jl ( Irl ( i )) Jrl ( i ) = Jrl ( j ) Jrl ( j ) = i endif endif if ( lastid < long ) then lasti = i lastid = long endif !   ******  and merge the corresponding rows into the kth row  ********** do j = jmin , jmax vj = Ju ( j ) do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm /= vj ) then luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm qm = vj endif exit endif enddo enddo endif endif enddo else qm = np1 jmin = Irl ( i ) jmax = Ijl ( i ) + Il ( i + 1 ) - Il ( i ) - 1 long = jmax - jmin if ( long >= 0 ) then jtmp = Jl ( jmin ) if ( jtmp /= k ) long = long + 1 if ( jtmp == k ) R ( i ) = - R ( i ) if ( lastid < long ) then lasti = i lastid = long endif !   ******  and merge the corresponding columns into the kth column  **** do j = jmin , jmax vj = Jl ( j ) do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm /= vj ) then luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm qm = vj endif exit endif enddo enddo endif endif enddo LOOP BACK : do i1 = Jru ( i ) if ( R ( i ) < 0 ) then R ( i ) = - R ( i ) else rend = Iju ( i ) + Iu ( i + 1 ) - Iu ( i ) if ( Iru ( i ) < rend ) then j = Ju ( Iru ( i )) Jru ( i ) = Jru ( j ) Jru ( j ) = i endif endif i = i1 if ( i == 0 ) then ! !   ******  update ira, jra, irac  ************************************** i = Irac ( k ) if ( i == 0 ) cycle ALL else Iru ( i ) = Iru ( i ) + 1 cycle BACK endif exit BACK enddo BACK INFINITE : do i1 = Jra ( i ) Ira ( i ) = Ira ( i ) + 1 if ( Ira ( i ) < Ia ( R ( i ) + 1 ) ) then irai = Ira ( i ) jairai = Ic ( Ja ( irai )) if ( jairai <= i ) then Jra ( i ) = Irac ( jairai ) Irac ( jairai ) = i endif endif i = i1 if ( i == 0 ) exit INFINITE enddo INFINITE enddo ALL ! Ijl ( N ) = jlptr Iju ( N ) = juptr Flag = 0 end subroutine nsfc","tags":"","loc":"proc/nsfc~2.html"},{"title":"dsrcms – odepack","text":"subroutine dsrcms(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSS01, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 224 or more. ISAV integer array of length 71 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Calls proc~~dsrcms~2~~CallsGraph proc~dsrcms~2 dsrcms return_dls1_real return_dls1_real proc~dsrcms~2->return_dls1_real return_dls1_int return_dls1_int proc~dsrcms~2->return_dls1_int set_dls1_real set_dls1_real proc~dsrcms~2->set_dls1_real set_dls1_int set_dls1_int proc~dsrcms~2->set_dls1_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables lenils lenrls Source Code dsrcms Variables Type Visibility Attributes Name Initial integer, public, parameter :: lenils = 37 integer, public, parameter :: lenrls = 218 Source Code subroutine dsrcms ( rsav , isav , job ) real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job integer , parameter :: lenils = 37 , lenrls = 218 select case ( job ) case ( 1 ) rsav ( 1 : lenrls ) = return_dls1_real () rsav ( 1 + lenrls ) = dlss % con0 rsav ( 2 + lenrls ) = dlss % conmin rsav ( 3 + lenrls ) = dlss % ccmxj rsav ( 4 + lenrls ) = dlss % psmall rsav ( 5 + lenrls ) = dlss % rbig rsav ( 6 + lenrls ) = dlss % seth isav ( 1 : lenils ) = return_dls1_int () isav ( 1 + lenils ) = dlss % iplost isav ( 2 + lenils ) = dlss % iesp isav ( 3 + lenils ) = dlss % istatc isav ( 4 + lenils ) = dlss % iys isav ( 5 + lenils ) = dlss % iba isav ( 6 + lenils ) = dlss % ibian isav ( 7 + lenils ) = dlss % ibjan isav ( 8 + lenils ) = dlss % ibjgp isav ( 9 + lenils ) = dlss % ipian isav ( 10 + lenils ) = dlss % ipjan isav ( 11 + lenils ) = dlss % ipjgp isav ( 12 + lenils ) = dlss % ipigp isav ( 13 + lenils ) = dlss % ipr isav ( 14 + lenils ) = dlss % ipc isav ( 15 + lenils ) = dlss % ipic isav ( 16 + lenils ) = dlss % ipisp isav ( 17 + lenils ) = dlss % iprsp isav ( 18 + lenils ) = dlss % ipa isav ( 19 + lenils ) = dlss % lenyh isav ( 20 + lenils ) = dlss % lenyhm isav ( 21 + lenils ) = dlss % lenwk isav ( 22 + lenils ) = dlss % lreq isav ( 23 + lenils ) = dlss % lrat isav ( 24 + lenils ) = dlss % lrest isav ( 25 + lenils ) = dlss % lwmin isav ( 26 + lenils ) = dlss % moss isav ( 27 + lenils ) = dlss % msbj isav ( 28 + lenils ) = dlss % nslj isav ( 29 + lenils ) = dlss % ngp isav ( 30 + lenils ) = dlss % nlu isav ( 31 + lenils ) = dlss % nnz isav ( 32 + lenils ) = dlss % nsp isav ( 33 + lenils ) = dlss % nzl isav ( 34 + lenils ) = dlss % nzu case ( 2 ) call set_dls1_real ( rsav ( 1 : lenrls )) dlss % con0 = rsav ( 1 + lenrls ) dlss % conmin = rsav ( 2 + lenrls ) dlss % ccmxj = rsav ( 3 + lenrls ) dlss % psmall = rsav ( 4 + lenrls ) dlss % rbig = rsav ( 5 + lenrls ) dlss % seth = rsav ( 6 + lenrls ) call set_dls1_int ( isav ( 1 : lenils )) dlss % iplost = isav ( 1 + lenils ) dlss % iesp = isav ( 2 + lenils ) dlss % istatc = isav ( 3 + lenils ) dlss % iys = isav ( 4 + lenils ) dlss % iba = isav ( 5 + lenils ) dlss % ibian = isav ( 6 + lenils ) dlss % ibjan = isav ( 7 + lenils ) dlss % ibjgp = isav ( 8 + lenils ) dlss % ipian = isav ( 9 + lenils ) dlss % ipjan = isav ( 10 + lenils ) dlss % ipjgp = isav ( 11 + lenils ) dlss % ipigp = isav ( 12 + lenils ) dlss % ipr = isav ( 13 + lenils ) dlss % ipc = isav ( 14 + lenils ) dlss % ipic = isav ( 15 + lenils ) dlss % ipisp = isav ( 16 + lenils ) dlss % iprsp = isav ( 17 + lenils ) dlss % ipa = isav ( 18 + lenils ) dlss % lenyh = isav ( 19 + lenils ) dlss % lenyhm = isav ( 20 + lenils ) dlss % lenwk = isav ( 21 + lenils ) dlss % lreq = isav ( 22 + lenils ) dlss % lrat = isav ( 23 + lenils ) dlss % lrest = isav ( 24 + lenils ) dlss % lwmin = isav ( 25 + lenils ) dlss % moss = isav ( 26 + lenils ) dlss % msbj = isav ( 27 + lenils ) dlss % nslj = isav ( 28 + lenils ) dlss % ngp = isav ( 29 + lenils ) dlss % nlu = isav ( 30 + lenils ) dlss % nnz = isav ( 31 + lenils ) dlss % nsp = isav ( 32 + lenils ) dlss % nzl = isav ( 33 + lenils ) dlss % nzu = isav ( 34 + lenils ) case default write ( * , * ) '<ERROR>*dsrcms* unknown value for JOB=' , job stop 1 end select end subroutine dsrcms","tags":"","loc":"proc/dsrcms~2.html"},{"title":"nnsc – odepack","text":"subroutine nnsc(N, R, C, Il, Jl, Ijl, L, D, Iu, Ju, Iju, U, Z, B, Tmp) subroutine nnsc numerical solution of sparse nonsymmetric system of linear equations given ldu - factorization ( compressed pointer storage ) input variables .. n , r , c , il , jl , ijl , l , d , iu , ju , iju , u , b output variables .. z parameters used internally .. fia   - tmp   - temporary vector which gets result of solving  ly = b.\n       -           size = n. internal variables.. jmin, jmax - indices of the first and last positions in a row of\n  u or l  to be used. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: R integer, intent(in), dimension(*) :: C integer, intent(in), dimension(*) :: Il integer, intent(in), dimension(*) :: Jl integer, intent(in), dimension(*) :: Ijl real(kind=dp), intent(in), dimension(*) :: L real(kind=dp), intent(in), dimension(*) :: D integer, intent(in), dimension(*) :: Iu integer, intent(in), dimension(*) :: Ju integer, intent(in), dimension(*) :: Iju real(kind=dp), intent(in), dimension(*) :: U real(kind=dp), intent(out), dimension(*) :: Z real(kind=dp), intent(in), dimension(*) :: B real(kind=dp), intent(inout), dimension(*) :: Tmp Called by proc~~nnsc~2~~CalledByGraph proc~nnsc~2 nnsc proc~cdrv~2 cdrv proc~cdrv~2->proc~nnsc~2 none~wrapup~3 wrapup none~wrapup~3->proc~cdrv~2 proc~dprjis~2 dprjis proc~dprjis~2->proc~cdrv~2 proc~dsolss~2 dsolss proc~dsolss~2->proc~cdrv~2 proc~dprjs~2 dprjs proc~dprjs~2->none~wrapup~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i j jmax jmin k ml mu sum tmpk Source Code nnsc Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: j integer, public :: jmax integer, public :: jmin integer, public :: k integer, public :: ml integer, public :: mu real(kind=dp), public :: sum real(kind=dp), public :: tmpk Source Code subroutine nnsc ( N , R , C , Il , Jl , Ijl , L , D , Iu , Ju , Iju , U , Z , B , Tmp ) ! !      real l(*), d(*), u(*), b(*), z(*), tmp(*), tmpk, sum integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: R integer , intent ( in ) , dimension ( * ) :: C integer , intent ( in ) , dimension ( * ) :: Il integer , intent ( in ) , dimension ( * ) :: Jl integer , intent ( in ) , dimension ( * ) :: Ijl real ( kind = dp ) , intent ( in ) , dimension ( * ) :: L real ( kind = dp ) , intent ( in ) , dimension ( * ) :: D integer , intent ( in ) , dimension ( * ) :: Iu integer , intent ( in ) , dimension ( * ) :: Ju integer , intent ( in ) , dimension ( * ) :: Iju real ( kind = dp ) , intent ( in ) , dimension ( * ) :: U real ( kind = dp ) , intent ( out ) , dimension ( * ) :: Z real ( kind = dp ) , intent ( in ) , dimension ( * ) :: B real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Tmp ! integer :: i , j , jmax , jmin , k , ml , mu real ( kind = dp ) :: sum , tmpk ! !   ******  set tmp to reordered b  ************************************* do k = 1 , N Tmp ( k ) = B ( R ( k )) enddo !   ******  solve  ly = b  by forward substitution  ********************* do k = 1 , N jmin = Il ( k ) jmax = Il ( k + 1 ) - 1 tmpk = - D ( k ) * Tmp ( k ) Tmp ( k ) = - tmpk if ( jmin <= jmax ) then ml = Ijl ( k ) - jmin do j = jmin , jmax Tmp ( Jl ( ml + j )) = Tmp ( Jl ( ml + j )) + tmpk * L ( j ) enddo endif enddo !   ******  solve  ux = y  by back substitution  ************************ k = N do i = 1 , N sum = - Tmp ( k ) jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax sum = sum + U ( j ) * Tmp ( Ju ( mu + j )) enddo endif Tmp ( k ) = - sum Z ( C ( k )) = - sum k = k - 1 enddo end subroutine nnsc","tags":"","loc":"proc/nnsc~2.html"},{"title":"dstode – odepack","text":"subroutine dstode(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) Uses M_odepack proc~~dstode~2~~UsesGraph proc~dstode~2 dstode module~m_odepack M_odepack proc~dstode~2->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. NAME dstode(3f) - [M_odepack] Performs one step of an ODEPACK integration. DESCRIPTION DSTODE performs one step of the integration of an initial value\n  problem for a system of ordinary differential equations. Note:  DSTODE is independent of the value of the iteration method\n  indicator MITER, when this is .ne. 0, and hence is independent\n  of the type of chord method used, or the Jacobian structure. Communication with DSTODE is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\n  passed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\n  all calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\n  and their approximate scaled derivatives, where\n  LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\n  j-th derivative of y(i), scaled by h**j/factorial(j)\n  (j = 0,1,…,NQ).  on entry for the first step, the first\n  two columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\n  for local error measurements.  Local errors in Y(i) are\n  compared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\n  Also used for input of YH(*,MAXORD+2) when JSTART = -1\n  and MAXORD .lt. the current order NQ. ACOR a work array of length N, used for the accumulated\n  corrections.  On a successful return, ACOR(i) contains\n  the estimated one-step local error in Y(i). WM,IWM real and integer work arrays associated with matrix\n  operations in chord iteration (MITER .ne. 0). PJAC name of routine to evaluate and preprocess Jacobian matrix\n  and P = I - h el0 JAC, if a chord method is being used. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in h*el0 before PJAC is called. H the step size to be attempted on the next step.\n  H is altered by the error control algorithm during the\n  problem.  H can be either positive or negative, but its\n  sign must remain constant throughout the problem. HMIN the minimum absolute value of the step size h to be used. HMXI inverse of the maximum absolute value of h to be used.\n  HMXI = 0.0 is allowed and corresponds to an infinite hmax.\n  HMIN and HMXI may be changed at any time, but will not\n  take effect until the next change of h is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\n  values and meanings:\n            0  perform the first step.\n        .gt.0  take a new step continuing from the last.\n           -1  take the next step with a new value of H, MAXORD,\n               N, METH, MITER, and/or matrix parameters.\n           -2  take the next step with a new value of H,\n               but with other inputs unchanged.\n  On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings:\n        0  the step was succesful.\n       -1  the requested error could not be achieved.\n       -2  corrector convergence could not be achieved.\n       -3  fatal error in PJAC or SLVS. A return with KFLAG = -1 or -2 means either\n  abs(H) = HMIN or 10 consecutive failures occurred.\n  On a return with KFLAG negative, the values of TN and\n  the YH array are as of the beginning of the last\n  step, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH/MITER the method flags.  See description in driver. N the number of first-order differential equations. The values of CCMAX, H, HMIN, HMXI, TN, JSTART, KFLAG, MAXORD,\n  MAXCOR, MSBP, MXNCF, METH, MITER, and N are communicated via COMMON. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs Calls proc~~dstode~2~~CallsGraph proc~dstode~2 dstode proc~dcfode dcfode proc~dstode~2->proc~dcfode proc~dvnorm dvnorm proc~dstode~2->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dp dsm dup exdn exsm exup i i1 iredo iret j jb m ncf newq r rh rhdn rhsm rhup told Source Code dstode Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: iret integer, public :: j integer, public :: jb integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told Source Code subroutine dstode ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Acor , Wm , Iwm , f , jac , pjac , slvs ) use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer :: Nyh real ( kind = dp ), intent ( inout ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( inout ) :: Yh1 ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Acor ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external f external jac external pjac external slvs real ( kind = dp ) :: dcon , ddn , del , delp , dsm , dup , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , told integer :: i , i1 , iredo , iret , j , jb , m , ncf , newq dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set to 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal Triangle matrix. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !  When RC differs from 1 by more than CCMAX, IPUP is set to MITER !  to force PJAC to be called, if a Jacobian is involved. !  In any case, PJAC is called at least every MSBP steps. !----------------------------------------------------------------------- 400 continue if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! dir$ ivdep do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the R.M.S. norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, the matrix P = I - dls1%h*dls1%el(1)*J is reevaluated and !  preprocessed before starting the corrector iteration.  IPUP is set !  to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call pjac ( Neq , Y , Yh , Nyh , Ewt , Acor , Savf , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls1 % miter /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix. !----------------------------------------------------------------------- do i = 1 , dls1 % n Y ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo call slvs ( Wm , Iwm , Y , Savf ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Y ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo endif !----------------------------------------------------------------------- !  Test for convergence.  If M.gt.0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. !----------------------------------------------------------------------- if ( m /= 0 ) dls1 % crate = max ( 0.2D0 * dls1 % crate , del / delp ) dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / ( dls1 % tesco ( 2 , dls1 % nq ) * dls1 % conit ) if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! dir$ ivdep do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1300 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  The largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If MITER .ne. 0 and the Jacobian is out of date, PJAC is called for !  the next try.  Otherwise the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue if ( dls1 % miter /= 0 . and . dls1 % jcur /= 1 ) then dls1 % icf = 1 dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! dir$ ivdep do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1300 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1300 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1300 else rh = 0.25D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, dls1%l, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1200 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstode","tags":"","loc":"proc/dstode~2.html"},{"title":"nntc – odepack","text":"subroutine nntc(N, R, C, Il, Jl, Ijl, L, D, Iu, Ju, Iju, U, Z, B, Tmp) subroutine nntc DESCRIPTION numeric solution of the transpose of a sparse nonsymmetric system\n   of linear equations given lu-factorization (compressed pointer\n   storage) input variables .. n , r , c , il , jl , ijl , l , d , iu , ju , iju , u , b output variables .. z parameters used internally .. fia   - tmp   - temporary vector which gets result of solving ut y = b\n       -           size = n. internal variables..\n    jmin, jmax - indices of the first and last positions in a row of\n      u or l  to be used. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: R integer, intent(in), dimension(*) :: C integer, intent(in), dimension(*) :: Il integer, intent(in), dimension(*) :: Jl integer, intent(in), dimension(*) :: Ijl real(kind=dp), intent(in), dimension(*) :: L real(kind=dp), intent(in), dimension(*) :: D integer, intent(in), dimension(*) :: Iu integer, intent(in), dimension(*) :: Ju integer, intent(in), dimension(*) :: Iju real(kind=dp), intent(in), dimension(*) :: U real(kind=dp), intent(out), dimension(*) :: Z real(kind=dp), intent(in), dimension(*) :: B real(kind=dp), intent(inout), dimension(*) :: Tmp Called by proc~~nntc~2~~CalledByGraph proc~nntc~2 nntc proc~cdrv~2 cdrv proc~cdrv~2->proc~nntc~2 none~wrapup~3 wrapup none~wrapup~3->proc~cdrv~2 proc~dprjis~2 dprjis proc~dprjis~2->proc~cdrv~2 proc~dsolss~2 dsolss proc~dsolss~2->proc~cdrv~2 proc~dprjs~2 dprjs proc~dprjs~2->none~wrapup~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i j jmax jmin k ml mu sum tmpk Source Code nntc Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: j integer, public :: jmax integer, public :: jmin integer, public :: k integer, public :: ml integer, public :: mu real(kind=dp), public :: sum real(kind=dp), public :: tmpk Source Code subroutine nntc ( N , R , C , Il , Jl , Ijl , L , D , Iu , Ju , Iju , U , Z , B , Tmp ) ! !      real l(*), d(*), u(*), b(*), z(*), tmp(*), tmpk,sum integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: R integer , intent ( in ) , dimension ( * ) :: C integer , intent ( in ) , dimension ( * ) :: Il integer , intent ( in ) , dimension ( * ) :: Jl integer , intent ( in ) , dimension ( * ) :: Ijl real ( kind = dp ) , intent ( in ) , dimension ( * ) :: L real ( kind = dp ) , intent ( in ) , dimension ( * ) :: D integer , intent ( in ) , dimension ( * ) :: Iu integer , intent ( in ) , dimension ( * ) :: Ju integer , intent ( in ) , dimension ( * ) :: Iju real ( kind = dp ) , intent ( in ) , dimension ( * ) :: U real ( kind = dp ) , intent ( out ) , dimension ( * ) :: Z real ( kind = dp ) , intent ( in ) , dimension ( * ) :: B real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Tmp ! integer :: i , j , jmax , jmin , k , ml , mu real ( kind = dp ) :: sum , tmpk ! !   ******  set tmp to reordered b  ************************************* do k = 1 , N Tmp ( k ) = B ( C ( k )) enddo !   ******  solve  ut y = b  by forward substitution  ******************* do k = 1 , N jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 tmpk = - Tmp ( k ) if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax Tmp ( Ju ( mu + j )) = Tmp ( Ju ( mu + j )) + tmpk * U ( j ) enddo endif enddo !   ******  solve  lt x = y  by back substitution  ********************** k = N do i = 1 , N sum = - Tmp ( k ) jmin = Il ( k ) jmax = Il ( k + 1 ) - 1 if ( jmin <= jmax ) then ml = Ijl ( k ) - jmin do j = jmin , jmax sum = sum + L ( j ) * Tmp ( Jl ( ml + j )) enddo endif Tmp ( k ) = - sum * D ( k ) Z ( R ( k )) = Tmp ( k ) k = k - 1 enddo end subroutine nntc","tags":"","loc":"proc/nntc~2.html"},{"title":"dstoda – odepack","text":"subroutine dstoda(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) DSTODA performs one step of the integration of an initial value\nproblem for a system of ordinary differential equations. Note: DSTODA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTODA is done with the following variables: Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). PJAC name of routine to evaluate and preprocess Jacobian matrix\nand P = I - H EL0 Jac, if a chord method is being used.\nIt also returns an estimate of norm(Jac) in PDNORM. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in H*EL0 before PJAC is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings:\n              0  perform the first step.\n          .gt.0  take a new step continuing from the last.\n             -1  take the next step with a new value of H,\n                   N, METH, MITER, and/or matrix parameters.\n             -2  take the next step with a new value of H,\n                   but with other inputs unchanged.\n         On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings:\n          0  the step was succesful.\n         -1  the requested error could not be achieved.\n         -2  corrector convergence could not be achieved.\n         -3  fatal error in PJAC or SLVS. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH current method.\n     METH = 1 means Adams method (nonstiff)\n     METH = 2 means BDF method (stiff)\n     METH may be reset by DSTODA. MITER corrector iteration method.\nMITER = 0 means functional iteration.\nMITER = JT .gt. 0 means a chord iteration corresponding\nto Jacobian type JT.  (The DLSODA/DLSODAR argument JT is\ncommunicated here as JTYP, but is not used in DSTODA\nexcept to load MITER following a method switch.)\nMITER may be reset by DSTODA. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs Calls proc~~dstoda~2~~CallsGraph proc~dstoda~2 dstoda proc~dcfode~2 dcfode proc~dstoda~2->proc~dcfode~2 proc~dmnorm~2 dmnorm proc~dstoda~2->proc~dmnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstoda~2~~CalledByGraph proc~dstoda~2 dstoda proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dstoda~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~dstoda~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables alpha dcon ddn del delp dm1 dm2 dsm dup exdn exm1 exm2 exsm exup i i1 iredo iret j jb lm1 lm1p1 lm2 lm2p1 m ncf newq nqm1 nqm2 pdh pnorm r rate rh rh1 rh1it rh2 rhdn rhsm rhup rm sm1 told Source Code dstoda Variables Type Visibility Attributes Name Initial real(kind=dp), public :: alpha real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp real(kind=dp), public :: dm1 real(kind=dp), public :: dm2 real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: exdn real(kind=dp), public :: exm1 real(kind=dp), public :: exm2 real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: iret integer, public :: j integer, public :: jb integer, public :: lm1 integer, public :: lm1p1 integer, public :: lm2 integer, public :: lm2p1 integer, public :: m integer, public :: ncf integer, public :: newq integer, public :: nqm1 integer, public :: nqm2 real(kind=dp), public :: pdh real(kind=dp), public :: pnorm real(kind=dp), public :: r real(kind=dp), public :: rate real(kind=dp), public :: rh real(kind=dp), public :: rh1 real(kind=dp), public :: rh1it real(kind=dp), public :: rh2 real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: rm real(kind=dp), public, parameter :: sm1 (12) = [0.5D0, 0.575D0, 0.55D0, 0.45D0, 0.35D0, 0.25D0, 0.20D0, 0.15D0, 0.10D0, 0.075D0, 0.050D0, 0.025D0] real(kind=dp), public :: told Source Code subroutine dstoda ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Acor , Wm , Iwm , f , jac , pjac , slvs ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer :: Nyh real ( kind = dp ), intent ( inout ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( inout ) :: Yh1 ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Acor ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external f external jac external pjac external slvs real ( kind = dp ) :: alpha , dcon , ddn , del , delp , dm1 , dm2 , dsm , dup , exdn , exm1 , exm2 , exsm , exup , pdh , pnorm , r , & & rate , rh , rh1 , rh1it , rh2 , rhdn , rhsm , rhup , rm , told integer :: i , i1 , iredo , iret , j , jb , lm1 , lm1p1 , lm2 , lm2p1 , m , ncf , newq , nqm1 , nqm2 real ( kind = dp ), parameter :: sm1 ( 12 ) = & & [ 0.5D0 , 0.575D0 , 0.55D0 , 0.45D0 , 0.35D0 , 0.25D0 , 0.20D0 , 0.15D0 , 0.10D0 , 0.075D0 , 0.050D0 , 0.025D0 ] dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth == dlsa % mused ) goto 200 call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % ialth = dls1 % l iret = 1 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !  DCFODE is called to get the needed coefficients for both methods. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !  Initialize switching parameters.  METH = 1 is assumed initially. ----- dlsa % icount = 20 dlsa % irflag = 0 dlsa % pdest = 0.0D0 dlsa % pdlast = 0.0D0 dlsa % ratio = 5.0D0 call dcfode ( 2 , dls1 % elco , dls1 % tesco ) do i = 1 , 5 dlsa % cm2 ( i ) = dls1 % tesco ( 2 , i ) * dls1 % elco ( i + 1 , i ) enddo call dcfode ( 1 , dls1 % elco , dls1 % tesco ) do i = 1 , 12 dlsa % cm1 ( i ) = dls1 % tesco ( 2 , i ) * dls1 % elco ( i + 1 , i ) enddo endif !----------------------------------------------------------------------- !  The dls1%el vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) !----------------------------------------------------------------------- !  If METH = 1, also restrict the new step size by the stability region. !  If this reduces H, set IRFLAG to 1 so that if there are roundoff !  problems later, we can assume that is the cause of the trouble. !----------------------------------------------------------------------- if ( dls1 % meth /= 2 ) then dlsa % irflag = 0 pdh = max ( abs ( dls1 % h ) * dlsa % pdlast , 0.000001D0 ) if ( rh * pdh * 1.00001D0 >= sm1 ( dls1 % nq ) ) then rh = sm1 ( dls1 % nq ) / pdh dlsa % irflag = 1 endif endif r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1300 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !  When RC differs from 1 by more than CCMAX, IPUP is set to MITER !  to force PJAC to be called, if a Jacobian is involved. !  In any case, PJAC is called at least every MSBP steps. !----------------------------------------------------------------------- 400 continue if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo pnorm = dmnorm ( dls1 % n , Yh1 , Ewt ) !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 rate = 0.0D0 del = 0.0D0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, the matrix P = I - H*EL(1)*J is reevaluated and !  preprocessed before starting the corrector iteration.  IPUP is set !  to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call pjac ( Neq , Y , Yh , Nyh , Ewt , Acor , Savf , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls1 % miter /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix. !----------------------------------------------------------------------- do i = 1 , dls1 % n Y ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo call slvs ( Wm , Iwm , Y , Savf ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dmnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Y ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dmnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo endif !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. ! !  We first check for a change of iterates that is the size of !  roundoff error.  If this occurs, the iteration has converged, and a !  new rate estimate is not formed. !  In all other cases, force at least two iterations to estimate a !  local Lipschitz constant estimate for Adams methods. !  On convergence, form PDEST = local maximum Lipschitz constant !  estimate.  PDLAST is the most recent nonzero estimate. !----------------------------------------------------------------------- if ( del <= 10 0.0D0 * pnorm * dls1 % uround ) goto 900 if ( m /= 0 . or . dls1 % meth /= 1 ) then if ( m /= 0 ) then rm = 102 4.0D0 if ( del <= 102 4.0D0 * delp ) rm = del / delp rate = max ( rate , rm ) dls1 % crate = max ( 0.2D0 * dls1 % crate , rm ) endif dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / ( dls1 % tesco ( 2 , dls1 % nq ) * dls1 % conit ) if ( dcon <= 1.0D0 ) then dlsa % pdest = max ( dlsa % pdest , rate / abs ( dls1 % h * dls1 % el ( 1 ))) if ( dlsa % pdest /= 0.0D0 ) dlsa % pdlast = dlsa % pdest goto 900 endif endif m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If MITER .ne. 0 and the Jacobian is out of date, PJAC is called for !  the next try.  Otherwise the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue if ( dls1 % miter /= 0 . and . dls1 % jcur /= 1 ) then dls1 % icf = 1 dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1400 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1400 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1400 else rh = 0.25D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- 900 continue dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dmnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1400 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1400 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Decrease ICOUNT by 1, and if it is -1, consider switching methods. !  If a method switch is made, reset various parameters, !  rescale the YH array, and exit.  If there is no switch, !  consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq dlsa % mused = dls1 % meth do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dlsa % icount = dlsa % icount - 1 if ( dlsa % icount < 0 ) then if ( dls1 % meth == 2 ) then !----------------------------------------------------------------------- !  We are currently using a BDF method.  Consider switching to Adams. !  Compute the step size we could have (ideally) used on this step, !  with the current (BDF) method, and also that for the Adams. !  If NQ .gt. MXORDN, we consider changing to order MXORDN on switching. !  Compare the two step sizes to decide whether to switch. !  The step size advantage must be at least 5/RATIO = 1 to switch. !  If the step size for Adams would be so small as to cause !  roundoff pollution, we stay with BDF. !----------------------------------------------------------------------- exsm = 1.0D0 / dls1 % l if ( dlsa % mxordn >= dls1 % nq ) then dm1 = dsm * ( dlsa % cm2 ( dls1 % nq ) / dlsa % cm1 ( dls1 % nq )) rh1 = 1.0D0 / ( 1.2D0 * dm1 ** exsm + 0.0000012D0 ) nqm1 = dls1 % nq exm1 = exsm else nqm1 = dlsa % mxordn lm1 = dlsa % mxordn + 1 exm1 = 1.0D0 / lm1 lm1p1 = lm1 + 1 dm1 = dmnorm ( dls1 % n , Yh ( 1 , lm1p1 ), Ewt ) / dlsa % cm1 ( dlsa % mxordn ) rh1 = 1.0D0 / ( 1.2D0 * dm1 ** exm1 + 0.0000012D0 ) endif rh1it = 2.0D0 * rh1 pdh = dlsa % pdnorm * abs ( dls1 % h ) if ( pdh * rh1 > 0.00001D0 ) rh1it = sm1 ( nqm1 ) / pdh rh1 = min ( rh1 , rh1it ) rh2 = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) if ( rh1 * dlsa % ratio >= 5.0D0 * rh2 ) then alpha = max ( 0.001D0 , rh1 ) dm1 = ( alpha ** exm1 ) * dm1 if ( dm1 > 100 0.0D0 * dls1 % uround * pnorm ) then !  The switch test passed.  Reset relevant quantities for Adams. -------- rh = rh1 dlsa % icount = 20 dls1 % meth = 1 dls1 % miter = 0 dlsa % pdlast = 0.0D0 dls1 % nq = nqm1 dls1 % l = dls1 % nq + 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif !----------------------------------------------------------------------- !  We are currently using an Adams method.  Consider switching to BDF. !  If the current order is greater than 5, assume the problem is !  not stiff, and skip this section. !  If the Lipschitz constant and error estimate are not polluted !  by roundoff, go to 470 and perform the usual test. !  Otherwise, switch to the BDF methods if the last step was !  restricted to insure stability (dlsa%irflag = 1), and stay with Adams !  method if not.  When switching to BDF with polluted error estimates, !  in the absence of other information, double the step size. ! !  When the estimates are OK, we make the usual test by computing !  the step size we could have (ideally) used on this step, !  with the current (Adams) method, and also that for the BDF. !  If NQ .gt. MXORDS, we consider changing to order MXORDS on switching. !  Compare the two step sizes to decide whether to switch. !  The step size advantage must be at least RATIO = 5 to switch. !----------------------------------------------------------------------- elseif ( dls1 % nq <= 5 ) then if ( dsm > 10 0.0D0 * pnorm * dls1 % uround . and . dlsa % pdest /= 0.0D0 ) then exsm = 1.0D0 / dls1 % l rh1 = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rh1it = 2.0D0 * rh1 pdh = dlsa % pdlast * abs ( dls1 % h ) if ( pdh * rh1 > 0.00001D0 ) rh1it = sm1 ( dls1 % nq ) / pdh rh1 = min ( rh1 , rh1it ) if ( dls1 % nq <= dlsa % mxords ) then dm2 = dsm * ( dlsa % cm1 ( dls1 % nq ) / dlsa % cm2 ( dls1 % nq )) rh2 = 1.0D0 / ( 1.2D0 * dm2 ** exsm + 0.0000012D0 ) nqm2 = dls1 % nq else nqm2 = dlsa % mxords lm2 = dlsa % mxords + 1 exm2 = 1.0D0 / lm2 lm2p1 = lm2 + 1 dm2 = dmnorm ( dls1 % n , Yh ( 1 , lm2p1 ), Ewt ) / dlsa % cm2 ( dlsa % mxords ) rh2 = 1.0D0 / ( 1.2D0 * dm2 ** exm2 + 0.0000012D0 ) endif if ( rh2 < dlsa % ratio * rh1 ) goto 950 else if ( dlsa % irflag == 0 ) goto 950 rh2 = 2.0D0 nqm2 = min ( dls1 % nq , dlsa % mxords ) endif !  THE SWITCH TEST PASSED.  RESET RELEVANT QUANTITIES FOR BDF. ---------- rh = rh2 dlsa % icount = 20 dls1 % meth = 2 dls1 % miter = dlsa % jtyp dlsa % pdlast = 0.0D0 dls1 % nq = nqm2 dls1 % l = dls1 % nq + 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif ! !  No method switch is being made.  Do the usual step/order selection. -- 950 continue dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  The largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dmnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1300 endif endif exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dmnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif !  If METH = 1, limit RH according to the stability region also. -------- if ( dls1 % meth /= 2 ) then pdh = max ( abs ( dls1 % h ) * dlsa % pdlast , 0.000001D0 ) if ( dls1 % l < dls1 % lmax ) rhup = min ( rhup , sm1 ( dls1 % l ) / pdh ) rhsm = min ( rhsm , sm1 ( dls1 % nq ) / pdh ) if ( dls1 % nq > 1 ) rhdn = min ( rhdn , sm1 ( dls1 % nq - 1 ) / pdh ) dlsa % pdest = 0.0D0 endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1300 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1200 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 !  If METH = 1 and H is restricted by stability, bypass 10 percent test. 1000 continue if ( dls1 % meth /= 2 ) then if ( rh * pdh * 1.00001D0 >= sm1 ( newq ) ) goto 1100 endif if ( dls1 % kflag == 0 . and . rh < 1.1D0 ) then dls1 % ialth = 3 goto 1300 endif 1100 continue if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 1200 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1300 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1400 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstoda","tags":"","loc":"proc/dstoda~2.html"},{"title":"dspiom – odepack","text":"subroutine dspiom(Neq, Tn, Y, Savf, B, Wght, N, Maxl, Kmp, Delta, Hl0, Jpre, Mnewt, f, psol, Npsl, X, V, Hes, Ipvt, Liom, Wp, Iwp, Wk, Iflag) This routine solves the linear system A * x = b using a scaled\n preconditioned version of the Incomplete Orthogonalization Method.\n An initial guess of x = 0 is assumed. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). TN current value of t. Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). B the right hand side of the system A x = b.\n B is also used as work space when computing the\n final approximation.\n (B is the same as V( ,MAXL+1) in the call to DSPIOM.) WGHT array of length N containing scale factors.\n 1/WGHT(i) are the diagonal elements of the diagonal\n scaling matrix D. N the order of the matrix A, and the lengths\n of the vectors Y, SAVF, B, WGHT, and X. MAXL the maximum allowable order of the matrix HES. KMP the number of previous vectors the new vector VNEW\n must be made orthogonal to.  KMP .le. MAXL. DELTA tolerance on residuals b - A*x in weighted RMS-norm. HL0 current value of (step size h) * (coefficient l0). JPRE preconditioner type flag. MNEWT Newton iteration counter (.ge. 0). WK real work array of length N used by DATV and PSOL. WP real work array used by preconditioner PSOL. IWP integer work array used by preconditioner PSOL. On return X the final computed approximation to the solution\n of the system A*x = b. V the N by (LIOM+1) array containing the LIOM\n orthogonal vectors V( ,1) to V( ,LIOM). HES the LU factorization of the LIOM by LIOM upper\n Hessenberg matrix whose entries are the\n scaled inner products of A V( ,k) and V(*,i). IPVT an integer array containg pivoting information.\n It is loaded in DHEFA and used in DHESL. LIOM the number of iterations performed, and current\n order of the upper Hessenberg matrix HES. NPSL the number of calls to PSOL. IFLAG integer error flag: 0 means convergence in LIOM iterations , LIOM . le . MAXL . 1 means the convergence test did not pass in MAXL iterations , but the residual norm is . lt . 1 , or . lt . norm ( b ) if MNEWT = 0 , and so X is computed . 2 means the convergence test did not pass in MAXL iterations , residual . gt . 1 , and X is undefined . 3 means there was a recoverable error in PSOL caused by the preconditioner being out of date . - 1 means there was a nonrecoverable error in PSOL . Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp) :: Tn real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: B real(kind=dp), dimension(*) :: Wght integer :: N integer :: Maxl integer :: Kmp real(kind=dp), intent(inout) :: Delta real(kind=dp) :: Hl0 integer :: Jpre integer, intent(in) :: Mnewt real :: f real :: psol integer, intent(out) :: Npsl real(kind=dp), dimension(*) :: X real(kind=dp), dimension(N,*) :: V real(kind=dp), intent(inout), dimension(Maxl,Maxl) :: Hes integer, dimension(*) :: Ipvt integer, intent(out) :: Liom real(kind=dp), dimension(*) :: Wp integer, dimension(*) :: Iwp real(kind=dp), dimension(*) :: Wk integer, intent(out) :: Iflag Calls proc~~dspiom~2~~CallsGraph proc~dspiom~2 dspiom proc~dnrm2~2 DNRM2 proc~dspiom~2->proc~dnrm2~2 proc~datv~2 datv proc~dspiom~2->proc~datv~2 none~approximate~2 approximate proc~dspiom~2->none~approximate~2 proc~dhefa~2 dhefa proc~dspiom~2->proc~dhefa~2 proc~dscal~2 dscal proc~dspiom~2->proc~dscal~2 proc~dorthog~2 dorthog proc~dspiom~2->proc~dorthog~2 proc~datv~2->proc~dnrm2~2 proc~daxpy~2 daxpy none~approximate~2->proc~daxpy~2 x x none~approximate~2->x wght wght none~approximate~2->wght b b none~approximate~2->b v v none~approximate~2->v proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 psol psol none~approximate~2->psol proc~dhefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~ddot~2 ddot proc~dorthog~2->proc~ddot~2 proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dspiom~2~~CalledByGraph proc~dspiom~2 dspiom proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspiom~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables bnrm bnrm0 i ier info j k ll lm1 prod rho snormw tem Subroutines approximate Source Code dspiom Variables Type Visibility Attributes Name Initial real(kind=dp), public :: bnrm real(kind=dp), public :: bnrm0 integer, public :: i integer, public :: ier integer, public :: info integer, public :: j integer, public :: k integer, public :: ll integer, public :: lm1 real(kind=dp), public :: prod real(kind=dp), public :: rho real(kind=dp), public :: snormw real(kind=dp), public :: tem Subroutines subroutine approximate() Arguments None Source Code subroutine dspiom ( Neq , Tn , Y , Savf , B , Wght , N , Maxl , Kmp , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , V , Hes , Ipvt , Liom , Wp , Iwp , Wk , Iflag ) ! integer , dimension ( * ) :: Neq real ( kind = dp ) :: Tn real ( kind = dp ) , dimension ( * ) :: Y real ( kind = dp ) , dimension ( * ) :: Savf real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: B real ( kind = dp ) , dimension ( * ) :: Wght integer :: N integer :: Maxl integer :: Kmp real ( kind = dp ) , intent ( inout ) :: Delta real ( kind = dp ) :: Hl0 integer :: Jpre integer , intent ( in ) :: Mnewt external :: f ! real ( kind = dp ) :: bnrm , bnrm0 , prod , rho , snormw , tem real ( kind = dp ) , intent ( inout ) , dimension ( Maxl , Maxl ) :: Hes integer :: i , ier , info , j , k , ll , lm1 integer , intent ( out ) :: Iflag , Liom , Npsl integer , dimension ( * ) :: Ipvt , Iwp real ( kind = dp ) , dimension ( N , * ) :: V real ( kind = dp ) , dimension ( * ) :: Wk , Wp , X external psol ! Iflag = 0 Liom = 0 Npsl = 0 !----------------------------------------------------------------------- !  The initial residual is the vector b.  Apply scaling to b, and test !  for an immediate return with X = 0 or X = b. !----------------------------------------------------------------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm0 = dnrm2 ( N , V , 1 ) bnrm = bnrm0 IFDELTA : if ( bnrm0 > Delta ) then !  Apply inverse of left preconditioner to vector b. -------------------- ier = 0 if ( Jpre /= 0 . and . Jpre /= 2 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , B , 1 , ier ) Npsl = 1 if ( ier /= 0 ) then !  This block handles error returns forced by routine PSOL. if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif !  Calculate norm of scaled vector V(*,1) and normalize it. ------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm = dnrm2 ( N , V , 1 ) Delta = Delta * ( bnrm / bnrm0 ) endif tem = 1.0D0 / bnrm call dscal ( N , tem , V ( 1 , 1 ), 1 ) !  Zero out the HES array. ---------------------------------------------- do j = 1 , Maxl do i = 1 , Maxl Hes ( i , j ) = 0.0D0 enddo enddo !----------------------------------------------------------------------- !  Main loop on LL = l to compute the vectors V(*,2) to V(*,MAXL). !  The running product PROD is needed for the convergence test. !----------------------------------------------------------------------- prod = 1.0D0 do ll = 1 , Maxl Liom = ll !----------------------------------------------------------------------- !  Call routine DATV to compute VNEW = Abar*v(l), where Abar is !  the matrix A with scaling and inverse preconditioner factors applied. !  Call routine DORTHOG to orthogonalize the new vector vnew = V(*,l+1). !  Call routine DHEFA to update the factors of HES. !----------------------------------------------------------------------- call datv ( Neq , Y , Savf , V ( 1 , ll ), Wght , X , f , psol , V ( 1 , ll + 1 ), Wk , Wp , Iwp , Hl0 , Jpre , ier , Npsl ) if ( ier /= 0 ) then !  This block handles error returns forced by routine PSOL. if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif call dorthog ( V ( 1 , ll + 1 ), V , Hes , N , ll , Maxl , Kmp , snormw ) call dhefa ( Hes , Maxl , ll , Ipvt , info , ll ) lm1 = ll - 1 if ( ll > 1 ) then if ( Ipvt ( lm1 ) == lm1 ) prod = prod * Hes ( ll , lm1 ) endif if ( info /= ll ) then !----------------------------------------------------------------------- !  Update RHO, the estimate of the norm of the residual b - A*x(l). !  test for convergence.  If passed, compute approximation x(l). !  If failed and l .lt. MAXL, then continue iterating. !----------------------------------------------------------------------- rho = bnrm * snormw * abs ( prod / Hes ( ll , ll )) if ( rho <= Delta ) then call approximate () return endif if ( ll == Maxl ) exit else !----------------------------------------------------------------------- !  The last pivot in HES was found to be zero. !  If vnew = 0 or l = MAXL, take an error return with IFLAG = 2. !  otherwise, continue the iteration without a convergence test. !----------------------------------------------------------------------- if ( snormw == 0.0D0 ) exit IFDELTA if ( ll == Maxl ) exit IFDELTA endif !  If l .lt. MAXL, store HES(l+1,l) and normalize the vector v(*,l+1). Hes ( ll + 1 , ll ) = snormw tem = 1.0D0 / snormw call dscal ( N , tem , V ( 1 , ll + 1 ), 1 ) enddo !----------------------------------------------------------------------- !  l has reached MAXL without passing the convergence test: !  If RHO is not too large, compute a solution anyway and return with !  IFLAG = 1.  Otherwise return with IFLAG = 2. !----------------------------------------------------------------------- if ( rho <= 1.0D0 ) then Iflag = 1 call approximate () return elseif ( rho <= bnrm . and . Mnewt == 0 ) then Iflag = 1 call approximate () return endif elseif ( Mnewt > 0 ) then do i = 1 , N X ( i ) = 0.0D0 enddo return else !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) return endif IFDELTA Iflag = 2 contains subroutine approximate () !----------------------------------------------------------------------- !  Compute the approximation x(l) to the solution. !  Since the vector X was used as work space, and the initial guess !  of the Newton correction is zero, X must be reset to zero. !----------------------------------------------------------------------- integer :: ll ll = Liom do k = 1 , ll B ( k ) = 0.0D0 enddo B ( 1 ) = bnrm call dhesl ( Hes , Maxl , ll , Ipvt , B ) do k = 1 , N X ( k ) = 0.0D0 enddo do i = 1 , ll call daxpy ( N , B ( i ), V ( 1 , i ), 1 , X , 1 ) enddo do i = 1 , N X ( i ) = X ( i ) / Wght ( i ) enddo if ( Jpre <= 1 ) return call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , X , 2 , ier ) Npsl = Npsl + 1 if ( ier == 0 ) return !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 end subroutine approximate end subroutine dspiom","tags":"","loc":"proc/dspiom~2.html"},{"title":"dsrcom – odepack","text":"subroutine dsrcom(Rsav, Isav, Job) NAME dsrcom(3f) - [M_odepack] Save/restore ODEPACK COMMON blocks. DESCRIPTION This routine saves or restores (depending on JOB) the contents of\n  the internal types used to store the current state\n  by one (or more) of the ODEPACK solvers. VALUES RSAV real array of length 218 or more. ISAV integer array of length 37 or more. JOB flag indicating to save or restore the COMMON blocks:\n          JOB  = 1 if COMMON is to be saved (written to RSAV/ISAV)\n          JOB  = 2 if COMMON is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job Calls proc~~dsrcom~2~~CallsGraph proc~dsrcom~2 dsrcom return_dls1_real return_dls1_real proc~dsrcom~2->return_dls1_real return_dls1_int return_dls1_int proc~dsrcom~2->return_dls1_int set_dls1_real set_dls1_real proc~dsrcom~2->set_dls1_real set_dls1_int set_dls1_int proc~dsrcom~2->set_dls1_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables lenils lenrls Source Code dsrcom Variables Type Visibility Attributes Name Initial integer, public, parameter :: lenils = 37 integer, public, parameter :: lenrls = 218 Source Code subroutine dsrcom ( rsav , isav , job ) real ( kind = dp ) :: Rsav ( * ) integer :: Isav ( * ) integer , intent ( in ) :: Job integer , parameter :: lenils = 37 , lenrls = 218 select case ( job ) case ( 1 ) rsav ( 1 : lenrls ) = return_dls1_real () isav ( 1 : lenils ) = return_dls1_int () case ( 2 ) call set_dls1_real ( rsav ( 1 : lenrls )) call set_dls1_int ( isav ( 1 : lenils )) case default write ( * , * ) '<ERROR>*dsrcom* unknown JOB value=' , job stop 1 end select end subroutine dsrcom","tags":"","loc":"proc/dsrcom~2.html"},{"title":"dsolbt – odepack","text":"subroutine dsolbt(M, N, A, B, C, Y, Ip) Solution of block-tridiagonal linear system.\n Coefficient matrix must have been previously processed by DDECBT.\n M, N, A,B,C, and IP  must not have been changed since call to DDECBT.\n Written by A. C. Hindmarsh. Input M order of each block. N number of blocks in each direction of matrix. A,B,C M by M by N arrays containing block LU decomposition\n of coefficient matrix from DDECBT. IP M by N integer array of pivot information from DDECBT. Y array of length M*N containg the right-hand side vector\n (treated as an M by N array here). Output Y solution vector, of length M*N. External routines required: DGESL (LINPACK) and DDOT (BLAS). Arguments Type Intent Optional Attributes Name integer :: M integer, intent(in) :: N real(kind=dp) :: A (M,M,N) real(kind=dp) :: B (M,M,N) real(kind=dp) :: C (M,M,N) real(kind=dp), intent(inout) :: Y (M,N) integer :: Ip (M,N) Calls proc~~dsolbt~2~~CallsGraph proc~dsolbt~2 dsolbt proc~dgesl~2 dgesl proc~dsolbt~2->proc~dgesl~2 proc~ddot~2 ddot proc~dsolbt~2->proc~ddot~2 proc~dgesl~2->proc~ddot~2 proc~daxpy~2 daxpy proc~dgesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dsolbt~2~~CalledByGraph proc~dsolbt~2 dsolbt proc~dslsbt~2 dslsbt proc~dslsbt~2->proc~dsolbt~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~dsolbt~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dpr i k kb km1 kp1 nm1 nm2 Source Code dsolbt Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dpr integer, public :: i integer, public :: k integer, public :: kb integer, public :: km1 integer, public :: kp1 integer, public :: nm1 integer, public :: nm2 Source Code subroutine dsolbt ( M , N , A , B , C , Y , Ip ) ! integer :: M integer , intent ( in ) :: N real ( kind = dp ) :: A ( M , M , N ) real ( kind = dp ) :: B ( M , M , N ) real ( kind = dp ) :: C ( M , M , N ) real ( kind = dp ), intent ( inout ) :: Y ( M , N ) integer :: Ip ( M , N ) ! real ( kind = dp ) :: dpr integer :: i , k , kb , km1 , kp1 , nm1 , nm2 ! nm1 = N - 1 nm2 = N - 2 ! Forward solution sweep. ---------------------------------------------- call dgesl ( A , M , M , Ip , Y , 0 ) do k = 2 , nm1 km1 = k - 1 do i = 1 , M dpr = ddot ( M , C ( i , 1 , k ), M , Y ( 1 , km1 ), 1 ) Y ( i , k ) = Y ( i , k ) - dpr enddo call dgesl ( A ( 1 , 1 , k ), M , M , Ip ( 1 , k ), Y ( 1 , k ), 0 ) enddo do i = 1 , M dpr = ddot ( M , C ( i , 1 , N ), M , Y ( 1 , nm1 ), 1 ) + ddot ( M , B ( i , 1 , N ), M , Y ( 1 , nm2 ), 1 ) Y ( i , N ) = Y ( i , N ) - dpr enddo call dgesl ( A ( 1 , 1 , N ), M , M , Ip ( 1 , N ), Y ( 1 , N ), 0 ) ! Backward solution sweep. --------------------------------------------- do kb = 1 , nm1 k = N - kb kp1 = k + 1 do i = 1 , M dpr = ddot ( M , B ( i , 1 , k ), M , Y ( 1 , kp1 ), 1 ) Y ( i , k ) = Y ( i , k ) - dpr enddo enddo do i = 1 , M dpr = ddot ( M , C ( i , 1 , 1 ), M , Y ( 1 , 3 ), 1 ) Y ( i , 1 ) = Y ( i , 1 ) - dpr enddo end subroutine dsolbt","tags":"","loc":"proc/dsolbt~2.html"},{"title":"datv – odepack","text":"subroutine datv(Neq, Y, Savf, V, Wght, Ftem, f, psol, Z, Vtem, Wp, Iwp, Hl0, Jpre, Ier, Npsl) This routine computes the product (D-inverse)*(P1-inverse)*(I - hl0*df/dy)*(P2-inverse)*(D*v) where D is a diagonal scaling matrix, and P1 and P2 are the\n left and right preconditioning matrices, respectively. v is assumed to have WRMS norm equal to 1.\n The product is stored in z.  This is computed by a\n difference quotient, a call to F, and two calls to PSOL. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). V real array of length N (can be the same array as Z). WGHT array of length N containing scale factors.\n 1/WGHT(i) are the diagonal elements of the matrix D. FTEM work array of length N. VTEM work array of length N used to store the\n unscaled version of V. WP real work array used by preconditioner PSOL. IWP integer work array used by preconditioner PSOL. HL0 current value of (step size h) * (coefficient l0). JPRE preconditioner type flag. On return Z array of length N containing desired scaled\n matrix-vector product. IER error flag from PSOL. NPSL the number of calls to PSOL. In addition, this routine uses the Common variables TN, N, NFE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(in) :: V (*) real(kind=dp), intent(in) :: Wght (*) real(kind=dp) :: Ftem (*) real :: f real :: psol real(kind=dp), intent(inout) :: Z (*) real(kind=dp), intent(inout) :: Vtem (*) real(kind=dp), intent(inout) :: Wp (*) integer :: Iwp (*) real(kind=dp) :: Hl0 integer, intent(inout) :: Jpre integer, intent(inout) :: Ier integer, intent(inout) :: Npsl Calls proc~~datv~2~~CallsGraph proc~datv~2 datv proc~dnrm2~2 DNRM2 proc~datv~2->proc~dnrm2~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~datv~2~~CalledByGraph proc~datv~2 datv proc~dspigmr~2 dspigmr proc~dspigmr~2->proc~datv~2 proc~dspiom~2 dspiom proc~dspiom~2->proc~datv~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspigmr~2 proc~dsolpk~2->proc~dspiom~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables fac i rnorm tempn Source Code datv Variables Type Visibility Attributes Name Initial real(kind=dp), public :: fac integer, public :: i real(kind=dp), public :: rnorm real(kind=dp), public :: tempn Source Code subroutine datv ( Neq , Y , Savf , V , Wght , Ftem , f , psol , Z , Vtem , Wp , Iwp , Hl0 , Jpre , Ier , Npsl ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( in ) :: V ( * ) real ( kind = dp ), intent ( in ) :: Wght ( * ) real ( kind = dp ) :: Ftem ( * ) external :: f external :: psol real ( kind = dp ), intent ( inout ) :: Z ( * ) real ( kind = dp ), intent ( inout ) :: Vtem ( * ) real ( kind = dp ), intent ( inout ) :: Wp ( * ) integer :: Iwp ( * ) real ( kind = dp ) :: Hl0 integer , intent ( inout ) :: Jpre integer , intent ( inout ) :: Ier integer , intent ( inout ) :: Npsl real ( kind = dp ) :: fac , rnorm , tempn integer :: i !  Set VTEM = D * V. do i = 1 , dls1 % n Vtem ( i ) = V ( i ) / Wght ( i ) enddo Ier = 0 if ( Jpre >= 2 ) then !  JPRE = 2 or 3.  Apply inverse of right preconditioner to VTEM. call psol ( Neq , dls1 % tn , Y , Savf , Ftem , Hl0 , Wp , Iwp , Vtem , 2 , Ier ) Npsl = Npsl + 1 if ( Ier /= 0 ) return !  Calculate L-2 norm of (D-inverse) * VTEM. do i = 1 , dls1 % n Z ( i ) = Vtem ( i ) * Wght ( i ) enddo tempn = dnrm2 ( dls1 % n , Z , 1 ) rnorm = 1.0D0 / tempn !  Save Y in Z and increment Y by VTEM/norm. !X!call dcopy(dls1%n,Y,1,Z,1) Z ( 1 : dls1 % n ) = Y ( 1 : dls1 % n ) do i = 1 , dls1 % n Y ( i ) = Z ( i ) + Vtem ( i ) * rnorm enddo fac = Hl0 * tempn else !  JPRE = 0 or 1.  Save Y in Z and increment Y by VTEM. !X!call dcopy(dls1%n,Y,1,Z,1) Z ( 1 : dls1 % n ) = Y ( 1 : dls1 % n ) do i = 1 , dls1 % n Y ( i ) = Z ( i ) + Vtem ( i ) enddo fac = Hl0 endif !  For all JPRE, call F with incremented Y argument, and restore Y. call f ( Neq , dls1 % tn , Y , Ftem ) dls1 % nfe = dls1 % nfe + 1 !X!call dcopy(dls1%n,Z,1,Y,1) Y ( 1 : dls1 % n ) = Z ( 1 : dls1 % n ) !  Set Z = (identity - hl0*Jacobian) * VTEM, using difference quotient. do i = 1 , dls1 % n Z ( i ) = Ftem ( i ) - Savf ( i ) enddo do i = 1 , dls1 % n Z ( i ) = Vtem ( i ) - fac * Z ( i ) enddo !  Apply inverse of left preconditioner to Z, if nontrivial. if ( Jpre /= 0 . and . Jpre /= 2 ) then call psol ( Neq , dls1 % tn , Y , Savf , Ftem , Hl0 , Wp , Iwp , Z , 1 , Ier ) Npsl = Npsl + 1 if ( Ier /= 0 ) return endif !  Apply D-inverse to Z and return. do i = 1 , dls1 % n Z ( i ) = Z ( i ) * Wght ( i ) enddo end subroutine datv","tags":"","loc":"proc/datv~2.html"},{"title":"dsrcma – odepack","text":"subroutine dsrcma(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(DLSA01)::DLSA, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 240 or more. ISAV integer array of length 46 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Calls proc~~dsrcma~2~~CallsGraph proc~dsrcma~2 dsrcma return_dls1_real return_dls1_real proc~dsrcma~2->return_dls1_real return_dls1_int return_dls1_int proc~dsrcma~2->return_dls1_int set_dls1_real set_dls1_real proc~dsrcma~2->set_dls1_real set_dls1_int set_dls1_int proc~dsrcma~2->set_dls1_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables LENILS LENRLS Source Code dsrcma Variables Type Visibility Attributes Name Initial integer, public, parameter :: LENILS = 37 integer, public, parameter :: LENRLS = 218 Source Code subroutine dsrcma ( Rsav , Isav , Job ) ! integer , parameter :: LENRLS = 218 , LENILS = 37 ! real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job ! select case ( Job ) case ( 1 ) Rsav ( 1 : LENRLS ) = return_dls1_real () Rsav ( LENRLS + 1 ) = dlsa % tsw Rsav ( LENRLS + 2 : LENRLS + 13 ) = dlsa % cm1 ( 1 : 12 ) Rsav ( LENRLS + 14 : LENRLS + 18 ) = dlsa % cm2 ( 1 : 5 ) Rsav ( LENRLS + 19 ) = dlsa % pdest Rsav ( LENRLS + 20 ) = dlsa % pdlast Rsav ( LENRLS + 21 ) = dlsa % ratio Rsav ( LENRLS + 22 ) = dlsa % pdnorm Isav ( 1 : LENILS ) = return_dls1_int () Isav ( LENILS + 1 ) = dlsa % insufr Isav ( LENILS + 2 ) = dlsa % insufi Isav ( LENILS + 3 ) = dlsa % ixpr Isav ( LENILS + 4 ) = dlsa % icount Isav ( LENILS + 5 ) = dlsa % irflag Isav ( LENILS + 6 ) = dlsa % jtyp Isav ( LENILS + 7 ) = dlsa % mused Isav ( LENILS + 8 ) = dlsa % mxordn Isav ( LENILS + 9 ) = dlsa % mxords case ( 2 ) call set_dls1_real ( Rsav ( 1 : LENRLS )) dlsa % tsw = Rsav ( LENRLS + 1 ) dlsa % cm1 ( 1 : 12 ) = Rsav ( LENRLS + 2 : LENRLS + 13 ) dlsa % cm2 ( 1 : 5 ) = Rsav ( LENRLS + 14 : LENRLS + 18 ) dlsa % pdest = Rsav ( LENRLS + 19 ) dlsa % pdlast = Rsav ( LENRLS + 20 ) dlsa % ratio = Rsav ( LENRLS + 21 ) dlsa % pdnorm = Rsav ( LENRLS + 22 ) call set_dls1_int ( Isav ( 1 : LENILS )) dlsa % insufr = Isav ( LENILS + 1 ) dlsa % insufi = Isav ( LENILS + 2 ) dlsa % ixpr = Isav ( LENILS + 3 ) dlsa % icount = Isav ( LENILS + 4 ) dlsa % irflag = Isav ( LENILS + 5 ) dlsa % jtyp = Isav ( LENILS + 6 ) dlsa % mused = Isav ( LENILS + 7 ) dlsa % mxordn = Isav ( LENILS + 8 ) dlsa % mxords = Isav ( LENILS + 9 ) case default write ( * , * ) '<ERROR>*dsrcma* unknown value for JOB=' , Job stop 1 endselect end subroutine dsrcma","tags":"","loc":"proc/dsrcma~2.html"},{"title":"dslsbt – odepack","text":"subroutine dslsbt(Wm, Iwm, X, Tem) This routine acts as an interface between the core integrator\nroutine and the DSOLBT routine for the solution of the linear system\narising from chord iteration.\nCommunication with DSLSBT uses the following variables: WM real work space containing the LU decomposition,\nstarting at WM(3). IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains block structure parameters\nMB = IWM(1) and NB = IWM(2). X the right-hand side vector on input, and the solution vector\non output, of length N. TEM vector of work space of length N, not used in this version. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Wm (*) integer :: Iwm (*) real(kind=dp) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dslsbt~2~~CallsGraph proc~dslsbt~2 dslsbt proc~dsolbt~2 dsolbt proc~dslsbt~2->proc~dsolbt~2 proc~dgesl~2 dgesl proc~dsolbt~2->proc~dgesl~2 proc~ddot~2 ddot proc~dsolbt~2->proc~ddot~2 proc~dgesl~2->proc~ddot~2 proc~daxpy~2 daxpy proc~dgesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables lblox lpb lpc mb nb Source Code dslsbt Variables Type Visibility Attributes Name Initial integer, public :: lblox integer, public :: lpb integer, public :: lpc integer, public :: mb integer, public :: nb Source Code subroutine dslsbt ( Wm , Iwm , X , Tem ) ! real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) real ( kind = dp ) :: X ( * ) real ( kind = dp ) :: Tem ( * ) ! integer :: lblox , lpb , lpc , mb , nb ! mb = Iwm ( 1 ) nb = Iwm ( 2 ) lblox = mb * mb * nb lpb = 3 + lblox lpc = lpb + lblox call dsolbt ( mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc ), X , Iwm ( 21 )) end subroutine dslsbt","tags":"","loc":"proc/dslsbt~2.html"},{"title":"sro – odepack","text":"subroutine sro(N, Ip, Ia, Ja, A, Q, R, Dflag) Name sro – symmetric reordering of sparse symmetric matrix Description the nonzero entries of the matrix m are assumed to be stored symmetrically in ( ia , ja , a ) format ( i . e ., not both m ( i , j ) and m ( j , i ) are stored if i ne j ) . sro does not rearrange the order of the rows , but does move nonzeroes from one row to another to ensure that if m ( i , j ) will be in the upper triangle of m with respect to the new ordering , then m ( i , j ) is stored in row i ( and thus m ( j , i ) is not stored ) , whereas if m ( i , j ) will be in the strict lower triangle of m , then m ( j , i ) is stored in row j ( and thus m ( i , j ) is not stored ) . additional parameters q integer one-dimensional work array.  dimension = n r integer one-dimensional work array.  dimension = number of\n   nonzero entries in the upper triangle of m dflag logical variable.  if dflag = .true., then store nonzero\n   diagonal elements at the beginning of the row Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ip (*) integer, intent(inout) :: Ia (*) integer, intent(inout) :: Ja (*) real(kind=dp), intent(inout) :: A (*) integer, intent(inout) :: Q (*) integer, intent(inout) :: R (*) logical, intent(in) :: Dflag Called by proc~~sro~2~~CalledByGraph proc~sro~2 sro proc~odrv~2 odrv proc~odrv~2->proc~sro~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables ak i ilast j jak jdummy jmax jmin k Source Code sro Variables Type Visibility Attributes Name Initial real(kind=dp), public :: ak integer, public :: i integer, public :: ilast integer, public :: j integer, public :: jak integer, public :: jdummy integer, public :: jmax integer, public :: jmin integer, public :: k Source Code subroutine sro ( N , Ip , Ia , Ja , A , Q , R , Dflag ) integer , intent ( in ) :: N integer , intent ( in ) :: Ip ( * ) integer , intent ( inout ) :: Ia ( * ) integer , intent ( inout ) :: Ja ( * ) real ( kind = dp ), intent ( inout ) :: A ( * ) integer , intent ( inout ) :: Q ( * ) integer , intent ( inout ) :: R ( * ) logical , intent ( in ) :: Dflag ! real ( kind = dp ) :: ak integer :: i , ilast , j , jak , jdummy , jmax , jmin , k ! !--phase 1 -- find row in which to store each nonzero !----initialize count of nonzeroes to be stored in each row do i = 1 , N Q ( i ) = 0 enddo !----for each nonzero element a(j) do i = 1 , N jmin = Ia ( i ) jmax = Ia ( i + 1 ) - 1 if ( jmin <= jmax ) then do j = jmin , jmax !--------find row (=r(j)) and column (=ja(j)) in which to store a(j) ... k = Ja ( j ) if ( Ip ( k ) < Ip ( i ) ) Ja ( j ) = i if ( Ip ( k ) >= Ip ( i ) ) k = i R ( j ) = k !--------... and increment count of nonzeroes (=q(r(j)) in that row Q ( k ) = Q ( k ) + 1 enddo endif enddo ! !--phase 2 -- find new ia and permutation to apply to (ja,a) !----determine pointers to delimit rows in permuted (ja,a) do i = 1 , N Ia ( i + 1 ) = Ia ( i ) + Q ( i ) Q ( i ) = Ia ( i + 1 ) enddo ! !----determine where each (ja(j),a(j)) is stored in permuted (ja,a) !----for each nonzero element (in reverse order) ilast = 0 jmin = Ia ( 1 ) jmax = Ia ( N + 1 ) - 1 j = jmax do jdummy = jmin , jmax i = R ( j ) if ( . not . Dflag . or . Ja ( j ) /= i . or . i == ilast ) then ! !------put (off-diagonal) nonzero in last unused location in row Q ( i ) = Q ( i ) - 1 R ( j ) = Q ( i ) else ! !------if dflag, then put diagonal nonzero at beginning of row R ( j ) = Ia ( i ) ilast = i endif ! j = j - 1 enddo ! !--phase 3 -- permute (ja,a) to upper triangular form (wrt new ordering) do j = jmin , jmax do while ( R ( j ) /= j ) k = R ( j ) R ( j ) = R ( k ) R ( k ) = k jak = Ja ( k ) Ja ( k ) = Ja ( j ) Ja ( j ) = jak ak = A ( k ) A ( k ) = A ( j ) A ( j ) = ak enddo enddo ! end subroutine sro","tags":"","loc":"proc/sro~2.html"},{"title":"dainvgs – odepack","text":"subroutine dainvgs(Neq, T, Y, Wk, Iwk, Tem, Ydot, Ier, res, adda) Uses M_odepack proc~~dainvgs~2~~UsesGraph proc~dainvgs~2 dainvgs module~m_odepack M_odepack proc~dainvgs~2->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This subroutine computes the initial value of the vector YDOT\nsatisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSODIS for initialization\nonly, when ISTATE = 0.  The matrix A is subjected to LU\ndecomposition in CDRV.  Then the system A*YDOT = g(t,y) is solved\nin CDRV. In addition to variables described previously, communication\nwith DAINVGS uses the following: Y array of initial values. WK real work space for matrices.  On output it contains A and\n  its LU decomposition.  The LU decomposition is not entirely\n  sparse unless the structure of the matrix A is identical to\n  the structure of the Jacobian matrix dr/dy.\n  Storage of matrix elements starts at WK(3).\n  WK(1) = SQRT(UROUND), not used here. IWK integer work space for matrix-related data, assumed to\n  be equivalenced to WK.  In addition, WK(IPRSP) and WK(IPISP)\n  are assumed to have identical locations. TEM vector of work space of length N (ACOR in DSTODI). YDOT output vector containing the initial dy/dt. YDOT(i) contains\n  dy(i)/dt when the matrix A is non-singular. IER output error flag with the following values and meanings:\n  = 0  if DAINVGS was successful.\n  = 1  if the A-matrix was found to be singular.\n  = 2  if RES returned an error flag IRES = IER = 2.\n  = 3  if RES returned an error flag IRES = IER = 3.\n  = 4  if insufficient storage for CDRV (should not occur here).\n  = 5  if other error found in CDRV (should not occur here). Arguments Type Intent Optional Attributes Name integer :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: Tem (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Ier real :: res real :: adda Calls proc~~dainvgs~2~~CallsGraph proc~dainvgs~2 dainvgs proc~cdrv cdrv proc~dainvgs~2->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp i imul j k kmax kmin Source Code dainvgs Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) integer, public :: i integer, public :: imul integer, public :: j integer, public :: k integer, public :: kmax integer, public :: kmin Source Code subroutine dainvgs ( Neq , T , Y , Wk , Iwk , Tem , Ydot , Ier , res , adda ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Wk ( * ) integer :: Iwk ( * ) real ( kind = dp ), intent ( inout ) :: Tem ( * ) real ( kind = dp ) :: Ydot ( * ) integer , intent ( inout ) :: Ier external :: res external :: adda integer :: i , imul , j , k , kmax , kmin do i = 1 , dlss % nnz Wk ( dlss % iba + i ) = 0.0D0 enddo Ier = 1 call res ( Neq , T , Y , Wk ( dlss % ipa ), Ydot , Ier ) if ( Ier > 1 ) then return endif kmin = Iwk ( dlss % ipian ) do j = 1 , Neq kmax = Iwk ( dlss % ipian + j ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Tem ( i ) = 0.0D0 enddo call adda ( Neq , T , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Tem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Tem ( i ) enddo kmin = kmax + 1 enddo dlss % nlu = dlss % nlu + 1 Ier = 0 do i = 1 , Neq Tem ( i ) = 0.0D0 enddo ! Numerical factorization of matrix A. --------------------------------- call cdrv ( Neq , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), & & Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Tem , Tem , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 2 , dlss % iys ) if ( dlss % iys == 0 ) then ! ! Solution of the linear system. --------------------------------------- call cdrv ( Neq , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), & & Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Ydot , Ydot , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 4 , dlss % iys ) if ( dlss % iys /= 0 ) Ier = 5 else imul = ( dlss % iys - 1 ) / Neq Ier = 5 if ( imul == 8 ) Ier = 1 if ( imul == 10 ) Ier = 4 endif end subroutine dainvgs","tags":"","loc":"proc/dainvgs~2.html"},{"title":"cdrv – odepack","text":"subroutine cdrv(N, R, C, Ic, Ia, Ja, A, B, Z, Nsp, Isp, Rsp, Esp, Path, Flag) NAME cdrv(3f) - [M_odepack ] driver for solving sparse non-symmetric\n            systems of linear equations DESCRIPTION driver for subroutines for solving sparse nonsymmetric systems of\n   linear equations (compressed pointer storage) PARAMETERS class abbreviations are -- n - integer variable f - real variable v - supplies a value to the driver r - returns a result from the driver i - used internally by the driver a - array class - parameter the nonzero entries of the coefficient matrix m are stored\n   row-by-row in the array a.  to identify the individual nonzero\n   entries in each row, we need to know in which column each entry\n   lies.  the column indices which correspond to the nonzero entries\n   of m are stored in the array ja.  i.e., if  a(k) = m(i,j),  then\n   ja(k) = j.  in addition, we need to know where each row starts and\n   how long it is.  the index positions in ja and a where the rows of\n   m begin are stored in the array ia.  i.e., if m(i,j) is the first\n   nonzero entry (stored) in the i-th row and a(k) = m(i,j),  then\n   ia(i) = k.  moreover, the index in ja and a of the first location\n   following the last element in the last row is stored in ia(n+1).\n   thus, the number of entries in the i-th row is given by\n   ia(i+1) - ia(i),  the nonzero entries of the i-th row are stored\n   consecutively in a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), and the corresponding column indices are stored consecutively in ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). for example, the 5 by 5 matrix ( 1. 0. 2. 0. 0.)\n                ( 0. 3. 0. 0. 0.)\n            m = ( 0. 4. 5. 6. 0.)\n                ( 0. 0. 0. 7. 0.)\n                ( 0. 0. 0. 8. 9.) would be stored as - 1  2  3  4  5  6  7  8  9\n            ---+--------------------------\n            ia - 1  3  4  7  8 10\n            ja - 1  3  2  2  3  4  4  4  5\n             a - 1. 2. 3. 4. 5. 6. 7. 8. 9.         . nv    - n     - number of variables/equations.\n     fva   - a     - nonzero entries of the coefficient matrix m, stored\n           -           by rows.\n           -           size = number of nonzero entries in m.\n     nva   - ia    - pointers to delimit the rows in a.\n           -           size = n+1.\n     nva   - ja    - column numbers corresponding to the elements of a.\n           -           size = size of a.\n     fva   - b     - right-hand side b.  b and z can the same array.\n           -           size = n.\n     fra   - z     - solution x.  b and z can be the same array.\n           -           size = n. the rows and columns of the original matrix m can be\n   reordered (e.g., to reduce fillin or ensure numerical stability)\n   before calling the driver.  if no reordering is done, then set\n   r(i) = c(i) = ic(i) = i  for i=1,…,n.  the solution z is returned\n   in the original order. if the columns have been reordered (i.e.,  c(i).ne.i  for some\n   i), then the driver will call a subroutine (nroc) which rearranges\n   each row of ja and a, leaving the rows in the original order, but\n   placing the elements of each row in increasing order with respect\n   to the new ordering.  if  path.ne.1,  then nroc is assumed to have\n   been called already. nva   - r     - ordering of the rows of m.\n       -           size = n.\n nva   - c     - ordering of the columns of m.\n       -           size = n.\n nva   - ic    - inverse of the ordering of the columns of m.  i.e.,\n       -           ic(c(i)) = i  for i=1,...,n.\n       -           size = n. the solution of the system of linear equations is divided into\n   three stages – nsfc -- the matrix m is processed symbolically to determine where\n               fillin will occur during the numeric factorization.\n      nnfc -- the matrix m is factored numerically into the product ldu\n               of a unit lower triangular matrix l, a diagonal matrix\n               d, and a unit upper triangular matrix u, and the system\n               mx = b  is solved.\n      nnsc -- the linear system  mx = b  is solved using the ldu\n  or           factorization from nnfc.\n      nntc -- the transposed linear system  mt x = b  is solved using\n               the ldu factorization from nnf. for several systems whose coefficient matrices have the same\n   nonzero structure, nsfc need be done only once (for the first\n   system).  then nnfc is done once for each additional system.  for\n   several systems with the same coefficient matrix, nsfc and nnfc\n   need be done only once (for the first system).  then nnsc or nntc\n   is done once for each additional right-hand side. nv    - path  - path specification.  values and their meanings are --\n       -           1  perform nroc, nsfc, and nnfc.\n       -           2  perform nnfc only  (nsfc is assumed to have been\n       -               done in a manner compatible with the storage\n       -               allocation used in the driver).\n       -           3  perform nnsc only  (nsfc and nnfc are assumed to\n       -               have been done in a manner compatible with the\n       -               storage allocation used in the driver).\n       -           4  perform nntc only  (nsfc and nnfc are assumed to\n       -               have been done in a manner compatible with the\n       -               storage allocation used in the driver).\n       -           5  perform nroc and nsfc. various errors are detected by the driver and the individual\n   subroutines. nr    - flag  - error flag.  values and their meanings are --\n       -             0     no errors detected\n       -             n+k   null row in a  --  row = k\n       -            2n+k   duplicate entry in a  --  row = k\n       -            3n+k   insufficient storage in nsfc  --  row = k\n       -            4n+1   insufficient storage in nnfc\n       -            5n+k   null pivot  --  row = k\n       -            6n+k   insufficient storage in nsfc  --  row = k\n       -            7n+1   insufficient storage in nnfc\n       -            8n+k   zero pivot  --  row = k\n       -           10n+1   insufficient storage in cdrv\n       -           11n+1   illegal path specification working storage is needed for the factored form of the matrix\n   m plus various temporary vectors.  the arrays isp and rsp should be\n   equivalenced.  integer storage is allocated from the beginning of\n   isp and real storage from the end of rsp. nv    - nsp   - declared dimension of rsp.  nsp generally must\n                        be larger than  8n+2 + 2k  (where  k = (number of\n                        nonzero entries in m)).\n        nvira - isp   - integer working storage divided up into various arrays\n                        needed by the subroutines.  isp and rsp should be\n                        equivalenced.\n                             size = lratio*nsp.\n        fvira - rsp   - real working storage divided up into various arrays\n                        needed by the subroutines.  isp and rsp should be\n                        equivalenced.\n                             size = nsp.\n        nr    - esp   - if sufficient storage was available to perform the\n                        symbolic factorization (nsfc), then esp is set to\n                        the amount of excess storage provided (negative if\n                        insufficient storage was available to perform the\n                        numeric factorization (nnfc)). Arguments Type Intent Optional Attributes Name integer :: N integer :: R (*) integer :: C (*) integer :: Ic (*) integer :: Ia (*) integer :: Ja (*) real(kind=dp) :: A (*) real(kind=dp) :: B (*) real(kind=dp) :: Z (*) integer, intent(in) :: Nsp integer, intent(inout) :: Isp (*) real(kind=dp) :: Rsp (*) integer, intent(out) :: Esp integer, intent(in) :: Path integer, intent(inout) :: Flag Calls proc~~cdrv~2~~CallsGraph proc~cdrv~2 cdrv proc~nsfc~2 nsfc proc~cdrv~2->proc~nsfc~2 proc~nntc~2 nntc proc~cdrv~2->proc~nntc~2 proc~nnsc~2 nnsc proc~cdrv~2->proc~nnsc~2 proc~nnfc~2 nnfc proc~cdrv~2->proc~nnfc~2 proc~nroc~2 nroc proc~cdrv~2->proc~nroc~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~cdrv~2~~CalledByGraph proc~cdrv~2 cdrv none~wrapup~3 wrapup none~wrapup~3->proc~cdrv~2 proc~dprjis~2 dprjis proc~dprjis~2->proc~cdrv~2 proc~dsolss~2 dsolss proc~dsolss~2->proc~cdrv~2 proc~dprjs~2 dprjs proc~dprjs~2->none~wrapup~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables ar d i ijl iju il ira irac irl iru iu j jl jlmax jra jrl jru ju jumax jutmp l lmax lratio max q row tmp u umax Source Code cdrv Variables Type Visibility Attributes Name Initial integer, public :: ar integer, public :: d integer, public :: i integer, public :: ijl integer, public :: iju integer, public :: il integer, public :: ira integer, public :: irac integer, public :: irl integer, public :: iru integer, public :: iu integer, public :: j integer, public :: jl integer, public :: jlmax integer, public :: jra integer, public :: jrl integer, public :: jru integer, public :: ju integer, public :: jumax integer, public :: jutmp integer, public :: l integer, public :: lmax integer, public, save :: lratio integer, public :: max integer, public :: q integer, public :: row integer, public :: tmp integer, public :: u integer, public :: umax Source Code subroutine cdrv ( N , R , C , Ic , Ia , Ja , A , B , Z , Nsp , Isp , Rsp , Esp , Path , Flag ) ! integer :: N integer :: R ( * ) integer :: C ( * ) integer :: Ic ( * ) integer :: Ia ( * ) integer :: Ja ( * ) real ( kind = dp ) :: A ( * ) real ( kind = dp ) :: B ( * ) real ( kind = dp ) :: Z ( * ) integer , intent ( inout ) :: Isp ( * ) integer , intent ( in ) :: Nsp real ( kind = dp ) :: Rsp ( * ) integer , intent ( out ) :: Esp integer , intent ( in ) :: Path integer , intent ( inout ) :: Flag ! integer :: ar , d , i , ijl , iju , il , ira , irac , irl , iru , iu , j , jl , jlmax , jra , jrl , jru , ju , jumax , jutmp , l , & & lmax , max , q , row , tmp , u , umax integer , save :: lratio ! !   set lratio equal to the ratio between the length of floating point !   and integer array data.  e. g., lratio = 1 for (real, integer), !   lratio = 2 for (double precision, integer) ! data lratio / 2 / ! if ( Path < 1 . or . 5 < Path ) then !  ** error.. illegal path specification Flag = 11 * N + 1 return else ! ### ***initialize and divide up temporary storage  ******************* il = 1 ijl = il + ( N + 1 ) iu = ijl + N iju = iu + ( N + 1 ) irl = iju + N jrl = irl + N jl = jrl + N ! !   ******  reorder a if necessary, call nsfc if flag is set  *********** if ( ( Path - 1 ) * ( Path - 5 ) == 0 ) then max = ( lratio * Nsp + 1 - jl ) - ( N + 1 ) - 5 * N jlmax = max / 2 q = jl + jlmax ira = q + ( N + 1 ) jra = ira + N irac = jra + N iru = irac + N jru = iru + N jutmp = jru + N jumax = lratio * Nsp + 1 - jutmp Esp = max / lratio if ( jlmax <= 0 . or . jumax <= 0 ) then !  ** error.. insufficient storage Flag = 10 * N + 1 return endif ! do i = 1 , N if ( C ( i ) /= i ) then ar = Nsp + 1 - N call nroc ( N , Ic , Ia , Ja , A , Isp ( il ), Rsp ( ar ), Isp ( iu ), Flag ) if ( Flag == 0 ) exit !  ** error.. error detected in nroc, nsfc, nnfc, or nnsc return endif enddo ! call nsfc ( N , R , Ic , Ia , Ja , jlmax , Isp ( il ), Isp ( jl ), Isp ( ijl ), jumax , Isp ( iu ), Isp ( jutmp ), Isp ( iju ), Isp ( q ), Isp ( ira ), Isp ( jra ), Isp ( irac ), & & Isp ( irl ), Isp ( jrl ), Isp ( iru ), Isp ( jru ), Flag ) if ( Flag /= 0 ) then !  ** error.. error detected in nroc, nsfc, nnfc, or nnsc return endif !   ******  move ju next to jl  ***************************************** jlmax = Isp ( ijl + N - 1 ) ju = jl + jlmax jumax = Isp ( iju + N - 1 ) if ( jumax > 0 ) then do j = 1 , jumax Isp ( ju + j - 1 ) = Isp ( jutmp + j - 1 ) enddo endif endif ! !   ******  call remaining subroutines  ********************************* jlmax = Isp ( ijl + N - 1 ) ju = jl + jlmax jumax = Isp ( iju + N - 1 ) l = ( ju + jumax - 2 + lratio ) / lratio + 1 lmax = Isp ( il + N ) - 1 d = l + lmax u = d + N row = Nsp + 1 - N tmp = row - N umax = tmp - u Esp = umax - ( Isp ( iu + N ) - 1 ) ! if ( ( Path - 1 ) * ( Path - 2 ) == 0 ) then if ( umax < 0 ) then !  ** error.. insufficient storage Flag = 10 * N + 1 return endif call nnfc ( N , R , C , Ic , Ia , Ja , A , Z , B , lmax , Isp ( il ), Isp ( jl ), Isp ( ijl ), Rsp ( l ), Rsp ( d ), umax , Isp ( iu ), Isp ( ju ), Isp ( iju ), Rsp ( u ), Rsp ( row ),& & Rsp ( tmp ), Isp ( irl ), Isp ( jrl ), Flag ) if ( Flag /= 0 ) then !  ** error.. error detected in nroc, nsfc, nnfc, or nnsc return endif endif ! if ( ( Path - 3 ) == 0 ) call nnsc ( N , R , C , Isp ( il ), Isp ( jl ), Isp ( ijl ), Rsp ( l ), Rsp ( d ), Isp ( iu ), Isp ( ju ), Isp ( iju ), Rsp ( u ), Z , B , Rsp ( tmp )) ! if ( ( Path - 4 ) == 0 ) call nntc ( N , R , C , Isp ( il ), Isp ( jl ), Isp ( ijl ), Rsp ( l ), Rsp ( d ), Isp ( iu ), Isp ( ju ), Isp ( iju ), Rsp ( u ), Z , B , Rsp ( tmp )) return endif ! end subroutine cdrv","tags":"","loc":"proc/cdrv~2.html"},{"title":"dsrcar – odepack","text":"subroutine dsrcar(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(dlsa01)::DLSA, DLSR01, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 245 or more. ISAV integer array of length 55 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Calls proc~~dsrcar~2~~CallsGraph proc~dsrcar~2 dsrcar return_dls1_real return_dls1_real proc~dsrcar~2->return_dls1_real return_dls1_int return_dls1_int proc~dsrcar~2->return_dls1_int set_dls1_real set_dls1_real proc~dsrcar~2->set_dls1_real set_dls1_int set_dls1_int proc~dsrcar~2->set_dls1_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables LENILS LENRLS ioff Source Code dsrcar Variables Type Visibility Attributes Name Initial integer, public, parameter :: LENILS = 37 integer, public, parameter :: LENRLS = 218 integer, public :: ioff Source Code subroutine dsrcar ( Rsav , Isav , Job ) ! integer , parameter :: LENRLS = 218 , LENILS = 37 ! real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job ! integer :: ioff ! select case ( Job ) case ( 1 ) Rsav ( 1 : LENRLS ) = return_dls1_real () Rsav ( LENRLS + 1 ) = dlsa % tsw Rsav ( LENRLS + 2 : LENRLS + 13 ) = dlsa % cm1 ( 1 : 12 ) Rsav ( LENRLS + 14 : LENRLS + 18 ) = dlsa % cm2 ( 1 : 5 ) Rsav ( LENRLS + 19 ) = dlsa % pdest Rsav ( LENRLS + 20 ) = dlsa % pdlast Rsav ( LENRLS + 21 ) = dlsa % ratio Rsav ( LENRLS + 22 ) = dlsa % pdnorm Isav ( 1 : LENILS ) = return_dls1_int () Isav ( LENILS + 1 ) = dlsa % insufr Isav ( LENILS + 2 ) = dlsa % insufi Isav ( LENILS + 3 ) = dlsa % ixpr Isav ( LENILS + 4 ) = dlsa % icount Isav ( LENILS + 5 ) = dlsa % irflag Isav ( LENILS + 6 ) = dlsa % jtyp Isav ( LENILS + 7 ) = dlsa % mused Isav ( LENILS + 8 ) = dlsa % mxordn Isav ( LENILS + 9 ) = dlsa % mxords ioff = LENRLS + 22 Rsav ( ioff + 1 ) = dlsr % alpha Rsav ( ioff + 2 ) = dlsr % x2 Rsav ( ioff + 3 ) = dlsr % t0 Rsav ( ioff + 4 ) = dlsr % tlast Rsav ( ioff + 5 ) = dlsr % toutc ioff = LENILS + 9 Isav ( ioff + 1 ) = dlsr % lg0 Isav ( ioff + 2 ) = dlsr % lg1 Isav ( ioff + 3 ) = dlsr % lgx Isav ( ioff + 4 ) = dlsr % imax Isav ( ioff + 5 ) = dlsr % last Isav ( ioff + 6 ) = dlsr % irfnd Isav ( ioff + 7 ) = dlsr % itaskc Isav ( ioff + 8 ) = dlsr % ngc Isav ( ioff + 9 ) = dlsr % nge case ( 2 ) call set_dls1_real ( Rsav ( 1 : LENRLS )) dlsa % tsw = Rsav ( LENRLS + 1 ) dlsa % cm1 ( 1 : 12 ) = Rsav ( LENRLS + 2 : LENRLS + 13 ) dlsa % cm2 ( 1 : 5 ) = Rsav ( LENRLS + 14 : LENRLS + 18 ) dlsa % pdest = Rsav ( LENRLS + 19 ) dlsa % pdlast = Rsav ( LENRLS + 20 ) dlsa % ratio = Rsav ( LENRLS + 21 ) dlsa % pdnorm = Rsav ( LENRLS + 22 ) dlsa % insufr = Isav ( LENILS + 1 ) dlsa % insufi = Isav ( LENILS + 2 ) dlsa % ixpr = Isav ( LENILS + 3 ) dlsa % icount = Isav ( LENILS + 4 ) dlsa % irflag = Isav ( LENILS + 5 ) dlsa % jtyp = Isav ( LENILS + 6 ) dlsa % mused = Isav ( LENILS + 7 ) dlsa % mxordn = Isav ( LENILS + 8 ) dlsa % mxords = Isav ( LENILS + 9 ) ioff = LENRLS + 22 dlsr % alpha = Rsav ( ioff + 1 ) dlsr % x2 = Rsav ( ioff + 2 ) dlsr % t0 = Rsav ( ioff + 3 ) dlsr % tlast = Rsav ( ioff + 4 ) dlsr % toutc = Rsav ( ioff + 5 ) ioff = LENILS + 9 dlsr % lg0 = Isav ( ioff + 1 ) dlsr % lg1 = Isav ( ioff + 2 ) dlsr % lgx = Isav ( ioff + 3 ) dlsr % imax = Isav ( ioff + 4 ) dlsr % last = Isav ( ioff + 5 ) dlsr % irfnd = Isav ( ioff + 6 ) dlsr % itaskc = Isav ( ioff + 7 ) dlsr % ngc = Isav ( ioff + 8 ) dlsr % nge = Isav ( ioff + 9 ) call set_dls1_int ( Isav ( 1 : LENILS )) case default write ( * , * ) '<ERROR>*dsrcar* unknown value for JOB=' , job stop 1 end select end subroutine dsrcar","tags":"","loc":"proc/dsrcar~2.html"},{"title":"nnfc – odepack","text":"subroutine nnfc(N, R, C, Ic, Ia, Ja, A, Z, B, Lmax, Il, Jl, Ijl, L, D, Umax, Iu, Ju, Iju, U, Row, Tmp, Irl, Jrl, Flag) NAME nnfc(3f) - [M_odepack] numerical LDU-factorization of sparse nonsymmetric matrix DESCRIPTION numerical ldu-factorization of sparse nonsymmetric matrix and\n   solution of system of linear equations (compressed pointer\n   storage) input variables..  n, r, c, ic, ia, ja, a, b,\n                          il, jl, ijl, lmax, iu, ju, iju, umax\n       output variables.. z, l, d, u, flag parameters used internally.. nia   - irl,  - vectors used to find the rows of  l.  at the kth step\n nia   - jrl       of the factorization,  jrl(k)  points to the head\n       -           of a linked list in  jrl  of column indices j\n       -           such j .lt. k and  l(k,j)  is nonzero.  zero\n       -           indicates the end of the list.  irl(j)  (j.lt.k)\n       -           points to the smallest i such that i .ge. k and\n       -           l(i,j)  is nonzero.\n       -           size of each = n.\n fia   - row   - holds intermediate values in calculation of  u and l.\n       -           size = n.\n fia   - tmp   - holds new right-hand side  b*  for solution of the\n       -           equation ux = b*.\n       -           size = n. internal variables.. jmin, jmax - indices of the first and last positions in a row to\n  be examined.\n\nsum - used in calculating  tmp. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: R integer, intent(in), dimension(*) :: C integer, intent(in), dimension(*) :: Ic integer, intent(in), dimension(*) :: Ia integer, intent(in), dimension(*) :: Ja real(kind=dp), intent(in), dimension(*) :: A real(kind=dp), intent(out), dimension(*) :: Z real(kind=dp), intent(in), dimension(*) :: B integer, intent(in) :: Lmax integer, intent(in), dimension(*) :: Il integer, intent(in), dimension(*) :: Jl integer, intent(in), dimension(*) :: Ijl real(kind=dp), intent(out), dimension(*) :: L real(kind=dp), intent(out), dimension(*) :: D integer, intent(in) :: Umax integer, intent(in), dimension(*) :: Iu integer, intent(in), dimension(*) :: Ju integer, intent(in), dimension(*) :: Iju real(kind=dp), intent(inout), dimension(*) :: U real(kind=dp), intent(inout), dimension(*) :: Row real(kind=dp), intent(inout), dimension(*) :: Tmp integer, intent(inout), dimension(*) :: Irl integer, intent(inout), dimension(*) :: Jrl integer, intent(out) :: Flag Called by proc~~nnfc~2~~CalledByGraph proc~nnfc~2 nnfc proc~cdrv~2 cdrv proc~cdrv~2->proc~nnfc~2 none~wrapup~3 wrapup none~wrapup~3->proc~cdrv~2 proc~dprjis~2 dprjis proc~dprjis~2->proc~cdrv~2 proc~dsolss~2 dsolss proc~dsolss~2->proc~cdrv~2 proc~dprjs~2 dprjs proc~dprjs~2->none~wrapup~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dk i i1 i2 ijlb j jmax jmin k lki mu rk sum Source Code nnfc Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dk integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ijlb integer, public :: j integer, public :: jmax integer, public :: jmin integer, public :: k real(kind=dp), public :: lki integer, public :: mu integer, public :: rk real(kind=dp), public :: sum Source Code subroutine nnfc ( N , R , C , Ic , Ia , Ja , A , Z , B , Lmax , Il , Jl , Ijl , L , D , Umax , Iu , Ju , Iju , U , Row , Tmp , Irl , Jrl , Flag ) ! !      real  a(*), l(*), d(*), u(*), z(*), b(*), row(*) !      real tmp(*), lki, sum, dk integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: R integer , intent ( in ) , dimension ( * ) :: C integer , intent ( in ) , dimension ( * ) :: Ic integer , intent ( in ) , dimension ( * ) :: Ia integer , intent ( in ) , dimension ( * ) :: Ja real ( kind = dp ) , intent ( in ) , dimension ( * ) :: A real ( kind = dp ) , intent ( out ) , dimension ( * ) :: Z real ( kind = dp ) , intent ( in ) , dimension ( * ) :: B integer , intent ( in ) :: Lmax integer , intent ( in ) , dimension ( * ) :: Il integer , intent ( in ) , dimension ( * ) :: Jl integer , intent ( in ) , dimension ( * ) :: Ijl real ( kind = dp ) , intent ( out ) , dimension ( * ) :: L real ( kind = dp ) , intent ( out ) , dimension ( * ) :: D integer , intent ( in ) :: Umax integer , intent ( in ) , dimension ( * ) :: Iu integer , intent ( in ) , dimension ( * ) :: Ju integer , intent ( in ) , dimension ( * ) :: Iju real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: U real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Row real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Tmp integer , intent ( inout ) , dimension ( * ) :: Irl integer , intent ( inout ) , dimension ( * ) :: Jrl integer , intent ( out ) :: Flag ! real ( kind = dp ) :: dk , lki , sum integer :: i , i1 , i2 , ijlb , j , jmax , jmin , k , mu , rk ! !   ******  initialize pointers and test storage  *********************** if ( Il ( N + 1 ) - 1 > Lmax ) then ! !  ** error.. insufficient storage for l Flag = 4 * N + 1 return elseif ( Iu ( N + 1 ) - 1 > Umax ) then !  ** error.. insufficient storage for u Flag = 7 * N + 1 return else do k = 1 , N Irl ( k ) = Il ( k ) Jrl ( k ) = 0 enddo ! !   ******  for each row  *********************************************** do k = 1 , N !   ******  reverse jrl and zero row where kth row of l will fill in  *** Row ( k ) = 0 i1 = 0 if ( Jrl ( k ) /= 0 ) then i = Jrl ( k ) do i2 = Jrl ( i ) Jrl ( i ) = i1 i1 = i Row ( i ) = 0 i = i2 if ( i == 0 ) exit enddo endif !   ******  set row to zero where u will fill in  *********************** jmin = Iju ( k ) jmax = jmin + Iu ( k + 1 ) - Iu ( k ) - 1 if ( jmin <= jmax ) then do j = jmin , jmax Row ( Ju ( j )) = 0 enddo endif !   ******  place kth row of a in row  ********************************** rk = R ( k ) jmin = Ia ( rk ) jmax = Ia ( rk + 1 ) - 1 do j = jmin , jmax Row ( Ic ( Ja ( j ))) = A ( j ) enddo !   ******  initialize sum, and link through jrl  *********************** sum = B ( rk ) i = i1 if ( i /= 0 ) then !   ******  assign the kth row of l and adjust row, sum  **************** do lki = - Row ( i ) !   ******  if l is not required, then comment out the following line  ** L ( Irl ( i )) = - lki sum = sum + lki * Tmp ( i ) jmin = Iu ( i ) jmax = Iu ( i + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( i ) - jmin do j = jmin , jmax Row ( Ju ( mu + j )) = Row ( Ju ( mu + j )) + lki * U ( j ) enddo endif i = Jrl ( i ) if ( i == 0 ) exit enddo endif !   ******  assign kth row of u and diagonal d, set tmp(k)  ************* if ( Row ( k ) == 0.0D0 ) then !  ** error.. zero pivot Flag = 8 * N + k return else dk = 1.0D0 / Row ( k ) D ( k ) = dk Tmp ( k ) = sum * dk if ( k == N ) cycle jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax U ( j ) = Row ( Ju ( mu + j )) * dk enddo endif ! !   ******  update irl and jrl, keeping jrl in decreasing order  ******** i = i1 if ( i /= 0 ) then do Irl ( i ) = Irl ( i ) + 1 i1 = Jrl ( i ) if ( Irl ( i ) < Il ( i + 1 ) ) then ijlb = Irl ( i ) - Il ( i ) + Ijl ( i ) j = Jl ( ijlb ) do while ( i <= Jrl ( j ) ) j = Jrl ( j ) enddo Jrl ( i ) = Jrl ( j ) Jrl ( j ) = i endif i = i1 if ( i == 0 ) exit enddo endif endif if ( Irl ( k ) < Il ( k + 1 ) ) then j = Jl ( Ijl ( k )) Jrl ( k ) = Jrl ( j ) Jrl ( j ) = k endif enddo ! !   ******  solve  ux = tmp  by back substitution  ********************** k = N do i = 1 , N sum = Tmp ( k ) jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax sum = sum - U ( j ) * Tmp ( Ju ( mu + j )) enddo endif Tmp ( k ) = sum Z ( C ( k )) = sum k = k - 1 enddo Flag = 0 endif end subroutine nnfc","tags":"","loc":"proc/nnfc~2.html"},{"title":"dpjibt – odepack","text":"subroutine dpjibt(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPJIBT is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nand r = g(t,y) - A(t,y)*s. Here J is computed by the user-supplied\nroutine JAC if MITER = 1, or by finite differencing if MITER = 2. J is stored in WM, rescaled, and ADDA is called to generate P. P is then subjected to LU decomposition by DDECBT in preparation\nfor later solution of linear systems with P as coefficient matrix. In addition to variables described previously, communication\nwith DPJIBT uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array used for output only.  On output it contains the\nresidual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains block structure parameters\nMB = IWM(1) and NB = IWM(2).\nEL0 EL(1) (input). IERPJ output error flag.\n    = 0 if no trouble occurred,\n    = 1 if the P matrix was found to be unfactorable,\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res integer :: jac real :: adda Calls proc~~dpjibt~2~~CallsGraph proc~dpjibt~2 dpjibt proc~ddecbt~2 ddecbt proc~dpjibt~2->proc~ddecbt~2 proc~dgefa~2 dgefa proc~ddecbt~2->proc~dgefa~2 proc~dgesl~2 dgesl proc~ddecbt~2->proc~dgesl~2 proc~ddot~2 ddot proc~ddecbt~2->proc~ddot~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 proc~dgesl~2->proc~ddot~2 proc~dgesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables con fac hl0 i ier iia iib iic ipa ipb ipc ires j j1 j2 k k1 lblox lenp lpb lpc mb mbsq mwid nb r srur Source Code dpjibt Variables Type Visibility Attributes Name Initial real(kind=dp), public :: con real(kind=dp), public :: fac real(kind=dp), public :: hl0 integer, public :: i integer, public :: ier integer, public :: iia integer, public :: iib integer, public :: iic integer, public :: ipa integer, public :: ipb integer, public :: ipc integer, public :: ires integer, public :: j integer, public :: j1 integer, public :: j2 integer, public :: k integer, public :: k1 integer, public :: lblox integer, public :: lenp integer, public :: lpb integer, public :: lpc integer, public :: mb integer, public :: mbsq integer, public :: mwid integer, public :: nb real(kind=dp), public :: r real(kind=dp), public :: srur Source Code subroutine dpjibt ( Neq , Y , Yh , Nyh , Ewt , Rtem , Savr , S , Wm , Iwm , res , jac , adda ) ! integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( in ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Rtem real ( kind = dp ), dimension ( * ) :: Savr real ( kind = dp ), dimension ( * ) :: S real ( kind = dp ), intent ( inout ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external :: res external :: jac external :: adda ! real ( kind = dp ) :: con , fac , hl0 , r , srur integer :: i , ier , iia , iib , iic , ipa , ipb , ipc , ires , j , j1 , j2 , k , k1 , lblox , lenp , lpb , lpc , mb , mbsq , mwid , nb ! dls1 % nje = dls1 % nje + 1 hl0 = dls1 % h * dls1 % el0 dls1 % ierpj = 0 dls1 % jcur = 1 mb = Iwm ( 1 ) nb = Iwm ( 2 ) mbsq = mb * mb lblox = mbsq * nb lpb = 3 + lblox lpc = lpb + lblox lenp = 3 * lblox if ( dls1 % miter == 2 ) then ! !  If MITER = 2, make 3*MB + 1 calls to RES to approximate J. ----------- ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then !  Error return for IRES = 2 or IRES = 3 return from RES. --------------- dls1 % ierpj = ires return else mwid = 3 * mb srur = Wm ( 1 ) do i = 1 , lenp Wm ( 2 + i ) = 0.0D0 enddo do k = 1 , 3 do j = 1 , mb !          Increment Y(I) for group of column indices, and call RES. ---- j1 = j + ( k - 1 ) * mb do i = j1 , dls1 % n , mwid r = max ( srur * abs ( Y ( i )), 0.01D0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do i = 1 , dls1 % n Rtem ( i ) = Rtem ( i ) - Savr ( i ) enddo k1 = k do i = j1 , dls1 % n , mwid !            Get Jacobian elements in column I (block-column K1). ------- Y ( i ) = Yh ( i , 1 ) r = max ( srur * abs ( Y ( i )), 0.01D0 / Ewt ( i )) fac = - hl0 / r !            Compute and load elements PA(*,J,K1). ---------------------- iia = i - j ipa = 2 + ( j - 1 ) * mb + ( k1 - 1 ) * mbsq do j2 = 1 , mb Wm ( ipa + j2 ) = Rtem ( iia + j2 ) * fac enddo if ( k1 > 1 ) then !            Compute and load elements PB(*,J,K1-1). -------------------- iib = iia - mb ipb = ipa + lblox - mbsq do j2 = 1 , mb Wm ( ipb + j2 ) = Rtem ( iib + j2 ) * fac enddo endif if ( k1 < nb ) then !            Compute and load elements PC(*,J,K1+1). -------------------- iic = iia + mb ipc = ipa + 2 * lblox + mbsq do j2 = 1 , mb Wm ( ipc + j2 ) = Rtem ( iic + j2 ) * fac enddo endif if ( k1 == 3 ) then !            Compute and load elements PC(*,J,1). ----------------------- ipc = ipa - 2 * mbsq + 2 * lblox do j2 = 1 , mb Wm ( ipc + j2 ) = Rtem ( j2 ) * fac enddo endif if ( k1 == nb - 2 ) then !            Compute and load elements PB(*,J,NB). ---------------------- iib = dls1 % n - mb ipb = ipa + 2 * mbsq + lblox do j2 = 1 , mb Wm ( ipb + j2 ) = Rtem ( iib + j2 ) * fac enddo endif k1 = k1 + 3 enddo endif enddo enddo !  RES call for first corrector iteration. ------------------------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return endif endif else !  If MITER = 1, call RES, then JAC, and multiply by scalar. ------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc )) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endif endif !  Add matrix A. -------------------------------------------------------- call adda ( Neq , dls1 % tn , Y , mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc )) !  Do LU decomposition on P. -------------------------------------------- call ddecbt ( mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc ), Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine dpjibt","tags":"","loc":"proc/dpjibt~2.html"},{"title":"dstodi – odepack","text":"subroutine dstodi(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savr, Acor, Wm, Iwm, res, adda, jac, pjac, slvs) Uses M_odepack proc~~dstodi~2~~UsesGraph proc~dstodi~2 dstodi module~m_odepack M_odepack proc~dstodi~2->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. DSTODI performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. Note: DSTODI is independent of the value of the iteration method\nindicator MITER, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTODI is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to RES, ADDA,\nand JAC. Y an array of length .ge. N used as the Y argument in\nall calls to RES, JAC, and ADDA. NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls tO RES, G, ADDA,\nand JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where LMAX MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N. also used for\ninput of YH(*,MAXORD+2) when JSTART = -1 and MAXORD is less\nthan the current order NQ.\nSame as YDOTI in the driver. SAVR an array of working storage, of length N. ACOR a work array of length N used for the accumulated\ncorrections. On a succesful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration. PJAC name of routine to evaluate and preprocess Jacobian matrix. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in H*EL0 before PJAC is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n  . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return , JSTART is set to 1 to facilitate continuation . KFLAG a completion code with the following meanings: 0 the step was succesful . - 1 the requested error could not be achieved . - 2 corrector convergence could not be achieved . - 3 RES ordered immediate return . - 4 error condition from RES could not be avoided . - 5 fatal error in PJAC or SLVS . A return with KFLAG = -1, -2, or -4 means either ABS(H) HMIN or 10 consecutive failures occurred. On a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls. MXNCF maximum number of convergence failures allowed.\nMETH/MITER = the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Savf real(kind=dp), dimension(*) :: Savr real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res real :: adda integer :: jac real :: pjac real :: slvs Calls proc~~dstodi~2~~CallsGraph proc~dstodi~2 dstodi proc~dcfode dcfode proc~dstodi~2->proc~dcfode proc~dvnorm dvnorm proc~dstodi~2->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dp dsm dup el1h eljh exdn exsm exup i i1 iredo ires iret j jb kgo m ncf newq r rh rhdn rhsm rhup told Source Code dstodi Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: el1h real(kind=dp), public :: eljh real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: ires integer, public :: iret integer, public :: j integer, public :: jb integer, public :: kgo integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told Source Code subroutine dstodi ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Savr , Acor , Wm , Iwm , res , adda , jac , pjac , slvs ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , dimension ( * ) :: Neq real ( kind = dp ), dimension ( * ) :: Y integer :: Nyh real ( kind = dp ), intent ( inout ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( inout ), dimension ( * ) :: Yh1 real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), dimension ( * ) :: Savf real ( kind = dp ), dimension ( * ) :: Savr real ( kind = dp ), intent ( inout ), dimension ( * ) :: Acor real ( kind = dp ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external res external adda external jac external pjac external slvs real ( kind = dp ) :: dcon , ddn , del , delp , dsm , dup , el1h , eljh , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , told integer :: i , i1 , iredo , ires , iret , j , jb , kgo , m , ncf , newq dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !  When RC differs from 1 by more than CCMAX, IPUP is set to MITER !  to force PJAC to be called. !  In any case, PJAC is called at least every MSBP steps. !----------------------------------------------------------------------- 400 continue if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by H and the !  error weight vector EWT.  The sum of the corrections is accumulated !  in ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 do i = 1 , dls1 % n Savf ( i ) = Yh ( i , 2 ) / dls1 % h Y ( i ) = Yh ( i , 1 ) enddo if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, the matrix P = A - H*EL(1)*dr/dy is reevaluated and !  preprocessed before starting the corrector iteration.  IPUP is set !  to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call pjac ( Neq , Y , Yh , Nyh , Ewt , Acor , Savr , Savf , Wm , Iwm , res , jac , adda ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj == 0 ) goto 600 if ( dls1 % ierpj < 0 ) goto 800 ires = dls1 % ierpj select case ( ires ) case ( 1 , 3 ) goto 700 case ( 2 ) goto 800 case default endselect endif !  Get residual at predicted values, if not already done in PJAC. ------- ires = 1 call res ( Neq , dls1 % tn , Y , Savf , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 kgo = abs ( ires ) select case ( kgo ) case ( 2 ) goto 800 case ( 3 ) goto 700 case default endselect 600 continue do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo do !----------------------------------------------------------------------- !  Solve the linear system with the current residual as !  right-hand side and P as coefficient matrix. !----------------------------------------------------------------------- call slvs ( Wm , Iwm , Savr , Savf ) if ( dls1 % iersl < 0 ) exit if ( dls1 % iersl <= 0 ) then el1h = dls1 % el ( 1 ) * dls1 % h del = dvnorm ( dls1 % n , Savr , Ewt ) * abs ( dls1 % h ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Savr ( i ) Savf ( i ) = Acor ( i ) + Yh ( i , 2 ) / dls1 % h Y ( i ) = Yh ( i , 1 ) + el1h * Acor ( i ) enddo !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. !----------------------------------------------------------------------- if ( m /= 0 ) dls1 % crate = max ( 0.2D0 * dls1 % crate , del / delp ) dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / ( dls1 % tesco ( 2 , dls1 % nq ) * dls1 % conit ) if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = abs ( dls1 % h ) * dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.1 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 7 ) then dls1 % kflag = - 1 goto 1300 else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l eljh = dls1 % el ( j ) * dls1 % h do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + eljh * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  The largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = abs ( dls1 % h ) * dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then delp = del ires = 1 call res ( Neq , dls1 % tn , Y , Savf , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 kgo = abs ( ires ) select case ( kgo ) case ( 1 ) cycle case ( 2 ) goto 800 case default endselect endif endif endif endif !----------------------------------------------------------------------- !  The correctors failed to converge, or RES has returned abnormally. !  on a convergence failure, if the Jacobian is out of date, PJAC is !  called for the next try.  Otherwise the YH array is retracted to its !  values before prediction, and H is reduced, if possible. !  take an error exit if IRES = 2, or H cannot be reduced, or MXNCF !  failures have occurred, or a fatal error occurred in PJAC or SLVS. !----------------------------------------------------------------------- dls1 % icf = 1 if ( dls1 % jcur == 1 ) exit dls1 % ipup = dls1 % miter goto 500 enddo 700 continue dls1 % icf = 2 ncf = ncf + 1 dls1 % rmax = 2.0D0 800 continue dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( ires == 2 ) then dls1 % kflag = - 1 - ires elseif ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 5 else if ( abs ( dls1 % h ) > dls1 % hmin * 1.00001D0 ) then if ( ncf /= dls1 % mxncf ) then rh = 0.25D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif if ( ires == 3 ) then dls1 % kflag = - 1 - ires else dls1 % kflag = - 2 endif endif goto 1300 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % h * dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.1D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 !----------------------------------------------------------------------------------------------------------------------------------- 1200 continue r = dls1 % h / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstodi","tags":"","loc":"proc/dstodi~2.html"},{"title":"dewset – odepack","text":"subroutine dewset(N, Itol, Rtol, Atol, Ycur, Ewt) NAME dewset(3f) - [M_odepack] Set error weight vector. SYNOPSIS subroutine dewset(N,Itol,Rtol,Atol,Ycur,Ewt)\n    integer,intent(in)        :: N\n    integer,intent(in)        :: Itol\n    real(kind=dp),intent(in)  :: Rtol(*)\n    real(kind=dp),intent(in)  :: Atol(*)\n    real(kind=dp),intent(in)  :: Ycur(N)\n    real(kind=dp),intent(out) :: Ewt(N) DESCRIPTION This subroutine sets the error weight vector EWT according to EWT(i) = RTOL(i)*ABS(YCUR(i)) + ATOL(i),  i = 1,...,N, with the subscript on RTOL and/or ATOL possibly replaced by 1 above,\n  depending on the value of ITOL. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Itol real(kind=dp), intent(in) :: Rtol (*) real(kind=dp), intent(in) :: Atol (*) real(kind=dp), intent(in) :: Ycur (N) real(kind=dp), intent(out) :: Ewt (N) Called by proc~~dewset~2~~CalledByGraph proc~dewset~2 dewset proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dewset~2 proc~dlsode~2 dlsode proc~dlsode~2->proc~dewset~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dewset~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dewset~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dewset~2 proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dewset~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dewset~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dewset~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~dewset~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i Source Code dewset Variables Type Visibility Attributes Name Initial integer, public :: i Source Code subroutine dewset ( N , Itol , Rtol , Atol , Ycur , Ewt ) ! integer , intent ( in ) :: N integer , intent ( in ) :: Itol real ( kind = dp ), intent ( in ) :: Rtol ( * ) real ( kind = dp ), intent ( in ) :: Atol ( * ) real ( kind = dp ), intent ( in ) :: Ycur ( N ) real ( kind = dp ), intent ( out ) :: Ewt ( N ) ! integer :: i ! select case ( Itol ) case ( 2 ) do i = 1 , N Ewt ( i ) = Rtol ( 1 ) * abs ( Ycur ( i )) + Atol ( i ) enddo case ( 3 ) do i = 1 , N Ewt ( i ) = Rtol ( i ) * abs ( Ycur ( i )) + Atol ( 1 ) enddo case ( 4 ) do i = 1 , N Ewt ( i ) = Rtol ( i ) * abs ( Ycur ( i )) + Atol ( i ) enddo case default do i = 1 , N Ewt ( i ) = Rtol ( 1 ) * abs ( Ycur ( i )) + Atol ( 1 ) enddo endselect end subroutine dewset","tags":"","loc":"proc/dewset~2.html"},{"title":"daigbt – odepack","text":"subroutine daigbt(res, adda, Neq, T, Y, Ydot, Mb, Nb, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSOIBT for\ninitialization only, when ISTATE = 0 .\nDAIGBT returns an error flag IER: IER = 0 means DAIGBT was successful . IER . ge . 2 means RES returned an error flag IRES = IER . IER . lt . 0 means the A matrix was found to have a singular diagonal block ( hence YDOT could not be solved for ) . Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: Neq (*) real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Mb integer, intent(inout) :: Nb real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier Calls proc~~daigbt~2~~CallsGraph proc~daigbt~2 daigbt proc~ddecbt~2 ddecbt proc~daigbt~2->proc~ddecbt~2 proc~dsolbt~2 dsolbt proc~daigbt~2->proc~dsolbt~2 proc~dgefa~2 dgefa proc~ddecbt~2->proc~dgefa~2 proc~dgesl~2 dgesl proc~ddecbt~2->proc~dgesl~2 proc~ddot~2 ddot proc~ddecbt~2->proc~ddot~2 proc~dsolbt~2->proc~dgesl~2 proc~dsolbt~2->proc~ddot~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 proc~dgesl~2->proc~ddot~2 proc~dgesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~daigbt~2~~CalledByGraph proc~daigbt~2 daigbt proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i lblox lenpw lpb lpc Source Code daigbt Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: lblox integer, public :: lenpw integer, public :: lpb integer, public :: lpc Source Code subroutine daigbt ( res , adda , Neq , T , Y , Ydot , Mb , Nb , Pw , Ipvt , Ier ) ! external res , adda integer :: Neq ( * ) real ( kind = dp ) :: T real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydot ( * ) integer , intent ( inout ) :: Mb integer , intent ( inout ) :: Nb real ( kind = dp ) :: Pw ( * ) integer :: Ipvt ( * ) integer , intent ( inout ) :: Ier integer :: i , lblox , lenpw , lpb , lpc ! lblox = Mb * Mb * Nb lpb = 1 + lblox lpc = lpb + lblox lenpw = 3 * lblox do i = 1 , lenpw Pw ( i ) = 0.0D0 enddo Ier = 1 call res ( Neq , T , Y , Pw , Ydot , Ier ) if ( Ier > 1 ) return call adda ( Neq , T , Y , Mb , Nb , Pw ( 1 ), Pw ( lpb ), Pw ( lpc )) call ddecbt ( Mb , Nb , Pw , Pw ( lpb ), Pw ( lpc ), Ipvt , Ier ) if ( Ier == 0 ) then call dsolbt ( Mb , Nb , Pw , Pw ( lpb ), Pw ( lpc ), Ydot , Ipvt ) return endif Ier = - Ier end subroutine daigbt","tags":"","loc":"proc/daigbt~2.html"},{"title":"drchek – odepack","text":"subroutine drchek(Job, g_sub, Neq, Y, Yh, Nyh, G0, G1, Gx, Jroot, Irt) This routine checks for the presence of a root in the vicinity of\nthe current T, in a manner depending on the input flag JOB.  It calls\nSubroutine DROOTS to locate the root as precisely as possible. In addition to variables described previously, DRCHEK\nuses the following for communication: JOB integer flag indicating type of call: JOB Description 1 means the problem is being initialized, and DRCHEK is to look for a root at or very near the initial T. ! 2 means a continuation call to the solver was just made, and DRCHEK is to check for a root in the relevant part of the step dlsr taken. ! 3 means a successful step was just taken, and DRCHEK is to look for a root in the interval of the step. G0 array of length NG, containing the value of g at T = T0.\nG0 is input for JOB .ge. 2, and output in all cases. G1,GX arrays of length NG for work space. IRT completion flag: IRT Description 0 means no root was found. -1 means JOB = 1 and a root was found too near to T. 1 means a legitimate root was found (JOB = 2 or 3). On return, T0 is the root location, and Y is the\ncorresponding solution vector. T0 value of T at one endpoint of interval of interest.  Only\nroots beyond T0 in the direction of integration are sought. T0 is input if JOB .ge. 2, and output in all cases. T0 is updated by DRCHEK, whether a root is found or not. TLAST dlsr value of T returned by the solver (input only). TOUTC copy of TOUT (input only). IRFND input flag showing whether the dlsr step taken had a root.\nIRFND = 1 if it did, = 0 if not. ITASKC copy of ITASK (input only). NGC copy of NG (input only). Arguments Type Intent Optional Attributes Name integer, intent(in) :: Job real :: g_sub integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: G0 (*) real(kind=dp) :: G1 (*) real(kind=dp) :: Gx (*) integer :: Jroot (*) integer, intent(out) :: Irt Calls proc~~drchek~2~~CallsGraph proc~drchek~2 drchek proc~dintdy~2 dintdy proc~drchek~2->proc~dintdy~2 proc~droots~2 droots proc~drchek~2->proc~droots~2 proc~xerrwd~2 xerrwd proc~dintdy~2->proc~xerrwd~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~drchek~2~~CalledByGraph proc~drchek~2 drchek proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~drchek~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~drchek~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables hming i iflag jflag t1 temp1 temp2 x zroot Source Code drchek Variables Type Visibility Attributes Name Initial real(kind=dp), public :: hming integer, public :: i integer, public :: iflag integer, public :: jflag real(kind=dp), public :: t1 real(kind=dp), public :: temp1 real(kind=dp), public :: temp2 real(kind=dp), public :: x logical, public :: zroot Source Code subroutine drchek ( Job , g_sub , Neq , Y , Yh , Nyh , G0 , G1 , Gx , Jroot , Irt ) ! integer , intent ( in ) :: Job external g_sub integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ) :: Yh ( Nyh , * ) real ( kind = dp ) :: G0 ( * ) real ( kind = dp ) :: G1 ( * ) real ( kind = dp ) :: Gx ( * ) integer :: Jroot ( * ) integer , intent ( out ) :: Irt real ( kind = dp ) :: hming , t1 , temp1 , temp2 , x integer :: i , iflag , jflag logical :: zroot Irt = 0 do i = 1 , dlsr % ngc Jroot ( i ) = 0 enddo hming = ( abs ( dls1 % tn ) + abs ( dls1 % h )) * dls1 % uround * 10 0.0D0 select case ( Job ) case ( 2 ) if ( dlsr % irfnd /= 0 ) then !  If a root was found on the previous step, evaluate G0 = g(T0). ------- call dintdy ( dlsr % t0 , 0 , Yh , Nyh , Y , iflag ) call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = dlsr % nge + 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) zroot = . true . enddo if ( zroot ) then !  g has a zero at T0.  Look at g at T + (small increment). ------------- temp1 = sign ( hming , dls1 % h ) dlsr % t0 = dlsr % t0 + temp1 if ( ( dlsr % t0 - dls1 % tn ) * dls1 % h < 0.0D0 ) then call dintdy ( dlsr % t0 , 0 , Yh , Nyh , Y , iflag ) else temp2 = temp1 / dls1 % h do i = 1 , dls1 % n Y ( i ) = Y ( i ) + temp2 * Yh ( i , 2 ) enddo endif call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = dlsr % nge + 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) then Jroot ( i ) = 1 zroot = . true . endif enddo if ( zroot ) then !  g has a zero at T0 and also close to T0.  Return root. --------------- Irt = 1 return endif endif endif !  G0 has no zero components.  Proceed to check relevant interval. ------ if ( dls1 % tn == dlsr % tlast ) then return endif case ( 3 ) case default ! !  Evaluate g at initial T, and check for zero values. ------------------ dlsr % t0 = dls1 % tn call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) zroot = . true . enddo if ( zroot ) then !  g has a zero at T.  Look at g at T + (small increment). -------------- temp2 = max ( hming / abs ( dls1 % h ), 0.1D0 ) temp1 = temp2 * dls1 % h dlsr % t0 = dlsr % t0 + temp1 do i = 1 , dls1 % n Y ( i ) = Y ( i ) + temp2 * Yh ( i , 2 ) enddo call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = dlsr % nge + 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) zroot = . true . enddo if ( zroot ) then !  g has a zero at T and also close to T.  Take error return. ----------- Irt = - 1 return endif endif return endselect ! !  Set T1 to TN or TOUTC, whichever comes first, and get g at T1. ------- if ( dlsr % itaskc /= 2 . and . dlsr % itaskc /= 3 . and . dlsr % itaskc /= 5 ) then if ( ( dlsr % toutc - dls1 % tn ) * dls1 % h < 0.0D0 ) then t1 = dlsr % toutc if ( ( t1 - dlsr % t0 ) * dls1 % h <= 0.0D0 ) then return endif call dintdy ( t1 , 0 , Yh , Nyh , Y , iflag ) endif t1 = dls1 % tn do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo endif call g_sub ( Neq , t1 , Y , dlsr % ngc , G1 ) dlsr % nge = dlsr % nge + 1 !  Call DROOTS to search for root in interval from T0 to T1. ------------ jflag = 0 do call droots ( dlsr % ngc , hming , jflag , dlsr % t0 , t1 , G0 , G1 , Gx , x , Jroot ) if ( jflag > 1 ) then dlsr % t0 = x !X!call dcopy(dlsr%ngc,Gx,1,G0,1) G0 ( 1 : dlsr % ngc ) = Gx ( 1 : dlsr % ngc ) if ( jflag /= 4 ) exit return else call dintdy ( x , 0 , Yh , Nyh , Y , iflag ) call g_sub ( Neq , x , Y , dlsr % ngc , Gx ) dlsr % nge = dlsr % nge + 1 endif enddo !  Found a root.  Interpolate to X and return. -------------------------- call dintdy ( x , 0 , Yh , Nyh , Y , iflag ) Irt = 1 end subroutine drchek","tags":"","loc":"proc/drchek~2.html"},{"title":"dintdy – odepack","text":"subroutine dintdy(T, K, Yh, Nyh, Dky, Iflag) DESCRIPTION DINTDY computes interpolated values of the K-th derivative of the\n  dependent variable vector y, and stores it in DKY.  This routine\n  is called within the package with K = 0 and T = TOUT, but may\n  also be called by the user for any K up to the current order.\n  (See detailed instructions in the usage documentation.) The computed values in DKY are gotten by interpolation using the\n  Nordsieck history array YH.  This array corresponds uniquely to a\n  vector-valued polynomial of degree NQCUR or less, and DKY is set\n  to the K-th derivative of this polynomial at T.\n  The formula for DKY is: q\n   DKY(i)  =  sum  c(j,K) * (T - tn)**(j-K) * h**(-j) * YH(i,j+1)\n              j=K where  c(j,K) = j (j-1) …*(j-K+1), q = NQCUR, tn = TCUR, h = HCUR. The quantities  nq = NQCUR, l = nq+1, N = NEQ, tn, and h are\n  communicated by COMMON.  The above sum is done in reverse order.\n  IFLAG is returned negative if either K or T is out of bounds. Arguments Type Intent Optional Attributes Name real(kind=dp) :: T integer :: K real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(inout) :: Dky (*) integer, intent(out) :: Iflag Calls proc~~dintdy~2~~CallsGraph proc~dintdy~2 dintdy proc~xerrwd~2 xerrwd proc~dintdy~2->proc~xerrwd~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dintdy~2~~CalledByGraph proc~dintdy~2 dintdy proc~drchek~2 drchek proc~drchek~2->proc~dintdy~2 proc~dlsode~2 dlsode proc~dlsode~2->proc~dintdy~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dintdy~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dintdy~2 proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dintdy~2 proc~dlsodar~2->proc~drchek~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dintdy~2 proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dintdy~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dintdy~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dintdy~2 proc~dlsodkr~2->proc~drchek~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~dintdy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables c i ic j jb jb2 jj jj1 jp1 msg r s tp Source Code dintdy Variables Type Visibility Attributes Name Initial real(kind=dp), public :: c integer, public :: i integer, public :: ic integer, public :: j integer, public :: jb integer, public :: jb2 integer, public :: jj integer, public :: jj1 integer, public :: jp1 character(len=80), public :: msg real(kind=dp), public :: r real(kind=dp), public :: s real(kind=dp), public :: tp Source Code subroutine dintdy ( T , K , Yh , Nyh , Dky , Iflag ) ! real ( kind = dp ) :: T integer :: K integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( inout ) :: Dky ( * ) integer , intent ( out ) :: Iflag ! real ( kind = dp ) :: c , r , s , tp integer :: i , ic , j , jb , jb2 , jj , jj1 , jp1 character ( len = 80 ) :: msg ! Iflag = 0 if ( K < 0 . or . K > dls1 % nq ) then msg = 'DINTDY-  K (=I1) illegal      ' call xerrwd ( msg , 30 , 51 , 0 , 1 , K , 0 , 0 , 0.0D0 , 0.0D0 ) Iflag = - 1 return endif tp = dls1 % tn - dls1 % hu - 10 0.0D0 * dls1 % uround * sign ( abs ( dls1 % tn ) + abs ( dls1 % hu ), dls1 % hu ) if ( ( T - tp ) * ( T - dls1 % tn ) > 0.0D0 ) then msg = 'DINTDY-  T (=R1) illegal      ' call xerrwd ( msg , 30 , 52 , 0 , 0 , 0 , 0 , 1 , T , 0.0D0 ) msg = '      T not in interval TCUR - HU (= R1) to TCUR (=R2)      ' call xerrwd ( msg , 60 , 52 , 0 , 0 , 0 , 0 , 2 , tp , dls1 % tn ) Iflag = - 2 return endif ! s = ( T - dls1 % tn ) / dls1 % h ic = 1 if ( K /= 0 ) then jj1 = dls1 % l - K do jj = jj1 , dls1 % nq ic = ic * jj enddo endif c = ic do i = 1 , dls1 % n Dky ( i ) = c * Yh ( i , dls1 % l ) enddo if ( K /= dls1 % nq ) then jb2 = dls1 % nq - K do jb = 1 , jb2 j = dls1 % nq - jb jp1 = j + 1 ic = 1 if ( K /= 0 ) then jj1 = jp1 - K do jj = jj1 , j ic = ic * jj enddo endif c = ic do i = 1 , dls1 % n Dky ( i ) = c * Yh ( i , jp1 ) + s * Dky ( i ) enddo enddo if ( K == 0 ) return endif r = dls1 % h ** ( - K ) do i = 1 , dls1 % n Dky ( i ) = r * Dky ( i ) enddo end subroutine dintdy","tags":"","loc":"proc/dintdy~2.html"},{"title":"dheqr – odepack","text":"subroutine dheqr(A, Lda, N, Q, Info, Ijob) This routine performs a QR decomposition of an upper\n   Hessenberg matrix A.  There are two options available: (1)  performing a fresh decomposition\n      (2)  updating the QR factors by adding a row and a\n           column to the matrix A. DHEQR decomposes an upper Hessenberg matrix by using Givens\n   rotations. On entry A       DOUBLE PRECISION(LDA, N)\n            the matrix to be decomposed.\n\n    LDA     INTEGER\n            the leading dimension of the array  A .\n\n    N       INTEGER\n            A is an (N+1) by N Hessenberg matrix.\n\n    IJOB    INTEGER\n            = 1     means that a fresh decomposition of the\n                    matrix A is desired.\n            .ge. 2  means that the current decomposition of A\n                    will be updated by the addition of a row\n                    and a column. On return A the upper triangular matrix R . The factorization can be written Q * A = R , where Q is a product of Givens rotations and R is upper triangular . Q DOUBLE PRECISION ( 2 * N ) the factors c and s of each Givens rotation used in decomposing A . INFO INTEGER = 0 normal value . = k if A ( k , k ) . eq . 0 . 0 . This is not an error condition for this subroutine , but it does indicate that DHELS will divide by zero if called . Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N real(kind=dp), intent(inout) :: Q (*) integer, intent(out) :: Info integer, intent(in) :: Ijob Called by proc~~dheqr~2~~CalledByGraph proc~dheqr~2 dheqr proc~dspigmr~2 dspigmr proc~dspigmr~2->proc~dheqr~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspigmr~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables c i iq j k km1 kp1 nm1 s t t1 t2 Source Code dheqr Variables Type Visibility Attributes Name Initial real(kind=dp), public :: c integer, public :: i integer, public :: iq integer, public :: j integer, public :: k integer, public :: km1 integer, public :: kp1 integer, public :: nm1 real(kind=dp), public :: s real(kind=dp), public :: t real(kind=dp), public :: t1 real(kind=dp), public :: t2 Source Code subroutine dheqr ( A , Lda , N , Q , Info , Ijob ) ! integer , intent ( in ) :: Lda real ( kind = dp ), intent ( inout ) :: A ( Lda , * ) integer , intent ( in ) :: N real ( kind = dp ), intent ( inout ) :: Q ( * ) integer , intent ( out ) :: Info integer , intent ( in ) :: Ijob ! real ( kind = dp ) :: c , s , t , t1 , t2 integer :: i , iq , j , k , km1 , kp1 , nm1 ! if ( Ijob > 1 ) then ! !  The old factorization of A will be updated.  A row and a column !  has been added to the matrix A. !  N by N-1 is now the old size of the matrix. ! nm1 = N - 1 ! !  Multiply the new column by the N previous Givens rotations. ! do k = 1 , nm1 i = 2 * ( k - 1 ) + 1 t1 = A ( k , N ) t2 = A ( k + 1 , N ) c = Q ( i ) s = Q ( i + 1 ) A ( k , N ) = c * t1 - s * t2 A ( k + 1 , N ) = s * t1 + c * t2 enddo ! !  Complete update of decomposition by forming last Givens rotation, !  and multiplying it times the column vector (A(N,N), A(N+1,N)). ! Info = 0 t1 = A ( N , N ) t2 = A ( N + 1 , N ) if ( t2 == 0.0D0 ) then c = 1.0D0 s = 0.0D0 elseif ( abs ( t2 ) < abs ( t1 ) ) then t = t2 / t1 c = 1.0D0 / sqrt ( 1.0D0 + t * t ) s = - c * t else t = t1 / t2 s = - 1.0D0 / sqrt ( 1.0D0 + t * t ) c = - s * t endif iq = 2 * N - 1 Q ( iq ) = c Q ( iq + 1 ) = s A ( N , N ) = c * t1 - s * t2 if ( A ( N , N ) == 0.0D0 ) Info = N else ! !  A new facorization is desired. ! !      QR decomposition without pivoting ! Info = 0 do k = 1 , N km1 = k - 1 kp1 = k + 1 ! !            Compute kth column of R. !            First, multiply the kth column of A by the previous !            k-1 Givens rotations. ! if ( km1 >= 1 ) then do j = 1 , km1 i = 2 * ( j - 1 ) + 1 t1 = A ( j , k ) t2 = A ( j + 1 , k ) c = Q ( i ) s = Q ( i + 1 ) A ( j , k ) = c * t1 - s * t2 A ( j + 1 , k ) = s * t1 + c * t2 enddo endif ! !            Compute Givens components c and s ! iq = 2 * km1 + 1 t1 = A ( k , k ) t2 = A ( kp1 , k ) if ( t2 == 0.0D0 ) then c = 1.0D0 s = 0.0D0 elseif ( abs ( t2 ) < abs ( t1 ) ) then t = t2 / t1 c = 1.0D0 / sqrt ( 1.0D0 + t * t ) s = - c * t else t = t1 / t2 s = - 1.0D0 / sqrt ( 1.0D0 + t * t ) c = - s * t endif Q ( iq ) = c Q ( iq + 1 ) = s A ( k , k ) = c * t1 - s * t2 if ( A ( k , k ) == 0.0D0 ) Info = k enddo return endif end subroutine dheqr","tags":"","loc":"proc/dheqr~2.html"},{"title":"dmnorm – odepack","text":"pure function dmnorm(n, v, w) This function routine computes the weighted max-norm\nof the vector of length N contained in the array V, with weights\ncontained in the array w of length N:\n  DMNORM = MAX(i=1,…,N) ABS(V(i))*W(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dmnorm~2~~CalledByGraph proc~dmnorm~2 dmnorm proc~dprja~2 dprja proc~dprja~2->proc~dmnorm~2 proc~dstoda~2 dstoda proc~dstoda~2->proc~dmnorm~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~dmnorm~2 proc~dlsoda~2->proc~dstoda~2 proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dmnorm~2 proc~dlsodar~2->proc~dstoda~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i vm Source Code dmnorm Variables Type Visibility Attributes Name Initial integer, public :: i real(kind=dp), public :: vm Source Code pure function dmnorm ( n , v , w ) integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: v ( n ) real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dmnorm integer :: i real ( kind = dp ) :: vm vm = 0.0d0 do i = 1 , n vm = max ( vm , abs ( v ( i )) * w ( i )) enddo dmnorm = vm end function dmnorm","tags":"","loc":"proc/dmnorm~2.html"},{"title":"dprep – odepack","text":"subroutine dprep(Neq, Y, Yh, Savf, Ewt, Ftem, Ia, Ja, Wk, Iwk, Ipper, f, jac) Uses M_odepack proc~~dprep~2~~UsesGraph proc~dprep~2 dprep module~m_odepack M_odepack proc~dprep~2->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This routine performs preprocessing related to the sparse linear\nsystems that must be solved if MITER = 1 or 2. The operations that are performed here are: compute sparseness structure of Jacobian according to MOSS, compute grouping of column indices (MITER = 2), compute a new ordering of rows and columns of the matrix, reorder JA corresponding to the new ordering, perform a symbolic LU factorization of the matrix, and set pointers for segments of the IWK/WK array. In addition to variables described previously, DPREP uses the\nfollowing for communication: YH the history array.  Only the first column, containing the\ncurrent Y vector, is used.  Used only if MOSS .ne. 0. SAVF a work array of length NEQ, used only if MOSS .ne. 0. EWT array of length NEQ containing (inverted) error weights.\nUsed only if MOSS = 2 or if ISTATE = MOSS = 1. FTEM a work array of length NEQ, identical to ACOR in the driver,\nused only if MOSS = 2. WK a real work array of length LENWK, identical to WM in\nthe driver. IWK integer work array, assumed to occupy the same space as WK. LENWK the length of the work arrays WK and IWK. ISTATC a copy of the driver input argument ISTATE (= 1 on the\nfirst call, = 3 on a continuation call). IYS flag value from ODRV or CDRV. IPPER output error flag with the following values and meanings:\n     0  no error.\n    -1  insufficient storage for internal structure pointers.\n    -2  insufficient storage for JGROUP.\n    -3  insufficient storage for ODRV.\n    -4  other error flag from ODRV (should never occur).\n    -5  insufficient storage for CDRV.\n    -6  other error flag from CDRV. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Ftem (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) real(kind=dp) :: Wk (*) integer, intent(inout) :: Iwk (*) integer, intent(out) :: Ipper real :: f integer :: jac Calls proc~~dprep~2~~CallsGraph proc~dprep~2 dprep none~wrapup400~2 wrapup400 proc~dprep~2->none~wrapup400~2 none~wrapup600~2 wrapup600 proc~dprep~2->none~wrapup600~2 proc~odrv odrv proc~dprep~2->proc~odrv proc~jgroup jgroup proc~dprep~2->proc~jgroup proc~cdrv cdrv proc~dprep~2->proc~cdrv none~wrapup500~2 wrapup500 proc~dprep~2->none~wrapup500~2 none~wrapup700~2 wrapup700 proc~dprep~2->none~wrapup700~2 proc~adjlr adjlr proc~dprep~2->proc~adjlr iwk iwk none~wrapup600~2->iwk proc~cntnzu cntnzu none~wrapup600~2->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp dq dyj erwt fac i ibr ier ipil ipiu iptt1 iptt2 j jfound k kmax kmin knew ldif lenigp liwk maxg np1 nzsut yj Subroutines wrapup400 wrapup500 wrapup600 wrapup700 Source Code dprep Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dq real(kind=dp), public :: dyj real(kind=dp), public :: erwt real(kind=dp), public :: fac integer, public :: i integer, public :: ibr integer, public :: ier integer, public :: ipil integer, public :: ipiu integer, public :: iptt1 integer, public :: iptt2 integer, public :: j integer, public :: jfound integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: knew integer, public :: ldif integer, public :: lenigp integer, public :: liwk integer, public :: maxg integer, public :: np1 integer, public :: nzsut real(kind=dp), public :: yj Subroutines subroutine wrapup400() Arguments None subroutine wrapup500() Arguments None subroutine wrapup600() Arguments None subroutine wrapup700() Arguments None Source Code subroutine dprep ( Neq , Y , Yh , Savf , Ewt , Ftem , Ia , Ja , Wk , Iwk , Ipper , f , jac ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) real ( kind = dp ), intent ( in ) :: Yh ( * ) real ( kind = dp ), intent ( inout ) :: Savf ( * ) real ( kind = dp ), intent ( in ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) real ( kind = dp ) :: Wk ( * ) integer , intent ( inout ) :: Iwk ( * ) integer , intent ( out ) :: Ipper external :: f external :: jac real ( kind = dp ) :: dq , dyj , erwt , fac , yj integer :: i , ibr , ier , ipil , ipiu , iptt1 , iptt2 , j , jfound , k , kmax , kmin , knew , ldif , lenigp , liwk , maxg , np1 , nzsut dlss % ibian = dlss % lrat * 2 dlss % ipian = dlss % ibian + 1 np1 = dls1 % n + 1 dlss % ipjan = dlss % ipian + np1 dlss % ibjan = dlss % ipjan - 1 liwk = dlss % lenwk * dlss % lrat if ( dlss % ipjan + dls1 % n - 1 > liwk ) then call wrapup400 () return endif if ( dlss % moss /= 0 ) then ! if ( dlss % istatc /= 3 ) then !  ISTATE = 1 and MOSS .ne. 0.  Perturb Y for structure determination. -- do i = 1 , dls1 % n erwt = 1.0D0 / Ewt ( i ) fac = 1.0D0 + 1.0D0 / ( i + 1.0D0 ) Y ( i ) = Y ( i ) + fac * sign ( erwt , Y ( i )) enddo if ( dlss % moss == 1 ) goto 100 if ( dlss % moss == 2 ) goto 200 endif ! !  ISTATE = 3 and MOSS .ne. 0.  Load Y from YH(*,1). -------------------- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) enddo if ( dlss % moss == 1 ) goto 100 if ( dlss % moss == 2 ) goto 200 endif ! !  MOSS = 0.  Process user's IA,JA.  Add diagonal entries if necessary. - knew = dlss % ipjan kmin = Ia ( 1 ) Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n jfound = 0 kmax = Ia ( j + 1 ) - 1 if ( kmin <= kmax ) then do k = kmin , kmax i = Ja ( k ) if ( i == j ) jfound = 1 if ( knew > liwk ) then call wrapup400 () return endif Iwk ( knew ) = i knew = knew + 1 enddo if ( jfound == 1 ) goto 50 endif if ( knew > liwk ) then call wrapup400 () return endif Iwk ( knew ) = j knew = knew + 1 50 continue Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan kmin = kmax + 1 enddo goto 300 ! !  MOSS = 1.  Compute structure from user-supplied Jacobian routine JAC. !  A dummy call to F allows user to create temporaries for use in JAC. -- 100 continue call f ( Neq , dls1 % tn , Y , Savf ) k = dlss % ipjan Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = j k = k + 1 do i = 1 , dls1 % n Savf ( i ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Savf ) do i = 1 , dls1 % n if ( abs ( Savf ( i )) > dlss % seth ) then if ( i /= j ) then if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = i k = k + 1 endif endif enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo goto 300 ! !  MOSS = 2.  Compute structure from results of N + 1 calls to F. ------- 200 continue k = dlss % ipjan Iwk ( dlss % ipian ) = 1 call f ( Neq , dls1 % tn , Y , Savf ) do j = 1 , dls1 % n if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = j k = k + 1 yj = Y ( j ) erwt = 1.0D0 / Ewt ( j ) dyj = sign ( erwt , yj ) Y ( j ) = yj + dyj call f ( Neq , dls1 % tn , Y , Ftem ) Y ( j ) = yj do i = 1 , dls1 % n dq = ( Ftem ( i ) - Savf ( i )) / dyj if ( abs ( dq ) > dlss % seth ) then if ( i /= j ) then if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = i k = k + 1 endif endif enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo ! 300 continue if ( dlss % moss /= 0 . and . dlss % istatc == 1 ) then !  If ISTATE = 1 and MOSS .ne. 0, restore Y from YH. -------------------- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) enddo endif dlss % nnz = Iwk ( dlss % ipian + dls1 % n ) - 1 lenigp = 0 dlss % ipigp = dlss % ipjan + dlss % nnz if ( dls1 % miter == 2 ) then ! !  Compute grouping of column indices (MITER = 2). ---------------------- maxg = np1 dlss % ipjgp = dlss % ipjan + dlss % nnz dlss % ibjgp = dlss % ipjgp - 1 dlss % ipigp = dlss % ipjgp + dls1 % n iptt1 = dlss % ipigp + np1 iptt2 = iptt1 + dls1 % n dlss % lreq = iptt2 + dls1 % n - 1 if ( dlss % lreq > liwk ) then call wrapup500 () return endif call jgroup ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), maxg , dlss % ngp , Iwk ( dlss % ipigp ), Iwk ( dlss % ipjgp ), Iwk ( iptt1 ), Iwk ( iptt2 ), ier ) if ( ier /= 0 ) then call wrapup500 () return endif lenigp = dlss % ngp + 1 endif ! !  Compute new ordering of rows/columns of Jacobian. -------------------- dlss % ipr = dlss % ipigp + lenigp dlss % ipc = dlss % ipr dlss % ipic = dlss % ipc + dls1 % n dlss % ipisp = dlss % ipic + dls1 % n dlss % iprsp = ( dlss % ipisp - 2 ) / dlss % lrat + 2 dlss % iesp = dlss % lenwk + 1 - dlss % iprsp if ( dlss % iesp < 0 ) then call wrapup600 () return endif ibr = dlss % ipr - 1 do i = 1 , dls1 % n Iwk ( ibr + i ) = i enddo dlss % nsp = liwk + 1 - dlss % ipisp call odrv ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk , Iwk ( dlss % ipr ), Iwk ( dlss % ipic ), dlss % nsp , Iwk ( dlss % ipisp ), 1 , dlss % iys ) if ( dlss % iys == 11 * dls1 % n + 1 ) then ! Ipper = - 4 return else if ( dlss % iys /= 0 ) then call wrapup600 () return endif ! !  Reorder JAN and do symbolic LU factorization of matrix. -------------- dlss % ipa = dlss % lenwk + 1 - dlss % nnz dlss % nsp = dlss % ipa - dlss % iprsp dlss % lreq = max ( 12 * dls1 % n / dlss % lrat , 6 * dls1 % n / dlss % lrat + 2 * dls1 % n + dlss % nnz ) + 3 dlss % lreq = dlss % lreq + dlss % iprsp - 1 + dlss % nnz if ( dlss % lreq > dlss % lenwk ) then call wrapup700 () return endif dlss % iba = dlss % ipa - 1 do i = 1 , dlss % nnz Wk ( dlss % iba + i ) = 0.0D0 enddo dlss % ipisp = dlss % lrat * ( dlss % iprsp - 1 ) + 1 call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), & & Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Wk ( dlss % ipa ), & & Wk ( dlss % ipa ), dlss % nsp , Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 5 , dlss % iys ) dlss % lreq = dlss % lenwk - dlss % iesp if ( dlss % iys == 10 * dls1 % n + 1 ) then call wrapup700 () return endif if ( dlss % iys /= 0 ) then ! Ipper = - 6 dlss % lreq = dlss % lenwk return else ipil = dlss % ipisp ipiu = ipil + 2 * dls1 % n + 1 dlss % nzu = Iwk ( ipil + dls1 % n ) - Iwk ( ipil ) dlss % nzl = Iwk ( ipiu + dls1 % n ) - Iwk ( ipiu ) if ( dlss % lrat <= 1 ) then call adjlr ( dls1 % n , Iwk ( dlss % ipisp ), ldif ) dlss % lreq = dlss % lreq + ldif endif if ( dlss % lrat == 2 . and . dlss % nnz == dls1 % n ) dlss % lreq = dlss % lreq + 1 dlss % nsp = dlss % nsp + dlss % lreq - dlss % lenwk dlss % ipa = dlss % lreq + 1 - dlss % nnz dlss % iba = dlss % ipa - 1 Ipper = 0 return endif endif contains subroutine wrapup400 () Ipper = - 1 dlss % lreq = 2 + ( 2 * dls1 % n + 1 ) / dlss % lrat dlss % lreq = max ( dlss % lenwk + 1 , dlss % lreq ) end subroutine wrapup400 subroutine wrapup500 () Ipper = - 2 dlss % lreq = ( dlss % lreq - 1 ) / dlss % lrat + 1 end subroutine wrapup500 subroutine wrapup600 () Ipper = - 3 call cntnzu ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), nzsut ) dlss % lreq = dlss % lenwk - dlss % iesp + ( 3 * dls1 % n + 4 * nzsut - 1 ) / dlss % lrat + 1 end subroutine wrapup600 subroutine wrapup700 () Ipper = - 5 end subroutine wrapup700 end subroutine dprep","tags":"","loc":"proc/dprep~2.html"},{"title":"dbnorm – odepack","text":"pure function dbnorm(n, a, nra, ml, mu, w) This function computes the norm of a banded N by N matrix,\nstored in the array A, that is consistent with the weighted max-norm\non vectors, with weights stored in the array W.\nML and MU are the lower and upper half-bandwidths of the matrix.\nNRA is the first dimension of the A array, NRA .ge. ML+MU+1.\nIn terms of the matrix elements a(i,j), the norm is given by: DBNORM = MAX(i=1,...,N) ( W(i) * Sum(j=1,...,N) ABS(a(i,j))/W(j) ) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: a (nra,n) integer, intent(in) :: nra integer, intent(in) :: ml integer, intent(in) :: mu real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dbnorm~2~~CalledByGraph proc~dbnorm~2 dbnorm none~wrapup wrapup none~wrapup->proc~dbnorm~2 proc~dprja~2 dprja proc~dprja~2->none~wrapup Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables an i i1 j jhi jlo sum Source Code dbnorm Variables Type Visibility Attributes Name Initial real(kind=dp), public :: an integer, public :: i integer, public :: i1 integer, public :: j integer, public :: jhi integer, public :: jlo real(kind=dp), public :: sum Source Code pure function dbnorm ( n , a , nra , ml , mu , w ) integer , intent ( in ) :: n integer , intent ( in ) :: nra real ( kind = dp ), intent ( in ) :: a ( nra , n ) integer , intent ( in ) :: ml integer , intent ( in ) :: mu real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dbnorm integer :: i , i1 , jlo , jhi , j real ( kind = dp ) :: an , sum an = 0.0d0 do i = 1 , n sum = 0.0d0 i1 = i + mu + 1 jlo = max ( i - ml , 1 ) jhi = min ( i + mu , n ) do j = jlo , jhi sum = sum + abs ( a ( i1 - j , j )) / w ( j ) enddo an = max ( an , sum * w ( i )) enddo dbnorm = an end function dbnorm","tags":"","loc":"proc/dbnorm~2.html"},{"title":"odrv – odepack","text":"subroutine odrv(N, Ia, Ja, A, P, Ip, Nsp, Isp, Path, Flag) Name odrv(3f) [M_odepack] - driver for sparse matrix reordering routines Description odrv finds a minimum degree ordering of the rows and columns\n   of a matrix m stored in (ia,ja,a) format (see below).  for the\n   reordered matrix, the work and storage required to perform\n   gaussian elimination is (usually) significantly less. note.. odrv and its subordinate routines have been modified to\n   compute orderings for general matrices, not necessarily having any\n   symmetry.  the miminum degree ordering is computed for the\n   structure of the symmetric matrix  m + m-transpose.\n   modifications to the original odrv module have been made in\n   the coding in subroutine mdi, and in the initial comments in\n   subroutines odrv and md. if only the nonzero entries in the upper triangle of m are being\n   stored, then odrv symmetrically reorders (ia,ja,a), (optionally)\n   with the diagonal entries placed first in each row.  this is to\n   ensure that if m(i,j) will be in the upper triangle of m with\n   respect to the new ordering, then m(i,j) is stored in row i (and\n   thus m(j,i) is not stored),  whereas if m(i,j) will be in the\n   strict lower triangle of m, then m(j,i) is stored in row j (and\n   thus m(i,j) is not stored). storage of sparse matrices the nonzero entries of the matrix m are stored row-by-row in the\n   array a.  to identify the individual nonzero entries in each row,\n   we need to know in which column each entry lies.  these column\n   indices are stored in the array ja.  i.e., if  a(k) = m(i,j),  then\n   ja(k) = j.  to identify the individual rows, we need to know where\n   each row starts.  these row pointers are stored in the array ia.\n   i.e., if m(i,j) is the first nonzero entry (stored) in the i-th row\n   and  a(k) = m(i,j),  then  ia(i) = k.  moreover, ia(n+1) points to\n   the first location following the last element in the last row.\n   thus, the number of entries in the i-th row is  ia(i+1) - ia(i),\n   the nonzero entries in the i-th row are stored consecutively in a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), and the corresponding column indices are stored consecutively in ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). when the coefficient matrix is symmetric, only the nonzero entries\n   in the upper triangle need be stored.  for example, the matrix ( 1  0  2  3  0 )\n             ( 0  4  0  0  0 )\n         m = ( 2  0  5  6  0 )\n             ( 3  0  6  7  8 )\n             ( 0  0  0  8  9 ) could be stored as - 1  2  3  4  5  6  7  8  9 10 11 12 13\n         ---+--------------------------------------\n         ia - 1  4  5  8 12 14\n         ja - 1  3  4  2  1  3  4  1  3  4  5  4  5\n          a - 1  2  3  4  2  5  6  3  6  7  8  8  9 or (symmetrically) as - 1  2  3  4  5  6  7  8  9\n         ---+--------------------------\n         ia - 1  4  5  7  9 10\n         ja - 1  3  4  2  3  4  4  5  5\n          a - 1  2  3  4  5  6  7  8  9          . parameters n    - order of the matrix\n\n    ia   - integer one-dimensional array containing pointers to delimit\n           rows in ja and a.  dimension = n+1\n\n    ja   - integer one-dimensional array containing the column indices\n           corresponding to the elements of a.  dimension = number of\n           nonzero entries in (the upper triangle of) m\n\n    a    - real one-dimensional array containing the nonzero entries in\n           (the upper triangle of) m, stored by rows.  dimension =\n           number of nonzero entries in (the upper triangle of) m\n\n    p    - integer one-dimensional array used to return the permutation\n           of the rows and columns of m corresponding to the minimum\n           degree ordering.  dimension = n\n\n    ip   - integer one-dimensional array used to return the inverse of\n           the permutation returned in p.  dimension = n\n\n    nsp  - declared dimension of the one-dimensional array isp.  nsp\n           must be at least  3n+4k,  where k is the number of nonzeroes\n           in the strict upper triangle of m\n\n    isp  - integer one-dimensional array used for working storage.\n           dimension = nsp\n\n    path - integer path specification.  values and their meanings are -\n             1  find minimum degree ordering only\n             2  find minimum degree ordering and reorder symmetrically\n                  stored matrix (used when only the nonzero entries in\n                  the upper triangle of m are being stored)\n             3  reorder symmetrically stored matrix as specified by\n                  input permutation (used when an ordering has already\n                  been determined and only the nonzero entries in the\n                  upper triangle of m are being stored)\n             4  same as 2 but put diagonal entries at start of each row\n             5  same as 3 but put diagonal entries at start of each row\n\n    flag - integer error flag.  values and their meanings are -\n               0    no errors detected\n              9n+k  insufficient storage in md\n             10n+1  insufficient storage in odrv\n             11n+1  illegal path specification Arguments Type Intent Optional Attributes Name integer :: N integer, dimension(*) :: Ia integer, dimension(*) :: Ja real(kind=dp), dimension(*) :: A integer, dimension(*) :: P integer, dimension(*) :: Ip integer, intent(in) :: Nsp integer, dimension(*) :: Isp integer, intent(in) :: Path integer, intent(inout) :: Flag Calls proc~~odrv~2~~CallsGraph proc~odrv~2 odrv proc~md~2 md proc~odrv~2->proc~md~2 proc~sro~2 sro proc~odrv~2->proc~sro~2 proc~mdi~2 mdi proc~md~2->proc~mdi~2 proc~mdm~2 mdm proc~md~2->proc~mdm~2 proc~mdp~2 mdp proc~md~2->proc~mdp~2 proc~mdu~2 mdu proc~md~2->proc~mdu~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dflag head l max next q tmp v Source Code odrv Variables Type Visibility Attributes Name Initial logical, public :: dflag integer, public :: head integer, public :: l integer, public :: max integer, public :: next integer, public :: q integer, public :: tmp integer, public :: v Source Code subroutine odrv ( N , Ia , Ja , A , P , Ip , Nsp , Isp , Path , Flag ) integer :: N integer , dimension ( * ) :: Ia integer , dimension ( * ) :: Ja real ( kind = dp ), dimension ( * ) :: A integer , dimension ( * ) :: P integer , dimension ( * ) :: Ip integer , intent ( in ) :: Nsp integer , dimension ( * ) :: Isp integer , intent ( in ) :: Path integer , intent ( inout ) :: Flag logical :: dflag integer :: head , l , max , next , q , tmp , v !----initialize error flag and validate path specification Flag = 0 if ( Path < 1 . or . 5 < Path ) then !  ** error -- illegal path specified Flag = 11 * N + 1 return else !----allocate storage and find minimum degree ordering if ( ( Path - 1 ) * ( Path - 2 ) * ( Path - 4 ) == 0 ) then max = ( Nsp - N ) / 2 v = 1 l = v + max head = l + max next = head + N if ( max < N ) then Flag = 10 * N + 1 return endif call md ( N , Ia , Ja , max , Isp ( v ), Isp ( l ), Isp ( head ), P , Ip , Isp ( v ), Flag ) !  ** error -- error detected in md if ( Flag /= 0 ) return endif !----allocate storage and symmetrically reorder matrix if ( ( Path - 2 ) * ( Path - 3 ) * ( Path - 4 ) * ( Path - 5 ) == 0 ) then tmp = ( Nsp + 1 ) - N q = tmp - ( Ia ( N + 1 ) - 1 ) if ( q < 1 ) then Flag = 10 * N + 1 return endif dflag = Path == 4 . or . Path == 5 call sro ( N , Ip , Ia , Ja , A , Isp ( tmp ), Isp ( q ), dflag ) endif return endif !  ** error -- insufficient storage Flag = 10 * N + 1 end subroutine odrv","tags":"","loc":"proc/odrv~2.html"},{"title":"cntnzu – odepack","text":"subroutine cntnzu(N, Ia, Ja, Nzsut) This routine counts the number of nonzero elements in the strict\nupper triangle of the matrix M + M(transpose), where the sparsity\nstructure of M is given by pointer arrays IA and JA. This is needed to compute the storage requirements for the\nsparse matrix reordering operation in ODRV. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(out) :: Nzsut Contents Variables ii j jj jmax jmin k kmax kmin num Source Code cntnzu Variables Type Visibility Attributes Name Initial integer, public :: ii integer, public :: j integer, public :: jj integer, public :: jmax integer, public :: jmin integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: num Source Code subroutine cntnzu ( N , Ia , Ja , Nzsut ) ! integer , intent ( in ) :: N integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( out ) :: Nzsut ! integer :: ii , j , jj , jmax , jmin , k , kmax , kmin , num ! num = 0 OUTER : do ii = 1 , N jmin = Ia ( ii ) jmax = Ia ( ii + 1 ) - 1 if ( jmin <= jmax ) then MAIN : do j = jmin , jmax if ( Ja ( j ) < ii ) then jj = Ja ( j ) kmin = Ia ( jj ) kmax = Ia ( jj + 1 ) - 1 if ( kmin <= kmax ) then do k = kmin , kmax if ( Ja ( k ) == ii ) cycle MAIN enddo endif elseif ( Ja ( j ) == ii ) then cycle MAIN endif num = num + 1 enddo MAIN endif enddo OUTER Nzsut = num end subroutine cntnzu","tags":"","loc":"proc/cntnzu~2.html"},{"title":"ddecbt – odepack","text":"subroutine ddecbt(M, N, A, B, C, Ip, Ier) NAME ddecbt(3f) -[M_odepack] Block-tridiagonal matrix decomposition routine. DESCRIPTION The input matrix contains three blocks of elements in each block-row,\n including blocks in the (1,3) and (N,N-2) block positions.\n DDECBT uses block Gauss elimination and Subroutines DGEFA and DGESL\n for solution of blocks.  Partial pivoting is done within\n block-rows only. Note: this version uses LINPACK routines DGEFA/DGESL instead of\n of dec/sol for solution of blocks, and it uses the BLAS routine DDOT\n for dot product calculations. INPUT M order of each block. N number of blocks in each direction of the matrix.\n   N must be 4 or more.  The complete matrix has order M*N. A M by M by N array containing diagonal blocks.\n   A(i,j,k) contains the (i,j) element of the k-th block. B M by M by N array containing the super-diagonal blocks\n   (in B( , ,k) for k = 1,…,N-1) and the block in the (N,N-2)\n   block position (in B( , ,N)). C M by M by N array containing the subdiagonal blocks\n   (in C( , ,k) for k = 2,3,…,N) and the block in the\n   (1,3) block position (in C( , ,1)). IP integer array of length M*N for working storage. OUTPUT A,B,C M by M by N arrays containing the block-LU decomposition\n   of the input matrix. IP M by N array of pivot information.  IP(*,k) contains\n   information for the k-th digonal block. IER 0  if no trouble occurred, or\n   = -1 if the input value of M or N was illegal, or\n   = k  if a singular matrix was found in the k-th diagonal block. Use DSOLBT to solve the associated linear system. External routines required: DGEFA and DGESL (from LINPACK) and\n DDOT (from the BLAS, or Basic Linear Algebra package). Arguments Type Intent Optional Attributes Name integer :: M integer, intent(in) :: N real(kind=dp), intent(inout) :: A (M,M,N) real(kind=dp), intent(inout) :: B (M,M,N) real(kind=dp), intent(inout) :: C (M,M,N) integer :: Ip (M,N) integer, intent(inout) :: Ier Calls proc~~ddecbt~2~~CallsGraph proc~ddecbt~2 ddecbt proc~dgefa~2 dgefa proc~ddecbt~2->proc~dgefa~2 proc~dgesl~2 dgesl proc~ddecbt~2->proc~dgesl~2 proc~ddot~2 ddot proc~ddecbt~2->proc~ddot~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 proc~dgesl~2->proc~ddot~2 proc~dgesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~ddecbt~2~~CalledByGraph proc~ddecbt~2 ddecbt proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~ddecbt~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dpp i j k km1 nm1 nm2 Source Code ddecbt Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dpp integer, public :: i integer, public :: j integer, public :: k integer, public :: km1 integer, public :: nm1 integer, public :: nm2 Source Code subroutine ddecbt ( M , N , A , B , C , Ip , Ier ) ! integer :: M integer , intent ( in ) :: N real ( kind = dp ), intent ( inout ) :: A ( M , M , N ) real ( kind = dp ), intent ( inout ) :: B ( M , M , N ) real ( kind = dp ), intent ( inout ) :: C ( M , M , N ) integer :: Ip ( M , N ) integer , intent ( inout ) :: Ier ! real ( kind = dp ) :: dpp integer :: i , j , k , km1 , nm1 , nm2 ! if ( M < 1 . or . N < 4 ) then Ier = - 1 return else nm1 = N - 1 nm2 = N - 2 ! Process the first block-row. ----------------------------------------- call dgefa ( A , M , M , Ip , Ier ) k = 1 if ( Ier == 0 ) then do j = 1 , M call dgesl ( A , M , M , Ip , B ( 1 , j , 1 ), 0 ) call dgesl ( A , M , M , Ip , C ( 1 , j , 1 ), 0 ) enddo ! Adjust B(*,*,2). ----------------------------------------------------- do j = 1 , M do i = 1 , M dpp = ddot ( M , C ( i , 1 , 2 ), M , C ( 1 , j , 1 ), 1 ) B ( i , j , 2 ) = B ( i , j , 2 ) - dpp enddo enddo ! Main loop.  Process block-rows 2 to N-1. ----------------------------- do k = 2 , nm1 km1 = k - 1 do j = 1 , M do i = 1 , M dpp = ddot ( M , C ( i , 1 , k ), M , B ( 1 , j , km1 ), 1 ) A ( i , j , k ) = A ( i , j , k ) - dpp enddo enddo call dgefa ( A ( 1 , 1 , k ), M , M , Ip ( 1 , k ), Ier ) if ( Ier /= 0 ) then Ier = k return endif do j = 1 , M call dgesl ( A ( 1 , 1 , k ), M , M , Ip ( 1 , k ), B ( 1 , j , k ), 0 ) enddo enddo ! Process last block-row and return. ----------------------------------- do j = 1 , M do i = 1 , M dpp = ddot ( M , B ( i , 1 , N ), M , B ( 1 , j , nm2 ), 1 ) C ( i , j , N ) = C ( i , j , N ) - dpp enddo enddo do j = 1 , M do i = 1 , M dpp = ddot ( M , C ( i , 1 , N ), M , B ( 1 , j , nm1 ), 1 ) A ( i , j , N ) = A ( i , j , N ) - dpp enddo enddo call dgefa ( A ( 1 , 1 , N ), M , M , Ip ( 1 , N ), Ier ) k = N if ( Ier == 0 ) return endif endif ! Error returns. ------------------------------------------------------- Ier = k end subroutine ddecbt","tags":"","loc":"proc/ddecbt~2.html"},{"title":"mdi – odepack","text":"subroutine mdi(N, Ia, Ja, Max, V, L, Head, Last, Next, Mark, Tag, Flag) mdi – initialization Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(in) :: Max integer, intent(inout) :: V (*) integer, intent(inout) :: L (*) integer, intent(inout) :: Head (*) integer, intent(out) :: Last (*) integer, intent(inout) :: Next (*) integer, intent(inout) :: Mark (*) integer, intent(in) :: Tag integer :: Flag Called by proc~~mdi~2~~CalledByGraph proc~mdi~2 mdi proc~md~2 md proc~md~2->proc~mdi~2 proc~odrv~2 odrv proc~odrv~2->proc~md~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dvi j jmax jmin k kmax lvk nextvi sfs vi vj Source Code mdi Variables Type Visibility Attributes Name Initial integer, public :: dvi integer, public :: j integer, public :: jmax integer, public :: jmin integer, public :: k integer, public :: kmax integer, public :: lvk integer, public :: nextvi integer, public :: sfs integer, public :: vi integer, public :: vj Source Code subroutine mdi ( N , Ia , Ja , Max , V , L , Head , Last , Next , Mark , Tag , Flag ) ! integer , intent ( in ) :: N integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( in ) :: Max integer , intent ( inout ) :: V ( * ) integer , intent ( inout ) :: L ( * ) integer , intent ( inout ) :: Head ( * ) integer , intent ( out ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) integer , intent ( in ) :: Tag integer :: Flag ! integer :: dvi , j , jmax , jmin , k , kmax , lvk , nextvi , sfs , vi , vj ! !----initialize degrees, element lists, and degree lists do vi = 1 , N Mark ( vi ) = 1 L ( vi ) = 0 Head ( vi ) = 0 enddo sfs = N + 1 ! !----create nonzero structure !----for each nonzero entry a(vi,vj) do vi = 1 , N jmin = Ia ( vi ) jmax = Ia ( vi + 1 ) - 1 if ( jmin <= jmax ) then MINMAX : do j = jmin , jmax vj = Ja ( j ) if ( vj < vi ) then ! !------if a(vi,vj) is in strict lower triangle !------check for previous occurrence of a(vj,vi) lvk = vi kmax = Mark ( vi ) - 1 if ( kmax /= 0 ) then do k = 1 , kmax lvk = L ( lvk ) if ( V ( lvk ) == vj ) cycle MINMAX enddo endif elseif ( vj == vi ) then cycle endif !----for unentered entries a(vi,vj) if ( sfs >= Max ) then ! !  ** error-  insufficient storage Flag = 9 * N + vi return else ! !------enter vj in element list for vi Mark ( vi ) = Mark ( vi ) + 1 V ( sfs ) = vj L ( sfs ) = L ( vi ) L ( vi ) = sfs sfs = sfs + 1 ! !------enter vi in element list for vj Mark ( vj ) = Mark ( vj ) + 1 V ( sfs ) = vi L ( sfs ) = L ( vj ) L ( vj ) = sfs sfs = sfs + 1 endif enddo MINMAX endif enddo ! !----create degree lists and initialize mark vector do vi = 1 , N dvi = Mark ( vi ) Next ( vi ) = Head ( dvi ) Head ( dvi ) = vi Last ( vi ) = - dvi nextvi = Next ( vi ) if ( nextvi > 0 ) Last ( nextvi ) = vi Mark ( vi ) = Tag enddo end subroutine mdi","tags":"","loc":"proc/mdi~2.html"},{"title":"dainvg – odepack","text":"subroutine dainvg(res, adda, Neq, T, Y, Ydot, Miter, Ml, Mu, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSODI for\ninitialization only, when ISTATE = 0 .\nDAINVG returns an error flag IER: IER  =  0  means DAINVG was successful.\nIER .ge. 2 means RES returned an error flag IRES = IER.\nIER .lt. 0 means the a-matrix was found to be singular. Arguments Type Intent Optional Attributes Name real :: res real :: adda integer, intent(inout) :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Miter integer, intent(inout) :: Ml integer, intent(inout) :: Mu real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier Calls proc~~dainvg~2~~CallsGraph proc~dainvg~2 dainvg proc~dgbfa~2 dgbfa proc~dainvg~2->proc~dgbfa~2 proc~dgesl~2 dgesl proc~dainvg~2->proc~dgesl~2 proc~dgbsl~2 dgbsl proc~dainvg~2->proc~dgbsl~2 proc~dgefa~2 dgefa proc~dainvg~2->proc~dgefa~2 proc~idamax~2 idamax proc~dgbfa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgbfa~2->proc~dscal~2 proc~daxpy~2 daxpy proc~dgbfa~2->proc~daxpy~2 proc~dgesl~2->proc~daxpy~2 proc~ddot~2 ddot proc~dgesl~2->proc~ddot~2 proc~dgbsl~2->proc~daxpy~2 proc~dgbsl~2->proc~ddot~2 proc~dgefa~2->proc~idamax~2 proc~dgefa~2->proc~dscal~2 proc~dgefa~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dainvg~2~~CalledByGraph proc~dainvg~2 dainvg proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i lenpw mlp1 nrowpw Source Code dainvg Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: lenpw integer, public :: mlp1 integer, public :: nrowpw Source Code subroutine dainvg ( res , adda , Neq , T , Y , Ydot , Miter , Ml , Mu , Pw , Ipvt , Ier ) ! external res , adda integer , intent ( inout ) :: Neq real ( kind = dp ) :: T real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydot ( * ) integer , intent ( inout ) :: Miter integer , intent ( inout ) :: Ml integer , intent ( inout ) :: Mu real ( kind = dp ) :: Pw ( * ) integer :: Ipvt ( * ) integer , intent ( inout ) :: Ier integer :: i , lenpw , mlp1 , nrowpw ! if ( Miter >= 4 ) then ! !  Band matrix case ----------------------------------------------------- ! nrowpw = 2 * Ml + Mu + 1 lenpw = Neq * nrowpw do i = 1 , lenpw Pw ( i ) = 0.0D0 enddo ! Ier = 1 call res ( Neq , T , Y , Pw , Ydot , Ier ) if ( Ier > 1 ) return ! mlp1 = Ml + 1 call adda ( Neq , T , Y , Ml , Mu , Pw ( mlp1 ), nrowpw ) call dgbfa ( Pw , nrowpw , Neq , Ml , Mu , Ipvt , Ier ) if ( Ier == 0 ) then call dgbsl ( Pw , nrowpw , Neq , Ml , Mu , Ipvt , Ydot , 0 ) return endif else ! !  Full matrix case ----------------------------------------------------- ! lenpw = Neq * Neq do i = 1 , lenpw Pw ( i ) = 0.0D0 enddo ! Ier = 1 call res ( Neq , T , Y , Pw , Ydot , Ier ) if ( Ier > 1 ) return ! call adda ( Neq , T , Y , 0 , 0 , Pw , Neq ) call dgefa ( Pw , Neq , Neq , Ipvt , Ier ) if ( Ier == 0 ) then call dgesl ( Pw , Neq , Neq , Ipvt , Ydot , 0 ) return else Ier = - Ier return endif endif Ier = - Ier end subroutine dainvg","tags":"","loc":"proc/dainvg~2.html"},{"title":"dpcgs – odepack","text":"subroutine dpcgs(Neq, Tn, Y, Savf, R, Wght, N, Maxl, Delta, Hl0, Jpre, Mnewt, f, psol, Npsl, X, P, W, Z, Lpcg, Wp, Iwp, Wk, Iflag) This routine computes the solution to the system A*x = b using a\n scaled preconditioned version of the Conjugate Gradient algorithm. It is assumed here that the scaled matrix D -1 * A * D and the\n scaled preconditioner D -1 * M * D are close to being\n symmetric positive definite. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). TN current value of t. Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). R the right hand side of the system A*x = b. WGHT array of length N containing scale factors.\n 1/WGHT(i) are the diagonal elements of the diagonal\n scaling matrix D. N the order of the matrix A, and the lengths\n of the vectors Y, SAVF, R, WGHT, P, W, Z, WK, and X. MAXL the maximum allowable number of iterates. DELTA tolerance on residuals b - A*x in weighted RMS-norm. HL0 current value of (step size h) * (coefficient l0). JPRE preconditioner type flag. MNEWT Newton iteration counter (.ge. 0). WK real work array used by routine DATP. WP real work array used by preconditioner PSOL. IWP integer work array used by preconditioner PSOL. On return X the final computed approximation to the solution\n of the system A*x = b. LPCG the number of iterations performed, and current\n order of the upper Hessenberg matrix HES. NPSL the number of calls to PSOL. IFLAG integer error flag: 0 means convergence in LPCG iterations , LPCG . le . MAXL . 1 means the convergence test did not pass in MAXL iterations , but the residual norm is . lt . 1 , or . lt . norm ( b ) if MNEWT = 0 , and so X is computed . 2 means the convergence test did not pass in MAXL iterations , residual . gt . 1 , and X is undefined . 3 means there was a recoverable error in PSOL caused by the preconditioner being out of date . 4 means there was a zero denominator in the algorithm . the scaled matrix or scaled preconditioner is not sufficiently close to being symmetric pos . definite . - 1 means there was a nonrecoverable error in PSOL . Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp) :: Tn real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Savf real(kind=dp), dimension(*) :: R real(kind=dp), dimension(*) :: Wght integer :: N integer, intent(in) :: Maxl real(kind=dp), intent(in) :: Delta real(kind=dp) :: Hl0 integer, intent(in) :: Jpre integer, intent(in) :: Mnewt real :: f real :: psol integer, intent(out) :: Npsl real(kind=dp), intent(inout), dimension(*) :: X real(kind=dp), intent(inout), dimension(*) :: P real(kind=dp), intent(inout), dimension(*) :: W real(kind=dp), intent(inout), dimension(*) :: Z integer, intent(out) :: Lpcg real(kind=dp), intent(inout), dimension(*) :: Wp integer, dimension(*) :: Iwp real(kind=dp), intent(inout), dimension(*) :: Wk integer, intent(out) :: Iflag Calls proc~~dpcgs~2~~CallsGraph proc~dpcgs~2 dpcgs proc~dvnorm~2 dvnorm proc~dpcgs~2->proc~dvnorm~2 proc~datp~2 datp proc~dpcgs~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcgs~2->proc~daxpy~2 proc~datp~2->proc~dvnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dpcgs~2~~CalledByGraph proc~dpcgs~2 dpcgs proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dpcgs~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables alpha beta bnrm i ier ptw rnrm ztr ztr0 Source Code dpcgs Variables Type Visibility Attributes Name Initial real(kind=dp), public :: alpha real(kind=dp), public :: beta real(kind=dp), public :: bnrm integer, public :: i integer, public :: ier real(kind=dp), public :: ptw real(kind=dp), public :: rnrm real(kind=dp), public :: ztr real(kind=dp), public :: ztr0 Source Code subroutine dpcgs ( Neq , Tn , Y , Savf , R , Wght , N , Maxl , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , P , W , Z , Lpcg , Wp , Iwp , Wk , Iflag ) ! integer , dimension ( * ) :: Neq real ( kind = dp ) :: Tn real ( kind = dp ) , dimension ( * ) :: Y real ( kind = dp ) , dimension ( * ) :: Savf real ( kind = dp ) , dimension ( * ) :: R real ( kind = dp ) , dimension ( * ) :: Wght integer :: N integer , intent ( in ) :: Maxl real ( kind = dp ) , intent ( in ) :: Delta real ( kind = dp ) :: Hl0 integer , intent ( in ) :: Jpre integer , intent ( in ) :: Mnewt external :: f ! real ( kind = dp ) :: alpha , beta , bnrm , ptw , rnrm , ztr , ztr0 integer :: i , ier integer , intent ( out ) :: Iflag , Lpcg , Npsl integer , dimension ( * ) :: Iwp real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: P , W , Wk , Wp , X , Z ! external psol ! Iflag = 0 Npsl = 0 Lpcg = 0 do i = 1 , N X ( i ) = 0.0D0 enddo bnrm = dvnorm ( N , R , Wght ) !  Test for immediate return with X = 0 or X = b. ----------------------- if ( bnrm > Delta ) then ! ztr = 0.0D0 else if ( Mnewt > 0 ) return !X!call dcopy(N,R,1,X,1) X ( 1 : N ) = R ( 1 : N ) return endif !  Loop point for PCG iterations. --------------------------------------- INFINITE : do Lpcg = Lpcg + 1 !X!call dcopy(N,R,1,Z,1) Z ( 1 : N ) = R ( 1 : N ) ier = 0 if ( Jpre /= 0 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , Z , 3 , ier ) Npsl = Npsl + 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns from PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif endif ztr0 = ztr ztr = 0.0D0 do i = 1 , N ztr = ztr + Z ( i ) * R ( i ) * Wght ( i ) ** 2 enddo if ( Lpcg /= 1 ) then if ( ztr0 == 0.0D0 ) then !----------------------------------------------------------------------- !  This block handles division by zero errors. !----------------------------------------------------------------------- Iflag = 4 return endif beta = ztr / ztr0 do i = 1 , N P ( i ) = Z ( i ) + beta * P ( i ) enddo else !X!call dcopy(N,Z,1,P,1) P ( 1 : N ) = Z ( 1 : N ) endif !----------------------------------------------------------------------- !   Call DATP to compute A*p and return the answer in W. !----------------------------------------------------------------------- call datp ( Neq , Y , Savf , P , Wght , Hl0 , Wk , f , W ) ! ptw = 0.0D0 do i = 1 , N ptw = ptw + P ( i ) * W ( i ) * Wght ( i ) ** 2 enddo if ( ptw == 0.0D0 ) then !----------------------------------------------------------------------- !  This block handles division by zero errors. !----------------------------------------------------------------------- Iflag = 4 return endif alpha = ztr / ptw call daxpy ( N , alpha , P , 1 , X , 1 ) alpha = - alpha call daxpy ( N , alpha , W , 1 , R , 1 ) rnrm = dvnorm ( N , R , Wght ) if ( rnrm <= Delta ) return if ( Lpcg >= Maxl ) exit INFINITE enddo INFINITE Iflag = 2 if ( rnrm <= 1.0D0 ) Iflag = 1 if ( rnrm <= bnrm . and . Mnewt == 0 ) Iflag = 1 end subroutine dpcgs","tags":"","loc":"proc/dpcgs~2.html"},{"title":"md – odepack","text":"subroutine md(N, Ia, Ja, Max, V, L, Head, Last, Next, Mark, Flag) md – minimum degree algorithm (based on element model) description md finds a minimum degree ordering of the rows and columns of a general sparse matrix m stored in ( ia , ja , a ) format . when the structure of m is nonsymmetric , the ordering is that obtained for the symmetric matrix m + m - transpose . additional parameters MAX : declared dimension of the one - dimensional arrays v and l . max must be at least n + 2 k , where k is the number of nonzeroes in the strict upper triangle of m + m - transpose V : integer one - dimensional work array . dimension = max L : integer one - dimensional work array . dimension = max HEAD : integer one - dimensional work array . dimension = n LAST : integer one - dimensional array used to return the permutation of the rows and columns of m corresponding to the minimum degree ordering . dimension = n NEXT : integer one - dimensional array used to return the inverse of the permutation returned in last . dimension = n MARK : integer one - dimensional work array ( may be the same as v ). dimension = n FLAG : integer error flag . values and their meanings are - 0 no errors detected 9 n + k insufficient storage in md definitions of internal parameters ---------+---------------------------------------------------------\n    v(s)     - value field of list entry\n    ---------+---------------------------------------------------------\n    l(s)     - link field of list entry  (0 =) end of list)\n    ---------+---------------------------------------------------------\n    l(vi)    - pointer to element list of uneliminated vertex vi\n    ---------+---------------------------------------------------------\n    l(ej)    - pointer to boundary list of active element ej\n    ---------+---------------------------------------------------------\n    head(d)  - vj =) vj head of d-list d\n             -  0 =) no vertex in d-list d\n\n\n             -                  vi uneliminated vertex\n             -          vi in ek           -       vi not in ek\n    ---------+-----------------------------+---------------------------\n    next(vi) - undefined but nonnegative   - vj =) vj next in d-list\n             -                             -  0 =) vi tail of d-list\n    ---------+-----------------------------+---------------------------\n    last(vi) - (not set until mdp)         - -d =) vi head of d-list d\n             --vk =) compute degree        - vj =) vj last in d-list\n             - ej =) vi prototype of ej    -  0 =) vi not in any d-list\n             -  0 =) do not compute degree -\n    ---------+-----------------------------+---------------------------\n    mark(vi) - mark(vk)                    - nonneg. tag .lt. mark(vk)\n\n\n             -                   vi eliminated vertex\n             -      ei active element      -           otherwise\n    ---------+-----------------------------+---------------------------\n    next(vi) - -j =) vi was j-th vertex    - -j =) vi was j-th vertex\n             -       to be eliminated      -       to be eliminated\n    ---------+-----------------------------+---------------------------\n    last(vi) -  m =) size of ei = m        - undefined\n    ---------+-----------------------------+---------------------------\n    mark(vi) - -m =) overlap count of ei   - undefined\n             -       with ek = m           -\n             - otherwise nonnegative tag   -\n             -       .lt. mark(vk)         - Arguments Type Intent Optional Attributes Name integer :: N integer :: Ia (*) integer :: Ja (*) integer :: Max integer :: V (*) integer :: L (*) integer, intent(inout) :: Head (*) integer, intent(inout) :: Last (*) integer, intent(inout) :: Next (*) integer :: Mark (*) integer :: Flag Calls proc~~md~2~~CallsGraph proc~md~2 md proc~mdi~2 mdi proc~md~2->proc~mdi~2 proc~mdm~2 mdm proc~md~2->proc~mdm~2 proc~mdp~2 mdp proc~md~2->proc~mdp~2 proc~mdu~2 mdu proc~md~2->proc~mdu~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~md~2~~CalledByGraph proc~md~2 md proc~odrv~2 odrv proc~odrv~2->proc~md~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dmin ek k tag tail vk Source Code md Variables Type Visibility Attributes Name Initial integer, public :: dmin integer, public :: ek integer, public :: k integer, public :: tag integer, public :: tail integer, public :: vk Source Code subroutine md ( N , Ia , Ja , Max , V , L , Head , Last , Next , Mark , Flag ) integer :: N integer :: Ia ( * ) integer :: Ja ( * ) integer :: Max integer :: V ( * ) integer :: L ( * ) integer , intent ( inout ) :: Head ( * ) integer , intent ( inout ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer :: Mark ( * ) integer :: Flag integer :: dmin , ek , k , tag , tail , vk equivalence ( vk , ek ) !----initialization tag = 0 call mdi ( N , Ia , Ja , Max , V , L , Head , Last , Next , Mark , tag , Flag ) if ( Flag /= 0 ) return ! k = 0 dmin = 1 ! !----while  k .lt. n  do do while ( k < N ) ! !------search for vertex of minimum degree do while ( Head ( dmin ) <= 0 ) dmin = dmin + 1 enddo ! !------remove vertex vk of minimum degree from degree list vk = Head ( dmin ) Head ( dmin ) = Next ( vk ) if ( Head ( dmin ) > 0 ) Last ( Head ( dmin )) = - dmin ! !------number vertex vk, adjust tag, and tag vk k = k + 1 Next ( vk ) = - k Last ( ek ) = dmin - 1 tag = tag + Last ( ek ) Mark ( vk ) = tag ! !------form element ek from uneliminated neighbors of vk call mdm ( vk , tail , V , L , Last , Next , Mark ) ! !------purge inactive elements and do mass elimination call mdp ( k , ek , tail , V , L , Head , Last , Next , Mark ) ! !------update degrees of uneliminated vertices in ek ! call mdu ( ek , dmin , V , L , Head , Last , Next , Mark ) enddo ! !----generate inverse permutation from permutation do k = 1 , N Next ( k ) = - Next ( k ) Last ( Next ( k )) = k enddo end subroutine md","tags":"","loc":"proc/md~2.html"},{"title":"dsrckr – odepack","text":"subroutine dsrckr(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSR01, DLPK01, which\nare used internally by the DLSODKR solver. RSAV real array of length 228 or more. ISAV integer array of length 63 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Calls proc~~dsrckr~2~~CallsGraph proc~dsrckr~2 dsrckr return_dls1_real return_dls1_real proc~dsrckr~2->return_dls1_real return_dls1_int return_dls1_int proc~dsrckr~2->return_dls1_int set_dls1_real set_dls1_real proc~dsrckr~2->set_dls1_real set_dls1_int set_dls1_int proc~dsrckr~2->set_dls1_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables LENILS LENRLS ioff Source Code dsrckr Variables Type Visibility Attributes Name Initial integer, public, parameter :: LENILS = 37 integer, public, parameter :: LENRLS = 218 integer, public :: ioff Source Code subroutine dsrckr ( Rsav , Isav , Job ) ! integer , parameter :: LENRLS = 218 , LENILS = 37 ! real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job ! integer :: ioff ! select case ( Job ) case ( 1 ) Rsav ( 1 : LENRLS ) = return_dls1_real () Rsav ( LENRLS + 1 ) = dls % stifr Rsav ( LENRLS + 1 + 1 ) = dlsr % alpha Rsav ( LENRLS + 2 + 1 ) = dlsr % x2 Rsav ( LENRLS + 3 + 1 ) = dlsr % t0 Rsav ( LENRLS + 4 + 1 ) = dlsr % tlast Rsav ( LENRLS + 5 + 1 ) = dlsr % toutc Rsav ( LENRLS + 5 + 2 ) = dlpk % delt Rsav ( LENRLS + 5 + 3 ) = dlpk % epcon Rsav ( LENRLS + 5 + 4 ) = dlpk % sqrtn Rsav ( LENRLS + 5 + 5 ) = dlpk % rsqrtn Isav ( 1 : LENILS ) = return_dls1_int () Isav ( LENILS + 1 ) = dls % newt Isav ( LENILS + 2 ) = dls % nsfi Isav ( LENILS + 3 ) = dls % nslj Isav ( LENILS + 4 ) = dls % njev ioff = LENILS + 2 Isav ( ioff + 1 ) = dlsr % lg0 Isav ( ioff + 2 ) = dlsr % lg1 Isav ( ioff + 3 ) = dlsr % lgx Isav ( ioff + 4 ) = dlsr % imax Isav ( ioff + 5 ) = dlsr % last Isav ( ioff + 6 ) = dlsr % irfnd Isav ( ioff + 7 ) = dlsr % itaskc Isav ( ioff + 8 ) = dlsr % ngc Isav ( ioff + 9 ) = dlsr % nge ioff = ioff + 9 Isav ( ioff + 1 ) = dlpk % jpre Isav ( ioff + 2 ) = dlpk % jacflg Isav ( ioff + 3 ) = dlpk % locwp Isav ( ioff + 4 ) = dlpk % lociwp Isav ( ioff + 5 ) = dlpk % lsavx Isav ( ioff + 6 ) = dlpk % kmp Isav ( ioff + 7 ) = dlpk % maxl Isav ( ioff + 8 ) = dlpk % mnewt Isav ( ioff + 9 ) = dlpk % nni Isav ( ioff + 10 ) = dlpk % nli Isav ( ioff + 11 ) = dlpk % nps Isav ( ioff + 12 ) = dlpk % ncfn Isav ( ioff + 13 ) = dlpk % ncfl case ( 2 ) call set_dls1_real ( Rsav ( 1 : LENRLS )) dls % stifr = Rsav ( LENRLS + 1 ) dlsr % alpha = Rsav ( LENRLS + 1 + 1 ) dlsr % x2 = Rsav ( LENRLS + 2 + 1 ) dlsr % t0 = Rsav ( LENRLS + 3 + 1 ) dlsr % tlast = Rsav ( LENRLS + 4 + 1 ) dlsr % toutc = Rsav ( LENRLS + 5 + 1 ) dlpk % delt = Rsav ( LENRLS + 5 + 2 ) dlpk % epcon = Rsav ( LENRLS + 5 + 3 ) dlpk % sqrtn = Rsav ( LENRLS + 5 + 4 ) dlpk % rsqrtn = Rsav ( LENRLS + 5 + 5 ) call set_dls1_int ( Isav ( 1 : LENILS )) dls % newt = Isav ( LENILS + 1 ) dls % nsfi = Isav ( LENILS + 2 ) dls % nslj = Isav ( LENILS + 3 ) dls % njev = Isav ( LENILS + 4 ) ioff = LENILS + 2 dlsr % lg0 = Isav ( ioff + 1 ) dlsr % lg1 = Isav ( ioff + 2 ) dlsr % lgx = Isav ( ioff + 3 ) dlsr % imax = Isav ( ioff + 4 ) dlsr % last = Isav ( ioff + 5 ) dlsr % irfnd = Isav ( ioff + 6 ) dlsr % itaskc = Isav ( ioff + 7 ) dlsr % ngc = Isav ( ioff + 8 ) dlsr % nge = Isav ( ioff + 9 ) ioff = ioff + 9 dlpk % jpre = Isav ( ioff + 1 ) dlpk % jacflg = Isav ( ioff + 2 ) dlpk % locwp = Isav ( ioff + 3 ) dlpk % lociwp = Isav ( ioff + 4 ) dlpk % lsavx = Isav ( ioff + 5 ) dlpk % kmp = Isav ( ioff + 6 ) dlpk % maxl = Isav ( ioff + 7 ) dlpk % mnewt = Isav ( ioff + 8 ) dlpk % nni = Isav ( ioff + 9 ) dlpk % nli = Isav ( ioff + 10 ) dlpk % nps = Isav ( ioff + 11 ) dlpk % ncfn = Isav ( ioff + 12 ) dlpk % ncfl = Isav ( ioff + 13 ) case default write ( * , * ) '<ERROR>*dsrckr* unknown value for JOB=' , Job stop 1 endselect end subroutine dsrckr","tags":"","loc":"proc/dsrckr~2.html"},{"title":"dprjs – odepack","text":"subroutine dprjs(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wk, Iwk, f, jac) DPRJS is called to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nJ is computed by columns, either by the user-supplied routine JAC\nif MITER = 1, or by finite differencing if MITER = 2. Alternatively, if MITER = 3, a diagonal approximation to J is used. if MITER = 1 or 2, and if the existing value of the Jacobian\n(as contained in P) is considered acceptable, then a new value of\nP is reconstructed from the old value. In any case, when MITER\nis 1 or 2, the P matrix is subjected to LU decomposition in CDRV. P and its LU decomposition are stored (separately) in WK. In addition to variables described previously, communication\nwith DPRJS uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODE). SAVF array containing f evaluated at predicted y. WK real work space for matrices.  On output it contains the\ninverse diagonal matrix if MITER = 3, and P and its sparse\nLU decomposition if MITER is 1 or 2.\nStorage of matrix elements starts at WK(3).\nWK also contains the following matrix-related data:\nWK(1) = SQRT(UROUND), used in numerical Jacobian increments.\nWK(2) = H*EL0, saved for later use if MITER = 3. IWK integer work space for matrix-related data, assumed to\nbe equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. EL0 EL(1) (input). IERPJ output error flag (in Common).\n  = 0 if no error.\n  = 1  if zero pivot found in CDRV.\n  = 2  if a singular matrix arose with MITER = 3.\n  = -1 if insufficient storage for CDRV (should not occur here).\n  = -2 if other error found in CDRV (should not occur here). JCUR output flag showing status of (approximate) Jacobian matrix:\n  = 1 to indicate that the Jacobian is now current, or\n  = 0 to indicate that a saved value was used. This routine also uses other variables in Common. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real :: f integer :: jac Calls proc~~dprjs~2~~CallsGraph proc~dprjs~2 dprjs none~wrapup~3 wrapup proc~dprjs~2->none~wrapup~3 proc~dvnorm~2 dvnorm proc~dprjs~2->proc~dvnorm~2 ftem ftem none~wrapup~3->ftem wk wk none~wrapup~3->wk proc~cdrv~2 cdrv none~wrapup~3->proc~cdrv~2 iwk iwk none~wrapup~3->iwk proc~nsfc~2 nsfc proc~cdrv~2->proc~nsfc~2 proc~nntc~2 nntc proc~cdrv~2->proc~nntc~2 proc~nnsc~2 nnsc proc~cdrv~2->proc~nnsc~2 proc~nnfc~2 nnfc proc~cdrv~2->proc~nnfc~2 proc~nroc~2 nroc proc~cdrv~2->proc~nroc~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables con di fac hl0 i imul j jj jmax jmin jok k kmax kmin ng pij r r0 rcon rcont srur Subroutines wrapup Source Code dprjs Variables Type Visibility Attributes Name Initial real(kind=dp), public :: con real(kind=dp), public :: di real(kind=dp), public :: fac real(kind=dp), public :: hl0 integer, public :: i integer, public :: imul integer, public :: j integer, public :: jj integer, public :: jmax integer, public :: jmin integer, public :: jok integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: ng real(kind=dp), public :: pij real(kind=dp), public :: r real(kind=dp), public :: r0 real(kind=dp), public :: rcon real(kind=dp), public :: rcont real(kind=dp), public :: srur Subroutines subroutine wrapup() Arguments None Source Code subroutine dprjs ( Neq , Y , Yh , Nyh , Ewt , Ftem , Savf , Wk , Iwk , f , jac ) integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer :: Iwk ( * ) external :: f external :: jac real ( kind = dp ) :: con , di , fac , hl0 , pij , r , r0 , rcon , rcont , srur integer :: i , imul , j , jj , jmax , jmin , jok , k , kmax , kmin , ng hl0 = dls1 % h * dls1 % el0 con = - hl0 if ( dls1 % miter == 3 ) then ! !  If MITER = 3, construct a diagonal approximation to J and P. --------- dls1 % jcur = 1 dls1 % nje = dls1 % nje + 1 Wk ( 2 ) = hl0 dls1 % ierpj = 0 r = dls1 % el0 * 0.1D0 do i = 1 , dls1 % n Y ( i ) = Y ( i ) + r * ( dls1 % h * Savf ( i ) - Yh ( i , 2 )) enddo call f ( Neq , dls1 % tn , Y , Wk ( 3 )) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n r0 = dls1 % h * Savf ( i ) - Yh ( i , 2 ) di = 0.1D0 * r0 - dls1 % h * ( Wk ( i + 2 ) - Savf ( i )) Wk ( i + 2 ) = 1.0D0 if ( abs ( r0 ) >= dls1 % uround / Ewt ( i ) ) then if ( abs ( di ) == 0.0D0 ) then dls1 % ierpj = 2 return else Wk ( i + 2 ) = 0.1D0 * r0 / di endif endif enddo return else !  See whether J should be reevaluated (JOK = 0) or not (JOK = 1). ------ jok = 1 if ( dls1 % nst == 0 . or . dls1 % nst >= dlss % nslj + dlss % msbj ) jok = 0 if ( dls1 % icf == 1 . and . abs ( dls1 % rc - 1.0D0 ) < dlss % ccmxj ) jok = 0 if ( dls1 % icf == 2 ) jok = 0 if ( jok == 1 ) then ! !  If JOK = 1, reconstruct new P from old P. ---------------------------- dls1 % jcur = 0 rcon = con / dlss % con0 rcont = abs ( con ) / dlss % conmin if ( rcont <= dlss % rbig . or . dlss % iplost /= 1 ) then kmin = Iwk ( dlss % ipian ) do j = 1 , dls1 % n kmax = Iwk ( dlss % ipian + j ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) pij = Wk ( dlss % iba + k ) if ( i == j ) then pij = pij - 1.0D0 if ( abs ( pij ) < dlss % psmall ) then dlss % iplost = 1 dlss % conmin = min ( abs ( dlss % con0 ), dlss % conmin ) endif endif pij = pij * rcon if ( i == j ) pij = pij + 1.0D0 Wk ( dlss % iba + k ) = pij enddo kmin = kmax + 1 enddo call wrapup () return endif endif ! !  MITER = 1 or 2, and the Jacobian is to be reevaluated. --------------- dls1 % jcur = 1 dls1 % nje = dls1 % nje + 1 dlss % nslj = dls1 % nst dlss % iplost = 0 dlss % conmin = abs ( con ) if ( dls1 % miter == 2 ) then ! !  If MITER = 2, make NGP calls to F to approximate J and P. ------------ fac = dvnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 srur = Wk ( 1 ) jmin = Iwk ( dlss % ipigp ) do ng = 1 , dlss % ngp jmax = Iwk ( dlss % ipigp + ng ) - 1 do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) r = max ( srur * abs ( Y ( jj )), r0 / Ewt ( jj )) Y ( jj ) = Y ( jj ) + r enddo call f ( Neq , dls1 % tn , Y , Ftem ) do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) Y ( jj ) = Yh ( jj , 1 ) r = max ( srur * abs ( Y ( jj )), r0 / Ewt ( jj )) fac = - hl0 / r kmin = Iwk ( dlss % ibian + jj ) kmax = Iwk ( dlss % ibian + jj + 1 ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = ( Ftem ( i ) - Savf ( i )) * fac if ( i == jj ) Wk ( dlss % iba + k ) = Wk ( dlss % iba + k ) + 1.0D0 enddo enddo jmin = jmax + 1 enddo dls1 % nfe = dls1 % nfe + dlss % ngp else ! !  If MITER = 1, call JAC, multiply by scalar, and add identity. -------- kmin = Iwk ( dlss % ipian ) do j = 1 , dls1 % n kmax = Iwk ( dlss % ipian + j ) - 1 do i = 1 , dls1 % n Ftem ( i ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Ftem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Ftem ( i ) * con if ( i == j ) Wk ( dlss % iba + k ) = Wk ( dlss % iba + k ) + 1.0D0 enddo kmin = kmax + 1 enddo endif endif call wrapup () contains subroutine wrapup () ! !  Do numerical factorization of P matrix. ------------------------------ dlss % nlu = dlss % nlu + 1 dlss % con0 = con dls1 % ierpj = 0 do i = 1 , dls1 % n Ftem ( i ) = 0.0D0 enddo call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), & & Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Ftem , Ftem , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 2 , dlss % iys ) if ( dlss % iys == 0 ) return imul = ( dlss % iys - 1 ) / dls1 % n dls1 % ierpj = - 2 if ( imul == 8 ) dls1 % ierpj = 1 if ( imul == 10 ) dls1 % ierpj = - 1 end subroutine wrapup end subroutine dprjs","tags":"","loc":"proc/dprjs~2.html"},{"title":"dumach – odepack","text":"function dumach() NAME dumach(3f) - [M_odepack] Compute the unit roundoff of the machine. SYNOPSIS a = dumach()\n    double precision :: dumach\n    double precision :: a DESCRIPTION The unit roundoff is defined as the smallest positive machine\n   number u such that  1.0 + u .ne. 1.0.  This is computed by DUMACH\n   in a machine-independent manner. RETURNS A the unit roundoff of the machine. Arguments None Return Value real(kind=dp) Calls proc~~dumach~2~~CallsGraph proc~dumach~2 dumach none~dumsum dumsum proc~dumach~2->none~dumsum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dumach~2~~CalledByGraph proc~dumach~2 dumach proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dumach~2 proc~dlsode~2 dlsode proc~dlsode~2->proc~dumach~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dumach~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dumach~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dumach~2 proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dumach~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dumach~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dumach~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~dumach~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables comp u Subroutines dumsum Source Code dumach Variables Type Visibility Attributes Name Initial real(kind=dp), public :: comp real(kind=dp), public :: u Subroutines subroutine dumsum(a, b, c) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: a real(kind=dp), intent(in) :: b real(kind=dp), intent(out) :: c Source Code function dumach () real ( kind = dp ) :: dumach real ( kind = dp ) :: u , comp u = 1.0d0 do u = u * 0.5d0 call dumsum ( 1.0d0 , u , comp ) if ( comp == 1.0d0 ) then dumach = u * 2.0d0 exit endif enddo contains subroutine dumsum ( a , b , c ) !  Routine to force normal storing of A + B, for DUMACH. real ( kind = dp ), intent ( in ) :: a , b real ( kind = dp ), intent ( out ) :: c c = a + b end subroutine dumsum end function dumach","tags":"","loc":"proc/dumach~2.html"},{"title":"dprepi – odepack","text":"subroutine dprepi(Neq, Y, S, Yh, Savr, Ewt, Rtem, Ia, Ja, Ic, Jc, Wk, Iwk, Ipper, res, jac, adda) Uses M_odepack proc~~dprepi~2~~UsesGraph proc~dprepi~2 dprepi module~m_odepack M_odepack proc~dprepi~2->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This routine performs preprocessing related to the sparse linear\nsystems that must be solved. The operations that are performed here are: compute sparseness structure of the iteration matrix\n     P = A - con*J  according to MOSS, compute grouping of column indices (MITER = 2), compute a new ordering of rows and columns of the matrix, reorder JA corresponding to the new ordering, perform a symbolic LU factorization of the matrix, and set pointers for segments of the IWK/WK array. In addition to variables described previously, DPREPI uses the\nfollowing for communication: YH the history array.  Only the first column, containing the\ncurrent Y vector, is used.  Used only if MOSS .ne. 0. S array of length NEQ, identical to YDOTI in the driver, used\nonly if MOSS .ne. 0. SAVR a work array of length NEQ, used only if MOSS .ne. 0. EWT array of length NEQ containing (inverted) error weights.\nUsed only if MOSS = 2 or 4 or if ISTATE = MOSS = 1. RTEM a work array of length NEQ, identical to ACOR in the driver,\nused only if MOSS = 2 or 4. WK a real work array of length LENWK, identical to WM in\nthe driver. IWK integer work array, assumed to occupy the same space as WK. LENWK the length of the work arrays WK and IWK. ISTATC a copy of the driver input argument ISTATE (= 1 on the\nfirst call, = 3 on a continuation call). IYS flag value from ODRV or CDRV. IPPER output error flag, with the following values and meanings:\n   =   0  no error.\n   =  -1  insufficient storage for internal structure pointers.\n   =  -2  insufficient storage for JGROUP.\n   =  -3  insufficient storage for ODRV.\n   =  -4  other error flag from ODRV (should never occur).\n   =  -5  insufficient storage for CDRV.\n   =  -6  other error flag from CDRV.\n   =  -7  if the RES routine returned error flag IRES = IER = 2.\n   =  -8  if the RES routine returned error flag IRES = IER = 3. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(in) :: Yh (*) real(kind=dp), intent(inout) :: Savr (*) real(kind=dp), intent(in) :: Ewt (*) real(kind=dp), intent(inout) :: Rtem (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(in) :: Ic (*) integer, intent(in) :: Jc (*) real(kind=dp), intent(inout) :: Wk (*) integer, intent(inout) :: Iwk (*) integer, intent(out) :: Ipper real :: res integer :: jac real :: adda Calls proc~~dprepi~2~~CallsGraph proc~dprepi~2 dprepi proc~jgroup jgroup proc~dprepi~2->proc~jgroup proc~odrv odrv proc~dprepi~2->proc~odrv proc~cdrv cdrv proc~dprepi~2->proc~cdrv proc~cntnzu cntnzu proc~dprepi~2->proc~cntnzu proc~adjlr adjlr proc~dprepi~2->proc~adjlr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp erwt fac i ibr ier ipil ipiu iptt1 iptt2 j k kamax kamin kcmax kcmin knew ldif lenigp lenwk1 liwk ljfo maxg np1 nzsut yj Source Code dprepi Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: erwt real(kind=dp), public :: fac integer, public :: i integer, public :: ibr integer, public :: ier integer, public :: ipil integer, public :: ipiu integer, public :: iptt1 integer, public :: iptt2 integer, public :: j integer, public :: k integer, public :: kamax integer, public :: kamin integer, public :: kcmax integer, public :: kcmin integer, public :: knew integer, public :: ldif integer, public :: lenigp integer, public :: lenwk1 integer, public :: liwk integer, public :: ljfo integer, public :: maxg integer, public :: np1 integer, public :: nzsut real(kind=dp), public :: yj Source Code subroutine dprepi ( Neq , Y , S , Yh , Savr , Ewt , Rtem , Ia , Ja , Ic , Jc , Wk , Iwk , Ipper , res , jac , adda ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) real ( kind = dp ) :: S ( * ) real ( kind = dp ), intent ( in ) :: Yh ( * ) real ( kind = dp ), intent ( inout ) :: Savr ( * ) real ( kind = dp ), intent ( in ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Rtem ( * ) integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( in ) :: Ic ( * ) integer , intent ( in ) :: Jc ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer , intent ( inout ) :: Iwk ( * ) integer , intent ( out ) :: Ipper external res external jac external adda real ( kind = dp ) :: erwt , fac , yj integer :: i , ibr , ier , ipil , ipiu , iptt1 , iptt2 , j , k , kamax , kamin , kcmax , kcmin , knew , ldif , lenigp , lenwk1 , & & liwk , ljfo , maxg , np1 , nzsut dlss % ibian = dlss % lrat * 2 dlss % ipian = dlss % ibian + 1 np1 = dls1 % n + 1 dlss % ipjan = dlss % ipian + np1 dlss % ibjan = dlss % ipjan - 1 lenwk1 = dlss % lenwk - dls1 % n liwk = dlss % lenwk * dlss % lrat if ( dlss % moss == 0 ) liwk = liwk - dls1 % n if ( dlss % moss == 1 . or . dlss % moss == 2 ) liwk = lenwk1 * dlss % lrat if ( dlss % ipjan + dls1 % n - 1 > liwk ) goto 600 if ( dlss % moss /= 0 ) then ! if ( dlss % istatc /= 3 ) then !  ISTATE = 1 and MOSS .ne. 0.  Perturb Y for structure determination. !  Initialize S with random nonzero elements for structure determination. do i = 1 , dls1 % n erwt = 1.0D0 / Ewt ( i ) fac = 1.0D0 + 1.0D0 / ( i + 1.0D0 ) Y ( i ) = Y ( i ) + fac * sign ( erwt , Y ( i )) S ( i ) = 1.0D0 + fac * erwt enddo select case ( dlss % moss ) case ( 1 ) goto 100 case ( 2 ) goto 200 case ( 3 ) goto 300 case ( 4 ) goto 400 case default endselect endif ! !  ISTATE = 3 and MOSS .ne. 0. Load Y from YH(*,1) and S from YH(*,2). -- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) S ( i ) = Yh ( dls1 % n + i ) enddo select case ( dlss % moss ) case ( 1 ) goto 100 case ( 2 ) goto 200 case ( 3 ) goto 300 case ( 4 ) goto 400 case default endselect endif ! !  MOSS = 0. Process user's IA,JA and IC,JC. ---------------------------- knew = dlss % ipjan kamin = Ia ( 1 ) kcmin = Ic ( 1 ) Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n do i = 1 , dls1 % n Iwk ( liwk + i ) = 0 enddo kamax = Ia ( j + 1 ) - 1 if ( kamin <= kamax ) then do k = kamin , kamax i = Ja ( k ) Iwk ( liwk + i ) = 1 if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 enddo endif kamin = kamax + 1 kcmax = Ic ( j + 1 ) - 1 if ( kcmin <= kcmax ) then do k = kcmin , kcmax i = Jc ( k ) if ( Iwk ( liwk + i ) == 0 ) then if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 endif enddo endif Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan kcmin = kcmax + 1 enddo goto 500 ! !  MOSS = 1. Compute structure from user-supplied Jacobian routine JAC. - !  A dummy call to RES allows user to create temporaries for use in JAC. 100 continue ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do i = 1 , dls1 % n Savr ( i ) = 0.0D0 Wk ( lenwk1 + i ) = 0.0D0 enddo k = dlss % ipjan Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n call adda ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( lenwk1 + 1 )) call jac ( Neq , dls1 % tn , Y , S , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Savr ) do i = 1 , dls1 % n ljfo = lenwk1 + i if ( Wk ( ljfo ) == 0.0D0 ) then if ( Savr ( i ) == 0.0D0 ) cycle Savr ( i ) = 0.0D0 else Wk ( ljfo ) = 0.0D0 Savr ( i ) = 0.0D0 endif if ( k > liwk ) goto 600 Iwk ( k ) = i k = k + 1 enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo goto 500 ! !  MOSS = 2. Compute structure from results of N + 1 calls to RES. ------ 200 continue do i = 1 , dls1 % n Wk ( lenwk1 + i ) = 0.0D0 enddo k = dlss % ipjan Iwk ( dlss % ipian ) = 1 ier = - 1 if ( dls1 % miter == 1 ) ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do j = 1 , dls1 % n call adda ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( lenwk1 + 1 )) yj = Y ( j ) erwt = 1.0D0 / Ewt ( j ) Y ( j ) = yj + sign ( erwt , yj ) call res ( Neq , dls1 % tn , Y , S , Rtem , ier ) if ( ier > 1 ) return Y ( j ) = yj do i = 1 , dls1 % n ljfo = lenwk1 + i if ( Wk ( ljfo ) /= 0.0D0 ) then Wk ( ljfo ) = 0.0D0 elseif ( Rtem ( i ) == Savr ( i ) ) then cycle endif if ( k > liwk ) goto 600 Iwk ( k ) = i k = k + 1 enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo goto 500 ! !  MOSS = 3. Compute structure from the user's IA/JA and JAC routine. --- !  A dummy call to RES allows user to create temporaries for use in JAC. 300 continue ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do i = 1 , dls1 % n Savr ( i ) = 0.0D0 enddo knew = dlss % ipjan kamin = Ia ( 1 ) Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n call jac ( Neq , dls1 % tn , Y , S , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Savr ) kamax = Ia ( j + 1 ) - 1 if ( kamin <= kamax ) then do k = kamin , kamax i = Ja ( k ) Savr ( i ) = 0.0D0 if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 enddo endif kamin = kamax + 1 do i = 1 , dls1 % n if ( Savr ( i ) /= 0.0D0 ) then Savr ( i ) = 0.0D0 if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 endif enddo Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan enddo goto 500 ! !  MOSS = 4. Compute structure from user's IA/JA and N + 1 RES calls. --- 400 continue knew = dlss % ipjan kamin = Ia ( 1 ) Iwk ( dlss % ipian ) = 1 ier = - 1 if ( dls1 % miter == 1 ) ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do j = 1 , dls1 % n yj = Y ( j ) erwt = 1.0D0 / Ewt ( j ) Y ( j ) = yj + sign ( erwt , yj ) call res ( Neq , dls1 % tn , Y , S , Rtem , ier ) if ( ier > 1 ) return Y ( j ) = yj kamax = Ia ( j + 1 ) - 1 if ( kamin <= kamax ) then do k = kamin , kamax i = Ja ( k ) Rtem ( i ) = Savr ( i ) if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 enddo endif kamin = kamax + 1 do i = 1 , dls1 % n if ( Rtem ( i ) /= Savr ( i ) ) then if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 endif enddo Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan enddo ! 500 continue if ( dlss % moss /= 0 . and . dlss % istatc /= 3 ) then !  If ISTATE = 0 or 1 and MOSS .ne. 0, restore Y from YH. --------------- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) enddo endif dlss % nnz = Iwk ( dlss % ipian + dls1 % n ) - 1 Ipper = 0 dlss % ngp = 0 lenigp = 0 dlss % ipigp = dlss % ipjan + dlss % nnz if ( dls1 % miter == 2 ) then ! !  Compute grouping of column indices (MITER = 2). ---------------------- ! maxg = np1 dlss % ipjgp = dlss % ipjan + dlss % nnz dlss % ibjgp = dlss % ipjgp - 1 dlss % ipigp = dlss % ipjgp + dls1 % n iptt1 = dlss % ipigp + np1 iptt2 = iptt1 + dls1 % n dlss % lreq = iptt2 + dls1 % n - 1 if ( dlss % lreq > liwk ) goto 700 call jgroup ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), maxg , dlss % ngp , Iwk ( dlss % ipigp ), Iwk ( dlss % ipjgp ), Iwk ( iptt1 ), Iwk ( iptt2 ), ier ) if ( ier /= 0 ) goto 700 lenigp = dlss % ngp + 1 endif ! !  Compute new ordering of rows/columns of Jacobian. -------------------- dlss % ipr = dlss % ipigp + lenigp dlss % ipc = dlss % ipr dlss % ipic = dlss % ipc + dls1 % n dlss % ipisp = dlss % ipic + dls1 % n dlss % iprsp = ( dlss % ipisp - 2 ) / dlss % lrat + 2 dlss % iesp = dlss % lenwk + 1 - dlss % iprsp if ( dlss % iesp < 0 ) goto 800 ibr = dlss % ipr - 1 do i = 1 , dls1 % n Iwk ( ibr + i ) = i enddo dlss % nsp = liwk + 1 - dlss % ipisp call odrv ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk , Iwk ( dlss % ipr ), Iwk ( dlss % ipic ), dlss % nsp , Iwk ( dlss % ipisp ), 1 , dlss % iys ) if ( dlss % iys == 11 * dls1 % n + 1 ) then ! Ipper = - 4 return else if ( dlss % iys /= 0 ) goto 800 ! !  Reorder JAN and do symbolic LU factorization of matrix. -------------- dlss % ipa = dlss % lenwk + 1 - dlss % nnz dlss % nsp = dlss % ipa - dlss % iprsp dlss % lreq = max ( 12 * dls1 % n / dlss % lrat , 6 * dls1 % n / dlss % lrat + 2 * dls1 % n + dlss % nnz ) + 3 dlss % lreq = dlss % lreq + dlss % iprsp - 1 + dlss % nnz if ( dlss % lreq > dlss % lenwk ) goto 900 dlss % iba = dlss % ipa - 1 do i = 1 , dlss % nnz Wk ( dlss % iba + i ) = 0.0D0 enddo dlss % ipisp = dlss % lrat * ( dlss % iprsp - 1 ) + 1 call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), & & Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Wk ( dlss % ipa ), & & Wk ( dlss % ipa ), dlss % nsp , Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 5 , dlss % iys ) dlss % lreq = dlss % lenwk - dlss % iesp if ( dlss % iys == 10 * dls1 % n + 1 ) goto 900 if ( dlss % iys /= 0 ) then ! Ipper = - 6 dlss % lreq = dlss % lenwk return else ipil = dlss % ipisp ipiu = ipil + 2 * dls1 % n + 1 dlss % nzu = Iwk ( ipil + dls1 % n ) - Iwk ( ipil ) dlss % nzl = Iwk ( ipiu + dls1 % n ) - Iwk ( ipiu ) if ( dlss % lrat <= 1 ) then call adjlr ( dls1 % n , Iwk ( dlss % ipisp ), ldif ) dlss % lreq = dlss % lreq + ldif endif if ( dlss % lrat == 2 . and . dlss % nnz == dls1 % n ) dlss % lreq = dlss % lreq + 1 dlss % nsp = dlss % nsp + dlss % lreq - dlss % lenwk dlss % ipa = dlss % lreq + 1 - dlss % nnz dlss % iba = dlss % ipa - 1 Ipper = 0 return endif endif ! 600 continue Ipper = - 1 dlss % lreq = 2 + ( 2 * dls1 % n + 1 ) / dlss % lrat dlss % lreq = max ( dlss % lenwk + 1 , dlss % lreq ) return ! 700 continue Ipper = - 2 dlss % lreq = ( dlss % lreq - 1 ) / dlss % lrat + 1 return ! 800 continue Ipper = - 3 call cntnzu ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), nzsut ) dlss % lreq = dlss % lenwk - dlss % iesp + ( 3 * dls1 % n + 4 * nzsut - 1 ) / dlss % lrat + 1 return ! 900 continue Ipper = - 5 return ! 1000 continue Ipper = - ier - 5 dlss % lreq = 2 + ( 2 * dls1 % n + 1 ) / dlss % lrat end subroutine dprepi","tags":"","loc":"proc/dprepi~2.html"},{"title":"dcfode – odepack","text":"subroutine dcfode(meth, elco, tesco) NAME dcfode(3f) - [M_odepack] Set ODE integrator coefficients. SYNOPSIS subroutine dcfode (meth, elco, tesco)\n     integer          :: meth\n     double precision :: elco(13,12)\n     double precision :: tesco(3,12) DESCRIPTION DCFODE is called by the integrator routine to set coefficients\n   needed there. DCFODE is called once at the beginning of the problem,\n   and is not called again unless and until METH is changed. OPTIONS METH The coefficients for the current method, as\n   given by the value of METH, are set for all orders and saved.\n   The maximum order assumed here is 12 if METH = 1 and 5 if METH = 2.\n   (A smaller value of the maximum order is also allowed.) ELCO The ELCO array contains the basic method coefficients.\n   The coefficients el(i), 1 .le. i .le. nq+1, for the method of\n   order nq are stored in ELCO(i,nq).  They are given by a genetrating\n   polynomial, i.e.,\n       l(x) = el(1) + el(2) x + … + el(nq+1) x nq.\n   For the implicit Adams methods, l(x) is given by\n       dl/dx = (x+1) (x+2) … (x+nq-1)/factorial(nq-1),    l(-1) = 0.\n   For the BDF methods, l(x) is given by\n       l(x) = (x+1) (x+2) … (x+nq)/K,\n   where \n       K = factorial(nq)*(1 + 1/2 + … + 1/nq). TESCO The TESCO array contains test constants used for the\n   local error test and the selection of step size and/or order.\n   At order nq, TESCO(k,nq) is used for the selection of step\n   size at order nq - 1 if k = 1, at order nq if k = 2, and at order\n   nq + 1 if k = 3. Arguments Type Intent Optional Attributes Name integer, intent(in) :: meth real(kind=dp), intent(inout) :: elco (13,12) real(kind=dp), intent(out) :: tesco (3,12) Called by proc~~dcfode~2~~CalledByGraph proc~dcfode~2 dcfode proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dcfode~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dcfode~2 proc~dstoda~2 dstoda proc~dstoda~2->proc~dcfode~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~dstoda~2 proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dstoda~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables agamq fnq fnqm1 i ib nq nqm1 nqp1 pc pint ragq rq1fac rqfac tsign xpin Source Code dcfode Variables Type Visibility Attributes Name Initial double precision, public :: agamq double precision, public :: fnq double precision, public :: fnqm1 integer, public :: i integer, public :: ib integer, public :: nq integer, public :: nqm1 integer, public :: nqp1 double precision, public :: pc (12) double precision, public :: pint double precision, public :: ragq double precision, public :: rq1fac double precision, public :: rqfac double precision, public :: tsign double precision, public :: xpin Source Code subroutine dcfode ( meth , elco , tesco ) integer , intent ( in ) :: meth real ( kind = dp ), intent ( inout ) :: elco ( 13 , 12 ) real ( kind = dp ), intent ( out ) :: tesco ( 3 , 12 ) integer :: i , ib , nq , nqm1 , nqp1 double precision :: agamq , fnq , fnqm1 , pc ( 12 ), pint , ragq , rqfac , rq1fac , tsign , xpin select case ( meth ) case ( 1 ) elco ( 1 , 1 ) = 1.0d0 elco ( 2 , 1 ) = 1.0d0 tesco ( 1 , 1 ) = 0.0d0 tesco ( 2 , 1 ) = 2.0d0 tesco ( 1 , 2 ) = 1.0d0 tesco ( 3 , 12 ) = 0.0d0 pc ( 1 ) = 1.0d0 rqfac = 1.0d0 do nq = 2 , 12 !----------------------------------------------------------------------- ! The PC array will contain the coefficients of the polynomial !     p(x) = (x+1)*(x+2)*...*(x+nq-1). ! Initially, p(x) = 1. !----------------------------------------------------------------------- rq1fac = rqfac rqfac = rqfac / nq nqm1 = nq - 1 fnqm1 = nqm1 nqp1 = nq + 1 ! Form coefficients of p(x)*(x+nq-1). ---------------------------------- pc ( nq ) = 0.0d0 do ib = 1 , nqm1 i = nqp1 - ib pc ( i ) = pc ( i - 1 ) + fnqm1 * pc ( i ) enddo pc ( 1 ) = fnqm1 * pc ( 1 ) ! Compute integral, -1 to 0, of p(x) and x*p(x). ----------------------- pint = pc ( 1 ) xpin = pc ( 1 ) / 2.0d0 tsign = 1.0d0 do i = 2 , nq tsign = - tsign pint = pint + tsign * pc ( i ) / i xpin = xpin + tsign * pc ( i ) / ( i + 1 ) enddo ! Store coefficients in ELCO and TESCO. -------------------------------- elco ( 1 , nq ) = pint * rq1fac elco ( 2 , nq ) = 1.0d0 do i = 2 , nq elco ( i + 1 , nq ) = rq1fac * pc ( i ) / i enddo agamq = rqfac * xpin ragq = 1.0d0 / agamq tesco ( 2 , nq ) = ragq if ( nq . lt . 12 ) tesco ( 1 , nqp1 ) = ragq * rqfac / nqp1 tesco ( 3 , nqm1 ) = ragq enddo case ( 2 ) pc ( 1 ) = 1.0d0 rq1fac = 1.0d0 do nq = 1 , 5 !----------------------------------------------------------------------- ! The PC array will contain the coefficients of the polynomial !     p(x) = (x+1)*(x+2)*...*(x+nq). ! Initially, p(x) = 1. !----------------------------------------------------------------------- fnq = nq nqp1 = nq + 1 ! Form coefficients of p(x)*(x+nq). ------------------------------------ pc ( nqp1 ) = 0.0d0 do ib = 1 , nq i = nq + 2 - ib pc ( i ) = pc ( i - 1 ) + fnq * pc ( i ) enddo pc ( 1 ) = fnq * pc ( 1 ) ! Store coefficients in ELCO and TESCO. -------------------------------- do i = 1 , nqp1 elco ( i , nq ) = pc ( i ) / pc ( 2 ) enddo elco ( 2 , nq ) = 1.0d0 tesco ( 1 , nq ) = rq1fac tesco ( 2 , nq ) = nqp1 / elco ( 1 , nq ) tesco ( 3 , nq ) = ( nq + 2 ) / elco ( 1 , nq ) rq1fac = rq1fac / fnq enddo case default stop '*dcfode* unknown value for meth' end select end subroutine dcfode","tags":"","loc":"proc/dcfode~2.html"},{"title":"dsetpk – odepack","text":"subroutine dsetpk(Neq, Y, Ysv, Ewt, Ftem, Savf, Jok, Wm, Iwm, f, jac) DSETPK is called by DSTOKA to interface with the user-supplied\nroutine JAC, to compute and process relevant parts of\nthe matrix P = I - H EL(1) J, where J is the Jacobian df/dy,\nas need for preconditioning matrix operations later. In addition to variables described previously, communication\nwith DSETPK uses the following: Y array containing predicted values on entry. YSV array containing predicted y, to be saved (YH1 in DSTOKA). FTEM work array of length N (ACOR in DSTOKA). SAVF array containing f evaluated at predicted y. JOK input flag showing whether it was judged that Jacobian matrix\ndata need not be recomputed (JOK = 1) or needs to be (JOK = -1). WM real work space for matrices.\nSpace for preconditioning data starts at WM(LOCWP). IWM integer work space.\nSpace for preconditioning data starts at IWM(LOCIWP). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nJAC returned an error flag. JCUR output flag to indicate whether the matrix data involved\nis now current (JCUR = 1) or not (JCUR = 0). This routine also uses Common variables EL0, H, TN, IERPJ, JCUR, NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ysv (*) real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) integer :: Jok real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac Called by proc~~dsetpk~2~~CalledByGraph proc~dsetpk~2 dsetpk proc~dstoka~2 dstoka proc~dstoka~2->proc~dsetpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables hl0 ier Source Code dsetpk Variables Type Visibility Attributes Name Initial real(kind=dp), public :: hl0 integer, public :: ier Source Code subroutine dsetpk ( Neq , Y , Ysv , Ewt , Ftem , Savf , Jok , Wm , Iwm , f , jac ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ysv ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) integer :: Jok real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: jac real ( kind = dp ) :: hl0 integer :: ier dls1 % ierpj = 0 dls1 % jcur = 0 if ( Jok ==- 1 ) dls1 % jcur = 1 hl0 = dls1 % el0 * dls1 % h call jac ( f , Neq , dls1 % tn , Y , Ysv , Ewt , Savf , Ftem , hl0 , Jok , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), ier ) dls1 % nje = dls1 % nje + 1 if ( ier == 0 ) return dls1 % ierpj = 1 end subroutine dsetpk","tags":"","loc":"proc/dsetpk~2.html"},{"title":"diprepi – odepack","text":"subroutine diprepi(Neq, Y, S, Rwork, Ia, Ja, Ic, Jc, Ipflag, res, jac, adda) This routine serves as an interface between the driver and\nSubroutine DPREPI.  Tasks performed here are: call DPREPI, reset the required WM segment length LENWK, move YH back to its final location (following WM in RWORK), reset pointers for YH, SAVR, EWT, and ACOR, and move EWT to its new position if ISTATE = 0 or 1. IPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREPI error flag IPPER\nif there was trouble in Subroutine DPREPI. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer :: Ic (*) integer :: Jc (*) integer, intent(inout) :: Ipflag real :: res integer :: jac real :: adda Calls proc~~diprepi~2~~CallsGraph proc~diprepi~2 diprepi proc~dprepi dprepi proc~diprepi~2->proc~dprepi proc~jgroup jgroup proc~dprepi->proc~jgroup proc~odrv odrv proc~dprepi->proc~odrv proc~cdrv cdrv proc~dprepi->proc~cdrv proc~cntnzu cntnzu proc~dprepi->proc~cntnzu proc~adjlr adjlr proc~dprepi->proc~adjlr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~diprepi~2~~CalledByGraph proc~diprepi~2 diprepi proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~diprepi~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i imax lewtn lyhd lyhn Source Code diprepi Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: imax integer, public :: lewtn integer, public :: lyhd integer, public :: lyhn Source Code subroutine diprepi ( Neq , Y , S , Rwork , Ia , Ja , Ic , Jc , Ipflag , res , jac , adda ) ! integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: S ( * ) real ( kind = dp ), intent ( inout ) :: Rwork ( * ) integer :: Ia ( * ) integer :: Ja ( * ) integer :: Ic ( * ) integer :: Jc ( * ) integer , intent ( inout ) :: Ipflag external :: res external :: jac external :: adda integer :: i , imax , lewtn , lyhd , lyhn Ipflag = 0 !  Call DPREPI to do matrix preprocessing operations. ------------------- call dprepi ( Neq , Y , S , Rwork ( dls1 % lyh ), Rwork ( dls1 % lsavf ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lacor ), Ia , Ja , Ic , Jc , Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), & & Ipflag , res , jac , adda ) dlss % lenwk = max ( dlss % lreq , dlss % lwmin ) if ( Ipflag < 0 ) return !  If DPREPI was successful, move YH to end of required space for WM. --- lyhn = dls1 % lwm + dlss % lenwk if ( lyhn > dls1 % lyh ) return lyhd = dls1 % lyh - lyhn if ( lyhd /= 0 ) then imax = lyhn - 1 + dlss % lenyhm do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo dls1 % lyh = lyhn endif !  Reset pointers for SAVR, EWT, and ACOR. ------------------------------ dls1 % lsavf = dls1 % lyh + dlss % lenyh lewtn = dls1 % lsavf + dls1 % n dls1 % lacor = lewtn + dls1 % n if ( dlss % istatc /= 3 ) then !  If ISTATE = 1, move EWT (left) to its new position. ------------------ if ( lewtn > dls1 % lewt ) return do i = 1 , dls1 % n Rwork ( i + lewtn - 1 ) = Rwork ( i + dls1 % lewt - 1 ) enddo endif dls1 % lewt = lewtn end subroutine diprepi","tags":"","loc":"proc/diprepi~2.html"},{"title":"dprepj – odepack","text":"subroutine dprepj(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) NAME dprepj ( 3 f ) - [ M_odepack ] Compute and process Newton iteration matrix . DESCRIPTION DPREPJ is called by DSTODE to compute and process the matrix\n  P = I - h el(1) J , where J is an approximation to the Jacobian. Here J is computed by the user-supplied routine JAC if\n  MITER = 1 or 4, or by finite differencing if MITER = 2, 3, or 5. If MITER = 3, a diagonal approximation to J is used. J is stored in WM and replaced by P.  If MITER .ne. 3, P is then\n  subjected to LU decomposition in preparation for later solution\n  of linear systems with P as coefficient matrix.  This is done\n  by DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. In addition to variables described in DSTODE and DLSODE prologues,\n  communication with DPREPJ uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODE). SAVF array containing f evaluated at predicted y. WM real work space for matrices.  On output it contains the\ninverse diagonal matrix if MITER = 3 and the LU decomposition\nof P if MITER is 1, 2 , 4, or 5.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments.\nWM(2) = H*EL0, saved for later use if MITER = 3. IWM integer work space containing pivot information, starting at\nIWM(21), if MITER is 1, 2, 4, or 5.  IWM also contains band\nparameters ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 EL(1) (input). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nP matrix found to be singular. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the COMMON variables EL0, H, TN, UROUND,\n  MITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac Calls proc~~dprepj~2~~CallsGraph proc~dprepj~2 dprepj proc~dvnorm~2 dvnorm proc~dprepj~2->proc~dvnorm~2 none~wrapup~4 wrapup proc~dprepj~2->none~wrapup~4 proc~dgefa~2 dgefa proc~dprepj~2->proc~dgefa~2 wm wm none~wrapup~4->wm proc~dgbfa~2 dgbfa none~wrapup~4->proc~dgbfa~2 iwm iwm none~wrapup~4->iwm proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dgbfa~2->proc~daxpy~2 proc~dgbfa~2->proc~dscal~2 proc~dgbfa~2->proc~idamax~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables con di fac hl0 i i1 i2 ier ii j j1 jj lenp mba mband meb1 meband ml ml3 mu np1 r r0 srur yi yj yjj Subroutines wrapup Source Code dprepj Variables Type Visibility Attributes Name Initial real(kind=dp), public :: con real(kind=dp), public :: di real(kind=dp), public :: fac real(kind=dp), public :: hl0 integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: ii integer, public :: j integer, public :: j1 integer, public :: jj integer, public :: lenp integer, public :: mba integer, public :: mband integer, public :: meb1 integer, public :: meband integer, public :: ml integer, public :: ml3 integer, public :: mu integer, public :: np1 real(kind=dp), public :: r real(kind=dp), public :: r0 real(kind=dp), public :: srur real(kind=dp), public :: yi real(kind=dp), public :: yj real(kind=dp), public :: yjj Subroutines subroutine wrapup() Arguments None Source Code subroutine dprepj ( Neq , Y , Yh , Nyh , Ewt , Ftem , Savf , Wm , Iwm , f , jac ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: jac ! real ( kind = dp ) :: con , di , fac , hl0 , r , r0 , srur , yi , yj , yjj integer :: i , i1 , i2 , ier , ii , j , j1 , jj , lenp , mba , mband , meb1 , meband , ml , ml3 , mu , np1 ! dls1 % nje = dls1 % nje + 1 dls1 % ierpj = 0 dls1 % jcur = 1 hl0 = dls1 % h * dls1 % el0 select case ( dls1 % miter ) case ( 2 ) !  If MITER = 2, make N calls to F to approximate J. -------------------- fac = dvnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 srur = Wm ( 1 ) j1 = 2 do j = 1 , dls1 % n yj = Y ( j ) r = max ( srur * abs ( yj ), r0 / Ewt ( j )) Y ( j ) = Y ( j ) + r fac = - hl0 / r call f ( Neq , dls1 % tn , Y , Ftem ) do i = 1 , dls1 % n Wm ( i + j1 ) = ( Ftem ( i ) - Savf ( i )) * fac enddo Y ( j ) = yj j1 = j1 + dls1 % n enddo dls1 % nfe = dls1 % nfe + dls1 % n case ( 3 ) !  If MITER = 3, construct a diagonal approximation to J and P. --------- Wm ( 2 ) = hl0 r = dls1 % el0 * 0.1D0 do i = 1 , dls1 % n Y ( i ) = Y ( i ) + r * ( dls1 % h * Savf ( i ) - Yh ( i , 2 )) enddo call f ( Neq , dls1 % tn , Y , Wm ( 3 )) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n r0 = dls1 % h * Savf ( i ) - Yh ( i , 2 ) di = 0.1D0 * r0 - dls1 % h * ( Wm ( i + 2 ) - Savf ( i )) Wm ( i + 2 ) = 1.0D0 if ( abs ( r0 ) >= dls1 % uround / Ewt ( i ) ) then if ( abs ( di ) == 0.0D0 ) then dls1 % ierpj = 1 return else Wm ( i + 2 ) = 0.1D0 * r0 / di endif endif enddo return case ( 4 ) !  If MITER = 4, call JAC and multiply by scalar. ----------------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 meband = mband + ml lenp = meband * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , ml , mu , Wm ( ml3 ), meband ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo call wrapup () return case ( 5 ) !  If MITER = 5, make MBAND calls to F to approximate J. ---------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) mband = ml + mu + 1 mba = min ( mband , dls1 % n ) meband = mband + ml meb1 = meband - 1 srur = Wm ( 1 ) fac = dvnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 do j = 1 , mba do i = j , dls1 % n , mband yi = Y ( i ) r = max ( srur * abs ( yi ), r0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call f ( Neq , dls1 % tn , Y , Ftem ) do jj = j , dls1 % n , mband Y ( jj ) = Yh ( jj , 1 ) yjj = Y ( jj ) r = max ( srur * abs ( yjj ), r0 / Ewt ( jj )) fac = - hl0 / r i1 = max ( jj - mu , 1 ) i2 = min ( jj + ml , dls1 % n ) ii = jj * meb1 - ml + 2 do i = i1 , i2 Wm ( ii + i ) = ( Ftem ( i ) - Savf ( i )) * fac enddo enddo enddo dls1 % nfe = dls1 % nfe + mba call wrapup () return case default !  If MITER = 1, call JAC and multiply by scalar. ----------------------- lenp = dls1 % n * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , 0 , 0 , Wm ( 3 ), dls1 % n ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endselect !  Add identity matrix. ------------------------------------------------- j = 3 np1 = dls1 % n + 1 do i = 1 , dls1 % n Wm ( j ) = Wm ( j ) + 1.0D0 j = j + np1 enddo !  Do LU decomposition on P. -------------------------------------------- call dgefa ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 contains subroutine wrapup () !  Add identity matrix. ------------------------------------------------- ii = mband + 2 do i = 1 , dls1 % n Wm ( ii ) = Wm ( ii ) + 1.0D0 ii = ii + meband enddo !  Do LU decomposition of P. -------------------------------------------- call dgbfa ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine wrapup end subroutine dprepj","tags":"","loc":"proc/dprepj~2.html"},{"title":"dspigmr – odepack","text":"subroutine dspigmr(Neq, Tn, Y, Savf, B, Wght, N, Maxl, Maxlp1, Kmp, Delta, Hl0, Jpre, Mnewt, f, psol, Npsl, X, V, Hes, Q, Lgmr, Wp, Iwp, Wk, Dl, Iflag) This routine solves the linear system A * x = b using a scaled\n preconditioned version of the Generalized Minimal Residual method.\n An initial guess of x = 0 is assumed. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). TN current value of t. Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). B the right hand side of the system A*x = b. B is also used as work space when computing the final approximation.\n (B is the same as V(*,MAXL+1) in the call to DSPIGMR.) WGHT the vector of length N containing the nonzero\n elements of the diagonal scaling matrix. N the order of the matrix A, and the lengths\n of the vectors WGHT, B and X. MAXL the maximum allowable order of the matrix HES. MAXLP1 MAXLP1 = MAXL + 1, used for dynamic dimensioning of HES. KMP the number of previous vectors the new vector VNEW\n must be made orthogonal to.  KMP .le. MAXL. DELTA tolerance on residuals b - A*x in weighted RMS-norm. HL0 current value of (step size h) * (coefficient l0). JPRE preconditioner type flag. MNEWT Newton iteration counter (.ge. 0). WK real work array used by routine DATV and PSOL. DL real work array used for calculation of the residual\n norm RHO when the method is incomplete (KMP .lt. MAXL).\n Not needed or referenced in complete case (KMP = MAXL). WP real work array used by preconditioner PSOL. IWP integer work array used by preconditioner PSOL. On return X the final computed approximation to the solution\n of the system A*x = b. LGMR the number of iterations performed and\n the current order of the upper Hessenberg\n matrix HES. NPSL the number of calls to PSOL. V the N by (LGMR+1) array containing the LGMR\n orthogonal vectors V( ,1) to V( ,LGMR). HES the upper triangular factor of the QR decomposition\n of the (LGMR+1) by lgmr upper Hessenberg matrix whose\n entries are the scaled inner-products of A V( ,i)\n and V(*,k). Q real array of length 2*MAXL containing the components\n of the Givens rotations used in the QR decomposition\n of HES.  It is loaded in DHEQR and used in DHELS. IFLAG integer error flag: value description 0 means convergence in LGMR iterations, LGMR .le. MAXL. 1 means the convergence test did not pass in MAXL iterations, but the residual norm is .lt. 1, or .lt. norm(b) if MNEWT = 0, and so x is computed. 2 means the convergence test did not pass in MAXL iterations, residual .gt. 1, and X is undefined. 3 means there was a recoverable error in PSOL caused by the preconditioner being out of date. -1 means there was a nonrecoverable error in PSOL. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Tn real(kind=dp) :: Y (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: B (*) real(kind=dp) :: Wght (*) integer :: N integer, intent(in) :: Maxl integer :: Maxlp1 integer :: Kmp real(kind=dp), intent(inout) :: Delta real(kind=dp) :: Hl0 integer :: Jpre integer, intent(in) :: Mnewt real :: f real :: psol integer, intent(out) :: Npsl real(kind=dp), intent(inout) :: X (*) real(kind=dp), intent(inout) :: V (N,*) real(kind=dp) :: Hes (Maxlp1,*) real(kind=dp), intent(inout) :: Q (*) integer, intent(out) :: Lgmr real(kind=dp), intent(inout) :: Wp (*) integer :: Iwp (*) real(kind=dp), intent(inout) :: Wk (*) real(kind=dp), intent(inout) :: Dl (*) integer, intent(out) :: Iflag Calls proc~~dspigmr~2~~CallsGraph proc~dspigmr~2 dspigmr proc~dnrm2~2 DNRM2 proc~dspigmr~2->proc~dnrm2~2 proc~datv~2 datv proc~dspigmr~2->proc~datv~2 none~approximate approximate proc~dspigmr~2->none~approximate proc~dheqr~2 dheqr proc~dspigmr~2->proc~dheqr~2 proc~dscal~2 dscal proc~dspigmr~2->proc~dscal~2 proc~dorthog~2 dorthog proc~dspigmr~2->proc~dorthog~2 proc~datv~2->proc~dnrm2~2 proc~daxpy~2 daxpy none~approximate->proc~daxpy~2 wght wght none~approximate->wght x x none~approximate->x proc~dhels~2 dhels none~approximate->proc~dhels~2 b b none~approximate->b v v none~approximate->v psol psol none~approximate->psol proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~ddot~2 ddot proc~dorthog~2->proc~ddot~2 proc~dhels~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dspigmr~2~~CalledByGraph proc~dspigmr~2 dspigmr proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspigmr~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables bnrm bnrm0 c dlnrm i i2 ier info ip1 j k ll llp1 prod rho s snormw tem Subroutines approximate Source Code dspigmr Variables Type Visibility Attributes Name Initial real(kind=dp), public :: bnrm real(kind=dp), public :: bnrm0 real(kind=dp), public :: c real(kind=dp), public :: dlnrm integer, public :: i integer, public :: i2 integer, public :: ier integer, public :: info integer, public :: ip1 integer, public :: j integer, public :: k integer, public :: ll integer, public :: llp1 real(kind=dp), public :: prod real(kind=dp), public :: rho real(kind=dp), public :: s real(kind=dp), public :: snormw real(kind=dp), public :: tem Subroutines subroutine approximate() Arguments None Source Code subroutine dspigmr ( Neq , Tn , Y , Savf , B , Wght , N , Maxl , Maxlp1 , Kmp , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , V , Hes , Q , Lgmr , Wp , Iwp , Wk , Dl , Iflag ) ! integer :: Neq ( * ) real ( kind = dp ) :: Tn real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) real ( kind = dp ) :: Wght ( * ) integer :: N integer , intent ( in ) :: Maxl integer :: Maxlp1 integer :: Kmp real ( kind = dp ), intent ( inout ) :: Delta real ( kind = dp ) :: Hl0 integer :: Jpre integer , intent ( in ) :: Mnewt external :: f external :: psol integer , intent ( out ) :: Npsl real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ), intent ( inout ) :: V ( N , * ) real ( kind = dp ) :: Hes ( Maxlp1 , * ) real ( kind = dp ), intent ( inout ) :: Q ( * ) integer , intent ( out ) :: Lgmr real ( kind = dp ), intent ( inout ) :: Wp ( * ) integer :: Iwp ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) real ( kind = dp ), intent ( inout ) :: Dl ( * ) integer , intent ( out ) :: Iflag ! real ( kind = dp ) :: bnrm , bnrm0 , c , dlnrm , prod , rho , s , snormw , tem integer :: i , i2 , ier , info , ip1 , j , k , ll , llp1 ! Iflag = 0 Lgmr = 0 Npsl = 0 !----------------------------------------------------------------------- !  The initial residual is the vector b.  Apply scaling to b, and test !  for an immediate return with X = 0 or X = b. !----------------------------------------------------------------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm0 = dnrm2 ( N , V , 1 ) bnrm = bnrm0 if ( bnrm0 > Delta ) then !  Apply inverse of left preconditioner to vector b. -------------------- ier = 0 if ( Jpre /= 0 . and . Jpre /= 2 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , B , 1 , ier ) Npsl = 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif !  Calculate norm of scaled vector V(*,1) and normalize it. ------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm = dnrm2 ( N , V , 1 ) Delta = Delta * ( bnrm / bnrm0 ) endif tem = 1.0D0 / bnrm call dscal ( N , tem , V ( 1 , 1 ), 1 ) !  Zero out the HES array. ---------------------------------------------- do j = 1 , Maxl do i = 1 , Maxlp1 Hes ( i , j ) = 0.0D0 enddo enddo !----------------------------------------------------------------------- !  Main loop to compute the vectors V(*,2) to V(*,MAXL). !  The running product PROD is needed for the convergence test. !----------------------------------------------------------------------- prod = 1.0D0 do ll = 1 , Maxl Lgmr = ll !----------------------------------------------------------------------- !  Call routine DATV to compute VNEW = Abar*v(ll), where Abar is !  the matrix A with scaling and inverse preconditioner factors applied. !  Call routine DORTHOG to orthogonalize the new vector VNEW = V(*,LL+1). !  Call routine DHEQR to update the factors of HES. !----------------------------------------------------------------------- call datv ( Neq , Y , Savf , V ( 1 , ll ), Wght , X , f , psol , V ( 1 , ll + 1 ), Wk , Wp , Iwp , Hl0 , Jpre , ier , Npsl ) if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif call dorthog ( V ( 1 , ll + 1 ), V , Hes , N , ll , Maxlp1 , Kmp , snormw ) Hes ( ll + 1 , ll ) = snormw call dheqr ( Hes , Maxlp1 , ll , Q , info , ll ) if ( info == ll ) then Iflag = 2 return endif !----------------------------------------------------------------------- !  Update RHO, the estimate of the norm of the residual b - A*xl. !  If KMP .lt. MAXL, then the vectors V(*,1),...,V(*,LL+1) are not !  necessarily orthogonal for LL .gt. KMP.  The vector DL must then !  be computed, and its norm used in the calculation of RHO. !----------------------------------------------------------------------- prod = prod * Q ( 2 * ll ) rho = abs ( prod * bnrm ) if ( ( ll > Kmp ) . and . ( Kmp < Maxl ) ) then if ( ll == Kmp + 1 ) then !X!call dcopy(N,V(1,1),1,Dl,1) Dl ( 1 : N ) = V ( 1 : N , 1 ) do i = 1 , Kmp ip1 = i + 1 i2 = i * 2 s = Q ( i2 ) c = Q ( i2 - 1 ) do k = 1 , N Dl ( k ) = s * Dl ( k ) + c * V ( k , ip1 ) enddo enddo endif s = Q ( 2 * ll ) c = Q ( 2 * ll - 1 ) / snormw llp1 = ll + 1 do k = 1 , N Dl ( k ) = s * Dl ( k ) + c * V ( k , llp1 ) enddo dlnrm = dnrm2 ( N , Dl , 1 ) rho = rho * dlnrm endif !----------------------------------------------------------------------- !  Test for convergence.  If passed, compute approximation xl. !  if failed and LL .lt. MAXL, then continue iterating. !----------------------------------------------------------------------- if ( rho <= Delta ) then call approximate () return endif if ( ll == Maxl ) exit !----------------------------------------------------------------------- !  Rescale so that the norm of V(1,LL+1) is one. !----------------------------------------------------------------------- tem = 1.0D0 / snormw call dscal ( N , tem , V ( 1 , ll + 1 ), 1 ) enddo if ( rho <= 1.0D0 ) then Iflag = 1 call approximate () return elseif ( rho <= bnrm . and . Mnewt == 0 ) then Iflag = 1 call approximate () return endif elseif ( Mnewt > 0 ) then do i = 1 , N X ( i ) = 0.0D0 enddo return else !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) return endif Iflag = 2 contains subroutine approximate !----------------------------------------------------------------------- !  Compute the approximation xl to the solution. !  Since the vector X was used as work space, and the initial guess !  of the Newton correction is zero, X must be reset to zero. !----------------------------------------------------------------------- integer :: ll ll = Lgmr llp1 = ll + 1 do k = 1 , llp1 B ( k ) = 0.0D0 enddo B ( 1 ) = bnrm call dhels ( Hes , Maxlp1 , ll , Q , B ) do k = 1 , N X ( k ) = 0.0D0 enddo do i = 1 , ll call daxpy ( N , B ( i ), V ( 1 , i ), 1 , X , 1 ) enddo do i = 1 , N X ( i ) = X ( i ) / Wght ( i ) enddo if ( Jpre <= 1 ) return call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , X , 2 , ier ) Npsl = Npsl + 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif end subroutine approximate end subroutine dspigmr","tags":"","loc":"proc/dspigmr~2.html"},{"title":"mdm – odepack","text":"subroutine mdm(Vk, Tail, V, L, Last, Next, Mark) mdm – form element from uneliminated neighbors of vk Arguments Type Intent Optional Attributes Name integer, intent(in) :: Vk integer, intent(inout) :: Tail integer, intent(in) :: V (*) integer, intent(inout) :: L (*) integer, intent(in) :: Last (*) integer, intent(in) :: Next (*) integer, intent(inout) :: Mark (*) Called by proc~~mdm~2~~CalledByGraph proc~mdm~2 mdm proc~md~2 md proc~md~2->proc~mdm~2 proc~odrv~2 odrv proc~odrv~2->proc~md~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables b blp blpmax es lb ls s tag vb vs Source Code mdm Variables Type Visibility Attributes Name Initial integer, public :: b integer, public :: blp integer, public :: blpmax integer, public :: es integer, public :: lb integer, public :: ls integer, public :: s integer, public :: tag integer, public :: vb integer, public :: vs Source Code subroutine mdm ( Vk , Tail , V , L , Last , Next , Mark ) integer , intent ( in ) :: Vk integer , intent ( inout ) :: Tail integer , intent ( in ) :: V ( * ) integer , intent ( inout ) :: L ( * ) integer , intent ( in ) :: Last ( * ) integer , intent ( in ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) integer :: b , blp , blpmax , es , lb , ls , s , tag , vb , vs equivalence ( vs , es ) ! !----initialize tag and list of uneliminated neighbors tag = Mark ( Vk ) Tail = Vk ! !----for each vertex/element vs/es in element list of vk ls = L ( Vk ) do s = ls if ( s == 0 ) then ! !----terminate list of uneliminated neighbors L ( Tail ) = 0 exit else ls = L ( s ) vs = V ( s ) if ( Next ( vs ) < 0 ) then ! !------if es is active element, then ... !--------for each vertex vb in boundary list of element es lb = L ( es ) blpmax = Last ( es ) do blp = 1 , blpmax b = lb lb = L ( b ) vb = V ( b ) ! !----------if vb is untagged vertex, then tag and append to list of !----------uneliminated neighbors if ( Mark ( vb ) < tag ) then Mark ( vb ) = tag L ( Tail ) = b Tail = b endif enddo ! !--------mark es inactive ! Mark ( es ) = tag else ! !------if vs is uneliminated vertex, then tag and append to list of !------uneliminated neighbors Mark ( vs ) = tag L ( Tail ) = s Tail = s endif endif enddo end subroutine mdm","tags":"","loc":"proc/mdm~2.html"},{"title":"dstoka – odepack","text":"subroutine dstoka(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTOKA performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. This routine was derived from Subroutine DSTODPK in the DLSODPK\npackage by the addition of automatic functional/Newton iteration\nswitching and logic for re-use of Jacobian data. Note: DSTOKA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTOKA is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\nAlso used for input of YH(*,MAXORD+2) when JSTART = -1\nand MAXORD .lt. the current order NQ. SAVX an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). CCMAX maximum relative change in H*EL0 before DSETPK is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used. HMXI = 0.0 is allowed and corresponds to an infinite HMAX. HMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n  . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings: 0  the step was succesful.\n      -1  the requested error could not be achieved.\n      -2  corrector convergence could not be achieved.\n      -3  fatal error in DSETPK or DSOLPK. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between DSETPK calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed.\nMETH/MITER = the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol Calls proc~~dstoka~2~~CallsGraph proc~dstoka~2 dstoka proc~dcfode~2 dcfode proc~dstoka~2->proc~dcfode~2 proc~dsolpk~2 dsolpk proc~dstoka~2->proc~dsolpk~2 proc~dvnorm~2 dvnorm proc~dstoka~2->proc~dvnorm~2 proc~dsetpk~2 dsetpk proc~dstoka~2->proc~dsetpk~2 proc~dusol~2 dusol proc~dsolpk~2->proc~dusol~2 proc~dspiom~2 dspiom proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dpcgs~2 dpcgs proc~dsolpk~2->proc~dpcgs~2 proc~dscal~2 dscal proc~dsolpk~2->proc~dscal~2 proc~dpcg~2 dpcg proc~dsolpk~2->proc~dpcg~2 proc~dusol~2->proc~dvnorm~2 proc~dspiom~2->proc~dscal~2 proc~dnrm2~2 DNRM2 proc~dspiom~2->proc~dnrm2~2 proc~datv~2 datv proc~dspiom~2->proc~datv~2 none~approximate~2 approximate proc~dspiom~2->none~approximate~2 proc~dhefa~2 dhefa proc~dspiom~2->proc~dhefa~2 proc~dorthog~2 dorthog proc~dspiom~2->proc~dorthog~2 proc~dspigmr~2->proc~dscal~2 proc~dspigmr~2->proc~dnrm2~2 proc~dspigmr~2->proc~datv~2 none~approximate approximate proc~dspigmr~2->none~approximate proc~dspigmr~2->proc~dorthog~2 proc~dheqr~2 dheqr proc~dspigmr~2->proc~dheqr~2 proc~dpcgs~2->proc~dvnorm~2 proc~datp~2 datp proc~dpcgs~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcgs~2->proc~daxpy~2 proc~dpcg~2->proc~dvnorm~2 proc~dpcg~2->proc~datp~2 proc~dpcg~2->proc~daxpy~2 proc~ddot~2 ddot proc~dpcg~2->proc~ddot~2 proc~datv~2->proc~dnrm2~2 none~approximate~2->proc~daxpy~2 x x none~approximate~2->x wght wght none~approximate~2->wght b b none~approximate~2->b v v none~approximate~2->v proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 psol psol none~approximate~2->psol none~approximate->proc~daxpy~2 none~approximate->x none~approximate->wght proc~dhels~2 dhels none~approximate->proc~dhels~2 none~approximate->b none~approximate->v none~approximate->psol proc~datp~2->proc~dvnorm~2 proc~dhefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~dorthog~2->proc~ddot~2 proc~dhels~2->proc~daxpy~2 proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstoka~2~~CalledByGraph proc~dstoka~2 dstoka proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dfnrm drc dsm dup exdn exsm exup i i1 iredo iret j jb jok m ncf newq nslow r rh rhdn rhsm rhup roc stiff told Source Code dstoka Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp real(kind=dp), public :: dfnrm real(kind=dp), public :: drc real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: iret integer, public :: j integer, public :: jb integer, public :: jok integer, public :: m integer, public :: ncf integer, public :: newq integer, public :: nslow real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: roc real(kind=dp), public :: stiff real(kind=dp), public :: told Source Code subroutine dstoka ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Savx , Acor , Wm , Iwm , f , jac , psol ) integer , dimension ( * ) :: Neq real ( kind = dp ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( inout ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( inout ), dimension ( * ) :: Yh1 real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savf real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savx real ( kind = dp ), intent ( inout ), dimension ( * ) :: Acor real ( kind = dp ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external f external jac external psol real ( kind = dp ) :: dcon , ddn , del , delp , dfnrm , drc , dsm , dup , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , roc , stiff , told integer :: i , i1 , iredo , iret , j , jb , jok , m , ncf , newq , nslow dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls % nslj = 0 dls1 % ipup = 0 iret = 3 dls % newt = 0 dls % stifr = 0.0D0 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  The flag IPUP is set according to whether matrix data is involved !  (NEWT .gt. 0 .and. JACFLG .ne. 0) or not, to trigger a call to DSETPK. !  IPUP is set to MITER when RC differs from 1 by more than CCMAX, !  and at least every MSBP steps, when JACFLG = 1. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !----------------------------------------------------------------------- 400 continue if ( dls % newt == 0 . or . dlpk % jacflg == 0 ) then drc = 0.0D0 dls1 % ipup = 0 dls1 % crate = 0.7D0 else drc = abs ( dls1 % rc - 1.0D0 ) if ( drc > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter endif dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !  Within the corrector loop, an estimated rate of convergence (ROC) !  and a stiffness ratio estimate (STIFF) are kept.  Corresponding !  global estimates are kept as CRATE and dls%stifr. !----------------------------------------------------------------------- 500 continue m = 0 dlpk % mnewt = 0 stiff = 0.0D0 roc = 0.05D0 nslow = 0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls % newt /= 0 . and . dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, DSETPK is called to update any matrix data needed, !  before starting the corrector iteration. !  JOK is set to indicate if the matrix data need not be recomputed. !  IPUP is set to 0 as an indicator that the matrix data is up to date. !----------------------------------------------------------------------- jok = 1 if ( dls1 % nst == 0 . or . dls1 % nst > dls % nslj + 50 ) jok = - 1 if ( dls1 % icf == 1 . and . drc < 0.2D0 ) jok = - 1 if ( dls1 % icf == 2 ) jok = - 1 if ( jok ==- 1 ) then dls % nslj = dls1 % nst dls % njev = dls % njev + 1 endif call dsetpk ( Neq , Y , Yh1 , Ewt , Acor , Savf , jok , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 drc = 0.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls % newt /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix.  STIFF is set to the ratio of the norms !  of the residual and the correction vector. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savx ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo dfnrm = dvnorm ( dls1 % n , Savx , Ewt ) call dsolpk ( Neq , Y , Savf , Savx , Ewt , Wm , Iwm , f , psol ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dvnorm ( dls1 % n , Savx , Ewt ) if ( del > 1.0D-8 ) stiff = max ( stiff , dfnrm / del ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Savx ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation, and STIFF is set to 1.0. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo stiff = 1.0D0 endif !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is made for the iteration switch, and is also used !  in the convergence test.   If the iteration seems to be diverging or !  converging at a slow rate (.gt. 0.8 more than once), it is stopped. !----------------------------------------------------------------------- if ( m /= 0 ) then roc = max ( 0.05D0 , del / delp ) dls1 % crate = max ( 0.2D0 * dls1 % crate , roc ) endif dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / dlpk % epcon if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 to signal that the !  preconditioner involved may need updating later. !  The stiffness ratio STIFR is updated using the latest STIFF value. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( dls % newt > 0 ) dls % stifr = 0.5D0 * ( dls % stifr + stiff ) if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1300 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  If Newton iteration is being done and STIFR is less than 1.5, !  then switch to functional iteration. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 if ( dls % newt == 0 ) dls % nsfi = dls % nsfi + 1 if ( dls % newt > 0 . and . dls % stifr < 1.5D0 ) dls % newt = 0 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  in the case of failure, RHUP = 0.0 to avoid an order increase. !  the largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then if ( roc <= 1 0.0D0 ) then if ( roc > 0.8D0 ) nslow = nslow + 1 if ( nslow < 2 ) then dlpk % mnewt = m delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif endif endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If functional iteration is being done (NEWT = 0) and MITER .gt. 0 !  (and this is not the first step), then switch to Newton !  (NEWT = MITER), and retry the step.  (Setting STIFR = 1023 insures !  that a switch back will not occur for 10 step attempts.) !  If Newton iteration is being done, but using a preconditioner that !  is out of date (JACFLG .ne. 0 .and. JCUR = 0), then signal for a !  re-evalutation of the preconditioner, and retry the step. !  In all other cases, the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue dls1 % icf = 1 if ( dls % newt == 0 ) then if ( dls1 % nst == 0 ) goto 800 if ( dls1 % miter == 0 ) goto 800 dls % newt = dls1 % miter dls % stifr = 102 3.0D0 dls1 % ipup = dls1 % miter goto 500 endif if ( dls1 % jcur /= 1 . and . dlpk % jacflg /= 0 ) then dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dlpk % ncfn = dlpk % ncfn + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1300 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1300 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1300 else rh = 0.5D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1200 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstoka","tags":"","loc":"proc/dstoka~2.html"},{"title":"dprjis – odepack","text":"subroutine dprjis(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wk, Iwk, res, jac, adda) DPRJIS is called to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s. J is computed by columns, either by\nthe user-supplied routine JAC if MITER = 1, or by finite differencing\nif MITER = 2. J is stored in WK, rescaled, and ADDA is called to\ngenerate P. The matrix P is subjected to LU decomposition in CDRV.\nP and its LU decomposition are stored separately in WK. In addition to variables described previously, communication\nwith DPRJIS uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array containing r evaluated at predicted y. On output it\ncontains the residual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WK real work space for matrices.  On output it contains P and\nits sparse LU decomposition.  Storage of matrix elements\nstarts at WK(3).\nWK also contains the following matrix-related data.\nWK(1) = SQRT(UROUND), used in numerical Jacobian increments. IWK integer work space for matrix-related data, assumed to be\nequivalenced to WK.  In addition,  WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. EL0 EL(1) (input). IERPJ output error flag (in COMMON).\n    =  0 if no error.\n    =  1 if zero pivot found in CDRV.\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3.\n    = -1 if insufficient storage for CDRV (should not occur).\n    = -2 if other error found in CDRV (should not occur here). JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses other variables in global structures. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wk integer, dimension(*) :: Iwk real :: res integer :: jac real :: adda Calls proc~~dprjis~2~~CallsGraph proc~dprjis~2 dprjis proc~cdrv~2 cdrv proc~dprjis~2->proc~cdrv~2 proc~nsfc~2 nsfc proc~cdrv~2->proc~nsfc~2 proc~nntc~2 nntc proc~cdrv~2->proc~nntc~2 proc~nnsc~2 nnsc proc~cdrv~2->proc~nnsc~2 proc~nnfc~2 nnfc proc~cdrv~2->proc~nnfc~2 proc~nroc~2 nroc proc~cdrv~2->proc~nroc~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables con fac hl0 i imul ires j jj jmax jmin k kmax kmin ng r srur Source Code dprjis Variables Type Visibility Attributes Name Initial real(kind=dp), public :: con real(kind=dp), public :: fac real(kind=dp), public :: hl0 integer, public :: i integer, public :: imul integer, public :: ires integer, public :: j integer, public :: jj integer, public :: jmax integer, public :: jmin integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: ng real(kind=dp), public :: r real(kind=dp), public :: srur Source Code subroutine dprjis ( Neq , Y , Yh , Nyh , Ewt , Rtem , Savr , S , Wk , Iwk , res , jac , adda ) ! integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( in ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Rtem real ( kind = dp ), dimension ( * ) :: Savr real ( kind = dp ), dimension ( * ) :: S real ( kind = dp ), intent ( inout ), dimension ( * ) :: Wk integer , dimension ( * ) :: Iwk external :: res external :: jac external :: adda ! real ( kind = dp ) :: con , fac , hl0 , r , srur integer :: i , imul , ires , j , jj , jmax , jmin , k , kmax , kmin , ng ! hl0 = dls1 % h * dls1 % el0 con = - hl0 dls1 % jcur = 1 dls1 % nje = dls1 % nje + 1 if ( dls1 % miter == 2 ) then ! !  If MITER = 2, make NGP + 1 calls to RES to approximate J and P. ------ ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then !  Error return for IRES = 2 or IRES = 3 return from RES. --------------- dls1 % ierpj = ires return else srur = Wk ( 1 ) jmin = Iwk ( dlss % ipigp ) do ng = 1 , dlss % ngp jmax = Iwk ( dlss % ipigp + ng ) - 1 do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) r = max ( srur * abs ( Y ( jj )), 0.01D0 / Ewt ( jj )) Y ( jj ) = Y ( jj ) + r enddo call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) Y ( jj ) = Yh ( jj , 1 ) r = max ( srur * abs ( Y ( jj )), 0.01D0 / Ewt ( jj )) fac = - hl0 / r kmin = Iwk ( dlss % ibian + jj ) kmax = Iwk ( dlss % ibian + jj + 1 ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Rtem ( i ) = ( Rtem ( i ) - Savr ( i )) * fac enddo call adda ( Neq , dls1 % tn , Y , jj , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Rtem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Rtem ( i ) enddo enddo jmin = jmax + 1 endif enddo ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return endif endif else ! !  If MITER = 1, call RES, then call JAC and ADDA for each column. ------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else kmin = Iwk ( dlss % ipian ) do j = 1 , dls1 % n kmax = Iwk ( dlss % ipian + j ) - 1 do i = 1 , dls1 % n Rtem ( i ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Rtem ) do i = 1 , dls1 % n Rtem ( i ) = Rtem ( i ) * con enddo call adda ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Rtem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Rtem ( i ) enddo kmin = kmax + 1 enddo endif endif ! !  Do numerical factorization of P matrix. ------------------------------ dlss % nlu = dlss % nlu + 1 dls1 % ierpj = 0 do i = 1 , dls1 % n Rtem ( i ) = 0.0D0 enddo call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), & & Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Rtem , Rtem , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 2 , dlss % iys ) if ( dlss % iys == 0 ) return imul = ( dlss % iys - 1 ) / dls1 % n dls1 % ierpj = - 2 if ( imul == 8 ) dls1 % ierpj = 1 if ( imul == 10 ) dls1 % ierpj = - 1 end subroutine dprjis","tags":"","loc":"proc/dprjis~2.html"},{"title":"dsolss – odepack","text":"subroutine dsolss(Wk, Iwk, X, Tem) This routine manages the solution of the linear system arising from\na chord iteration.  It is called if MITER .ne. 0. If MITER is 1 or 2, it calls CDRV to accomplish this. If MITER = 3 it updates the coefficient H*EL0 in the diagonal\nmatrix, and then computes the solution.\ncommunication with DSOLSS uses the following variables: WK real work space containing the inverse diagonal matrix if\nMITER = 3 and the LU decomposition of the matrix otherwise.\nStorage of matrix elements starts at WK(3).\nWK also contains the following matrix-related data: WK ( 1 ) = SQRT ( UROUND ) ( not used here ) , WK ( 2 ) = HL0 , the previous value of H * EL0 , used if MITER = 3 . IWK integer work space for matrix-related data, assumed to\nbe equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. X the right-hand side vector on input, and the solution vector\non output, of length N. TEM vector of work space of length N, not used in this version. IERSL output flag (in Common). IERSL = 0 if no trouble occurred . IERSL = - 1 if CDRV returned an error flag ( MITER = 1 or 2 ) . This should never occur and is considered fatal . IERSL = 1 if a singular matrix arose with MITER = 3 . Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dsolss~2~~CallsGraph proc~dsolss~2 dsolss proc~cdrv~2 cdrv proc~dsolss~2->proc~cdrv~2 proc~nsfc~2 nsfc proc~cdrv~2->proc~nsfc~2 proc~nntc~2 nntc proc~cdrv~2->proc~nntc~2 proc~nnsc~2 nnsc proc~cdrv~2->proc~nnsc~2 proc~nnfc~2 nnfc proc~cdrv~2->proc~nnfc~2 proc~nroc~2 nroc proc~cdrv~2->proc~nroc~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables di hl0 i phl0 r Source Code dsolss Variables Type Visibility Attributes Name Initial real(kind=dp), public :: di real(kind=dp), public :: hl0 integer, public :: i real(kind=dp), public :: phl0 real(kind=dp), public :: r Source Code subroutine dsolss ( Wk , Iwk , X , Tem ) ! real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer :: Iwk ( * ) real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ) :: Tem ( * ) ! real ( kind = dp ) :: di , hl0 , phl0 , r integer :: i ! dls1 % iersl = 0 select case ( dls1 % miter ) case ( 3 ) ! phl0 = Wk ( 2 ) hl0 = dls1 % h * dls1 % el0 Wk ( 2 ) = hl0 if ( hl0 /= phl0 ) then r = hl0 / phl0 do i = 1 , dls1 % n di = 1.0D0 - r * ( 1.0D0 - 1.0D0 / Wk ( i + 2 )) if ( abs ( di ) == 0.0D0 ) then dls1 % iersl = 1 return else Wk ( i + 2 ) = 1.0D0 / di endif enddo endif case default call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), X , X , dlss % nsp ,& & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 4 , dls1 % iersl ) if ( dls1 % iersl /= 0 ) dls1 % iersl = - 1 return endselect do i = 1 , dls1 % n X ( i ) = Wk ( i + 2 ) * X ( i ) enddo end subroutine dsolss","tags":"","loc":"proc/dsolss~2.html"},{"title":"dpcg – odepack","text":"subroutine dpcg(Neq, Tn, Y, Savf, R, Wght, N, Maxl, Delta, Hl0, Jpre, Mnewt, f, psol, Npsl, X, P, W, Z, Lpcg, Wp, Iwp, Wk, Iflag) This routine computes the solution to the system A*x = b using a\n preconditioned version of the Conjugate Gradient algorithm.\n It is assumed here that the matrix A and the preconditioner\n matrix M are symmetric positive definite or nearly so. On entry NEQ problem size, passed to F and PSOL (NEQ(1) = N). TN current value of t. Y array containing current dependent variable vector. SAVF array containing current value of f(t,y). R the right hand side of the system A*x = b. WGHT array of length N containing scale factors.\n 1/WGHT(i) are the diagonal elements of the diagonal\n scaling matrix D. N the order of the matrix A, and the lengths\n of the vectors Y, SAVF, R, WGHT, P, W, Z, WK, and X. MAXL the maximum allowable number of iterates. DELTA tolerance on residuals b - A*x in weighted RMS-norm. HL0 current value of (step size h) * (coefficient l0). JPRE preconditioner type flag. MNEWT Newton iteration counter (.ge. 0). WK real work array used by routine DATP. WP real work array used by preconditioner PSOL. IWP integer work array used by preconditioner PSOL. On return X the final computed approximation to the solution\n of the system A*x = b. LPCG the number of iterations performed, and current\n order of the upper Hessenberg matrix HES. NPSL the number of calls to PSOL. IFLAG integer error flag: 0 means convergence in LPCG iterations , LPCG . le . MAXL . 1 means the convergence test did not pass in MAXL iterations , but the residual norm is . lt . 1 , or . lt . norm ( b ) if MNEWT = 0 , and so X is computed . 2 means the convergence test did not pass in MAXL iterations , residual . gt . 1 , and X is undefined . 3 means there was a recoverable error in PSOL caused by the preconditioner being out of date . 4 means there was a zero denominator in the algorithm . The system matrix or preconditioner matrix is not sufficiently close to being symmetric pos . definite . - 1 means there was a nonrecoverable error in PSOL . Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Tn real(kind=dp) :: Y (*) real(kind=dp) :: Savf (*) real(kind=dp) :: R (*) real(kind=dp) :: Wght (*) integer :: N integer, intent(in) :: Maxl real(kind=dp), intent(in) :: Delta real(kind=dp) :: Hl0 integer, intent(in) :: Jpre integer, intent(in) :: Mnewt real :: f real :: psol integer, intent(out) :: Npsl real(kind=dp), intent(inout) :: X (*) real(kind=dp), intent(inout) :: P (*) real(kind=dp), intent(inout) :: W (*) real(kind=dp), intent(inout) :: Z (*) integer, intent(out) :: Lpcg real(kind=dp), intent(inout) :: Wp (*) integer :: Iwp (*) real(kind=dp), intent(inout) :: Wk (*) integer, intent(out) :: Iflag Calls proc~~dpcg~2~~CallsGraph proc~dpcg~2 dpcg proc~dvnorm~2 dvnorm proc~dpcg~2->proc~dvnorm~2 proc~datp~2 datp proc~dpcg~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcg~2->proc~daxpy~2 proc~ddot~2 ddot proc~dpcg~2->proc~ddot~2 proc~datp~2->proc~dvnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dpcg~2~~CalledByGraph proc~dpcg~2 dpcg proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dpcg~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables alpha beta bnrm i ier ptw rnrm ztr ztr0 Source Code dpcg Variables Type Visibility Attributes Name Initial real(kind=dp), public :: alpha real(kind=dp), public :: beta real(kind=dp), public :: bnrm integer, public :: i integer, public :: ier real(kind=dp), public :: ptw real(kind=dp), public :: rnrm real(kind=dp), public :: ztr real(kind=dp), public :: ztr0 Source Code subroutine dpcg ( Neq , Tn , Y , Savf , R , Wght , N , Maxl , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , P , W , Z , Lpcg , Wp , Iwp , Wk , Iflag ) ! integer :: Neq ( * ) real ( kind = dp ) :: Tn real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ) :: R ( * ) real ( kind = dp ) :: Wght ( * ) integer :: N integer , intent ( in ) :: Maxl real ( kind = dp ), intent ( in ) :: Delta real ( kind = dp ) :: Hl0 integer , intent ( in ) :: Jpre integer , intent ( in ) :: Mnewt external :: f external :: psol integer , intent ( out ) :: Npsl real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ), intent ( inout ) :: P ( * ) real ( kind = dp ), intent ( inout ) :: W ( * ) real ( kind = dp ), intent ( inout ) :: Z ( * ) integer , intent ( out ) :: Lpcg real ( kind = dp ), intent ( inout ) :: Wp ( * ) integer :: Iwp ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer , intent ( out ) :: Iflag ! real ( kind = dp ) :: alpha , beta , bnrm , ptw , rnrm , ztr , ztr0 integer :: i , ier ! Iflag = 0 Npsl = 0 Lpcg = 0 do i = 1 , N X ( i ) = 0.0D0 enddo bnrm = dvnorm ( N , R , Wght ) !  Test for immediate return with X = 0 or X = b. ----------------------- if ( bnrm > Delta ) then ! ztr = 0.0D0 else if ( Mnewt > 0 ) return !X!call dcopy(N,R,1,X,1) X ( 1 : N ) = R ( 1 : N ) return endif !  Loop point for PCG iterations. --------------------------------------- INFINITE : do Lpcg = Lpcg + 1 !X!call dcopy(N,R,1,Z,1) Z ( 1 : N ) = R ( 1 : N ) ier = 0 if ( Jpre /= 0 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , Z , 3 , ier ) Npsl = Npsl + 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns from PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif endif ztr0 = ztr ztr = ddot ( N , Z , 1 , R , 1 ) if ( Lpcg == 1 ) then !X!call dcopy(N,Z,1,P,1) P ( 1 : N ) = Z ( 1 : N ) elseif ( ztr0 == 0.0D0 ) then !----------------------------------------------------------------------- !  This block handles division by zero errors. !----------------------------------------------------------------------- Iflag = 4 return else beta = ztr / ztr0 do i = 1 , N P ( i ) = Z ( i ) + beta * P ( i ) enddo endif !----------------------------------------------------------------------- !   Call DATP to compute A*p and return the answer in W. !----------------------------------------------------------------------- call datp ( Neq , Y , Savf , P , Wght , Hl0 , Wk , f , W ) ! ptw = ddot ( N , P , 1 , W , 1 ) if ( ptw == 0.0D0 ) then Iflag = 4 exit INFINITE else alpha = ztr / ptw call daxpy ( N , alpha , P , 1 , X , 1 ) alpha = - alpha call daxpy ( N , alpha , W , 1 , R , 1 ) rnrm = dvnorm ( N , R , Wght ) if ( rnrm <= Delta ) return if ( Lpcg < Maxl ) cycle INFINITE Iflag = 2 if ( rnrm <= 1.0D0 ) Iflag = 1 if ( rnrm <= bnrm . and . Mnewt == 0 ) Iflag = 1 exit INFINITE endif enddo INFINITE end subroutine dpcg","tags":"","loc":"proc/dpcg~2.html"},{"title":"dsolsy – odepack","text":"subroutine dsolsy(Wm, Iwm, X, Tem) DESCRIPTION This routine manages the solution of the linear system arising from\n  a chord iteration.  It is called if MITER .ne. 0. If MITER is 1 or 2, it calls DGESL to accomplish this. If MITER = 3 it updates the coefficient h*EL0 in the diagonal\n  matrix, and then computes the solution. If MITER is 4 or 5, it calls DGBSL. OPTIONS Communication with DSOLSY uses the following variables: WM real work space containing the inverse diagonal matrix if\n  MITER = 3 and the LU decomposition of the matrix otherwise.\n  Storage of matrix elements starts at WM(3).\n  WM also contains the following matrix-related data: WM ( 1 ) = SQRT ( UROUND ) ( not used here ) , WM ( 2 ) = HL0 , the previous value of h * EL0 , used if MITER = 3 . IWM integer work space containing pivot information, starting at\n  IWM(21), if MITER is 1, 2, 4, or 5. IWM also contains band parameters ML = IWM(1) \n  and MU = IWM(2) if MITER is 4 or 5. X the right-hand side vector on input, and the solution vector\n  on output, of length N. TEM vector of work space of length N, not used in this version. IERSL output flag (in COMMON).  IERSL = 0 if no trouble occurred. IERSL 1 if a singular matrix arose with MITER = 3. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dsolsy~2~~CallsGraph proc~dsolsy~2 dsolsy proc~dgbsl~2 dgbsl proc~dsolsy~2->proc~dgbsl~2 proc~dgesl~2 dgesl proc~dsolsy~2->proc~dgesl~2 proc~ddot~2 ddot proc~dgbsl~2->proc~ddot~2 proc~daxpy~2 daxpy proc~dgbsl~2->proc~daxpy~2 proc~dgesl~2->proc~ddot~2 proc~dgesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables di hl0 i meband ml mu phl0 r Source Code dsolsy Variables Type Visibility Attributes Name Initial real(kind=dp), public :: di real(kind=dp), public :: hl0 integer, public :: i integer, public :: meband integer, public :: ml integer, public :: mu real(kind=dp), public :: phl0 real(kind=dp), public :: r Source Code subroutine dsolsy ( Wm , Iwm , X , Tem ) real ( kind = dp ), intent ( inout ) :: Wm ( * ) integer :: Iwm ( * ) real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ) :: Tem ( * ) real ( kind = dp ) :: di , hl0 , phl0 , r integer :: i , meband , ml , mu dls1 % iersl = 0 select case ( dls1 % miter ) case ( 3 ) phl0 = Wm ( 2 ) hl0 = dls1 % h * dls1 % el0 Wm ( 2 ) = hl0 if ( hl0 /= phl0 ) then r = hl0 / phl0 do i = 1 , dls1 % n di = 1.0D0 - r * ( 1.0D0 - 1.0D0 / Wm ( i + 2 )) if ( abs ( di ) == 0.0D0 ) then dls1 % iersl = 1 return else Wm ( i + 2 ) = 1.0D0 / di endif enddo endif do i = 1 , dls1 % n X ( i ) = Wm ( i + 2 ) * X ( i ) enddo case ( 4 , 5 ) ml = Iwm ( 1 ) mu = Iwm ( 2 ) meband = 2 * ml + mu + 1 call dgbsl ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), X , 0 ) case default call dgesl ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), X , 0 ) endselect end subroutine dsolsy","tags":"","loc":"proc/dsolsy~2.html"},{"title":"dlhin – odepack","text":"subroutine dlhin(Neq, N, T0, Y0, Ydot, f, Tout, Uround, Ewt, Itol, Atol, Y, Temp, H0, Niter, Ier) Name dlhin(3f) - [M_odepack] compute step size H0 to be attempted on\n   the first step, when the user supplied value is absent Synopsis subroutine dlhin(Neq,N,T0,Y0,Ydot,f,Tout,Uround,Ewt,Itol,Atol,Y,Temp,H0,Niter,Ier)\n\n    integer                     :: Neq(*)\n    integer                     :: N\n    real(kind=dp),intent(in)    :: T0\n    real(kind=dp)               :: Y0(*)\n    real(kind=dp),intent(in)    :: Ydot(*)\n    external                    :: f\n    real(kind=dp),intent(in)    :: Tout\n    real(kind=dp),intent(in)    :: Uround\n    real(kind=dp)               :: Ewt(*)\n    integer,intent(in)          :: Itol\n    real(kind=dp),intent(in)    :: Atol(*)\n    real(kind=dp)               :: Y(*)\n    real(kind=dp)               :: Temp(*)\n    real(kind=dp),intent(inout) :: H0\n    integer, intent(out)        :: Niter\n    integer, intent(out)        :: Ier Description This routine computes the step size, H0, to be attempted on the\n first step, when the user has not supplied a value for this. First we check that TOUT - T0 differs significantly from zero.  Then\n an iteration is done to approximate the initial second derivative\n and this is used to define H from WRMS-norm(H**2 * yddot / 2) = 1.\n A bias factor of 1/2 is applied to the resulting h.\n The sign of H0 is inferred from the initial values of TOUT and T0. Communication with DLHIN is done with the following variables: Call DLHIN(NEQ,N,T0,Y0,YDOT,F,TOUT,UROUND,EWT,ITOL,ATOL,Y,TEMP &\n & H0,NITER,IER Subroutines called by DLHIN: F \n Function routines called by DLHIN: DVNORM INPUT OPTIONS NEQ NEQ array of solver, passed to F. N size of ODE system, input. T0 initial value of independent variable, input. Y0 vector of initial conditions, input. YDOT vector of initial first derivatives, input. F name of subroutine for right-hand side f(t,y), input. TOUT first output value of independent variable UROUND machine unit roundoff EWT, ITOL, ATOL error weights and tolerance parameters\n as described in the driver routine, input. Y, TEMP work arrays of length N. RETURNS H0 step size to be attempted, output. NITER number of iterations (and of f evaluations) to compute H0,\n output. IER the error flag, returned with the value\n   IER = 0  if no trouble occurred, or\n   IER = -1 if TOUT and t0 are considered too close to proceed. Arguments Type Intent Optional Attributes Name integer :: Neq (*) integer :: N real(kind=dp), intent(in) :: T0 real(kind=dp) :: Y0 (*) real(kind=dp), intent(in) :: Ydot (*) real :: f real(kind=dp), intent(in) :: Tout real(kind=dp), intent(in) :: Uround real(kind=dp) :: Ewt (*) integer, intent(in) :: Itol real(kind=dp), intent(in) :: Atol (*) real(kind=dp) :: Y (*) real(kind=dp) :: Temp (*) real(kind=dp), intent(inout) :: H0 integer, intent(out) :: Niter integer, intent(out) :: Ier Calls proc~~dlhin~2~~CallsGraph proc~dlhin~2 dlhin proc~dvnorm~2 dvnorm proc~dlhin~2->proc~dvnorm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dlhin~2~~CalledByGraph proc~dlhin~2 dlhin proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dlhin~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables HALF HUN PT1 TWO afi atoli delyi hg hlb hnew hrat hub i iter t1 tdist tround yddnrm Source Code dlhin Variables Type Visibility Attributes Name Initial real(kind=dp), public, parameter :: HALF = 0.50D0 real(kind=dp), public, parameter :: HUN = 100.0D0 real(kind=dp), public, parameter :: PT1 = 0.1D0 real(kind=dp), public, parameter :: TWO = 2.0D0 real(kind=dp), public :: afi real(kind=dp), public :: atoli real(kind=dp), public :: delyi real(kind=dp), public :: hg real(kind=dp), public :: hlb real(kind=dp), public :: hnew real(kind=dp), public :: hrat real(kind=dp), public :: hub integer, public :: i integer, public :: iter real(kind=dp), public :: t1 real(kind=dp), public :: tdist real(kind=dp), public :: tround real(kind=dp), public :: yddnrm Source Code subroutine dlhin ( Neq , N , T0 , Y0 , Ydot , f , Tout , Uround , Ewt , Itol , Atol , Y , Temp , H0 , Niter , Ier ) real ( kind = dp ), parameter :: HALF = 0.50D0 , TWO = 2.0D0 , HUN = 10 0.0D0 , PT1 = 0.1D0 ! integer :: Neq ( * ) integer :: N real ( kind = dp ), intent ( in ) :: T0 real ( kind = dp ) :: Y0 ( * ) real ( kind = dp ), intent ( in ) :: Ydot ( * ) external :: f real ( kind = dp ), intent ( in ) :: Tout real ( kind = dp ), intent ( in ) :: Uround real ( kind = dp ) :: Ewt ( * ) integer , intent ( in ) :: Itol real ( kind = dp ), intent ( in ) :: Atol ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Temp ( * ) real ( kind = dp ), intent ( inout ) :: H0 integer , intent ( out ) :: Niter integer , intent ( out ) :: Ier real ( kind = dp ) :: afi , atoli , delyi , hg , hlb , hnew , hrat , hub , t1 , tdist , tround , yddnrm integer :: i , iter Niter = 0 tdist = abs ( Tout - T0 ) tround = Uround * max ( abs ( T0 ), abs ( Tout )) if ( tdist < TWO * tround ) then !  Error return for TOUT - T0 too small. -------------------------------- Ier = - 1 return else ! !  Set a lower bound on H based on the roundoff level in T0 and TOUT. --- hlb = HUN * tround !  Set an upper bound on H based on TOUT-T0 and the initial Y and YDOT. - hub = PT1 * tdist atoli = Atol ( 1 ) do i = 1 , N if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) delyi = PT1 * abs ( Y0 ( i )) + atoli afi = abs ( Ydot ( i )) if ( afi * hub > delyi ) hub = delyi / afi enddo ! !  Set initial guess for H as geometric mean of upper and lower bounds. - iter = 0 hg = sqrt ( hlb * hub ) !  If the bounds have crossed, exit with the mean value. ---------------- if ( hub < hlb ) then H0 = hg else do ! !  Looping point for iteration. ----------------------------------------- !  Estimate the second derivative as a difference quotient in f. -------- t1 = T0 + hg do i = 1 , N Y ( i ) = Y0 ( i ) + hg * Ydot ( i ) enddo call f ( Neq , t1 , Y , Temp ) do i = 1 , N Temp ( i ) = ( Temp ( i ) - Ydot ( i )) / hg enddo yddnrm = dvnorm ( N , Temp , Ewt ) !  Get the corresponding new value of H. -------------------------------- if ( yddnrm * hub * hub > TWO ) then hnew = sqrt ( TWO / yddnrm ) else hnew = sqrt ( hg * hub ) endif iter = iter + 1 !----------------------------------------------------------------------- !  Test the stopping conditions. !  Stop if the new and previous H values differ by a factor of .lt. 2. !  Stop if four iterations have been done.  Also, stop with previous H !  if hnew/hg .gt. 2 after first iteration, as this probably means that !  the second derivative value is bad because of cancellation error. !----------------------------------------------------------------------- if ( iter >= 4 ) exit hrat = hnew / hg if ( ( hrat > HALF ) . and . ( hrat < TWO ) ) exit if ( ( iter >= 2 ) . and . ( hnew > TWO * hg ) ) then hnew = hg exit endif hg = hnew enddo ! !  Iteration done.  Apply bounds, bias factor, and sign. ---------------- H0 = hnew * HALF if ( H0 < hlb ) H0 = hlb if ( H0 > hub ) H0 = hub endif endif H0 = sign ( H0 , Tout - T0 ) !  Restore Y array from Y0, then exit. ---------------------------------- Y ( 1 : N ) = Y0 ( 1 : N ) Niter = iter Ier = 0 end subroutine dlhin","tags":"","loc":"proc/dlhin~2.html"},{"title":"dhefa – odepack","text":"subroutine dhefa(A, Lda, N, Ipvt, Info, Job) DESCRIPTION This routine is a modification of the LINPACK routine DGEFA and\n   performs an LU decomposition of an upper Hessenberg matrix A.\n   There are two options available: (1)  performing a fresh factorization\n      (2)  updating the LU factors by adding a row and a\n           column to the matrix A. DHEFA factors an upper Hessenberg matrix by elimination. ON ENTRY A the matrix to be factored. LDA the leading dimension of the array  A . N the order of the matrix  A . JOB JOB = 1 means that a fresh factorization of the matrix A is desired . JOB . ge . 2 means that the current factorization of A will be updated by the addition of a row and a column . ON RETURN A an upper triangular matrix and the multipliers\n which were used to obtain it. The factorization can be written  A = L*U  where\n L is a product of permutation and unit lower\n triangular matrices and U is upper triangular. IPVT an integer vector of pivot indices. INFO = 0 normal value . = k if U ( k , k ) . eq . 0 . 0 . This is not an error condition for this subroutine , but it does indicate that DHESL will divide by zero if called . Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(inout) :: Ipvt (*) integer, intent(out) :: Info integer, intent(in) :: Job Calls proc~~dhefa~2~~CallsGraph proc~dhefa~2 dhefa proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~daxpy~2 daxpy proc~dhefa~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dhefa~2~~CalledByGraph proc~dhefa~2 dhefa proc~dspiom~2 dspiom proc~dspiom~2->proc~dhefa~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspiom~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables j k km1 kp1 l nm1 t Source Code dhefa Variables Type Visibility Attributes Name Initial integer, public :: j integer, public :: k integer, public :: km1 integer, public :: kp1 integer, public :: l integer, public :: nm1 real(kind=dp), public :: t Source Code subroutine dhefa ( A , Lda , N , Ipvt , Info , Job ) ! integer , intent ( in ) :: Lda real ( kind = dp ) , intent ( inout ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( inout ) :: Ipvt ( * ) integer , intent ( out ) :: Info integer , intent ( in ) :: Job ! integer :: j , k , km1 , kp1 , l , nm1 real ( kind = dp ) :: t ! if ( Job > 1 ) then ! !  The old factorization of A will be updated.  A row and a column !  has been added to the matrix A. !  N-1 is now the old order of the matrix. ! nm1 = N - 1 ! !  Perform row interchanges on the elements of the new column, and !  perform elimination operations on the elements using the multipliers. ! if ( nm1 > 1 ) then do k = 2 , nm1 km1 = k - 1 l = Ipvt ( km1 ) t = A ( l , N ) if ( l /= km1 ) then A ( l , N ) = A ( km1 , N ) A ( km1 , N ) = t endif A ( k , N ) = A ( k , N ) + A ( k , km1 ) * t enddo endif ! !  Complete update of factorization by decomposing last 2x2 block. ! Info = 0 ! !         Find L = pivot index ! l = idamax ( 2 , A ( nm1 , nm1 ), 1 ) + nm1 - 1 Ipvt ( nm1 ) = l ! !         Zero pivot implies this column already triangularized ! if ( A ( l , nm1 ) == 0.0D0 ) then Info = nm1 else ! !            Interchange if necessary ! if ( l /= nm1 ) then t = A ( l , nm1 ) A ( l , nm1 ) = A ( nm1 , nm1 ) A ( nm1 , nm1 ) = t endif ! !            Compute multipliers ! t = - 1.0D0 / A ( nm1 , nm1 ) A ( N , nm1 ) = A ( N , nm1 ) * t ! !            Row elimination with column indexing ! t = A ( l , N ) if ( l /= nm1 ) then A ( l , N ) = A ( nm1 , N ) A ( nm1 , N ) = t endif A ( N , N ) = A ( N , N ) + t * A ( N , nm1 ) endif Ipvt ( N ) = N if ( A ( N , N ) == 0.0D0 ) Info = N else ! !  A new facorization is desired.  This is essentially the LINPACK !  code with the exception that we know there is only one nonzero !  element below the main diagonal. ! !      Gaussian elimination with partial pivoting ! Info = 0 nm1 = N - 1 if ( nm1 >= 1 ) then do k = 1 , nm1 kp1 = k + 1 ! !         Find L = pivot index ! l = idamax ( 2 , A ( k , k ), 1 ) + k - 1 Ipvt ( k ) = l ! !         Zero pivot implies this column already triangularized ! if ( A ( l , k ) == 0.0D0 ) then Info = k else ! !            Interchange if necessary ! if ( l /= k ) then t = A ( l , k ) A ( l , k ) = A ( k , k ) A ( k , k ) = t endif ! !            Compute multipliers ! t = - 1.0D0 / A ( k , k ) A ( k + 1 , k ) = A ( k + 1 , k ) * t ! !            Row elimination with column indexing ! do j = kp1 , N t = A ( l , j ) if ( l /= k ) then A ( l , j ) = A ( k , j ) A ( k , j ) = t endif call daxpy ( N - k , t , A ( k + 1 , k ), 1 , A ( k + 1 , j ), 1 ) enddo endif enddo endif Ipvt ( N ) = N if ( A ( N , N ) == 0.0D0 ) Info = N return endif end subroutine dhefa","tags":"","loc":"proc/dhefa~2.html"},{"title":"dgbfa – odepack","text":"subroutine dgbfa(Abd, Lda, N, Ml, Mu, Ipvt, Info) NAME dgbfa(3f) - [M_odepack::matrix] Factor a band matrix using Gaussian\n   elimination. subroutine dgbfa(Abd,Lda,N,Ml,Mu,Ipvt,Info)\nreal(kind=dp),intent(inout) :: Abd(Lda,*)\ninteger,intent(in)    :: Lda\ninteger,intent(in)    :: N\ninteger,intent(in)    :: Ml\ninteger,intent(in)    :: Mu\ninteger,intent(inout) :: Ipvt(*)\ninteger,intent(out)   :: Info DESCRIPTION DGBFA factors a double precision band matrix by elimination. DGBFA is usually called by DGBCO, but it can be called\n   directly with a saving in time if  RCOND  is not needed. On Entry ABD contains the matrix in band storage.  The columns\n   of the matrix are stored in the columns of  ABD  and\n   the diagonals of the matrix are stored in rows\n   ML+1 through 2*ML+MU+1 of  ABD .\n   See the comments below for details. LDA the leading dimension of the array  ABD .\n   LDA must be .GE. 2*ML + MU + 1 . N the order of the original matrix. ML number of diagonals below the main diagonal.\n   0 .LE. ML .LT.  N . MU number of diagonals above the main diagonal.\n   0 .LE. MU .LT.  N .\n   More efficient if  ML .LE. MU . On Return ABD an upper triangular matrix in band storage and\n   the multipliers which were used to obtain it.\n   The factorization can be written  A = L*U  where\n   L  is a product of permutation and unit lower\n   triangular matrices and  U  is upper triangular. IPVT an integer vector of pivot indices. INFO = 0 normal value . = K if U ( K , K ) . EQ . 0 . 0 . This is not an error condition for this subroutine , but it does indicate that DGBSL will divide by zero if called . Use RCOND in DGBCO for a reliable indication of singularity . Band Storage If  A  is a band matrix, the following program segment\n   will set up the input. ML = ( band width below the diagonal ) MU = ( band width above the diagonal ) M = ML + MU + 1 DO J = 1 , N I1 = MAX ( 1 , J - MU ) I2 = MIN ( N , J + ML ) DO I = I1 , I2 K = I - J + M ABD ( K , J ) = A ( I , J ) ENDDO ENDDO This uses rows ML+1 through 2 ML+MU+1 of ABD.\n   In addition, the first ML rows in ABD are used for\n   elements generated during the triangularization.\n   The total number of rows needed in ABD is 2 ML+MU+1.\n   The ML+MU by ML+MU upper left triangle and the\n   ML by ML lower right triangle are not referenced. REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Abd (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ml integer, intent(in) :: Mu integer, intent(inout) :: Ipvt (*) integer, intent(out) :: Info Calls proc~~dgbfa~2~~CallsGraph proc~dgbfa~2 dgbfa proc~idamax~2 idamax proc~dgbfa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgbfa~2->proc~dscal~2 proc~daxpy~2 daxpy proc~dgbfa~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgbfa~2~~CalledByGraph proc~dgbfa~2 dgbfa none~wrapup wrapup none~wrapup->proc~dgbfa~2 none~wrapup~2 wrapup none~wrapup~2->proc~dgbfa~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgbfa~2 none~wrapup~4 wrapup none~wrapup~4->proc~dgbfa~2 proc~dprja~2 dprja proc~dprja~2->none~wrapup proc~dprepj~2 dprepj proc~dprepj~2->none~wrapup~4 proc~dprepji~2 dprepji proc~dprepji~2->none~wrapup~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i i0 j j0 j1 ju jz k kp1 l lm m mm nm1 t Source Code dgbfa Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: i0 integer, public :: j integer, public :: j0 integer, public :: j1 integer, public :: ju integer, public :: jz integer, public :: k integer, public :: kp1 integer, public :: l integer, public :: lm integer, public :: m integer, public :: mm integer, public :: nm1 real(kind=dp), public :: t Source Code subroutine dgbfa ( Abd , Lda , N , Ml , Mu , Ipvt , Info ) ! integer , intent ( in ) :: Lda real ( kind = dp ) , intent ( inout ) :: Abd ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ml integer , intent ( in ) :: Mu integer , intent ( inout ) :: Ipvt ( * ) integer , intent ( out ) :: Info ! integer :: i , i0 , j , j0 , j1 , ju , jz , k , kp1 , l , lm , m , mm , nm1 real ( kind = dp ) :: t ! m = Ml + Mu + 1 Info = 0 ! !      ZERO INITIAL FILL-IN COLUMNS ! j0 = Mu + 2 j1 = min ( N , m ) - 1 if ( j1 >= j0 ) then do jz = j0 , j1 i0 = m + 1 - jz do i = i0 , Ml Abd ( i , jz ) = 0.0D0 enddo enddo endif jz = j1 ju = 0 ! !      GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING ! nm1 = N - 1 if ( nm1 >= 1 ) then do k = 1 , nm1 kp1 = k + 1 ! !         ZERO NEXT FILL-IN COLUMN ! jz = jz + 1 if ( jz <= N ) then if ( Ml >= 1 ) then do i = 1 , Ml Abd ( i , jz ) = 0.0D0 enddo endif endif ! !         FIND L = PIVOT INDEX ! lm = min ( Ml , N - k ) l = idamax ( lm + 1 , Abd ( m , k ), 1 ) + m - 1 Ipvt ( k ) = l + k - m ! !         ZERO PIVOT IMPLIES THIS COLUMN ALREADY TRIANGULARIZED ! if ( Abd ( l , k ) == 0.0D0 ) then Info = k else ! !            INTERCHANGE IF NECESSARY ! if ( l /= m ) then t = Abd ( l , k ) Abd ( l , k ) = Abd ( m , k ) Abd ( m , k ) = t endif ! !            COMPUTE MULTIPLIERS ! t = - 1.0D0 / Abd ( m , k ) call dscal ( lm , t , Abd ( m + 1 , k ), 1 ) ! !            ROW ELIMINATION WITH COLUMN INDEXING ! ju = min ( max ( ju , Mu + Ipvt ( k )), N ) mm = m if ( ju >= kp1 ) then do j = kp1 , ju l = l - 1 mm = mm - 1 t = Abd ( l , j ) if ( l /= mm ) then Abd ( l , j ) = Abd ( mm , j ) Abd ( mm , j ) = t endif call daxpy ( lm , t , Abd ( m + 1 , k ), 1 , Abd ( mm + 1 , j ), 1 ) enddo endif endif enddo endif Ipvt ( N ) = N if ( Abd ( m , N ) == 0.0D0 ) Info = N end subroutine dgbfa","tags":"","loc":"proc/dgbfa~2.html"},{"title":"dgesl – odepack","text":"subroutine dgesl(A, Lda, N, Ipvt, B, Job) NAME dgesl(3f) - [M_odepack::matrix] Solve the real system A X=B or TRANS(A) X=B\n               using the factors computed by DGECO or DGEFA. SYNOPSIS subroutine dgesl(A,Lda,N,Ipvt,B,Job)\ninteger,intent(in)          :: Lda\nreal(kind=dp)               :: A(Lda,*)\ninteger,intent(in)          :: N\ninteger,intent(in)          :: Ipvt(*)\nreal(kind=dp),intent(inout) :: B(*)\ninteger,intent(in)          :: Job DESCRIPTION DGESL solves the double precision system A * X = B  or  TRANS(A) * X = B using the factors computed by DGECO or DGEFA. Error Condition A division by zero will occur if the input factor contains a zero on the diagonal . Technically this indicates singularity but it is often caused by improper arguments or improper setting of LDA . It will not occur if the subroutines are called correctly and if DGECO has set RCOND . GT . 0 . 0 or DGEFA has set INFO . EQ . 0 . To compute  INVERSE(A) * C  where  C  is a matrix\n   with  P  columns CALL DGECO ( A , LDA , N , IPVT , RCOND , Z ) IF ( RCOND is too small ) GO TO ... DO J = 1 , P CALL DGESL ( A , LDA , N , IPVT , C ( 1 , J ), 0 ) ENDDO ON ENTRY A the output from DGECO or DGEFA. LDA the leading dimension of the array  A . N the order of the matrix  A . IPVT the pivot vector from DGECO or DGEFA. B the right hand side vector. JOB :\n        = 0         to solve  A X = B ,\n        = nonzero   to solve  TRANS(A) X = B  where\n                    TRANS(A)  is the transpose. ON RETURN B the solution vector  X . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) integer, intent(in) :: Job Calls proc~~dgesl~2~~CallsGraph proc~dgesl~2 dgesl proc~daxpy~2 daxpy proc~dgesl~2->proc~daxpy~2 proc~ddot~2 ddot proc~dgesl~2->proc~ddot~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgesl~2~~CalledByGraph proc~dgesl~2 dgesl proc~dsolbt~2 dsolbt proc~dsolbt~2->proc~dgesl~2 proc~ddecbt~2 ddecbt proc~ddecbt~2->proc~dgesl~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgesl~2 proc~dsolsy~2 dsolsy proc~dsolsy~2->proc~dgesl~2 proc~dslsbt~2 dslsbt proc~dslsbt~2->proc~dsolbt~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~dsolbt~2 proc~daigbt~2->proc~ddecbt~2 proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables k kb l nm1 t Source Code dgesl Variables Type Visibility Attributes Name Initial integer, public :: k integer, public :: kb integer, public :: l integer, public :: nm1 real(kind=dp), public :: t Source Code subroutine dgesl ( A , Lda , N , Ipvt , B , Job ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ipvt ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) integer , intent ( in ) :: Job ! integer :: k , kb , l , nm1 real ( kind = dp ) :: t ! nm1 = N - 1 if ( Job == 0 ) then ! ! JOB = 0 , SOLVE  A * X = B ! FIRST SOLVE  L*Y = B ! if ( nm1 >= 1 ) then do k = 1 , nm1 l = Ipvt ( k ) t = B ( l ) if ( l /= k ) then B ( l ) = B ( k ) B ( k ) = t endif call daxpy ( N - k , t , A ( k + 1 , k ), 1 , B ( k + 1 ), 1 ) enddo endif ! ! NOW SOLVE  U*X = Y ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / A ( k , k ) t = - B ( k ) call daxpy ( k - 1 , t , A ( 1 , k ), 1 , B ( 1 ), 1 ) enddo else ! ! JOB = NONZERO, SOLVE  TRANS(A) * X = B ! FIRST SOLVE  TRANS(U)*Y = B ! do k = 1 , N t = ddot ( k - 1 , A ( 1 , k ), 1 , B ( 1 ), 1 ) B ( k ) = ( B ( k ) - t ) / A ( k , k ) enddo ! ! NOW SOLVE TRANS(L)*X = Y ! if ( nm1 >= 1 ) then do kb = 1 , nm1 k = N - kb B ( k ) = B ( k ) + ddot ( N - k , A ( k + 1 , k ), 1 , B ( k + 1 ), 1 ) l = Ipvt ( k ) if ( l == k ) cycle t = B ( l ) B ( l ) = B ( k ) B ( k ) = t enddo endif endif end subroutine dgesl","tags":"","loc":"proc/dgesl~2.html"},{"title":"dgbsl – odepack","text":"subroutine dgbsl(Abd, Lda, N, Ml, Mu, Ipvt, B, Job) NAME dgbsl(3f) - [M_odepack::Matrix] Solve the real band system A X=B or\n              TRANS(A) X=B using the factors computed by DGBCO(3f) or DGBFA(). SYNOPSIS subroutine dgbsl(Abd,Lda,N,Ml,Mu,Ipvt,B,Job)\n\n     integer,intent(in)          :: Lda\n     real(kind=dp)               :: Abd(Lda,*)\n     integer,intent(in)          :: N\n     integer,intent(in)          :: Ml\n     integer,intent(in)          :: Mu\n     integer,intent(in)          :: Ipvt(*)\n     real(kind=dp),intent(inout) :: B(*)\n     integer,intent(in)          :: Job DESCRIPTION DGBSL solves the double precision band system A * X = B or TRANS ( A ) * X = B using the factors computed by DGBCO or DGBFA . To compute INVERSE ( A ) * C where C is a matrix with P columns CALL DGBCO ( ABD , LDA , N , ML , MU , IPVT , RCOND , Z ) IF ( RCOND is too small ) GO TO ... DO J = 1 , P CALL DGBSL ( ABD , LDA , N , ML , MU , IPVT , C ( 1 , J ), 0 ) ENDDO Error Condition A division by zero will occur if the input factor contains a zero on the diagonal . Technically this indicates singularity but it is often caused by improper arguments or improper setting of LDA . It will not occur if the subroutines are called correctly and if DGBCO has set RCOND . GT . 0 . 0 or DGBFA has set INFO . EQ . 0 . ON ENTRY ABD the output from DGBCO(3f) or DGBFA(3f). LDA the leading dimension of the array ABD . N the order of the original matrix. ML number of diagonals below the main diagonal. MU number of diagonals above the main diagonal. IPVT the pivot vector from DGBCO(3f) or DGBFA(3f). B the right hand side vector. JOB \n   :\n        = 0         to solve  A X = B ,\n        = nonzero   to solve  TRANS(A) X = B , where\n                            TRANS(A)  is the transpose. ON RETURN B the solution vector  X . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Abd (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ml integer, intent(in) :: Mu integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) integer, intent(in) :: Job Calls proc~~dgbsl~2~~CallsGraph proc~dgbsl~2 dgbsl proc~ddot~2 ddot proc~dgbsl~2->proc~ddot~2 proc~daxpy~2 daxpy proc~dgbsl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgbsl~2~~CalledByGraph proc~dgbsl~2 dgbsl proc~dainvg~2 dainvg proc~dainvg~2->proc~dgbsl~2 proc~dsolsy~2 dsolsy proc~dsolsy~2->proc~dgbsl~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables k kb l la lb lm m nm1 t Source Code dgbsl Variables Type Visibility Attributes Name Initial integer, public :: k integer, public :: kb integer, public :: l integer, public :: la integer, public :: lb integer, public :: lm integer, public :: m integer, public :: nm1 real(kind=dp), public :: t Source Code subroutine dgbsl ( Abd , Lda , N , Ml , Mu , Ipvt , B , Job ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: Abd ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ml integer , intent ( in ) :: Mu integer , intent ( in ) :: Ipvt ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) integer , intent ( in ) :: Job ! integer :: k , kb , l , la , lb , lm , m , nm1 real ( kind = dp ) :: t ! m = Mu + Ml + 1 nm1 = N - 1 if ( Job /= 0 ) then ! !         JOB = NONZERO, SOLVE  TRANS(A) * X = B !         FIRST SOLVE  TRANS(U)*Y = B ! do k = 1 , N lm = min ( k , m ) - 1 la = m - lm lb = k - lm t = ddot ( lm , Abd ( la , k ), 1 , B ( lb ), 1 ) B ( k ) = ( B ( k ) - t ) / Abd ( m , k ) enddo ! !         NOW SOLVE TRANS(L)*X = Y ! if ( Ml /= 0 ) then if ( nm1 >= 1 ) then do kb = 1 , nm1 k = N - kb lm = min ( Ml , N - k ) B ( k ) = B ( k ) + ddot ( lm , Abd ( m + 1 , k ), 1 , B ( k + 1 ), 1 ) l = Ipvt ( k ) if ( l == k ) cycle t = B ( l ) B ( l ) = B ( k ) B ( k ) = t enddo endif endif else ! !         JOB = 0 , SOLVE  A * X = B !         FIRST SOLVE L*Y = B ! if ( Ml /= 0 ) then if ( nm1 >= 1 ) then do k = 1 , nm1 lm = min ( Ml , N - k ) l = Ipvt ( k ) t = B ( l ) if ( l /= k ) then B ( l ) = B ( k ) B ( k ) = t endif call daxpy ( lm , t , Abd ( m + 1 , k ), 1 , B ( k + 1 ), 1 ) enddo endif endif ! !         NOW SOLVE  U*X = Y ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / Abd ( m , k ) lm = min ( k , m ) - 1 la = m - lm lb = k - lm t = - B ( k ) call daxpy ( lm , t , Abd ( la , k ), 1 , B ( lb ), 1 ) enddo endif end subroutine dgbsl","tags":"","loc":"proc/dgbsl~2.html"},{"title":"xerrwd – odepack","text":"subroutine xerrwd(Msg, Nmes, Nerr, Level, Ni, I1, I2, Nr, R1, R2) xerrwd(3f) - [M_odepack::Matrix] Write error message with values. subroutine xerrwd(Msg,Nmes,Nerr,Level,Ni,I1,I2,Nr,R1,R2)\n\n  character(len=*),intent(in) :: Msg\n  integer                     :: Nmes\n  integer                     :: Nerr\n  integer,intent(in)          :: Level\n  integer,intent(in)          :: Ni\n  integer,intent(in)          :: I1\n  integer,intent(in)          :: I2\n  integer,intent(in)          :: Nr\n  real(kind=dp),intent(in)    :: R1\n  real(kind=dp),intent(in)    :: R2 DESCRIPTION Subroutines XERRWD, XSETF, XSETUN, and the function routine IXSAV,\n  as given here, constitute a simplified version of the SLATEC error\n  handling package. OPTIONS All arguments are input arguments. MSG The message (character array). NMES The length of MSG (number of characters). NERR The error number (not used). LEVEL The error level..\n        0 or 1 means recoverable (control returns to caller).\n        2 means fatal (run is aborted–see note below). NI Number of integers (0, 1, or 2) to be printed with message. I1,I2 Integers to be printed, depending on NI. NR Number of reals (0, 1, or 2) to be printed with message. R1,R2 Reals to be printed, depending on NR. Note..  this routine is machine-dependent and specialized for use\n   in limited context, in the following ways.. The argument MSG is assumed to be of type CHARACTER, and\n      the message is printed with a format of (1X,A). The message is assumed to take only one line.\n      Multi-line messages are generated by repeated calls. If LEVEL = 2, control passes to the statement   STOP\n      to abort the run.  This statement may be machine-dependent. R1 and R2 are assumed to be in double precision and are printed\n      in D21.13 format. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: Msg integer :: Nmes integer :: Nerr integer, intent(in) :: Level integer, intent(in) :: Ni integer, intent(in) :: I1 integer, intent(in) :: I2 integer, intent(in) :: Nr real(kind=dp), intent(in) :: R1 real(kind=dp), intent(in) :: R2 Calls proc~~xerrwd~2~~CallsGraph proc~xerrwd~2 xerrwd proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~xerrwd~2~~CalledByGraph proc~xerrwd~2 xerrwd proc~dlsode~2 dlsode proc~dlsode~2->proc~xerrwd~2 proc~dintdy~2 dintdy proc~dlsode~2->proc~dintdy~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~xerrwd~2 proc~dlsodi~2->proc~dintdy~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~xerrwd~2 proc~dlsodis~2->proc~dintdy~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~xerrwd~2 proc~dlsodpk~2->proc~dintdy~2 proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~xerrwd~2 proc~dlsodar~2->proc~dintdy~2 proc~drchek~2 drchek proc~dlsodar~2->proc~drchek~2 proc~dintdy~2->proc~xerrwd~2 proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~xerrwd~2 proc~dlsodes~2->proc~dintdy~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~xerrwd~2 proc~dlsoibt~2->proc~dintdy~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~xerrwd~2 proc~dlsodkr~2->proc~dintdy~2 proc~dlsodkr~2->proc~drchek~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~xerrwd~2 proc~dlsoda~2->proc~dintdy~2 proc~drchek~2->proc~dintdy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables lunit mesflg Source Code xerrwd Variables Type Visibility Attributes Name Initial integer, public :: lunit integer, public :: mesflg Source Code subroutine xerrwd ( Msg , Nmes , Nerr , Level , Ni , I1 , I2 , Nr , R1 , R2 ) character ( len =* ), intent ( in ) :: Msg integer :: Nmes integer :: Nerr integer , intent ( in ) :: Level integer , intent ( in ) :: Ni integer , intent ( in ) :: I1 integer , intent ( in ) :: I2 integer , intent ( in ) :: Nr real ( kind = dp ), intent ( in ) :: R1 real ( kind = dp ), intent ( in ) :: R2 integer :: lunit , mesflg !   Get LUN (logical unit number) and message print flag. lunit = ixsav ( 1 , 0 ,. false .) mesflg = ixsav ( 2 , 0 ,. false .) if ( mesflg /= 0 ) then !  Write the message. write ( lunit , '(1x,a)' ) Msg if ( Ni == 1 ) write ( lunit , \"(6x,'In above message,  I1 =',i10)\" ) I1 if ( Ni == 2 ) write ( lunit , \"(6x,'In above message,  I1 =',i10,3x,'I2 =',i10)\" ) I1 , I2 if ( Nr == 1 ) write ( lunit , \"(6x,'In above message,  R1 =',d21.13)\" ) R1 if ( Nr == 2 ) write ( lunit , \"(6x,'In above,  R1 =',d21.13,3x,'R2 =',d21.13)\" ) R1 , R2 endif !  Abort the run if LEVEL = 2. if ( Level == 2 ) stop end subroutine xerrwd","tags":"","loc":"proc/xerrwd~2.html"},{"title":"dscal – odepack","text":"subroutine dscal(N, Da, Dx, Incx) NAME dscal(3f) - [M_odepack::matrix] Multiply a vector by a constant. SYNOPSIS subroutine dscal(N,Da,Dx,Incx)\ninteger , intent(in) :: N\nreal(kind=dp) , intent(in) :: Da\nreal(kind=dp) , intent(inout) , dimension(*) :: Dx\ninteger , intent(in) :: Incx DESCRIPTION Replace double precision DX by double precision DA DX.\n   For I = 0 to N-1, replace DX(IX+I INCX) with  DA * DX(IX+I INCX),\n   where IX = 1 if INCX .GE. 0, else IX = 1+(1-N) INCX. OPTIONS N number of elements in input vector(s) DA double precision scale factor DX double precision vector with N elements INCX storage spacing between elements of DX RETURNS DX double precision result (unchanged if N.LE.0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(inout) :: Dx (*) integer, intent(in) :: Incx Called by proc~~dscal~2~~CalledByGraph proc~dscal~2 dscal proc~dgbfa~2 dgbfa proc~dgbfa~2->proc~dscal~2 proc~dspiom~2 dspiom proc~dspiom~2->proc~dscal~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dscal~2 proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dspigmr~2->proc~dscal~2 proc~dgefa~2 dgefa proc~dgefa~2->proc~dscal~2 none~wrapup wrapup none~wrapup->proc~dgbfa~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgbfa~2 proc~dainvg~2->proc~dgefa~2 none~wrapup~4 wrapup none~wrapup~4->proc~dgbfa~2 proc~dprepj~2 dprepj proc~dprepj~2->proc~dgefa~2 proc~dprepj~2->none~wrapup~4 none~wrapup~2 wrapup none~wrapup~2->proc~dgbfa~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dprja~2 dprja proc~dprja~2->proc~dgefa~2 proc~dprja~2->none~wrapup proc~ddecbt~2 ddecbt proc~ddecbt~2->proc~dgefa~2 proc~dprepji~2 dprepji proc~dprepji~2->proc~dgefa~2 proc~dprepji~2->none~wrapup~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~ddecbt~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i ix m mp1 Source Code dscal Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: ix integer, public :: m integer, public :: mp1 Source Code subroutine dscal ( N , Da , Dx , Incx ) ! integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Da real ( kind = dp ), intent ( inout ) :: Dx ( * ) integer , intent ( in ) :: Incx ! integer :: i , ix , m , mp1 ! if ( N <= 0 ) return if ( Incx == 1 ) then ! !     Code for increment equal to 1. ! !     Clean-up loop so remaining vector length is a multiple of 5. ! m = mod ( N , 5 ) if ( m /= 0 ) then do i = 1 , m Dx ( i ) = Da * Dx ( i ) enddo if ( N < 5 ) return endif mp1 = m + 1 do i = mp1 , N , 5 Dx ( i ) = Da * Dx ( i ) Dx ( i + 1 ) = Da * Dx ( i + 1 ) Dx ( i + 2 ) = Da * Dx ( i + 2 ) Dx ( i + 3 ) = Da * Dx ( i + 3 ) Dx ( i + 4 ) = Da * Dx ( i + 4 ) enddo else ! !     Code for increment not equal to 1. ! ix = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 do i = 1 , N Dx ( ix ) = Da * Dx ( ix ) ix = ix + Incx enddo return endif end subroutine dscal","tags":"","loc":"proc/dscal~2.html"},{"title":"dgefa – odepack","text":"subroutine dgefa(A, Lda, N, Ipvt, Info) dgefa(3f) - [M_odepack::matrix] Factor a matrix using Gaussian elimination. subroutine dgefa(A,Lda,N,Ipvt,Info)\n  real(kind=dp),intent(inout) :: A(Lda,*)\n  integer,intent(in)          :: Lda\n  integer,intent(in)          :: N\n  integer,intent(out)         :: Ipvt(*)\n  integer,intent(out)         :: Info DESCRIPTION DGEFA factors a double precision matrix by Gaussian elimination. DGEFA is usually called by DGECO, but it can be called\n   directly with a saving in time if  RCOND  is not needed.\n   (Time for DGECO) = (1 + 9/N)*(Time for DGEFA) . OPTIONS A the matrix to be factored. LDA the leading dimension of the array  A . N the order of the matrix  A . RETURNS A an upper triangular matrix and the multipliers\n   which were used to obtain it.\n   The factorization can be written  A = L*U  where L is a product of permutation and unit lower\n   triangular matrices and  U  is upper triangular. IPVT an integer vector of pivot indices. INFO = 0 normal value . = K if U ( K , K ) . EQ . 0 . 0 . This is not an error condition for this subroutine , but it does indicate that DGESL or DGEDI will divide by zero if called . Use RCOND in DGECO for a reliable indication of singularity . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(out) :: Ipvt (*) integer, intent(out) :: Info Calls proc~~dgefa~2~~CallsGraph proc~dgefa~2 dgefa proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~daxpy~2 daxpy proc~dgefa~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgefa~2~~CalledByGraph proc~dgefa~2 dgefa proc~dprepj~2 dprepj proc~dprepj~2->proc~dgefa~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgefa~2 proc~dprja~2 dprja proc~dprja~2->proc~dgefa~2 proc~dprepji~2 dprepji proc~dprepji~2->proc~dgefa~2 proc~ddecbt~2 ddecbt proc~ddecbt~2->proc~dgefa~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~ddecbt~2 proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables j k kp1 l nm1 t Source Code dgefa Variables Type Visibility Attributes Name Initial integer, public :: j integer, public :: k integer, public :: kp1 integer, public :: l integer, public :: nm1 real(kind=dp), public :: t Source Code subroutine dgefa ( A , Lda , N , Ipvt , Info ) ! integer , intent ( in ) :: Lda real ( kind = dp ), intent ( inout ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( out ) :: Ipvt ( * ) integer , intent ( out ) :: Info ! integer :: j , k , kp1 , l , nm1 real ( kind = dp ) :: t ! !      GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING ! Info = 0 nm1 = N - 1 if ( nm1 >= 1 ) then do k = 1 , nm1 kp1 = k + 1 ! !         FIND L = PIVOT INDEX ! l = idamax ( N - k + 1 , A ( k , k ), 1 ) + k - 1 Ipvt ( k ) = l ! !         ZERO PIVOT IMPLIES THIS COLUMN ALREADY TRIANGULARIZED ! if ( A ( l , k ) == 0.0D0 ) then Info = k else ! !            INTERCHANGE IF NECESSARY ! if ( l /= k ) then t = A ( l , k ) A ( l , k ) = A ( k , k ) A ( k , k ) = t endif ! !            COMPUTE MULTIPLIERS ! t = - 1.0D0 / A ( k , k ) call dscal ( N - k , t , A ( k + 1 , k ), 1 ) ! !            ROW ELIMINATION WITH COLUMN INDEXING ! do j = kp1 , N t = A ( l , j ) if ( l /= k ) then A ( l , j ) = A ( k , j ) A ( k , j ) = t endif call daxpy ( N - k , t , A ( k + 1 , k ), 1 , A ( k + 1 , j ), 1 ) enddo endif enddo endif Ipvt ( N ) = N if ( A ( N , N ) == 0.0D0 ) Info = N end subroutine dgefa","tags":"","loc":"proc/dgefa~2.html"},{"title":"daxpy – odepack","text":"subroutine daxpy(N, Da, Dx, Incx, Dy, Incy) NAME daxpy(3f) - [M_odepack::matrix] Compute a constant times a vector plus a vector. SYNOPSIS subroutine daxpy(N,Da,Dx,Incx,Dy,Incy)\ninteger,intent(in)          :: N\nreal(kind=dp),intent(in)    :: Da\nreal(kind=dp),intent(in)    :: Dx(*)\ninteger,intent(in)          :: Incx\nreal(kind=dp),intent(inout) :: Dy(*)\ninteger,intent(in)          :: Incy DESCRIPTION daxpy(3f) computes a constant times a vector plus a vector.\n   It uses unrolled loops for increments equal to one. Overwrite double precision DY with double precision DA DX + DY.\n   For I = 0 to N-1, replace  DY(LY+I INCY) with \n   DA DX(LX+I INCX) + DY(LY+I*INCY), where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. INPUT OPTIONS N number of elements in input vector(s) DA double precision scalar multiplier DX double precision vector with N elements INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY RETURNS DY double precision result (unchanged if N .LE. 0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(inout) :: Dy (*) integer, intent(in) :: Incy Called by proc~~daxpy~2~~CalledByGraph proc~daxpy~2 daxpy proc~dgbfa~2 dgbfa proc~dgbfa~2->proc~daxpy~2 none~approximate~2 approximate none~approximate~2->proc~daxpy~2 proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 none~approximate approximate none~approximate->proc~daxpy~2 proc~dhels~2 dhels none~approximate->proc~dhels~2 proc~dhels~2->proc~daxpy~2 proc~dgefa~2 dgefa proc~dgefa~2->proc~daxpy~2 proc~dgesl~2 dgesl proc~dgesl~2->proc~daxpy~2 proc~dorthog~2 dorthog proc~dorthog~2->proc~daxpy~2 proc~dpcg~2 dpcg proc~dpcg~2->proc~daxpy~2 proc~dpcgs~2 dpcgs proc~dpcgs~2->proc~daxpy~2 proc~dhefa~2 dhefa proc~dhefa~2->proc~daxpy~2 proc~dhesl~2->proc~daxpy~2 proc~dgbsl~2 dgbsl proc~dgbsl~2->proc~daxpy~2 none~wrapup wrapup none~wrapup->proc~dgbfa~2 proc~dspiom~2 dspiom proc~dspiom~2->none~approximate~2 proc~dspiom~2->proc~dorthog~2 proc~dspiom~2->proc~dhefa~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgbfa~2 proc~dainvg~2->proc~dgefa~2 proc~dainvg~2->proc~dgesl~2 proc~dainvg~2->proc~dgbsl~2 none~wrapup~4 wrapup none~wrapup~4->proc~dgbfa~2 proc~dspigmr~2 dspigmr proc~dspigmr~2->none~approximate proc~dspigmr~2->proc~dorthog~2 proc~dprepj~2 dprepj proc~dprepj~2->proc~dgefa~2 proc~dprepj~2->none~wrapup~4 proc~dsolbt~2 dsolbt proc~dsolbt~2->proc~dgesl~2 proc~dsolsy~2 dsolsy proc~dsolsy~2->proc~dgesl~2 proc~dsolsy~2->proc~dgbsl~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dpcg~2 proc~dsolpk~2->proc~dpcgs~2 proc~dsolpk~2->proc~dspiom~2 proc~dsolpk~2->proc~dspigmr~2 none~wrapup~2 wrapup none~wrapup~2->proc~dgbfa~2 proc~dprja~2 dprja proc~dprja~2->proc~dgefa~2 proc~dprja~2->none~wrapup proc~ddecbt~2 ddecbt proc~ddecbt~2->proc~dgefa~2 proc~ddecbt~2->proc~dgesl~2 proc~dprepji~2 dprepji proc~dprepji~2->proc~dgefa~2 proc~dprepji~2->none~wrapup~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dslsbt~2 dslsbt proc~dslsbt~2->proc~dsolbt~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~dsolbt~2 proc~daigbt~2->proc~ddecbt~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i ix iy m mp1 ns Source Code daxpy Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: ix integer, public :: iy integer, public :: m integer, public :: mp1 integer, public :: ns Source Code subroutine daxpy ( N , Da , Dx , Incx , Dy , Incy ) ! integer , intent ( in ) :: N real ( kind = dp ) , intent ( in ) :: Da real ( kind = dp ) , intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx real ( kind = dp ) , intent ( inout ) :: Dy ( * ) integer , intent ( in ) :: Incy ! integer :: i , ix , iy , m , mp1 , ns ! if ( N <= 0 . or . Da == 0.0D0 ) return if ( Incx == Incy ) then if ( Incx < 1 ) then elseif ( Incx == 1 ) then ! !      Code for both increments equal to 1. ! !      Clean-up loop so remaining vector length is a multiple of 4. ! m = mod ( N , 4 ) if ( m /= 0 ) then do i = 1 , m Dy ( i ) = Dy ( i ) + Da * Dx ( i ) enddo if ( N < 4 ) return endif mp1 = m + 1 do i = mp1 , N , 4 Dy ( i ) = Dy ( i ) + Da * Dx ( i ) Dy ( i + 1 ) = Dy ( i + 1 ) + Da * Dx ( i + 1 ) Dy ( i + 2 ) = Dy ( i + 2 ) + Da * Dx ( i + 2 ) Dy ( i + 3 ) = Dy ( i + 3 ) + Da * Dx ( i + 3 ) enddo return else ! !      Code for equal, positive, non-unit increments. ! ns = N * Incx do i = 1 , ns , Incx Dy ( i ) = Da * Dx ( i ) + Dy ( i ) enddo return endif endif ! !      Code for unequal or nonpositive increments. ! ix = 1 iy = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 if ( Incy < 0 ) iy = ( - N + 1 ) * Incy + 1 do i = 1 , N Dy ( iy ) = Dy ( iy ) + Da * Dx ( ix ) ix = ix + Incx iy = iy + Incy enddo end subroutine daxpy","tags":"","loc":"proc/daxpy~2.html"},{"title":"xsetun – odepack","text":"subroutine xsetun(lun) Name xsetun(3f) - [M_odepack::matrix] Reset the logical unit number for error messages. Synopsis subroutine xsetun (lun)\ninteger,intent(in) :: lun Description XSETUN sets the logical unit number for error messages to LUN. Options LUN logical unit number used for error messages Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun Calls proc~~xsetun~2~~CallsGraph proc~xsetun~2 xsetun proc~ixsav~2 ixsav proc~xsetun~2->proc~ixsav~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables junk Source Code xsetun Variables Type Visibility Attributes Name Initial integer, public :: junk Source Code subroutine xsetun ( lun ) integer , intent ( in ) :: lun integer :: junk if ( lun > 0 ) junk = ixsav ( 1 , lun , . true . ) end subroutine xsetun","tags":"","loc":"proc/xsetun~2.html"},{"title":"dcopy – odepack","text":"subroutine dcopy(N, Dx, Incx, Dy, Incy) NAME dcopy(3f) - [M_odepack::matrix] copy a vector SYNOPSIS subroutine dcopy(N,Dx,Incx,Dy,Incy)\n\n    integer,intent(in)        :: N\n    real(kind=dp),intent(in)  :: Dx(*)\n    integer,intent(in)        :: Incx\n    real(kind=dp),intent(out) :: Dy(*)\n    integer,intent(in)        :: Incy DESCRIPTION Copy double precision DX to double precision DY.\n   For I = 0 to N-1, copy DX(LX+I INCX) to DY(LY+I INCY),\n   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. INPUT OPTIONS N number of elements in input vector(s) DX double precision vector with N elements INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY RETURNS DY copy of vector DX (unchanged if N .LE. 0) REFERENCES B L A S  Subprogram C . L . Lawson , R . J . Hanson , D . R . Kincaid and F . T . Krogh , Basic linear algebra subprograms for Fortran usage , Algorithm No . 539 , Transactions on Mathematical Software 5 , 3 ( September 1979 ) , pp . 308 - 323 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(out) :: Dy (*) integer, intent(in) :: Incy Called by proc~~dcopy~2~~CalledByGraph proc~dcopy~2 dcopy proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~dcopy~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dcopy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i ix iy m mp1 ns Source Code dcopy Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: ix integer, public :: iy integer, public :: m integer, public :: mp1 integer, public :: ns Source Code subroutine dcopy ( N , Dx , Incx , Dy , Incy ) ! integer , intent ( in ) :: N real ( kind = dp ) , intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx real ( kind = dp ) , intent ( out ) :: Dy ( * ) integer , intent ( in ) :: Incy ! integer :: i , ix , iy , m , mp1 , ns ! if ( N <= 0 ) return if ( Incx == Incy ) then if ( Incx < 1 ) then elseif ( Incx == 1 ) then ! !      Code for both increments equal to 1. ! !      Clean-up loop so remaining vector length is a multiple of 7. ! m = mod ( N , 7 ) if ( m /= 0 ) then do i = 1 , m Dy ( i ) = Dx ( i ) enddo if ( N < 7 ) return endif mp1 = m + 1 do i = mp1 , N , 7 Dy ( i ) = Dx ( i ) Dy ( i + 1 ) = Dx ( i + 1 ) Dy ( i + 2 ) = Dx ( i + 2 ) Dy ( i + 3 ) = Dx ( i + 3 ) Dy ( i + 4 ) = Dx ( i + 4 ) Dy ( i + 5 ) = Dx ( i + 5 ) Dy ( i + 6 ) = Dx ( i + 6 ) enddo return else ! !      Code for equal, positive, non-unit increments. ! ns = N * Incx do i = 1 , ns , Incx Dy ( i ) = Dx ( i ) enddo return endif endif ! !      Code for unequal or nonpositive increments. ! ix = 1 iy = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 if ( Incy < 0 ) iy = ( - N + 1 ) * Incy + 1 do i = 1 , N Dy ( iy ) = Dx ( ix ) ix = ix + Incx iy = iy + Incy enddo end subroutine dcopy","tags":"","loc":"proc/dcopy~2.html"},{"title":"idamax – odepack","text":"function idamax(N, Dx, Incx) NAME idamax(3f) - [M_odepack::matrix] Find the smallest index of that\n component of a vector having the maximum magnitude. SYNOPSIS function idamax ( n,dx,incx ) integer :: idamax integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: dx ( * ) integer , intent(in) :: incx DESCRIPTION Find smallest index of maximum magnitude of double precision DX.\n  IDAMAX = first I, I = 1 to N, to maximize ABS(DX(IX+(I-1) INCX)),\n  where IX = 1 if INCX .GE. 0, else IX = 1+(1-N) INCX. OPTIONS N number of elements in input vector(s) DX double precision vector with N elements INCX storage spacing between elements of DX RETURNS IDAMAX smallest index (zero if N .LE. 0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx Return Value integer Called by proc~~idamax~2~~CalledByGraph proc~idamax~2 idamax proc~dgbfa~2 dgbfa proc~dgbfa~2->proc~idamax~2 proc~dhefa~2 dhefa proc~dhefa~2->proc~idamax~2 proc~dgefa~2 dgefa proc~dgefa~2->proc~idamax~2 none~wrapup wrapup none~wrapup->proc~dgbfa~2 proc~dspiom~2 dspiom proc~dspiom~2->proc~dhefa~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgbfa~2 proc~dainvg~2->proc~dgefa~2 none~wrapup~4 wrapup none~wrapup~4->proc~dgbfa~2 proc~dprepj~2 dprepj proc~dprepj~2->proc~dgefa~2 proc~dprepj~2->none~wrapup~4 none~wrapup~2 wrapup none~wrapup~2->proc~dgbfa~2 proc~dprja~2 dprja proc~dprja~2->proc~dgefa~2 proc~dprja~2->none~wrapup proc~ddecbt~2 ddecbt proc~ddecbt~2->proc~dgefa~2 proc~dprepji~2 dprepji proc~dprepji~2->proc~dgefa~2 proc~dprepji~2->none~wrapup~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspiom~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~ddecbt~2 proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dmax i ix xmag Source Code idamax Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dmax integer, public :: i integer, public :: ix real(kind=dp), public :: xmag Source Code function idamax ( N , Dx , Incx ) ! integer :: idamax integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx ! real ( kind = dp ) :: dmax , xmag integer :: i , ix ! idamax = 0 if ( n . le . 0 ) return idamax = 1 if ( n . eq . 1 ) return if ( incx . ne . 1 ) then ! !     Code for increments not equal to 1. ! ix = 1 if ( incx . lt . 0 ) ix = ( - n + 1 ) * incx + 1 dmax = abs ( dx ( ix )) ix = ix + incx do i = 2 , n xmag = abs ( dx ( ix )) if ( xmag . gt . dmax ) then idamax = i dmax = xmag endif ix = ix + incx enddo else ! !     Code for increments equal to 1. ! dmax = abs ( dx ( 1 )) do i = 2 , n xmag = abs ( dx ( i )) if ( xmag . gt . dmax ) then idamax = i dmax = xmag endif enddo endif end function idamax","tags":"","loc":"proc/idamax~2.html"},{"title":"ddot – odepack","text":"pure function ddot(N, Dx, Incx, Dy, Incy) NAME ddot(3f) - [M_odepack::matrix] Compute the inner product of two vectors. DESCRIPTION Returns the dot product of double precision DX and DY.\n   DDOT = sum for I = 0 to N-1 of  DX(LX+I INCX) * DY(LY+I INCY),\n   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. Description of Parameters INPUT N number of elements in input vector(s) DX double precision vector with N elements\n   INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY OUTPUT DDOT double precision dot product (zero if N .LE. 0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(in) :: Dy (*) integer, intent(in) :: Incy Return Value real(kind=dp) Called by proc~~ddot~2~~CalledByGraph proc~ddot~2 ddot proc~dgesl~2 dgesl proc~dgesl~2->proc~ddot~2 proc~dsolbt~2 dsolbt proc~dsolbt~2->proc~ddot~2 proc~dsolbt~2->proc~dgesl~2 proc~ddecbt~2 ddecbt proc~ddecbt~2->proc~ddot~2 proc~ddecbt~2->proc~dgesl~2 proc~dpcg~2 dpcg proc~dpcg~2->proc~ddot~2 proc~dorthog~2 dorthog proc~dorthog~2->proc~ddot~2 proc~dgbsl~2 dgbsl proc~dgbsl~2->proc~ddot~2 proc~dsolsy~2 dsolsy proc~dsolsy~2->proc~dgesl~2 proc~dsolsy~2->proc~dgbsl~2 proc~dpjibt~2 dpjibt proc~dpjibt~2->proc~ddecbt~2 proc~dainvg~2 dainvg proc~dainvg~2->proc~dgesl~2 proc~dainvg~2->proc~dgbsl~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dpcg~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dspiom~2 dspiom proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2->proc~dorthog~2 proc~dspiom~2->proc~dorthog~2 proc~dslsbt~2 dslsbt proc~dslsbt~2->proc~dsolbt~2 proc~daigbt~2 daigbt proc~daigbt~2->proc~dsolbt~2 proc~daigbt~2->proc~ddecbt~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dainvg~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~daigbt~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables i ix iy m mp1 ns Source Code ddot Variables Type Visibility Attributes Name Initial integer, public :: i integer, public :: ix integer, public :: iy integer, public :: m integer, public :: mp1 integer, public :: ns Source Code pure function ddot ( N , Dx , Incx , Dy , Incy ) ! real ( kind = dp ) :: ddot integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx real ( kind = dp ), intent ( in ) :: Dy ( * ) integer , intent ( in ) :: Incy ! integer :: i , ix , iy , m , mp1 , ns ! ddot = 0.0D0 if ( N <= 0 ) return if ( Incx == Incy ) then if ( Incx < 1 ) then elseif ( Incx == 1 ) then ! !      Code for both increments equal to 1. ! !      Clean-up loop so remaining vector length is a multiple of 5. ! m = mod ( N , 5 ) if ( m /= 0 ) then do i = 1 , m ddot = ddot + Dx ( i ) * Dy ( i ) enddo if ( N < 5 ) return endif mp1 = m + 1 do i = mp1 , N , 5 ddot = ddot + Dx ( i ) * Dy ( i ) + Dx ( i + 1 ) * Dy ( i + 1 ) + Dx ( i + 2 ) * Dy ( i + 2 ) + Dx ( i + 3 ) * Dy ( i + 3 ) + Dx ( i + 4 ) * Dy ( i + 4 ) enddo return else ! !      Code for equal, positive, non-unit increments. ! ns = N * Incx do i = 1 , ns , Incx ddot = ddot + Dx ( i ) * Dy ( i ) enddo return endif endif ! !      Code for unequal or nonpositive increments. ! ix = 1 iy = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 if ( Incy < 0 ) iy = ( - N + 1 ) * Incy + 1 do i = 1 , N ddot = ddot + Dx ( ix ) * Dy ( iy ) ix = ix + Incx iy = iy + Incy enddo end function ddot","tags":"","loc":"proc/ddot~2.html"},{"title":"xsetf – odepack","text":"subroutine xsetf(mflag) NAME xsetf(3f) - [M_odepack::matrix] Reset the error print control flag. SYNOPSIS subroutine xsetf (mflag)\ninteger mflag DESCRIPTION XSETF sets the error print control flag to MFLAG: OPTIONS MFLAG MFLAG=1 means print all messages (the default). MFLAG=0 means no printing. Arguments Type Intent Optional Attributes Name integer :: mflag Calls proc~~xsetf~2~~CallsGraph proc~xsetf~2 xsetf proc~ixsav~2 ixsav proc~xsetf~2->proc~ixsav~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables junk Source Code xsetf Variables Type Visibility Attributes Name Initial integer, public :: junk Source Code subroutine xsetf ( mflag ) integer mflag , junk !! if ( mflag . eq . 0 . or . mflag . eq . 1 ) junk = ixsav ( 2 , mflag ,. true .) end subroutine xsetf","tags":"","loc":"proc/xsetf~2.html"},{"title":"DNRM2 – odepack","text":"pure function DNRM2(n, x, incx) NAME dnrm2(3f) - [M_odepack::matrix] Compute the Euclidean length (L2 norm) of a vector. SYNOPSIS double precision function dnrm2(n,x,incx)\n  integer,intent(in) :: incx,n\n  double precision,intent(in) :: x(*) DESCRIPTION Euclidean norm of the N-vector stored in DX with storage\n   increment INCX, so that DNRM2 := sqrt ( x '* x ) INPUT N number of elements in input vector(s) DX double precision vector with N elements\n  dimensioned to at least ( 1 + ( N - 1 )*abs( INCX ) ) INCX storage spacing between elements of DX If INCX > 0, X(1+(i-1)*INCX) = x(i) for 1 <= i <= n If INCX < 0, X(1-(n-i)*INCX) = x(i) for 1 <= i <= n If INCX = 0, x isn’t a vector so there is no need to call\n    this subroutine.  If you call it anyway, it will count x(1)\n    in the vector norm N times. OUTPUT DNRM2 double precision result (zero if N .LE. 0) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: x (*) integer, intent(in) :: incx Return Value real(kind=dp) Called by proc~~dnrm2~2~~CalledByGraph proc~dnrm2~2 DNRM2 proc~dorthog~2 dorthog proc~dorthog~2->proc~dnrm2~2 proc~datv~2 datv proc~datv~2->proc~dnrm2~2 proc~dspiom~2 dspiom proc~dspiom~2->proc~dnrm2~2 proc~dspiom~2->proc~dorthog~2 proc~dspiom~2->proc~datv~2 proc~dspigmr~2 dspigmr proc~dspigmr~2->proc~dnrm2~2 proc~dspigmr~2->proc~dorthog~2 proc~dspigmr~2->proc~datv~2 proc~dsolpk~2 dsolpk proc~dsolpk~2->proc~dspiom~2 proc~dsolpk~2->proc~dspigmr~2 proc~dstodpk~2 dstodpk proc~dstodpk~2->proc~dsolpk~2 proc~dstoka~2 dstoka proc~dstoka~2->proc~dsolpk~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~dstodpk~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~dstoka~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables abig amed asml ax i ix maxN notbig one sbig scl ssml sumsq tbig tsml ymax ymin zero Variables Type Visibility Attributes Name Initial real(kind=dp), public :: abig real(kind=dp), public :: amed real(kind=dp), public :: asml real(kind=dp), public :: ax integer, public :: i integer, public :: ix real(kind=dp), public, parameter :: maxN = huge(0.0_dp) logical, public :: notbig real(kind=dp), public, parameter :: one = 1.0_dp real(kind=dp), public, parameter :: sbig = real(radix(0._dp), dp)**(-ceiling((maxexponent(0._dp)-digits(0._dp)+1)*0.5_dp)) real(kind=dp), public :: scl real(kind=dp), public, parameter :: ssml = real(radix(0._dp), dp)**(-floor((minexponent(0._dp)-1)*0.5_dp)) real(kind=dp), public :: sumsq real(kind=dp), public, parameter :: tbig = real(radix(0._dp), dp)**floor((maxexponent(0._dp)-digits(0._dp)+1)*0.5_dp) real(kind=dp), public, parameter :: tsml = real(radix(0._dp), dp)**ceiling((minexponent(0._dp)-1)*0.5_dp) real(kind=dp), public :: ymax real(kind=dp), public :: ymin real(kind=dp), public, parameter :: zero = 0.0_dp","tags":"","loc":"proc/dnrm2~2.html"},{"title":"ixsav – odepack","text":"function ixsav(Ipar, Ivalue, Iset) Uses iso_fortran_env proc~~ixsav~2~~UsesGraph proc~ixsav~2 ixsav iso_fortran_env iso_fortran_env proc~ixsav~2->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Name ixsav(3f) - [M_odesave::matrix] Save and recall error message control parameters. Synopsis function ixsav ( Ipar,Ivalue,Iset ) integer :: ixsav integer , intent ( in ) :: Ipar integer , intent ( in ) :: Ivalue logical , intent ( in ) :: Iset Description IXSAV always recalls the current value of one of two error message\n   control flags. It also can set new values to return for subsequent queries if\n   Iset=.true. This is a modification of the SLATEC library routine J4SAVE. Saved local variables.. LUNIT Logical unit number for messages. MESFLG Print control flag.. 1 means print all messages (the default).\n   0 means no message printing. Options IPAR Parameter indicator (1 for LUNIT, 2 for MESFLG). IVALUE The value to be set for the parameter, if ISET = .TRUE. ISET Logical flag to indicate whether to read or write.\n   If ISET = .TRUE., the parameter will be given\n   the value IVALUE.  If ISET = .FALSE., the parameter\n   will be unchanged, and IVALUE is a dummy argument. Returns IXSAV The (old) value of the parameter. Arguments Type Intent Optional Attributes Name integer, intent(in) :: Ipar integer, intent(in) :: Ivalue logical, intent(in) :: Iset Return Value integer Called by proc~~ixsav~2~~CalledByGraph proc~ixsav~2 ixsav proc~xerrwd~2 xerrwd proc~xerrwd~2->proc~ixsav~2 proc~xsetun~2 xsetun proc~xsetun~2->proc~ixsav~2 proc~xsetf~2 xsetf proc~xsetf~2->proc~ixsav~2 proc~dlsode~2 dlsode proc~dlsode~2->proc~xerrwd~2 proc~dintdy~2 dintdy proc~dlsode~2->proc~dintdy~2 proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~xerrwd~2 proc~dlsodi~2->proc~dintdy~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~xerrwd~2 proc~dlsodis~2->proc~dintdy~2 proc~dlsodpk~2 dlsodpk proc~dlsodpk~2->proc~xerrwd~2 proc~dlsodpk~2->proc~dintdy~2 proc~dlsodar~2 dlsodar proc~dlsodar~2->proc~xerrwd~2 proc~dlsodar~2->proc~dintdy~2 proc~drchek~2 drchek proc~dlsodar~2->proc~drchek~2 proc~dintdy~2->proc~xerrwd~2 proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~xerrwd~2 proc~dlsodes~2->proc~dintdy~2 proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~xerrwd~2 proc~dlsoibt~2->proc~dintdy~2 proc~dlsodkr~2 dlsodkr proc~dlsodkr~2->proc~xerrwd~2 proc~dlsodkr~2->proc~dintdy~2 proc~dlsodkr~2->proc~drchek~2 proc~dlsoda~2 dlsoda proc~dlsoda~2->proc~xerrwd~2 proc~dlsoda~2->proc~dintdy~2 proc~drchek~2->proc~dintdy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables lunit mesflg Source Code ixsav Variables Type Visibility Attributes Name Initial integer, public, save :: lunit = stdout integer, public, save :: mesflg = 1 Source Code function ixsav ( Ipar , Ivalue , Iset ) use , intrinsic :: iso_fortran_env , only : stdin => input_unit , & stdout => output_unit , & stderr => error_unit integer :: ixsav integer , intent ( in ) :: Ipar integer , intent ( in ) :: Ivalue logical , intent ( in ) :: Iset integer , save :: lunit = stdout integer , save :: mesflg = 1 select case ( Ipar ) case ( 1 ) ! lunit ixsav = lunit if ( Iset ) lunit = Ivalue case ( 2 ) ! mesflg ixsav = mesflg if ( Iset ) mesflg = Ivalue case default stop '*ixsav* unknown value for Ipar' end select end function ixsav","tags":"","loc":"proc/ixsav~2.html"},{"title":"dlsodar – odepack","text":"subroutine dlsodar(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt, g, Ng, Jroot) Synopsis DLSODAR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs of the form dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). with Automatic method switching for stiff and nonstiff problems,\n and with Root-finding. At the same time, it locates the roots of any of a set of functions g(i) = g(i,t,y(1),...,y(NEQ))  (i = 1,...,ng). This a variant version of the DLSODE package.  It differs from it\n in two ways: (a) It switches automatically between stiff and nonstiff methods.\n This means that the user does not have to determine whether the\n problem is stiff or not, and the solver will automatically choose the\n appropriate method.  It always starts with the nonstiff method. (b) It finds the root of at least one of a set of constraint\n functions g(i) of the independent and dependent variables.\n It finds only those roots for which some g(i), as a function\n of t, changes sign in the interval of integration.\n It then returns the solution at the root, if that occurs\n sooner than the specified stop condition, and otherwise returns\n the solution according the specified stop condition. Summary of Usage. Communication between the user and the DLSODAR package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including alternative treatment of the Jacobian matrix,\n optional inputs and outputs, nonstandard options, and\n instructions for special situations.  See also the example\n problem (with program and output) following this summary. Step A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). Step B. Provide a subroutine of the form: SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) which supplies the vector function g by loading GOUT(i) with\n g(i), the i-th constraint function whose root is sought. Step C. Write a main program which calls Subroutine DLSODAR once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODAR. On the first call to DLSODAR, supply arguments as follows: F name of subroutine for right-hand side vector f.\n This name must be declared External in calling program.\n NEQ number of first order ODEs.\n Y array of initial values, of length NEQ.\n T the initial value of the independent variable.\n TOUT first point where output is desired (.ne. T).\n ITOL 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL relative tolerance parameter (scalar).\n ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be less than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control. Caution : actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 + NEQ * MAX(16, NEQ + 9) + 3*NG. See also Paragraph F below. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least  20 + NEQ. LIW declared length of IWORK (in user’s dimension). JAC name of subroutine for Jacobian matrix.\n Use a dummy name to a noop function.  See also Paragraph F below. JT Jacobian type indicator.  Set JT = 2.\n See also Paragraph F below. G name of subroutine for constraint functions, whose\n roots are desired during the integration.\n This name must be declared External in calling program. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG for output of root information.\n See next paragraph.\n Note that the main program must declare arrays Y, RWORK, IWORK,\n JROOT, and possibly ATOL. Step D. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable.  This is\n TOUT if ISTATE = 2, or the root location if ISTATE = 3,\n or the farthest point reached if DLSODAR was unsuccessful.\n ISTATE = 2 or 3  if DLSODAR was successful, negative otherwise. ISTATE Description 2 means no root was found, and TOUT was reached as desired. 3 means a root was found prior to reaching TOUT. -1 means excess work done on this call (perhaps wrong JT). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of JT or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means work space insufficient to finish (see messages). JROOT array showing roots found if ISTATE = 3 on return.\n JROOT(i) = 1 if g(i) has a root at t, or 0 otherwise. Step E. To continue the integration after a successful return, proceed as follows: (a)  If ISTATE = 2 on return, reset TOUT and call DLSODAR again.\n (b)  If ISTATE = 3 on return, reset ISTATE to 2, call DLSODAR again. In either case, no other parameters need be reset. Step F. Notes: If and when DLSODAR regards the problem as stiff, and\n switches methods accordingly, it must make use of the NEQ by NEQ\n Jacobian matrix, J = df/dy.  For the sake of simplicity, the\n inputs to DLSODAR recommended in Paragraph C above cause DLSODAR to\n treat J as a full matrix, and to approximate it internally by\n difference quotients. Alternatively, J can be treated as a band\n matrix (with great potential reduction in the size of the RWORK\n array). Also, in either the full or banded case, the user can supply\n J in closed form, with a routine whose name is passed as the JAC\n argument.  These alternatives are described in the paragraphs on\n RWORK, JAC, and JT in the full description of the call sequence below. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODAR.  The problem is from chemical\n kinetics, and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n     dy3/dt = 3.e7*y2**2 on the interval from t = 0.0 to t = 4.e10, with initial conditions\n y1 = 1.0, y2 = y3 = 0.  The problem is stiff. In addition, we want to find the values of t, y1, y2, and y3 at which y1 reaches the value 1.e-4, and y3 reaches the value 1.e-2. The following coding solves this problem with DLSODAR,\n printing results at t = .4, 4., …, 4.e10, and at the computed\n roots.  It uses ITOL = 2 and ATOL much smaller for y2 than y1 or y3\n because y2 has much smaller values. At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsodar_ex use m_odepack implicit none external fex external gex external jdum integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask , itol , jt , liw , lrw , neq , ng integer , dimension ( 23 ) :: iwork integer , dimension ( 2 ) :: jroot real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 76 ) :: rwork neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 76 liw = 23 jt = 2 ng = 2 do iout = 1 , 12 do call dlsodar ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , & & iopt , rwork , lrw , iwork , liw , jdum , jt , gex , ng , jroot ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 elseif ( istate == 2 ) then tout = tout * 1 0. exit else write ( 6 , 99030 ) jroot ( 1 ), jroot ( 2 ) 99030 format ( 5 x , ' The above line is a root,  JROOT =' , 2 I5 ) istate = 2 endif enddo enddo write ( 6 , 99040 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ), iwork ( 10 ), & & iwork ( 19 ), rwork ( 15 ) 99040 format ( / ' No. steps =' , i4 , '  No. f-s =' , i4 , '  No. J-s =' , i4 , & & '  No. g-s =' , i4 / ' Method last used =' , i2 , & & '   Last switch was at t =' , d12 . 4 ) end program dlsodar_ex subroutine jdum () implicit none end subroutine jdum subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex subroutine gex ( Neq , T , Y , Ng , Gout ) implicit none integer :: Neq integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y integer :: Ng real ( kind = dp ), intent ( out ), dimension ( 2 ) :: Gout Gout ( 1 ) = Y ( 1 ) - 1.D-4 Gout ( 2 ) = Y ( 3 ) - 1.D-2 end subroutine gex The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  2.6400e-01   y =  9.899653e-01  3.470563e-05  1.000000e-02\n        The above line is a root,  JROOT =    0    1\n   At t =  4.0000e-01   Y =  9.851712e-01  3.386380e-05  1.479493e-02\n   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02\n   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01\n   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01\n   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01\n   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01\n   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01\n   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01\n   At t =  2.0745e+07   Y =  1.000000e-04  4.000395e-10  9.999000e-01\n        The above line is a root,  JROOT =    1    0\n   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01\n   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01\n   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01\n   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00\n\n   No. steps = 361  No. f-s = 693  No. J-s =  64  No. g-s = 390\n   Method last used = 2   Last switch was at t =  6.0092e-03 Full Description of User Interface to DLSODAR. The user interface to DLSODAR consists of the following parts. The call sequence to Subroutine DLSODAR, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODAR package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of a subroutine in the DLSODAR package,\n      which the user may replace with his/her own version, if desired.\n      this relates to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC,\n JT, G, and NG. Used only for output is JROOT, Those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODAR to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. Arguments The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODAR, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODAR package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F, JAC, and G.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F, JAC, and G.  Each such subroutine must include\n NEQ in a Dimension statement in that case. Y = a real array for the vector of dependent variables, of\n NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F,\n JAC, and G.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F, JAC, and G.  (The DLSODAR package accesses only\n Y(1),…,Y(NEQ).) T = the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n If a root was found, T is the computed location of the\n root reached first, on output. On an error return, T is the farthest point reached. TOUT = the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form\n      max-norm of ( E(i)/EWT(i) )   .le.   1,\n where EWT = (EWT(i)) is a vector of positive error weights.\n The values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting a\n user-supplied routine for the setting of EWT.\n See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT (within roundoff), it will return T = TCRIT (exactly) to indicate this (unless ITASK = 4 and TOUT comes before TCRIT, in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, and any optional inputs except H0, MXORDN, and MXORDS. (See IWORK description for ML and MU.) In addition, immediately following a return with ISTATE = 3 (root found), NG and G may be changed. (But changing NG from 0 to .gt. 0 is not allowed.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = t and ISTATE = 1 on input. 2 means the integration was performed successfully, and no roots were found. 3 means the integration was successful, and one or more roots were found before satisfying the stop condition specified by ITASK.  See JROOT. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the length of RWORK and/or IWORK was too small to proceed, but the integration was successful as far as T. This happens when DLSODAR chooses to switch methods but LRW and/or LIW is too small for the new method. Note:  Since the normal output value of ISTATE is 2,\n   it does not need to be reset for normal continuation.\n   Also, since a negative input value of ISTATE will be\n   regarded as illegal, a negative output value requires the\n   user to change it, and possibly other inputs, before\n   calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a real array (double precision) for work space, and (in the\n first 20 words) for conditional and optional inputs and\n optional outputs. As DLSODAR switches automatically between stiff and nonstiff\n methods, the required length of RWORK can change during the\n problem.  Thus the RWORK array passed to DLSODAR can either\n have a static (fixed) length large enough for both methods,\n or have a dynamic (changing) length altered by the calling\n program in response to output from DLSODAR. Fixed Length Case If the RWORK length is to be fixed, it should be at least\n   max (LRN, LRS),\n   where LRN and LRS are the RWORK lengths required when the\n   current method is nonstiff or stiff, respectively. The separate RWORK length requirements LRN and LRS are\n   as follows: If NEQ is constant and the maximum method orders have\n   their default values, then LRN = 20 + 16*NEQ + 3*NG,\n             LRS = 22 + 9*NEQ + NEQ**2 + 3*NG           (JT = 1 or 2),\n             LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ + 3*NG   (JT = 4 or 5).\n          Under any other conditions, LRN and LRS are given by:\n             LRN = 20 + NYH*(MXORDN+1) + 3*NEQ + 3*NG,\n             LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT + 3*NG,\n          where\n             NYH    = the initial value of NEQ,\n             MXORDN = 12, unless a smaller value is given as an\n                      optional input,\n             MXORDS = 5, unless a smaller value is given as an\n                      optional input,\n             LMAT   = length of matrix work space:\n             LMAT   = NEQ**2 + 2              if JT = 1 or 2,\n             LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. Dynamic Length Case If the length of RWORK is to be dynamic, then it should\n be at least LRN or LRS, as defined above, depending on the\n current method.  Initially, it must be at least LRN (since\n DLSODAR starts with the nonstiff method).  On any return\n from DLSODAR, the optional output MCUR indicates the current\n method.  If MCUR differs from the value it had on the\n previous return, or if there has only been one call to\n DLSODAR and MCUR is now 2, then DLSODAR has switched\n methods during the last call, and the length of RWORK\n should be reset (to LRN if MCUR = 1, or to LRS if\n MCUR = 2).  (An increase in the RWORK length is required\n if DLSODAR returned ISTATE = -7, but not otherwise.)\n After resetting the length, call DLSODAR with ISTATE = 3\n to signal that change. LRW the length of the array RWORK, as declared by the user.\n      (This will be checked by the solver.) IWORK an integer array for work space.\n As DLSODAR switches automatically between stiff and nonstiff\n methods, the required length of IWORK can change during\n problem, between\n             LIS = 20 + NEQ   and   LIN = 20,\n respectively.  Thus the IWORK array passed to DLSODAR can\n either have a fixed length of at least 20 + NEQ, or have a\n dynamic length of at least LIN or LIS, depending on the\n current method.  The comments on dynamic length under\n RWORK above apply here.  Initially, this length need\n only be at least LIN = 20. The first few words of IWORK are used for conditional and\n optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs: IWORK(1) = ML\n            IWORK(2) = MU These are the lower and upper half-bandwidths, respectively, of the\n banded Jacobian, excluding the main diagonal.  The band is defined by\n the matrix locations (i,j) with i-ML .le. j .le. i+MU.  ML and MU must\n satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are required if JT is 4 or 5,\n and ignored otherwise.  ML and MU may in fact be the band parameters\n for a matrix to which df/dy is only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note : The base addresses of the work arrays must not be\n altered between calls to DLSODAR for the same problem.\n The contents of the work arrays must not be altered\n between calls, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODAR between calls, if\n desired (but not for use by F, JAC, or G). JAC the name of the user-supplied routine to compute the\n Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine\n is optional, but if the problem is expected to be stiff much\n of the time, you are encouraged to supply JAC, for the sake\n of efficiency.  (Alternatively, set JT = 2 or 5 to have\n DLSODAR compute df/dy internally by difference quotients.)\n If and when DLSODAR uses df/dy, it treats this NEQ by NEQ\n matrix either as full (JT = 1 or 2), or as banded (JT =\n 4 or 5) with half-bandwidths ML and MU (discussed under\n IWORK above).  In either case, if JT = 1 or 4, the JAC\n routine must compute df/dy as a function of the scalar t\n and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the array\n PD is to be loaded with partial derivatives (elements of\n the Jacobian matrix) on output.  PD must be given a first\n dimension of NROWPD.  T and Y have the same meaning as in\n Subroutine F. In the full matrix case (JT = 1), ML and MU are\n ignored, and the Jacobian is to be loaded into PD in\n columnwise manner, with df(i)/dy(j) loaded into pd(i,j). In the band matrix case (JT = 4), the elements\n within the band are to be loaded into PD in columnwise\n manner, with diagonal lines of df/dy loaded into the rows\n of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).\n ML and MU are the half-bandwidth parameters (see IWORK).\n The locations in PD in the two triangular areas which\n correspond to nonexistent matrix elements can be ignored\n or loaded arbitrarily, as they are overwritten by DLSODAR. JAC need not provide df/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to F with the same\n arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  Also, JAC may alter the Y array, if desired.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. JT Jacobian type indicator.  Used only for input. JT specifies how the Jacobian matrix df/dy will be\n treated, if and when DLSODAR requires this matrix.\n JT has the following values and meanings: value description 1 means a user-supplied full (NEQ by NEQ) Jacobian. 2 means an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 4 means a user-supplied banded Jacobian. 5 means an internally generated banded Jacobian (using ML+MU+1 extra calls to F per df/dy evaluation). If JT = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n If JT = 2 or 5, a dummy argument can be used. G the name of subroutine for constraint functions, whose\n roots are desired during the integration.  It is to have\n the form SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) where NEQ, T, Y, and NG are input, and the array GOUT\n is output.  NEQ, T, and Y have the same meaning as in\n the F routine, and GOUT is an array of length NG.\n For i = 1,…,NG, this routine is to load into GOUT(i)\n the value at (T,Y) of the i-th constraint function g(i).\n DLSODAR will find roots of the g(i) of odd multiplicity\n (i.e. sign changes) as they occur during the integration.\n G must be declared External in the calling program. Caution:  Because of numerical errors in the functions\n g(i) due to roundoff and integration error, DLSODAR may\n return false roots, or return the same root at two or more\n nearly equal values of t.  If such false roots are\n suspected, the user should consider smaller error tolerances\n and/or higher precision in the evaluation of the g(i). If a root of some g(i) defines the end of the problem,\n the input to DLSODAR should nevertheless allow integration\n to a point slightly past that root, so that DLSODAR can\n locate the root by interpolation. Subroutine G may access user-defined quantities in\n NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in G) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG.  Used only for output.\n On a return with ISTATE = 3 (one or more roots found),\n JROOT(i) = 1 if g(i) has a root at T, or JROOT(i) = 0 if not. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) IXPR IWORK(5) flag to generate extra printing at method switches. IXPR = 0 means no extra printing (the default). IXPR = 1 means print data on each switch. T, H, and NST will be printed on the same logical unit as used for error messages. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MXORDN IWORK(8) the maximum order to be allowed for the nonstiff (Adams) method.  The default value is 12. If MXORDN exceeds the default value, it will be reduced to the default value. MXORDN is held constant during the problem. MXORDS IWORK(9) the maximum order to be allowed for the stiff (BDF) method.  The default value is 5. If MXORDS exceeds the default value, it will be reduced to the default value. MXORDS is held constant during the problem. Optional Outputs. As optional additional output from DLSODAR, the variables listed\n below are quantities related to the performance of DLSODAR\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown. Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODAR, and on any return with\n ISTATE = -1, -2, -4, -5, or -6. On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW. On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) TSW RWORK(15) the value of t at the time of the last method switch, if any. NGE IWORK(10) the number of g evaluations for the problem so far. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required, assuming that the length of RWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required, assuming that the length of IWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. MUSED IWORK(19) the method indicator for the last successful step: 1 means Adams (nonstiff), 2 means BDF (stiff). MCUR IWORK(20) the current method indicator: 1 means Adams (nonstiff), 2 means BDF (stiff). This is the method to be attempted on the next step.  Thus it differs from MUSED only if a method switch has just been made. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 + 3*NG the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LACOR array of size NEQ used for the accumulated (from Common corrections on each step, scaled on output as noted) to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODAR.  The base address LACOR is obtained by including in the user’s program the following 2 lines: COMMON /DLS001/ RLS(218), ILS(37) LACOR = ILS(22) Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODAR.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODAR, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODAR. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCAR(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODAR (see Part 3 below). RSAV must be a real array of length 245 or more, and ISAV must be an integer array of length 55 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCAR is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODAR. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODAR. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = 21 + 3 * NG CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODAR).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(t), is already provided\n by DLSODAR directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. LYH 21 + 3*NG = base address in RWORK of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODAR is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODAR call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSODAR call for that problem.  To save and restore,\n use Subroutine DSRCAR (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below is a description of a routine in the DLSODAR package which\n relates to the measurement of errors, and can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODAR call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the\n DMNORM routine, and also used by DLSODAR in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). Pedigree: DLSODAR is derived from the Livermore Solver for Ordinary\n Differential Equations package ODEPACK, and is in double precision. Authors Alan C . Hindmarsh , Center for Applied Scientific Computing , L - 561 Lawrence Livermore National Laboratory Livermore , CA 94551 and\n                Linda R. Petzold\n                Univ. of California at Santa Barbara\n                Dept. of Computer Science\n                Santa Barbara, CA 93106 References Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Linda R. Petzold, Automatic Selection of Methods for Solving\n     Stiff and Nonstiff Systems of Ordinary Differential Equations,\n     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Kathie L. Hiebert and Lawrence F. Shampine, Implicitly Defined\n     Output Points for Solutions of ODEs, Sandia Report SAND80-0180,\n     February 1980. Other routines in the DLSODAR package. In addition to Subroutine DLSODAR, the DLSODAR package includes the\n following subroutines and function routines: DRCHEK does preliminary checking for roots, and serves as an\n  interface between Subroutine DLSODAR and Subroutine DROOTS. DROOTS finds the leftmost root of a set of functions. DINTDY computes an interpolated value of the y vector at t = TOUT. DSTODA is the core integrator, which does one step of the\n  integration and the associated error control. DCFODE sets all method coefficients and test constants. DPRJA computes and preprocesses the Jacobian matrix J = df/dy\n  and the Newton iteration matrix P = I - h*l0*J. DSOLSY manages solution of linear system in chord iteration. DEWSET sets the error weight vector EWT before each step. DMNORM computes the weighted max-norm of a vector. DFNORM computes the norm of a full matrix consistent with the\n  weighted max-norm on vectors. DBNORM computes the norm of a band matrix consistent with the\n  weighted max-norm on vectors. DSRCAR is a user-callable routine to save and restore\n  the contents of the internal Common blocks. DGEFA and DGESL are routines from LINPACK for solving full\n  systems of linear algebraic equations. DGBFA and DGBSL are routines from LINPACK for solving banded\n  linear systems.\n  DCOPY is one of the basic linear algebra modules (BLAS). DUMACH computes the unit roundoff in a machine-independent manner. XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n  error messages and warnings.  XERRWD is machine-dependent. Note:  DMNORM, DFNORM, DBNORM, DUMACH, and IXSAV are\n function routines.  All the others are subroutines. ----------------------------------------------------------------------- Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Jt real :: g integer :: Ng integer, dimension(Ng) :: Jroot Calls proc~~dlsodar~2~~CallsGraph proc~dlsodar~2 dlsodar proc~dewset~2 dewset proc~dlsodar~2->proc~dewset~2 proc~dcopy~2 dcopy proc~dlsodar~2->proc~dcopy~2 proc~drchek~2 drchek proc~dlsodar~2->proc~drchek~2 proc~xerrwd~2 xerrwd proc~dlsodar~2->proc~xerrwd~2 proc~dmnorm~2 dmnorm proc~dlsodar~2->proc~dmnorm~2 proc~dumach~2 dumach proc~dlsodar~2->proc~dumach~2 proc~dintdy~2 dintdy proc~dlsodar~2->proc~dintdy~2 proc~dstoda~2 dstoda proc~dlsodar~2->proc~dstoda~2 proc~drchek~2->proc~dintdy~2 proc~droots~2 droots proc~drchek~2->proc~droots~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dintdy~2->proc~xerrwd~2 proc~dstoda~2->proc~dmnorm~2 proc~dcfode~2 dcfode proc~dstoda~2->proc~dcfode~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big ewti h0 hmax hmx i i1 i2 iflag ihit imxer irfp irt kgo len1 len1c len1n len1s len2 leniw leniwc lenrw lenrwc lenwm lenyh lf0 lyhnew ml mord msg mu mxhnl0 mxstp0 rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsodar Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: irfp integer, public :: irt integer, public :: kgo integer, public :: len1 integer, public :: len1c integer, public :: len1n integer, public :: len1s integer, public :: len2 integer, public :: leniw integer, public :: leniwc integer, public :: lenrw integer, public :: lenrwc integer, public :: lenwm integer, public :: lenyh integer, public :: lf0 integer, public :: lyhnew integer, public :: ml integer, public, dimension(2), save :: mord character(len=60), public :: msg integer, public :: mu integer, public, save :: mxhnl0 integer, public, save :: mxstp0 real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsodar ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Jt , g , Ng , Jroot ) ! external f external g external jac real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , irfp , irt , kgo , len1 , len1c , len1n , len1s , len2 , leniw , leniwc , lenrw , lenrwc , & & lenwm , lenyh , lf0 , lyhnew , ml , mu logical :: ihit integer :: Iopt , Istate , Itask , Itol , Jt , Liw , Lrw , Ng integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( Ng ) :: Jroot integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following three internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODAR, DINTDY, DSTODA, !  DPRJA, and DSOLSY. !  The type(DLSA01)::DLSA is declared in subroutines DLSODAR, DSTODA, DPRJA. !  The block DLSR01 is declared in subroutines DLSODAR, DRCHEK, DROOTS. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Ng . gt . 0 ) Jroot ( ng ) = 0 if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODAR-  ISTATE(=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1200 ! msg = 'DLSODAR-  Run aborted.. apparent infinite loop.   ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODAR-  ITASK (=I1) illegal.' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else dlsr % itaskc = Itask if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODAR-  ISTATE.gt.1 but DLSODAR not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  JT, ML, MU, and NG. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODAR-  NEQ (=I1) .lt. 1    ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODAR-  ISTATE = 3 and NEQ increased (I1 to I2).' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1200 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODAR-  ITOL (=I1) illegal. ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODAR-  IOPT (=I1) illegal. ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Jt == 3 . or . Jt < 1 . or . Jt > 5 ) then msg = 'DLSODAR-  JT (=I1) illegal.   ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Jt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else dlsa % jtyp = Jt if ( Jt > 2 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODAR-  ML (=I1) illegal: .lt.0 or .ge.NEQ (=I2)' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODAR-  MU (=I1) illegal: .lt.0 or .ge.NEQ (=I2)' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1200 endif endif if ( Ng < 0 ) then msg = 'DLSODAR-  NG (=I1) .lt. 0     ' call xerrwd ( msg , 30 , 30 , 0 , 1 , Ng , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( Istate /= 1 ) then if ( dlsr % irfnd == 0 . and . Ng /= dlsr % ngc ) then msg = 'DLSODAR-  NG changed (from I1 to I2) illegally,   ' call xerrwd ( msg , 50 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      i.e. not immediately after a root was found.' call xerrwd ( msg , 50 , 31 , 0 , 2 , dlsr % ngc , Ng , 0 , 0.0D0 , 0.0D0 ) goto 1200 endif endif dlsr % ngc = Ng !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dlsa % ixpr = Iwork ( 5 ) if ( dlsa % ixpr < 0 . or . dlsa % ixpr > 1 ) then msg = 'DLSODAR-  IXPR (=I1) illegal. ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dlsa % ixpr , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODAR-  MXSTEP (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODAR-  MXHNIL (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) dlsa % mxordn = Iwork ( 8 ) if ( dlsa % mxordn < 0 ) then msg = 'DLSODAR-  MXORDN (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 28 , 0 , 1 , dlsa % mxordn , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dlsa % mxordn == 0 ) dlsa % mxordn = 100 dlsa % mxordn = min ( dlsa % mxordn , mord ( 1 )) dlsa % mxords = Iwork ( 9 ) if ( dlsa % mxords < 0 ) then msg = 'DLSODAR-  MXORDS (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 29 , 0 , 1 , dlsa % mxords , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dlsa % mxords == 0 ) dlsa % mxords = 100 dlsa % mxords = min ( dlsa % mxords , mord ( 2 )) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODAR-  TOUT (=R1) behind T (=R2)     ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1200 endif endif endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODAR-  HMAX (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1200 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODAR-  HMIN (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1200 endif endif endif endif endif else dlsa % ixpr = 0 dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 if ( Istate == 1 ) then h0 = 0.0D0 dlsa % mxordn = mord ( 1 ) dlsa % mxords = mord ( 2 ) endif endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  If ISTATE = 1, METH is initialized to 1 here to facilitate the !  checking of work space lengths. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  G0, G1, GX, YH, WM, !  EWT, SAVF, ACOR. !  If the lengths provided are insufficient for the current method, !  an error return occurs.  This is treated as illegal input on the !  first call, but as a problem interruption with ISTATE = -7 on a !  continuation call.  If the lengths are sufficient for the current !  method but not for both methods, a warning message is sent. ! ----------------------------------------------------------------------- if ( Istate == 1 ) dls1 % meth = 1 if ( Istate == 1 ) dls1 % nyh = dls1 % n dlsr % lg0 = 21 dlsr % lg1 = dlsr % lg0 + Ng dlsr % lgx = dlsr % lg1 + Ng lyhnew = dlsr % lgx + Ng if ( Istate == 1 ) dls1 % lyh = lyhnew if ( lyhnew /= dls1 % lyh ) then !  If ISTATE = 3 and NG was changed, shift YH to its new location. ------ lenyh = dls1 % l * dls1 % nyh if ( Lrw >= lyhnew - 1 + lenyh ) then i1 = 1 if ( lyhnew > dls1 % lyh ) i1 = - 1 call dcopy ( lenyh , Rwork ( dls1 % lyh ), i1 , Rwork ( lyhnew ), i1 ) dls1 % lyh = lyhnew endif endif len1n = lyhnew - 1 + ( dlsa % mxordn + 1 ) * dls1 % nyh len1s = lyhnew - 1 + ( dlsa % mxords + 1 ) * dls1 % nyh dls1 % lwm = len1s + 1 lenwm = 0 if ( Jt <= 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( Jt >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 len1s = len1s + lenwm len1c = len1n if ( dls1 % meth == 2 ) len1c = len1s len1 = max ( len1n , len1s ) len2 = 3 * dls1 % n lenrw = len1 + len2 lenrwc = len1c + len2 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n leniwc = 20 if ( dls1 % meth == 2 ) leniwc = leniw Iwork ( 18 ) = leniw if ( Istate == 1 . and . Lrw < lenrwc ) then msg = 'DLSODAR-  RWORK length needed, LENRW(=I1), exceeds LRW(=I2) ' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Istate == 1 . and . Liw < leniwc ) then msg = 'DLSODAR-  IWORK length needed, LENIW(=I1), exceeds LIW(=I2) ' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( Istate == 3 . and . Lrw < lenrwc ) goto 500 if ( Istate == 3 . and . Liw < leniwc ) goto 600 dls1 % lewt = len1 + 1 dlsa % insufr = 0 if ( Lrw < lenrw ) then dlsa % insufr = 2 dls1 % lewt = len1c + 1 msg = 'DLSODAR-  Warning.. RWORK length is sufficient for now, but ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENRW = I1, while LRW = I2.' call xerrwd ( msg , 50 , 103 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) endif dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n dlsa % insufi = 0 if ( Liw < leniw ) then dlsa % insufi = 2 msg = 'DLSODAR-  Warning.. IWORK length is sufficient for now, but ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENIW = I1, while LIW = I2.' call xerrwd ( msg , 50 , 104 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODAR-  RTOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1200 elseif ( atoli < 0.0D0 ) then msg = 'DLSODAR-  ATOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1200 endif enddo if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T dlsa % tsw = T dls1 % maxord = dlsa % mxordn if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1000 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dlsa % mused = 0 dls1 % miter = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODAR-  EWT(I1) is R1 .le. 0.0        ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1200 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by: ! !    H0**(-2)  =  1./(TOL * w0**2)  +  TOL * (norm(F))**2 ! !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          F      = the initial value of the vector f(t,y), and !          norm() = the weighted vector norm used throughout, given by !                   the DMNORM function routine, and weighted by the !                   tolerances initially loaded into the EWT array. !  The sign of H0 is inferred from the initial values of TOUT and T. !  ABS(H0) is made .le. ABS(TOUT-T) in any case. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODAR- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1200 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dmnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo ! !  Check for a zero of g at T. ------------------------------------------ dlsr % irfnd = 0 dlsr % toutc = Tout if ( dlsr % ngc == 0 ) goto 200 call drchek ( 1 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 0 ) goto 200 msg = 'DLSODAR-  One or more components of g has a root  ' call xerrwd ( msg , 50 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      too near to the initial point.    ' call xerrwd ( msg , 40 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else !  if ISTATE = 3, set flag to signal parameter changes to DSTODA. ------- dls1 % jstart = - 1 if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  zero part of yh to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. !  First, DRCHEK is called to check for a root within the dlsr%last step !  taken, other than the dlsr%last root found there, if any. !  If ITASK = 2 or 5, and y(TN) has not yet been returned to the user !  because of an intervening root, return through Block G. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst ! irfp = dlsr % irfnd if ( dlsr % ngc /= 0 ) then if ( Itask == 1 . or . Itask == 4 ) dlsr % toutc = Tout call drchek ( 2 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif dlsr % irfnd = 0 if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 2 ) goto 300 ! select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODAR-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2) ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1200 else if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 T = dls1 % tn goto 300 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 900 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1000 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1100 T = Tout Istate = 2 goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 900 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1100 T = Tout Istate = 2 goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) T = tcrit if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 5 ) goto 300 if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 . and . dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODA. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( dls1 % meth /= dlsa % mused ) then if ( dlsa % insufr == 1 ) goto 500 if ( dlsa % insufi == 1 ) goto 600 endif if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODAR-  At current T (=R1), MXSTEP (=I1) steps  ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 800 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODAR-  At T(=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 800 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dmnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODAR-  Warning..Internal T(=R1) and H(=R2) are ' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODAR-  Above warning has been issued I1 times. ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !    CALL DSTODA(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,f,JAC,DPRJA,DSOLSY) ! ----------------------------------------------------------------------- call dstoda ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), & & Iwork ( dls1 % liwm ), f , jac , dprja , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODAR-  At T(=R1), step size H(=R2), the error  ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 700 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODAR-  At T (=R1) and step size H (=R2), the   ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 700 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0). !  If a method switch was just made, record TSW, reset MAXORD, !  set JSTART to -1 to signal DSTODA to complete the switch, !  and do extra printing of data if IXPR = 1. !  Then call DRCHEK to check for a root within the dlsr%last step. !  Then, if no root was found, check for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 if ( dls1 % meth /= dlsa % mused ) then dlsa % tsw = dls1 % tn dls1 % maxord = dlsa % mxordn if ( dls1 % meth == 2 ) dls1 % maxord = dlsa % mxords if ( dls1 % meth == 2 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dlsa % insufr = min ( dlsa % insufr , 1 ) dlsa % insufi = min ( dlsa % insufi , 1 ) dls1 % jstart = - 1 if ( dlsa % ixpr /= 0 ) then if ( dls1 % meth == 2 ) then msg = 'DLSODAR- A switch to the BDF (stiff) method has occurred    ' call xerrwd ( msg , 60 , 105 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( dls1 % meth == 1 ) then msg = 'DLSODAR- A switch to the Adams (nonstiff) method occurred   ' call xerrwd ( msg , 60 , 106 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif msg = '     at T = R1,  tentative step size H = R2,  step NST = I1 ' call xerrwd ( msg , 60 , 107 , 0 , 1 , dls1 % nst , 0 , 2 , dls1 % tn , dls1 % h ) endif endif ! if ( dlsr % ngc /= 0 ) then call drchek ( 3 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif ! select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODAR-  At start of problem, too much accuracy  ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1200 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODAR-  At T (=R1), too much accuracy requested ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 800 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODAR. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif Istate = 2 400 continue Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return !  RWORK length too small to proceed. ----------------------------------- 500 continue msg = 'DLSODAR- At current T(=R1), RWORK length too small' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 800 !  IWORK length too small to proceed. ----------------------------------- 600 continue msg = 'DLSODAR- At current T(=R1), IWORK length too small' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 800 !  Compute IMXER if relevant. ------------------------------------------- 700 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 800 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return 900 continue msg = 'DLSODAR-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)  ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1200 1000 continue msg = 'DLSODAR-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)  ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1200 1100 continue msg = 'DLSODAR-  Trouble in DINTDY. ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1200 continue Istate = - 3 return 99999 continue end subroutine dlsodar","tags":"","loc":"proc/dlsodar~2.html"},{"title":"dlsoibt – odepack","text":"subroutine dlsoibt(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) Synopsis DLSOIBT: Livermore Solver for Ordinary differential equations given\n          in Implicit form, with Block-Tridiagonal Jacobian treatment. DLSOIBT solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ\n\n      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n           i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSOIBT is a variant version of the DLSODI package, for the case where\n the matrices A, dg/dy, and d(A*s)/dy are all block-tridiagonal. This version is in double precision. Summary of Usage. Communication between the user and the DLSOIBT package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form: SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) which computes the residual function r = g(t,y)  -  A(t,y) * s as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSOIBT.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. Next, identify the block structure of the matrices A = A(t,y) and\n dr/dy.  DLSOIBT must deal internally with a linear combination, P, of\n these two matrices.  The matrix P (hence both A and dr/dy) must have\n a block-tridiagonal form with fixed structure parameters MB = block size, MB .ge. 1, and\n    NB = number of blocks in each direction, NB .ge. 4, with MB*NB = NEQ.  In each of the NB block-rows of the matrix P\n (each consisting of MB consecutive rows), the nonzero elements are\n to lie in three consecutive MB by MB blocks.  In block-rows\n 2 through NB - 1, these are centered about the main diagonal. in block-rows 1 and NB, they are the diagonal blocks and the two\n blocks adjacent to the diagonal block.  (Thus block positions (1,3)\n and (NB,NB-2) can be nonzero.) Alternatively, P (hence A and dr/dy) may be only approximately\n equal to matrices with this form, and DLSOIBT should still succeed.\n The block-tridiagonal matrix P is described by three arrays,\n each of size MB by MB by NB: PA = array of diagonal blocks,\n     PB = array of superdiagonal (and one subdiagonal) blocks, and\n     PC = array of subdiagonal (and one superdiagonal) blocks. Specifically, the three MB by MB blocks in the k-th block-row of P\n are stored in (reading across): PC(*,*,k) = block to the left of the diagonal block,\n     PA(*,*,k) = diagonal block, and\n     PB(*,*,k) = block to the right of the diagonal block, except for k = 1, where the three blocks (reading across) are PA(*,*,1) (= diagonal block), PB(*,*,1), and PC(*,*,1), and k = NB, where they are PB(*,*,NB), PC(*,*,NB), and PA(*,*,NB) (= diagonal block). (Each asterisk * stands for an index that ranges from 1 to MB.) C. You must also provide a subroutine of the form: SUBROUTINE ADDA ( NEQ , T , Y , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), PA ( MB , MB , NB ), PB ( MB , MB , NB ), PC ( MB , MB , NB ) which adds the nonzero blocks of the matrix A = A(t,y) to the\n contents of the arrays PA, PB, and PC, following the structure\n description in Paragraph B above.\n T and the Y array are input and should not be altered.\n Thus the affect of ADDA should be the following: DO K = 1 , NB DO J = 1 , MB DO I = 1 , MB PA ( I , J , K ) = PA ( I , J , K ) + ( ( I , J ) element of K - th diagonal block of A ) PB ( I , J , K ) = PB ( I , J , K ) + ( ( I , J ) element of block in block position ( K , K + 1 ) of A , or in block position ( NB , NB - 2 ) if K = NB ) PC ( I , J , K ) = PC ( I , J , K ) + ( ( I , J ) element of block in block position ( K , K - 1 ) of A , or in block position ( 1 , 3 ) if K = 1 ) ENDDO ENDDO ENDDO D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)*s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21, and provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , S , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), S ( * ), PA ( MB , MB , NB ), PB ( MB , MB , NB ), & & PC ( MB , MB , NB ) which computes dr/dy as a function of t, y, and s.  Here T, Y, and\n S are inputs, and the routine is to load dr/dy into PA, PB, PC,\n according to the structure description in Paragraph B above. That is, load the diagonal blocks into PA, the superdiagonal blocks\n (and block (NB,NB-2) ) into PB, and the subdiagonal blocks (and\n block (1,3) ) into PC.  The blocks in block-row k of dr/dy are to\n be loaded into PA(*,*,k), PB(*,*,k), and PC(*,*,k). Only nonzero elements need be loaded, and the indexing\n of PA, PB, and PC is the same as in the ADDA routine. Note that if A is independent of Y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy. If it is not feasible to provide a JAC routine, use\n MF = 22, and DLSOIBT will compute an approximate Jacobian\n internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSOIBT compute\n this vector (ISTATE = 0).  (DLSOIBT will solve the system A*s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI. The input array YDOTI and the initial Y array must be consistent with\n the equations A*dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI  must be approximately zero. F. Write a main program which calls Subroutine DLSOIBT once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSOIBT.  on the first call to DLSOIBT, supply arguments as follows: RES name of user subroutine for residual function r. ADDA name of user subroutine for computing and adding A(t,y). JAC name of user subroutine for Jacobian matrix dr/dy\n (MF = 21).  If not used, pass a dummy name. Note: the names for the RES and ADDA routines and (if used) the\n JAC routine must be declared External in the calling program. NEQ number of scalar equations in the system. Y array of initial values, of length NEQ. YDOTI array of length NEQ (containing initial dy/dt if ISTATE = 1). T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1 if the\n initial dy/dt is supplied, and 0 otherwise. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 + 9 * NEQ + 3 * MB * MB * NB for MF = 21 or 22 . LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least 20 + NEQ.\n Input in IWORK(1) the block size MB and in IWORK(2) the\n number NB of blocks in each direction along the matrix A.\n These must satisfy  MB .ge. 1, NB .ge. 4, and MB*NB = NEQ. LIW declared length of IWORK (in user’s dimension). MF method flag.  Standard values are: 21 for a user - supplied Jacobian . 22 for an internally generated Jacobian . For other choices of MF, see the paragraph on MF in\n  the full description below. Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE ISTATE values: value description 2 if DLSOIBT was successful, negative otherwise. -1 means excess work done on this call (check all inputs). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 cannot occur in casual use. -8 means DLSOIBT was unable to compute the initial dy/dt. In casual use, this means A(t,y) is initially singular. Supply YDOTI and use ISTATE = 1 on the first call. If DLSOIBT returns ISTATE = -1, -4, or -5, then the output of\n DLSOIBT also includes YDOTI = array containing residual vector\n r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSOIBT again.  No other parameters need be reset. Example Problem. The following is an example problem, with the coding needed\n for its solution by DLSOIBT.  The problem comes from the partial\n differential equation (the Burgers equation) du/dt  =  - u * du/dx  +  eta * d**2 u/dx**2,   eta = .05,\n on -1 .le. x .le. 1.  The boundary conditions are\n   du/dx = 0  at x = -1 and at x = 1.\n The initial profile is a square wave,\n   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere.\n The PDE is discretized in x by a simplified Galerkin method,\n using piecewise linear basis functions, on a grid of 40 intervals.\n The equations at x = -1 and 1 use a 3-point difference approximation\n for the right-hand side.  The result is a system A * dy/dt = g(y),\n of size NEQ = 41, where y(i) is the approximation to u at x = x(i),\n with x(i) = -1 + (i-1)*delx, delx = 2/(NEQ-1) = .05.  The individual\n equations in the system are\n   dy(1)/dt = ( y(3) - 2*y(2) + y(1) ) * eta / delx**2,\n   dy(NEQ)/dt = ( y(NEQ-2) - 2*y(NEQ-1) + y(NEQ) ) * eta / delx**2,\n and for i = 2, 3, ..., NEQ-1,\n   (1/6) dy(i-1)/dt + (4/6) dy(i)/dt + (1/6) dy(i+1)/dt\n       = ( y(i-1)**2 - y(i+1)**2 ) / (4*delx)\n         + ( y(i+1) - 2*y(i) + y(i-1) ) * eta / delx**2. The following coding solves the problem with MF = 21, with output\n of solution statistics at t = .1, .2, .3, and .4, and of the\n solution vector at t = .4.  Here the block size is just MB = 1. program dlsoibt_ex use m_odepack implicit none external addabt external jacbt external resid integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: atol , rtol , t , tout integer :: i , io , iopt , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 61 ) :: iwork real ( kind = dp ), dimension ( 514 ) :: rwork real ( kind = dp ), dimension ( 41 ) :: y , ydoti neq = 41 do i = 1 , neq y ( i ) = 0.0 enddo y ( 11 ) = 0.5 do i = 12 , 30 y ( i ) = 1.0 enddo y ( 31 ) = 0.5 t = 0.0 tout = 0.1 itol = 1 rtol = 1.0D-4 atol = 1.0D-5 itask = 1 istate = 0 iopt = 0 lrw = 514 liw = 61 iwork ( 1 ) = 1 iwork ( 2 ) = neq mf = 21 do io = 1 , 4 call dlsoibt ( resid , addabt , jacbt ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & [ atol ], itask , istate , iopt , rwork , lrw , iwork , liw , mf ) write ( 6 , 99010 ) t , iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99010 format ( ' At t =' , f5 . 2 , '   No. steps =' , i4 , '  No. r-s =' , i4 , & & '  No. J-s =' , i3 ) if ( istate /= 2 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout + 0.1 endif enddo write ( 6 , 99030 ) ( y ( i ), i = 1 , neq ) 99030 format ( / ' Final solution values..' / 9 ( 5 D12 . 4 / )) end program dlsoibt_ex subroutine resid ( N , T , Y , S , R , Ires ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), intent ( in ), dimension ( N ) :: S real ( kind = dp ), intent ( out ), dimension ( N ) :: R integer :: Ires real ( kind = dp ), save :: delx , eta real ( kind = dp ) :: eodsq integer :: i , nm1 data eta / 0.05 / , delx / 0.05 / eodsq = eta / delx ** 2 R ( 1 ) = eodsq * ( Y ( 3 ) - 2.0 * Y ( 2 ) + Y ( 1 )) - S ( 1 ) nm1 = N - 1 do i = 2 , nm1 R ( i ) = ( Y ( i - 1 ) ** 2 - Y ( i + 1 ) ** 2 ) / ( 4.0 * delx ) & & + eodsq * ( Y ( i + 1 ) - 2.0 * Y ( i ) + Y ( i - 1 )) - ( S ( i - 1 ) + 4.0 * S ( i ) + S ( i + 1 )) & & / 6.0 enddo R ( N ) = eodsq * ( Y ( N - 2 ) - 2.0 * Y ( nm1 ) + Y ( N )) - S ( N ) end subroutine resid subroutine addabt ( N , T , Y , Mb , Nb , Pa , Pb , Pc ) implicit                                         none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y integer , intent ( in ) :: Mb integer , intent ( in ) :: Nb real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pa real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pb real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pc integer :: k , nm1 Pa ( 1 , 1 , 1 ) = Pa ( 1 , 1 , 1 ) + 1.0 nm1 = N - 1 do k = 2 , nm1 Pa ( 1 , 1 , k ) = Pa ( 1 , 1 , k ) + ( 4.0 / 6.0 ) Pb ( 1 , 1 , k ) = Pb ( 1 , 1 , k ) + ( 1.0 / 6.0 ) Pc ( 1 , 1 , k ) = Pc ( 1 , 1 , k ) + ( 1.0 / 6.0 ) enddo Pa ( 1 , 1 , N ) = Pa ( 1 , 1 , N ) + 1.0 end subroutine addabt subroutine jacbt ( N , T , Y , S , Mb , Nb , Pa , Pb , Pc ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), dimension ( N ) :: S integer , intent ( in ) :: Mb integer , intent ( in ) :: Nb real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pa real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pb real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pc real ( kind = dp ), save :: delx , eta real ( kind = dp ) :: eodsq integer :: k data eta / 0.05 / , delx / 0.05 / eodsq = eta / delx ** 2 Pa ( 1 , 1 , 1 ) = eodsq Pb ( 1 , 1 , 1 ) = - 2.0 * eodsq Pc ( 1 , 1 , 1 ) = eodsq do k = 2 , N Pa ( 1 , 1 , k ) = - 2.0 * eodsq Pb ( 1 , 1 , k ) = - Y ( k + 1 ) * ( 0.5 / delx ) + eodsq Pc ( 1 , 1 , k ) = Y ( k - 1 ) * ( 0.5 / delx ) + eodsq enddo Pb ( 1 , 1 , N ) = eodsq Pc ( 1 , 1 , N ) = - 2.0 * eodsq Pa ( 1 , 1 , N ) = eodsq end subroutine jacbt The output of this program (on a CDC-7600 in single precision)\n is as follows: At t = 0.10   No. steps =  35  No. r-s =  45  No. J-s =  9\n At t = 0.20   No. steps =  43  No. r-s =  54  No. J-s = 10\n At t = 0.30   No. steps =  48  No. r-s =  60  No. J-s = 11\n At t = 0.40   No. steps =  51  No. r-s =  64  No. J-s = 12\n\n Final solution values..\n  1.2747e-02  1.1997e-02  1.5560e-02  2.3767e-02  3.7224e-02\n  5.6646e-02  8.2645e-02  1.1557e-01  1.5541e-01  2.0177e-01\n  2.5397e-01  3.1104e-01  3.7189e-01  4.3530e-01  5.0000e-01\n  5.6472e-01  6.2816e-01  6.8903e-01  7.4612e-01  7.9829e-01\n  8.4460e-01  8.8438e-01  9.1727e-01  9.4330e-01  9.6281e-01\n  9.7632e-01  9.8426e-01  9.8648e-01  9.8162e-01  9.6617e-01\n  9.3374e-01  8.7535e-01  7.8236e-01  6.5321e-01  5.0003e-01\n  3.4709e-01  2.1876e-01  1.2771e-01  7.3671e-02  5.0642e-02\n  5.4496e-02 Full Description of User Interface to DLSOIBT. The user interface to DLSOIBT consists of the following parts. The call sequence to Subroutine DLSOIBT, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSOIBT package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSOIBT package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF, and those used for both input and output are\n     Y, T, ISTATE, YDOTI. The work arrays RWORK and IWORK are also used for additional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSOIBT to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES the name of the user-supplied subroutine which supplies\n the residual vector for the ODE system, defined by r = g(t,y) - A(t,y) * s as a function of the scalar t and the vectors\n s and y (s approximates dy/dt).  This subroutine\n is to have the form SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) where NEQ, T, Y, S, and IRES are input, and R and\n IRES are output. Y, S, and R are arrays of length NEQ. On input, IRES indicates how DLSOIBT will use the\n returned array R, as follows: IRES = 1  means that DLSOIBT needs the full residual,\n                   r = g - A\\*s, exactly.\n         IRES = -1 means that DLSOIBT is using R only to compute\n                   the Jacobian dr/dy by difference quotients. The RES routine can ignore IRES, or it can omit some terms\n if IRES = -1.  If A does not depend on y, then RES can\n just return R = g when IRES = -1.  If g - A*s contains other\n additive terms that are independent of y, these can also be\n dropped, if done consistently, when IRES = -1. The subroutine should set the flag IRES if it\n encounters a halt condition or illegal input.\n Otherwise, it should not reset IRES.  On output, IRES = 1 or -1 represents a normal return, and\n DLSOIBT continues integrating the ODE.  Leave IRES\n unchanged from its input value. IRES = 2 tells DLSOIBT to immediately return control\n to the calling program, with ISTATE = 3.  This lets\n the calling program change parameters of the problem\n if necessary. IRES = 3 represents an error condition (for example, an\n illegal value of y).  DLSOIBT tries to integrate the system\n without getting IRES = 3 from RES.  If it cannot, DLSOIBT\n returns with ISTATE = -7 or -1. On an DLSOIBT return with ISTATE = 3, -1, or -7, the\n values of T and Y returned correspond to the last point\n reached successfully without getting the flag IRES = 2 or 3. The flag values IRES = 2 and 3 should not be used to\n handle switches or root-stop conditions.  This is better\n done by calling DLSOIBT in a one-step mode and checking the\n stopping function for a sign change at each step. If quantities computed in the RES routine are needed\n externally to DLSOIBT, an extra call to RES should be made\n for this purpose, for consistent and accurate results.\n To get the current dy/dt for the S argument, use DINTDY. RES must be declared External in the calling\n program. See note below for more about RES. ADDA the name of the user-supplied subroutine which adds the\n matrix A = A(t,y) to another matrix, P, stored in\n block-tridiagonal form.  This routine is to have the form SUBROUTINE ADDA ( NEQ , T , Y , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), PA ( MB , MB , NB ), PB ( MB , MB , NB ), & & PC ( MB , MB , NB ) where NEQ, T, Y, MB, NB, and the arrays PA, PB, and PC\n are input, and the arrays PA, PB, and PC are output.\n Y is an array of length NEQ, and the arrays PA, PB, PC\n are all MB by MB by NB. Here a block-tridiagonal structure is assumed for A(t,y),\n and also for the matrix P to which A is added here,\n as described in Paragraph B of the Summary of Usage above.\n Thus the affect of ADDA should be the following: DO K = 1 , NB DO J = 1 , MB DO I = 1 , MB PA ( I , J , K ) = PA ( I , J , K ) + ( ( I , J ) element of K - th diagonal block of A ) PB ( I , J , K ) = PB ( I , J , K ) + ( ( I , J ) element of block ( K , K + 1 ) of A , or block ( NB , NB - 2 ) if K = NB ) PC ( I , J , K ) = PC ( I , J , K ) + ( ( I , J ) element of block ( K , K - 1 ) of A , or block ( 1 , 3 ) if K = 1 ) ENDDO ENDDO ENDDO ADDA must be declared External in the calling program.\n See note below for more information about ADDA. JAC the name of the user-supplied subroutine which supplies\n the Jacobian matrix, dr/dy, where r = g - A*s.  JAC is\n required if MITER = 1.  Otherwise a dummy name can be\n passed.  This subroutine is to have the form SUBROUTINE JAC ( NEQ , T , Y , S , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), S ( * ), PA ( MB , MB , NB ), & PB ( MB , MB , NB ), PC ( MB , MB , NB ) where NEQ, T, Y, S, MB, NB, and the arrays PA, PB, and PC\n are input, and the arrays PA, PB, and PC are output.\n Y and S are arrays of length NEQ, and the arrays PA, PB, PC\n are all MB by MB by NB. PA, PB, and PC are to be loaded with partial derivatives\n (elements of the Jacobian matrix) on output, in terms of the\n block-tridiagonal structure assumed, as described\n in Paragraph B of the Summary of Usage above. That is, load the diagonal blocks into PA, the\n superdiagonal blocks (and block (NB,NB-2) ) into PB, and\n the subdiagonal blocks (and block (1,3) ) into PC. The blocks in block-row k of dr/dy are to be loaded into\n PA(*,*,k), PB(*,*,k), and PC(*,*,k). Thus the affect of JAC should be the following: DO K = 1 , NB DO J = 1 , MB DO I = 1 , MB PA ( I , J , K ) = ( ( I , J ) element of K - th diagonal block of dr / dy ) PB ( I , J , K ) = ( ( I , J ) element of block ( K , K + 1 ) of dr / dy , or block ( NB , NB - 2 ) if K = NB ) PC ( I , J , K ) = ( ( I , J ) element of block ( K , K - 1 ) of dr / dy , or block ( 1 , 3 ) if K = 1 ) ENDDO ENDDO ENDDO PA, PB, and PC are preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to RES with the same\n arguments NEQ, T, Y, and S.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by RES and not recomputed by JAC\n if desired.  Also, JAC may alter the Y array, if desired. JAC need not provide dr/dy exactly.  A crude\n approximation will do, so that DLSOIBT may be used when\n A and dr/dy are not really block-tridiagonal, but are close\n to matrices that are. JAC must be declared External in the calling program.\n See note below for more about JAC. Note on RES, ADDA, and JAC: These subroutines may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in the subroutines) and/or Y has length\n exceeding NEQ(1).  However, these routines should not alter\n NEQ(1), Y(1),…,Y(NEQ) or any other input variables.\n See the descriptions of NEQ and Y below. NEQ the size of the system (number of first order ordinary\n differential equations or scalar algebraic equations).\n Used only for input. NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in RES, ADDA, or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size. (The DLSOIBT package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to RES, ADDA, and JAC.  Hence, if it is an array, locations NEQ(2),… may be used to store other integer data\n and pass it to RES, ADDA, or JAC.  Each such subroutine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 0 or 1), and only for output on other\n calls.  On the first call, Y must contain the vector of\n initial values.  On output, Y contains the computed solution\n vector, evaluated at t.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n ADDA, and JAC.  Hence its length may exceed NEQ,\n and locations Y(NEQ+1),… may be used to store other real\n data and pass it to RES, ADDA, or JAC.  (The DLSOIBT\n package accesses only Y(1),…,Y(NEQ). ) YDOTI a real array for the initial value of the vector\n dy/dt and for work space, of dimension at least NEQ. On input: If ISTATE = 0 then DLSOIBT will compute the initial value\n of dy/dt, if A is nonsingular.  Thus YDOTI will\n serve only as work space and may have any value. If ISTATE = 1 then YDOTI must contain the initial value\n of dy/dt. If ISTATE = 2 or 3 (continuation calls) then YDOTI\n may have any value. Note: If the initial value of A is singular, then\n DLSOIBT cannot compute the initial value of dy/dt, so\n it must be provided in YDOTI, with ISTATE = 1. On output, when DLSOIBT terminates abnormally with ISTATE =\n -1, -4, or -5, YDOTI will contain the residual\n r = g(t,y) - A(t,y)*(dy/dt).  If r is large, t is near\n its initial value, and YDOTI is supplied with ISTATE = 1,\n there may have been an incorrect input value of\n YDOTI = dy/dt, or the problem (as given to DLSOIBT)\n may not have a solution. If desired, the YDOTI array may be used for other\n purposes between calls to the solver. T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration. On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 0 or 1), TOUT may be\n equal to T for one call, then should .ne. T for the next\n call.  For the initial T, an input value of TOUT .ne. T is\n used in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array scalar RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note :  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n state of the calculation. On input, the values of ISTATE are as follows. value description 0 means this is the first call for the problem, and DLSOIBT is to compute the initial value of dy/dt (while doing other initializations).  See note below. 1 means this is the first call for the problem, and the initial value of dy/dt has been supplied in YDOTI (DLSOIBT will do other initializations). See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, MB, NB, and any of the optional inputs except H0. (See IWORK description for MB and NB.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 0 or 1 on input. On output, ISTATE has the following values and meanings. value description 0 or 1  means nothing was done; TOUT = t and ISTATE = 0 or 1 on input. 2 means that the integration was performed successfully. 3 means that the user-supplied Subroutine RES signalled DLSOIBT to halt the integration and return (IRES = 2). Integration as far as T was achieved with no occurrence of IRES = 2, but this flag was set on attempting the next step. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i) = 0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means that the user-supplied Subroutine RES set its error flag (IRES = 3) despite repeated tries by DLSOIBT to avoid that condition. -8 means that ISTATE was 0 on input but DLSOIBT was unable to compute the initial value of dy/dt.  See the printed message for details. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Similarly, ISTATE (= 3) need not be reset if RES told\n DLSOIBT to return because the calling program must change\n the parameters of the problem. Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n            Default values will be used in all cases.\n   IOPT = 1 means one or more optional inputs are being used. RWORK a real working array (double precision).\n The length of RWORK must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LENWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENWM  = 3*MB*MB*NB + 2.\n          (See MF description for the definition of METH.)\n Thus if MAXORD has its default value and NEQ is constant,\n this length is\n             22 + 16*NEQ + 3*MB*MB*NB     for MF = 11 or 12,\n             22 + 9*NEQ + 3*MB*MB*NB      for MF = 21 or 22.\n```text\n The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs.\n\n The following word in RWORK is a conditional input:\n```text\n            RWORK(1) = TCRIT = critical value of t which the solver\n                       is not to overshoot.  Required if ITASK is\n                       4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least\n 20 + NEQ .  The first few words of IWORK are used for\n additional and optional inputs and optional outputs. The following 2 words in IWORK are additional required\n inputs to DLSOIBT:\n            IWORK(1) = MB = block size\n            IWORK(2) = NB = number of blocks in the main diagonal\n These must satisfy  MB .ge. 1, NB .ge. 4, and MB*NB = NEQ. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSOIBT\n for the same problem, except possibly for the additional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSOIBT between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF the method flag.  used only for input.  The legal values of\n MF are 11, 12, 21, and 22. MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFS). The BDF method is strongly preferred for stiff\n problems, while the Adams method is preferred when the\n problem is not stiff.  If the matrix A(t,y) is\n nonsingular, stiffness here can be taken to mean that of\n the explicit ODE system dy/dt = A-inverse * g.  If A is\n singular, the concept of stiffness is not well defined. If you do not know whether the problem is stiff, we\n recommend using METH = 2.  If it is stiff, the advantage\n of METH = 2 over METH = 1 will be great, while if it is\n not stiff, the advantage of METH = 1 will be slight.\n If maximum efficiency is important, some experimentation\n with METH may be necessary. MITER indicates the corrector iteration method: MITER description 1 means chord iteration with a user-supplied block-tridiagonal Jacobian. 2 means chord iteration with an internally generated (difference quotient) block- tridiagonal Jacobian approximation, using 3*MB+1 extra calls to RES per dr/dy evaluation. If MITER = 1, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC. For MITER = 2, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSOIBT, the variables listed\n below are quantities related to the performance of DLSOIBT\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSOIBT, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NRE IWORK(12) the number of residual evaluations (RES calls) for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (each involving an evaluation of a and dr/dy) for the problem so far.  This equals the number of calls to ADDA and (if MITER = 1) to JAC, and the number of matrix LU decompositions. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a return from DLSOIBT with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSOIBT.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSOIBT, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSOIBT. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSOIBT (see Part 3 below). RSAV must be a real array of length 218 or more, and ISAV must be an integer array of length 37 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCOM is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSOIBT. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSOIBT. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the t last returned by DLSOIBT).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(t), is already provided\n by DLSOIBT directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t).\n IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSOIBT is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSOIBT call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSOIBT call for that problem.  To save and restore the values\n , use Subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSOIBT package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) where NEQ, ITOL, RTOL, and ATOL are as in the DLSOIBT call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSOIBT in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W) where: N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSOIBT.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n  - substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n  - ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. Pedigree: Reference:\n     Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing,  R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64.\n This is based on the the 18 November 2003 version of ODEPACK Authors:       Alan C. Hindmarsh and Jeffrey F. Painter\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Charles S. Kenney\n formerly at:   Naval Weapons Center\n                China Lake, CA 93555 Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Ydoti real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: Mf Calls proc~~dlsoibt~2~~CallsGraph proc~dlsoibt~2 dlsoibt proc~dewset~2 dewset proc~dlsoibt~2->proc~dewset~2 proc~dstodi dstodi proc~dlsoibt~2->proc~dstodi proc~xerrwd~2 xerrwd proc~dlsoibt~2->proc~xerrwd~2 proc~dvnorm~2 dvnorm proc~dlsoibt~2->proc~dvnorm~2 proc~daigbt~2 daigbt proc~dlsoibt~2->proc~daigbt~2 proc~dumach~2 dumach proc~dlsoibt~2->proc~dumach~2 proc~dintdy~2 dintdy proc~dlsoibt~2->proc~dintdy~2 proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dvnorm dvnorm proc~dstodi->proc~dvnorm proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dsolbt~2 dsolbt proc~daigbt~2->proc~dsolbt~2 proc~ddecbt~2 ddecbt proc~daigbt~2->proc~ddecbt~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dintdy~2->proc~xerrwd~2 proc~dgesl~2 dgesl proc~dsolbt~2->proc~dgesl~2 proc~ddot~2 ddot proc~dsolbt~2->proc~ddot~2 proc~ddecbt~2->proc~dgesl~2 proc~ddecbt~2->proc~ddot~2 proc~dgefa~2 dgefa proc~ddecbt~2->proc~dgefa~2 proc~dgesl~2->proc~ddot~2 proc~daxpy~2 daxpy proc~dgesl~2->proc~daxpy~2 proc~dgefa~2->proc~daxpy~2 proc~dscal~2 dscal proc~dgefa~2->proc~dscal~2 proc~idamax~2 idamax proc~dgefa~2->proc~idamax~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big ewti h0 hmax hmx i i1 i2 ier iflag ihit imxer ires kgo leniw lenrw lenwm lp lyd0 mb mord msg mxhnl0 mxstp0 nb rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsoibt Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: ires integer, public :: kgo integer, public :: leniw integer, public :: lenrw integer, public :: lenwm integer, public :: lp integer, public :: lyd0 integer, public :: mb integer, public, dimension(2), save :: mord character(len=60), public :: msg integer, public, save :: mxhnl0 integer, public, save :: mxstp0 integer, public :: nb real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsoibt ( res , adda , jac , Neq , Y , Ydoti , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , Mf ) external adda external jac external res real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y , Ydoti real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , ier , iflag , imxer , ires , kgo , leniw , lenrw , lenwm , lp , lyd0 , mb , nb logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following internal Common block contains !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSOIBT, DINTDY, DSTODI, !  DPJIBT, and DSLSBT. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 0 or 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 0 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSOIBT- ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1400 ! msg = 'DLSOIBT- Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSOIBT- ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( Istate <= 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSOIBT- ISTATE.gt.1 but DLSOIBT not initialized. ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 0 or 1) !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, MB, and NB. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSOIBT- NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( Istate > 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSOIBT- ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1400 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSOIBT- ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSOIBT- IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 900 if ( dls1 % miter < 1 . or . dls1 % miter > 2 ) goto 900 mb = Iwork ( 1 ) nb = Iwork ( 2 ) if ( mb < 1 . or . mb > dls1 % n ) goto 1000 if ( nb < 4 ) then msg = 'DLSOIBT- NB (=I1) .lt. 4 illegal.       ' call xerrwd ( msg , 40 , 10 , 0 , 1 , nb , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( mb * nb /= dls1 % n ) goto 1000 !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSOIBT- MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSOIBT- MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSOIBT- MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSOIBT- TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1400 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSOIBT- HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1400 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSOIBT- HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1400 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted YH, WM, EWT, SAVR, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate <= 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh lenwm = 3 * mb * mb * nb + 2 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSOIBT- RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1400 elseif ( leniw > Liw ) then msg = 'DLSOIBT- IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1400 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSOIBT- RTOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1400 elseif ( atoli < 0.0D0 ) then msg = 'DLSOIBT- ATOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1400 endif enddo if ( Istate <= 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 0 or 1). !  It contains all remaining initializations, the call to DAIGBT !  (if ISTATE = 1), and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1200 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nfe = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Compute initial dy/dt, if necessary, and load it and initial Y into YH lyd0 = dls1 % lyh + dls1 % nyh lp = dls1 % lwm + 1 if ( Istate == 1 ) then !  Initial dy/dt was supplied.  Load into YH (LYD0 points to YH(*,2).). - do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) Rwork ( i + lyd0 - 1 ) = Ydoti ( i ) enddo else !  DLSOIBT must compute initial dy/dt (LYD0 points to YH(*,2)). --------- call daigbt ( res , adda , Neq , T , Y , Rwork ( lyd0 ), mb , nb , Rwork ( lp ), Iwork ( 21 ), ier ) dls1 % nfe = dls1 % nfe + 1 if ( ier < 0 ) then !  DAIGBT failed because a diagonal block of A matrix was singular. ----- ier = - ier msg = 'DLSOIBT- Attempt to initialize dy/dt failed:  Matrix A has a' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      singular diagonal block, block no. = (I1)   ' call xerrwd ( msg , 50 , 207 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return elseif ( ier > 0 ) then !  DAIGBT failed because RES set IRES to 2 or 3. ------------------------ msg = 'DLSOIBT- Attempt to initialize dy/dt failed       ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      because residual routine set its error flag ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to IRES = (I1)' call xerrwd ( msg , 20 , 208 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return else do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo endif endif !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSOIBT- EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1400 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( YDOT(i)/ywt(i) )**2  ) !                                        1 !  where   w0      = MAX ( ABS(T), ABS(TOUT) ), !          YDOT(i) = i-th component of initial value of dy/dt, !          ywt(i)  = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSOIBT- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1400 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lyd0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = h0 * Rwork ( i + lyd0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODI. ------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into YDOTI.--------- do i = 1 , dls1 % n Ydoti ( i ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif !  Reload WM(1) = RWORK(lWM), since lWM may have changed. --------------- Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSOIBT- ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1400 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1200 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODI. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSOIBT- At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSOIBT- At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 700 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSOIBT- Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSOIBT- Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODI(NEQ,Y,YH,NYH,YH1,EWT,SAVF,SAVR,ACOR,WM,IWM,RES, !                  ADDA,JAC,DPJIBT,DSLSBT) !  Note: SAVF in DSTODI occupies the same space as YDOTI in DLSOIBT. ! ----------------------------------------------------------------------- call dstodi ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Ydoti , Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), res , adda , jac , dpjibt , dslsbt ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSOIBT- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = 'error test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSOIBT- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) case ( 5 ) !  IRES = 3 returned by RES, despite retries by DSTODI.------------------ msg = 'DLSOIBT- At T (=R1) residual routine returned     ' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error IRES = 3 repeatedly.        ' call xerrwd ( msg , 40 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 700 case default ! !  KGO = 1:success; 2:error test failure; 3:convergence failure; !        4:RES ordered return; 5:RES returned error. ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  see if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSOIBT- At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1400 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSOIBT- At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 700 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSOIBT. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 if ( dls1 % kflag ==- 3 ) Istate = 3 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Compute residual if relevant. ---------------------------------------- 600 continue lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + lyd0 - 1 ) / dls1 % h Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo ires = 1 call res ( Neq , dls1 % tn , Y , Rwork ( dls1 % lsavf ), Ydoti , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then msg = 'DLSOIBT- Residual routine set its flag IRES       ' call xerrwd ( msg , 50 , 210 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to (I1) when called for final output.       ' call xerrwd ( msg , 50 , 210 , 0 , 1 , ires , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 800 !  Set Y vector, T, and optional outputs. ------------------------------- 700 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo 800 continue T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return 900 continue msg = 'DLSOIBT- MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 1000 continue msg = 'DLSOIBT- MB (=I1) or NB (=I2) illegal.  ' call xerrwd ( msg , 40 , 9 , 0 , 2 , mb , nb , 0 , 0.0D0 , 0.0D0 ) goto 1400 1100 continue msg = 'DLSOIBT- ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1400 1200 continue msg = 'DLSOIBT- ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1400 1300 continue msg = 'DLSOIBT- Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1400 continue Istate = - 3 return 99999 continue end subroutine dlsoibt","tags":"","loc":"proc/dlsoibt~2.html"},{"title":"dlsode – odepack","text":"subroutine dlsode(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) Synopsis DLSODE solves the initial-value problem for stiff or\n  nonstiff systems of first-order ODE’s, dy/dt = f(t,y),   or, in component form,\n   dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(N)),  i=1,...,N. NOTE : The “Usage” and “Arguments” sections treat only a subset of\n  available options, in condensed fashion.  The options\n  covered and the information supplied will support most\n  standard uses of DLSODE. For more sophisticated uses, full details on all options are\n  given in the concluding section, headed “Long Description.”\n  A synopsis of the DLSODE Long Description is provided at the\n  beginning of that section; general topics covered are: Elements of the call sequence; optional input and output Optional supplemental routines in the DLSODE package internal COMMON block Usage Communication between the user and the DLSODE package, for normal\n  situations, is summarized here.  This summary describes a subset\n  of the available options.  See “Long Description” for complete\n  details, including optional communication, nonstandard options,\n  and instructions for special situations. A sample program is given in the “Examples” section. Refer to the argument descriptions for the definitions of the\n  quantities that appear in the following sample declarations. For MF = 10, PARAMETER ( LRW = 20 + 16 * NEQ , LIW = 20 ) For MF = 21 or 22, PARAMETER ( LRW = 22 + 9 * NEQ + NEQ ** 2 , LIW = 20 + NEQ ) For MF = 24 or 25, PARAMETER ( LRW = 22 + 10 * NEQ + ( 2 * ML + MU ) * NEQ , & LIW = 20 + NEQ ) EXTERNAL F , JAC INTEGER NEQ , ITOL , ITASK , ISTATE , IOPT , LRW , IWORK ( LIW ), & LIW , MF DOUBLE PRECISION Y ( NEQ ), T , TOUT , RTOL , ATOL ( ntol ), RWORK ( LRW ) CALL DLSODE ( F , NEQ , Y , T , TOUT , ITOL , RTOL , ATOL , ITASK , & ISTATE , IOPT , RWORK , LRW , IWORK , LIW , JAC , MF ) Arguments F (external) ; Name of subroutine for right-hand-side vector f.\n This name must be declared EXTERNAL in calling\n program.  The form of F must be: SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) The inputs are NEQ, T, Y.  F is to set YDOT(i) = f(i,T,Y(1),Y(2),...,Y(NEQ)), i = 1, ..., NEQ . NEQ (intent IN) Number of first-order ODE’s. Y (intent INOUT) Array of values of the y(t) vector, of length NEQ. Input:  For the first call, Y should contain the\n         values of y(t) at t = T. (Y is an input\n         variable only if ISTATE = 1.) Output: On return, Y will contain the values at the\n         new t-value. T (intent INOUT) Value of the independent variable.  On return it\n will be the current value of t (normally TOUT). TOUT  (intent IN) Next point where output is desired (.NE. T). ITOL  (intent IN) 1 or 2 according as ATOL (below) is a scalar or\n an array. RTOL  (intent IN) Relative tolerance parameter (scalar). ATOL  (intent IN) Absolute tolerance parameter (scalar or array). If ITOL = 1, ATOL need not be dimensioned.\n    If ITOL = 2, ATOL must be dimensioned at least NEQ. The estimated local error in Y(i) will be controlled\n so as to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n    EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each\n component, either the absolute error is less than\n ATOL (or ATOL(i)), or the relative error is less\n than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative\n error control.  Caution:  Actual (global) errors may\n exceed these local tolerances, so choose them\n conservatively. ITASK (intent IN) Flag indicating the task DLSODE is to perform.\n Use ITASK = 1 for normal computation of output\n values of y at t = TOUT. ISTATE (intent INOUT) Index used for input and output to specify the state\n of the calculation. Input: value description 1 This is the first call for a problem. 2 This is a subsequent call. Output: value description 1 Nothing was done, because TOUT was equal to T. 2 DLSODE was successful (otherwise, negative). Note that ISTATE need not be modified after a successful return. -1 Excess work done on this call (perhaps wrong MF). -2 Excess accuracy requested (tolerances too small). -3 Illegal input detected (see printed message). -4 Repeated error test failures (check all inputs). -5 Repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of MF or tolerances). -6 Error weight became zero during problem (solution component i vanished, and ATOL or ATOL(i) = 0.). IOPT (intent IN) Flag indicating whether optional inputs are used: value description 0 No. 1 Yes.  (See “Optional inputs” under “Long Description,” Part 1.) RWORK (WORK) Real work array of length at least: 20 + 16*NEQ                    for MF = 10,\n       22 +  9*NEQ + NEQ**2           for MF = 21 or 22,\n       22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. LRW (intent IN) Declared length of RWORK (in user’s DIMENSION\n statement). IWORK (WORK) Integer work array of length at least: 20        for MF = 10,\n       20 + NEQ  for MF = 21, 22, 24, or 25. If MF = 24 or 25, input in IWORK(1),IWORK(2) the\n lower and upper Jacobian half-bandwidths ML,MU. On return, IWORK contains information that may be\n of interest to the user: Name Location Meaning NST IWORK(11) Number of steps taken for the problem so far. NFE IWORK(12) Number of f evaluations for the problem so far. NJE IWORK(13) Number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) Method order last used (successfully). LENRW IWORK(17) Length of RWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) Length of IWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. LIW (intent IN) Declared length of IWORK (in user’s DIMENSION\n statement). JAC (external) Name of subroutine for Jacobian matrix (MF =\n 21 or 24).  If used, this name must be declared\n EXTERNAL in calling program.  If not used, pass a\n dummy name.  The form of JAC must be: SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) INTEGER NEQ , ML , MU , NROWPD DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) See item c, under “Description” below for more\n information about JAC. MF (intent IN) Method flag.  Standard values are: value definition 10 Nonstiff (Adams) method, no Jacobian used. 21 Stiff (BDF) method, user-supplied full Jacobian. 22 Stiff method, internally generated full Jacobian. 24 Stiff method, user-supplied banded Jacobian. 25 Stiff method, internally generated banded Jacobian. Long Description DLSODE solves the initial value problem for stiff or nonstiff\n   systems of first-order ODE’s, dy/dt = f(t,y) , or, in component form, dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ))\n                                                  (i = 1, ..., NEQ) . DLSODE is a package based on the GEAR and GEARB packages, and on\n   the October 23, 1978, version of the tentative ODEPACK user\n   interface standard, with minor modifications. The steps in solving such a problem are as follows. (a) First write a subroutine of the form SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with\n   f(i). (b) Next determine (or guess) whether or not the problem is stiff.\n   Stiffness occurs when the Jacobian matrix df/dy has an\n   eigenvalue whose real part is negative and large in magnitude\n   compared to the reciprocal of the t span of interest.  If the\n   problem is nonstiff, use method flag MF = 10.  If it is stiff,\n   there are four standard choices for MF, and DLSODE requires the\n   Jacobian matrix in some form.  This matrix is regarded either\n   as full (MF = 21 or 22), or banded (MF = 24 or 25).  In the\n   banded case, DLSODE requires two half-bandwidth parameters ML\n   and MU. These are, respectively, the widths of the lower and\n   upper parts of the band, excluding the main diagonal.  Thus the\n   band consists of the locations (i,j) with i - ML <= j <= i + MU , and the full bandwidth is ML + MU + 1 . (c) If the problem is stiff, you are encouraged to supply the\n   Jacobian directly (MF = 21 or 24), but if this is not feasible,\n   DLSODE will compute it internally by difference quotients (MF =\n   22 or 25).  If you are supplying the Jacobian, write a\n   subroutine of the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) INTEGER NEQ , ML , MU , NRWOPD DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) which provides df/dy by loading PD as follows:\n     - For a full Jacobian (MF = 21), load PD(i,j) with df(i)/dy(j),\n       the partial derivative of f(i) with respect to y(j).  (Ignore\n       the ML and MU arguments in this case.)\n     - For a banded Jacobian (MF = 24), load PD(i-j+MU+1,j) with\n          df(i)/dy(j); i.e., load the diagonal lines of df/dy into the\n       rows of PD from the top down.\n     - In either case, only nonzero elements need be loaded. (d) Write a main program that calls subroutine DLSODE once for each\n   point at which answers are desired.  This should also provide\n   for possible use of logical unit 6 for output of error messages\n   by DLSODE. Before the first call to DLSODE, set ISTATE = 1, set Y and T to\n   the initial values, and set TOUT to the first output point.  To\n   continue the integration after a successful return, simply\n   reset TOUT and call DLSODE again.  No other parameters need be\n   reset. Examples The following is a simple example problem, with the coding needed\n   for its solution by DLSODE. The problem is from chemical kinetics,\n   and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.E4*y2*y3\n        dy2/dt = .04*y1 - 1.E4*y2*y3 - 3.E7*y2**2\n        dy3/dt = 3.E7*y2**2 on the interval from t = 0.0 to t = 4.E10, with initial conditions\n   y1 = 1.0, y2 = y3 = 0. The problem is stiff. The following coding solves this problem with DLSODE, using\n   MF = 21 and printing results at t = .4, 4., …, 4.E10.  It uses\n   ITOL = 2 and ATOL much smaller for y2 than for y1 or y3 because y2\n   has much smaller values.  At the end of the run, statistical\n   quantities of interest are printed. program dlsode_ex use m_odepack implicit none external fex external jex integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 58 ) :: rwork neq = 3 y ( 1 ) = 1.D0 y ( 2 ) = 0.D0 y ( 3 ) = 0.D0 t = 0.D0 tout = . 4 D0 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 58 liw = 23 mf = 21 do iout = 1 , 12 call dlsode ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , iopt , & & rwork , lrw , iwork , liw , jex , mf ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0.D0 endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99030 format ( / ' No. steps =' , i4 , ',  No. f-s =' , i4 , ',  No. J-s =' , i4 ) end program dlsode_ex subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 D0 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex subroutine jex ( Neq , T , Y , Ml , Mu , Pd , Nrpd ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y integer :: Ml integer :: Mu real ( kind = dp ), intent ( inout ), dimension ( Nrpd , 3 ) :: Pd integer , intent ( in ) :: Nrpd Pd ( 1 , 1 ) = - . 04 D0 Pd ( 1 , 2 ) = 1.D4 * Y ( 3 ) Pd ( 1 , 3 ) = 1.D4 * Y ( 2 ) Pd ( 2 , 1 ) = . 04 D0 Pd ( 2 , 3 ) = - Pd ( 1 , 3 ) Pd ( 3 , 2 ) = 6.D7 * Y ( 2 ) Pd ( 2 , 2 ) = - Pd ( 1 , 2 ) - Pd ( 3 , 2 ) end subroutine jex The output from this program (on a Cray-1 in single precision)\n   is as follows. At t =  4.0000e-01   y =  9.851726e-01  3.386406e-05  1.479357e-02\n     At t =  4.0000e+00   y =  9.055142e-01  2.240418e-05  9.446344e-02\n     At t =  4.0000e+01   y =  7.158050e-01  9.184616e-06  2.841858e-01\n     At t =  4.0000e+02   y =  4.504846e-01  3.222434e-06  5.495122e-01\n     At t =  4.0000e+03   y =  1.831701e-01  8.940379e-07  8.168290e-01\n     At t =  4.0000e+04   y =  3.897016e-02  1.621193e-07  9.610297e-01\n     At t =  4.0000e+05   y =  4.935213e-03  1.983756e-08  9.950648e-01\n     At t =  4.0000e+06   y =  5.159269e-04  2.064759e-09  9.994841e-01\n     At t =  4.0000e+07   y =  5.306413e-05  2.122677e-10  9.999469e-01\n     At t =  4.0000e+08   y =  5.494530e-06  2.197825e-11  9.999945e-01\n     At t =  4.0000e+09   y =  5.129458e-07  2.051784e-12  9.999995e-01\n     At t =  4.0000e+10   y = -7.170603e-08 -2.868241e-13  1.000000e+00\n\n     No. steps = 330,  No. f-s = 405,  No. J-s = 69 Accuracy: The accuracy of the solution depends on the choice of tolerances\n   RTOL and ATOL.  Actual (global) errors may exceed these local\n   tolerances, so choose them conservatively. Cautions: The work arrays should not be altered between calls to DLSODE for\n   the same problem, except possibly for the conditional and optional\n   inputs. Portability: Since NEQ is dimensioned inside DLSODE, some compilers may object\n   to a call to DLSODE with NEQ a scalar variable.  In this event,\n   use DIMENSION NEQ(1).  Similar remarks apply to RTOL and ATOL. Note to Cray users:\n   For maximum efficiency, use the CFT77 compiler.  Appropriate\n   compiler optimization directives have been inserted for CFT77. Reference: Alan C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE\n   Solvers,” in Scientific Computing, R. S. Stepleman, et al., Eds.\n   (North-Holland, Amsterdam, 1983), pp. 55-64. Long Description: The following complete description of the user interface to\n   DLSODE consists of four parts: The call sequence to subroutine DLSODE, which is a driver\n       routine for the solver.  This includes descriptions of both\n       the call sequence arguments and user-supplied routines.\n       Following these descriptions is a description of optional\n       inputs available through the call sequence, and then a\n       description of optional outputs in the work arrays. Descriptions of other routines in the DLSODE package that may\n       be (optionally) called by the user.  These provide the ability\n       to alter error message handling, save and restore the internal\n       COMMON, and obtain specified derivatives of the solution y(t). Descriptions of COMMON block to be declared in overlay or\n       similar environments, or to be saved when doing an interrupt\n       of the problem and continued solution later. Description of two routines in the DLSODE package, either of\n       which the user may replace with his own version, if desired.\n       These relate to the measurement of errors. Part 1.  Call Sequence Arguments The call sequence parameters used for input only are F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF, and those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n  optional inputs and optional outputs.  (The term output here\n  refers to the return from subroutine DLSODE to the user’s calling\n  program.) The legality of input parameters will be thoroughly checked on the\n  initial call for the problem, but not checked thereafter unless a\n  change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F name of the user-supplied subroutine defining the ODE\n  system.  The system must be put in the first-order form\n  dy/dt = f(t,y), where f is a vector-valued function of\n  the scalar t and the vector y. Subroutine F is to compute\n  the function f. It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT =\n  f(T,Y) is output.  Y and YDOT are arrays of length NEQ.\n  Subroutine F should not alter Y(1),…,Y(NEQ).  F must be\n  declared EXTERNAL in the calling program. Subroutine F may access user-defined quantities in\n  NEQ(2),… and/or in Y(NEQ(1)+1),…, if NEQ is an array\n  (dimensioned in F) and/or Y has length exceeding NEQ(1).\n  See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n  externally to DLSODE, an extra call to F should be made\n  for this purpose, for consistent and accurate results.\n  If only the derivative dy/dt is needed, use DINTDY\n  instead. NEQ size of the ODE system (number of first-order\n  ordinary differential equations).  Used only for input.\n  NEQ may be decreased, but not increased, during the\n  problem.  If NEQ is decreased (with ISTATE = 3 on input),\n  the remaining components of Y should be left undisturbed,\n  if these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred\n  to as a scalar in this user interface description.\n  However, NEQ may be an array, with NEQ(1) set to the\n  system size.  (The DLSODE package accesses only NEQ(1).)\n  In either case, this parameter is passed as the NEQ\n  argument in all calls to F and JAC.  Hence, if it is an\n  array, locations NEQ(2),… may be used to store other\n  integer data and pass it to F and/or JAC.  Subroutines\n  F and/or JAC must include NEQ in a DIMENSION statement\n  in that case. Y real array for the vector of dependent variables, of\n  length NEQ or more.  Used for both input and output on\n  the first call (ISTATE = 1), and only for output on\n  other calls.  On the first call, Y must contain the\n  vector of initial values.  On output, Y contains the\n  computed solution vector, evaluated at T. If desired,\n  the Y array may be used for other purposes between\n  calls to the solver. This array is passed as the Y argument in all calls to F\n  and JAC.  Hence its length may exceed NEQ, and locations\n  Y(NEQ+1),… may be used to store other real data and\n  pass it to F and/or JAC.  (The DLSODE package accesses\n  only Y(1),…,Y(NEQ).) T independent variable.  On input, T is used only on\n  the first call, as the initial point of the integration.\n  On output, after each call, T is the value at which a\n  computed solution Y is evaluated (usually the same as\n  TOUT).  On an error return, T is the farthest point\n  reached. TOUT next value of T at which a computed solution is\n  desired.  Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n  to T for one call, then should not equal T for the next\n  call.  For the initial T, an input value of TOUT .NE. T\n  is used in order to determine the direction of the\n  integration (i.e., the algebraic sign of the step sizes)\n  and the rough scale of the problem.  Integration in\n  either direction (forward or backward in T) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored\n  after the first call (i.e., the first call with\n  TOUT .NE. T).  Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n  monotone, but a value of TOUT which backs up is limited\n  to the current internal T interval, whose endpoints are\n  TCUR - HU and TCUR.  (See “Optional Outputs” below for\n  TCUR and HU.) ITOL indicator for the type of error control.  See\n  description below under ATOL.  Used only for input. RTOL relative error tolerance parameter, either a scalar or\n  an array of length NEQ.  See description below under\n  ATOL.  Input only. ATOL absolute error tolerance parameter, either a scalar or\n  an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine the\n  error control performed by the solver.  The solver will\n  control the vector e = (e(i)) of estimated local errors\n  in Y, according to an inequality of the form rms-norm of ( e(i)/EWT(i) ) <= 1, where EWT(i) = RTOL(i)\\*ABS(Y(i)) + ATOL(i), and the rms-norm (root-mean-square norm) here is rms-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ). Here EWT = (EWT(i)) is a vector of weights which must\n  always be positive, and the values of RTOL and ATOL\n  should all be nonnegative.  The following table gives the\n  types (scalar/array) of RTOL and ATOL, and the\n  corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n  be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n  fixed throughout the problem) is suitable, more general\n  error controls can be obtained by substituting\n  user-supplied routines for the setting of EWT and/or for\n  the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n  run on the same problem with smaller tolerances, then all\n  components of RTOL and ATOL (i.e., of EWT) should be\n  scaled down uniformly. ITASK index specifying the task to be performed.  Input\n  only.  ITASK has the following values and meanings: value description 1 Normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 Take one step only and return. 3 Stop at the first internal mesh point at or beyond t = TOUT and return. 4 Normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT.  TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 Take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n  (within roundoff), it will return T = TCRIT (exactly) to\n  indicate this (unless ITASK = 4 and TOUT comes before\n  TCRIT, in which case answers at T = TOUT are returned\n  first). ISTATE index used for input and output to specify the state\n  of the calculation. On input, the values of ISTATE are as follows: value description 1 This is the first call for the problem (initializations will be done).  See “Note” below. 2 This is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK.  (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 This is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, ML, MU, and any of the optional inputs except H0. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted as\n  a first call here, as no initialization or checking of\n  input is done.  (Such a call is sometimes useful for the\n  purpose of outputting the initial conditions.)  Thus the\n  first call for which TOUT .NE. T requires ISTATE = 1 on\n  input. On output, ISTATE has the following values and meanings: value description 1 Nothing was done, as TOUT was equal to T with ISTATE = 1 on input. 2 The integration was performed successfully. -1 An excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T. (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value >1 and call again (the excess work step counter will be reset to 0).  In addition, the user may increase MXSTEP to avoid this error return; see “Optional Inputs” below. -2 Too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T. To continue, the tolerance parameters must be reset, and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose.  (Note:  If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 Illegal input was detected, before taking any integration steps.  See written message for details. (Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop.) -4 There were repeated error-test failures on one attempted step, before completing the requested task, but the integration was successful as far as T.  The problem may have a singularity, or the input may be inappropriate. -5 There were repeated convergence-test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 EWT(i) became zero for some i during the integration. Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished.  The integration was successful as far as T. Note:  Since the normal output value of ISTATE is 2, it\n  does not need to be reset for normal continuation.  Also,\n  since a negative input value of ISTATE will be regarded\n  as illegal, a negative output value requires the user to\n  change it, and possibly other inputs, before calling the\n  solver again. IOPT integer flag to specify whether any optional inputs\n  are being used on this call.  Input only.  The optional\n  inputs are listed under a separate heading below.\n              0   No optional inputs are being used.  Default values\n                  will be used in all cases.\n              1   One or more optional inputs are being used. RWORK real working array (double precision).  The length of\n  RWORK must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LWM where NYH = the initial value of NEQ,\n       MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                smaller value is given as an optional input),\n          LWM = 0           if MITER = 0,\n          LWM = NEQ**2 + 2  if MITER = 1 or 2,\n          LWM = NEQ + 2     if MITER = 3, and\n          LWM = (2*ML + MU + 1)*NEQ + 2\n                                   if MITER = 4 or 5.\n          (See the MF description below for METH and MITER.) Thus if MAXORD has its default value and NEQ is constant,\n  this length is: 20 + 16*NEQ                    for MF = 10,\n              22 + 16*NEQ + NEQ**2           for MF = 11 or 12,\n              22 + 17*NEQ                    for MF = 13,\n              22 + 17*NEQ + (2*ML + MU)*NEQ  for MF = 14 or 15,\n              20 +  9*NEQ                    for MF = 20,\n              22 +  9*NEQ + NEQ**2           for MF = 21 or 22,\n              22 + 10*NEQ                    for MF = 23,\n              22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. The first 20 words of RWORK are reserved for conditional\n  and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT, the critical value of t which the\n  solver is not to overshoot.  Required if ITASK\n  is 4 or 5, and ignored otherwise.  See ITASK. LRW length of the array RWORK, as declared by the user.\n  (This will be checked by the solver.) IWORK integer work array.  Its length must be at least\n  20       if MITER = 0 or 3 (MF = 10, 13, 20, 23), or\n  20 + NEQ otherwise (MF = 11, 12, 14, 15, 21, 22, 24, 25).\n  (See the MF description below for MITER.)  The first few\n  words of IWORK are used for conditional and optional\n  inputs and optional outputs. The following two words in IWORK are conditional inputs:\n          IWORK(1) = ML   These are the lower and upper half-\n          IWORK(2) = MU   bandwidths, respectively, of the banded\n                          Jacobian, excluding the main diagonal. The band is defined by the matrix locations\n  (i,j) with i - ML <= j <= i + MU. ML and MU\n  must satisfy 0 <= ML,MU <= NEQ - 1. These are\n  required if MITER is 4 or 5, and ignored\n  otherwise.  ML and MU may in fact be the band\n  parameters for a matrix to which df/dy is only\n  approximately equal. LIW The length of the array IWORK, as declared by the user.\n  (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODE\n  for the same problem, except possibly for the conditional and\n  optional inputs, and except for the last 3*NEQ words of RWORK.\n  The latter space is used for internal scratch space, and so is\n  available for use by the user outside DLSODE between calls, if\n  desired (but not for use by F or JAC). JAC The name of the user-supplied routine (MITER = 1 or 4) to\n  compute the Jacobian matrix, df/dy, as a function of the\n  scalar t and the vector y.  (See the MF description below\n  for MITER.)  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the\n  array PD is to be loaded with partial derivatives\n  (elements of the Jacobian matrix) on output.  PD must be\n  given a first dimension of NROWPD.  T and Y have the same\n  meaning as in subroutine F. In the full matrix case (MITER = 1), ML and MU are\n  ignored, and the Jacobian is to be loaded into PD in\n  columnwise manner, with df(i)/dy(j) loaded into PD(i,j). In the band matrix case (MITER = 4), the elements within\n  the band are to be loaded into PD in columnwise manner,\n  with diagonal lines of df/dy loaded into the rows of PD.\n  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).  ML\n  and MU are the half-bandwidth parameters (see IWORK).\n  The locations in PD in the two triangular areas which\n  correspond to nonexistent matrix elements can be ignored\n  or loaded arbitrarily, as they are overwritten by DLSODE. JAC need not provide df/dy exactly. A crude approximation\n  (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver, so\n  that only the nonzero elements need be loaded by JAC.\n  Each call to JAC is preceded by a call to F with the same\n  arguments NEQ, T, and Y. Thus to gain some efficiency,\n  intermediate quantities shared by both calculations may\n  be saved in a user COMMON block by F and not recomputed\n  by JAC, if desired.  Also, JAC may alter the Y array, if\n  desired.  JAC must be declared EXTERNAL in the calling\n  program. Subroutine JAC may access user-defined quantities in\n  NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n  (dimensioned in JAC) and/or Y has length exceeding\n  NEQ(1).  See the descriptions of NEQ and Y above. MF The method flag.  Used only for input.  The legal values\n  of MF are 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24,\n  and 25.  MF has decimal digits METH and MITER: MF = 10*METH + MITER . METH indicates the basic linear multistep method: value description 1 Implicit Adams method. 2 Method based on backward differentiation formulas (BDF’s). MITER indicates the corrector iteration method: value description 0 Functional iteration (no Jacobian matrix is involved). 1 Chord iteration with a user-supplied full (NEQ by NEQ) Jacobian. 2 Chord iteration with an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 3 Chord iteration with an internally generated diagonal Jacobian approximation (using one extra call to F per df/dy evaluation). 4 Chord iteration with a user-supplied banded Jacobian. 5 Chord iteration with an internally generated banded Jacobian (using ML + MU + 1 extra calls to F per df/dy evaluation). If MITER = 1 or 4, the user must supply a subroutine JAC\n  (the name is arbitrary) as described above under JAC.\n  For other values of MITER, a dummy argument can be used. Optional Inputs The following is a list of the optional inputs provided for in the\n  call sequence.  (See also Part 2.)  For each such input variable,\n  this table lists its name as used in this documentation, its\n  location in the call sequence, its meaning, and the default value.\n  The use of any of these inputs requires IOPT = 1, and in that case\n  all of these inputs are examined.  A value of zero for any of\n  these optional inputs will cause the default value to be used.\n  Thus to use a subset of the optional inputs, simply preload\n  locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively,\n  and then set those of interest to nonzero values. Name Location Meaning and default value H0 RWORK(5) Step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) Maximum absolute step size allowed.  The default value is infinite. HMIN RWORK(7) Minimum absolute step size allowed.  The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) Maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. (See the MF description above for METH.)  If MAXORD exceeds the default value, it will be reduced to the default value.  If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) Maximum number of (internally defined) steps allowed during one call to the solver.  The default value is 500. MXHNIL IWORK(7) Maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size).  This must be positive to result in a nondefault value.  The default value is 10. Optional Outputs As optional additional output from DLSODE, the variables listed\n below are quantities related to the performance of DLSODE which\n are available to the user.  These are communicated by way of the\n work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined on\n any successful return from DLSODE, and on any return with ISTATE =\n -1, -2, -4, -5, or -6.  On an illegal input return (ISTATE = -3),\n they will be unchanged from their existing values (if any), except\n possibly for TOLSF, LENRW, and LENIW.  On any error return,\n outputs relevant to the error will be defined, as noted below. Name Location Meaning HU RWORK(11) Step size in t last used (successfully). HCUR RWORK(12) Step size to be attempted on the next step. TCUR RWORK(13) Current value of the independent variable which the solver has actually reached, i.e., the current internal mesh point in t. On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) Tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise). If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed.  (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) Number of steps taken for the problem so far. NFE IWORK(12) Number of F evaluations for the problem so far. NJE IWORK(13) Number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) Method order last used (successfully). NQCUR IWORK(15) Order to be attempted on the next step. IMXER IWORK(16) Index of the component of largest magnitude in the weighted local error vector ( e(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) Length of RWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) Length of IWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. The following two arrays are segments of the RWORK array which may\n  also be of interest to the user as optional outputs.  For each\n  array, the table below gives its internal name, its base address\n  in RWORK, and its description. Name Base address Description YH 21 The Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j + 1 of YH contains HCUR**j/factorial(j) times the jth derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 Array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in Y on the last step.  This is the vector e in the description of the error control.  It is defined only on successful return from DLSODE. Part 2.  Other Callable Routines The following are optional calls which the user may make to gain\n  additional capabilities in conjunction with DLSODE. Form of call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODE, if the default is not desired.  The default value of LUN is 6. This call may be made at any time and will take effect immediately. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODE.  MFLAG = 0 means do not print.  (Danger:  this risks losing valuable information.)  MFLAG = 1 means print (the default).  This call may be made at any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) Saves and restores the contents of the internal COMMON blocks used by DLSODE (see Part 3 below).  RSAV must be a real array of length 218 or more, and ISAV must be an integer array of length 37 or more.  JOB = 1 means save COMMON into RSAV/ISAV.  JOB = 2 means restore COMMON from same.  DSRCOM is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODE. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODE.  Detailed instructions follow. Detailed instructions for using DINTDY The form of the CALL is: CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) The input parameters are: value description T Value of independent variable where answers are desired (normally the same as the T last returned by DLSODE).  For valid results, T must lie between TCUR - HU and TCUR.  (See “Optional Outputs” above for TCUR and HU.) K Integer order of the derivative desired.  K must satisfy 0 <= K <= NQCUR, where NQCUR is the current order (see “Optional Outputs”).  The capability corresponding to K = 0, i.e., computing y(t), is already provided by DLSODE directly.  Since NQCUR >= 1, the first derivative dy/dt is always available with DINTDY. RWORK(21) The base address of the history array YH. NYH Column length of YH, equal to the initial value of NEQ. The output parameters are: value description DKY Real array of length NEQ containing the computed value of the Kth derivative of y(t). IFLAG Integer flag, returned as 0 if K and T were legal, -1 if K was illegal, and -2 if T was illegal. On an error return, a message is also written. Part 3.  Save and Restore Current State If the solution of a given problem by DLSODE is to be interrupted\n  and then later continued, as when restarting an interrupted run or\n  alternating between two or more problems, the user should save,\n  following the return from the last DLSODE call prior to the\n  interruption, the contents of the call sequence variables and the\n  internal state values, and later restore these values before the\n  next DLSODE call for that problem.   In addition, if XSETUN and/or\n  XSETF was called for non-default handling of error messages, then\n  these calls must be repeated.  To save and restore the current state\n  use subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines Below are descriptions of two routines in the DLSODE package which\n  relate to the measurement of errors.  Either routine can be\n  replaced by a user-supplied version, if desired.  However, since\n  such a replacement may have a major impact on performance, it\n  should be done only when absolutely necessary, and only with great\n  caution.  (Note:  The means by which the package version of a\n  routine is superseded by the user’s version may be system-\n  dependent.) DEWSET() The following subroutine is called just before each internal\n  integration step, and sets the array of error weights, EWT, as\n  described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODE call\n  sequence, YCUR contains the current dependent variable vector,\n  and EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n  (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n  in Y(i) to.  The EWT array returned by DEWSET is passed to the\n  DVNORM routine (see below), and also used by DLSODE in the\n  computation of the optional output IMXER, the diagonal Jacobian\n  approximation, and the increments for difference quotient\n  Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n  the current values of derivatives of y. Derivatives up to order NQ\n  are available from the history array YH, described above under\n  optional outputs.  In DEWSET, YH is identical to the YCUR array,\n  extended to NQ + 1 columns with a column length of NYH and scale\n  factors of H**j/factorial(j).  On the first call for the problem,\n  given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n  NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n  can be obtained by including in SEWSET the statements: DOUBLE PRECISION RLS\n       COMMON /DLS001/ RLS(218),ILS(37)\n       NQ = ILS(33)\n       NST = ILS(34)\n       H = RLS(212) Thus, for example, the current value of dy/dt can be obtained as\n  YCUR(NYH+i)/H (i=1,…,NEQ) (and the division by H is unnecessary\n  when NST = 0). DVNORM() DVNORM is a real function routine which computes the weighted\n  root-mean-square norm of a vector v: d = DVNORM (n, v, w)\n\n     where:\n     n = the length of the vector,\n     v = real array of length n containing the vector,\n     w = real array of length n containing weights,\n     d = SQRT( (1/n) * sum(v(i)*w(i))**2 ). DVNORM is called with n = NEQ and with w(i) = 1.0/EWT(i), where\n  EWT is as set by subroutine DEWSET. If the user supplies this function, it should return a nonnegative\n  value of DVNORM suitable for use in the error control in DLSODE.\n  None of the arguments should be altered by DVNORM.  For example, a\n  user-supplied DVNORM routine might: Substitute a max-norm of (v(i)*w(i)) for the rms-norm, or Ignore some components of v in the norm, with the effect of\n     suppressing the error control on those components of Y. Pedigree: DLSODE is derived from the Livermore Solver for Ordinary\n  Differential Equations package ODEPACK, AUTHOR Hindmarsh , Alan C ., ( LLNL ) Center for Applied Scientific Computing , L - 561 Lawrence Livermore National Laboratory Livermore , CA 94551 . Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf Calls proc~~dlsode~2~~CallsGraph proc~dlsode~2 dlsode proc~dewset~2 dewset proc~dlsode~2->proc~dewset~2 proc~xerrwd~2 xerrwd proc~dlsode~2->proc~xerrwd~2 proc~dvnorm~2 dvnorm proc~dlsode~2->proc~dvnorm~2 proc~dintdy~2 dintdy proc~dlsode~2->proc~dintdy~2 proc~dumach~2 dumach proc~dlsode~2->proc~dumach~2 proc~dstode dstode proc~dlsode~2->proc~dstode proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dintdy~2->proc~xerrwd~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dcfode dcfode proc~dstode->proc~dcfode proc~dvnorm dvnorm proc~dstode->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big ewti h0 hmax hmx i i1 i2 iflag ihit imxer kgo leniw lenrw lenwm lf0 ml mord msg mu mxhnl0 mxstp0 rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsode Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: kgo integer, public :: leniw integer, public :: lenrw integer, public :: lenwm integer, public :: lf0 integer, public :: ml integer, public, dimension(2), save :: mord character(len=80), public :: msg integer, public :: mu integer, public, save :: mxhnl0 integer, public, save :: mxstp0 real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsode ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Mf ) ! real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y external f external jac real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , kgo , leniw , lenrw , lenwm , lf0 , ml , mu logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( 2 ), save :: mord character ( 80 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! !   Declare all other variables. ! ----------------------------------------------------------------------- !  The following internal Common block contains !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODE, DINTDY, DSTODE, !  DPREPJ, and DSOLSY. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .GT. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- ! ! ### FIRST EXECUTABLE STATEMENT  DLSODE if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODE-  ISTATE (=I1) illegal ' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1100 msg = 'DLSODE-  Run aborted.. apparent infinite loop     ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODE-  ITASK (=I1) illegal  ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODE-  ISTATE .GT. 1 but DLSODE not initialized ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODE-  NEQ (=I1) .LT. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODE-  ISTATE = 3 and NEQ increased (I1 to I2)  ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODE-  ITOL (=I1) illegal   ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODE-  IOPT (=I1) illegal   ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 700 if ( dls1 % miter < 0 . or . dls1 % miter > 5 ) goto 700 if ( dls1 % miter > 3 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODE-  ML (=I1) illegal.. .LT.0 or .GE.NEQ (=I2)' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODE-  MU (=I1) illegal.. .LT.0 or .GE.NEQ (=I2)' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 endif endif !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODE-  MAXORD (=I1) .LT. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODE-  MXSTEP (=I1) .LT. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODE-  MXHNIL (=I1) .LT. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODE-  TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1100 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODE-  HMAX (=R1) .LT. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1100 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODE-  HMIN (=R1) .LT. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1100 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  YH, WM, EWT, SAVF, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate == 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh if ( dls1 % miter == 0 ) lenwm = 0 if ( dls1 % miter == 1 . or . dls1 % miter == 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( dls1 % miter == 3 ) lenwm = dls1 % n + 2 if ( dls1 % miter >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n if ( dls1 % miter == 0 . or . dls1 % miter == 3 ) leniw = 20 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODE-  RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( leniw > Liw ) then msg = 'DLSODE-  IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1100 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODE-  RTOL(I1) is R1 .LT. 0.0        ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1100 elseif ( atoli < 0.0D0 ) then msg = 'DLSODE-  ATOL(I1) is R1 .LT. 0.0        ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1100 endif enddo if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 900 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 if ( dls1 % miter > 0 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODE-  EWT(I1) is R1 .LE. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1100 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(I)) !  if this is positive, or MAX(ATOL(I)/ABS(Y(I))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * SUM ( f(i)/ywt(i) )**2  ) !                                        1 !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          f(i)   = i-th component of initial value of f, !          ywt(i) = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODE-  TOUT (=R1) too close to T(=R2) to start integration' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1100 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODE. ------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into SAVF. --------- do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif !  Reload WM(1) = RWORK(LWM), since LWM may have changed. --------------- if ( dls1 % miter > 0 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODE-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1100 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 900 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODE. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN.  The optional outputs !  are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODE-  At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(I) .LE. 0.0 for some I (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODE-  At T (=R1), EWT(I1) has become R2 .LE. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 600 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODE-  Warning..internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      (H = step size). Solver will continue anyway' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODE-  Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      It will not be issued again for this problem' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !   CALL DSTODE(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,f,JAC,DPREPJ,DSOLSY) ! ----------------------------------------------------------------------- call dstode ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), & & Iwork ( dls1 % liwm ), f , jac , dprepj , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODE-  At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODE-  At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODE-  At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1100 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODE-  At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  see TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 600 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODE. !  If ITASK .NE. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 600 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return 700 continue msg = 'DLSODE-  MF (=I1) illegal     ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 800 continue msg = 'DLSODE-  ITASK = 4 OR 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1100 900 continue msg = 'DLSODE-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1100 1000 continue msg = 'DLSODE-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1100 continue Istate = - 3 return 99999 continue end subroutine dlsode","tags":"","loc":"proc/dlsode~2.html"},{"title":"dlsodes – odepack","text":"subroutine dlsodes(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) Synopsis DLSODES solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). DLSODES is a variant of the DLSODE package, and is intended for\n problems in which the Jacobian matrix df/dy has an arbitrary\n sparse structure (when the problem is stiff). Summary of Usage. Communication between the user and the DLSODES package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). B. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, there are two standard\n choices for the method flag, MF = 121 and MF = 222.  In both cases,\n DLSODES requires the Jacobian matrix in some form, and it treats this\n matrix in general sparse form, with sparsity structure determined\n internally.  (For options where the user supplies the sparsity\n structure, see the full description of MF below.) C. If the problem is stiff, you are encouraged to supply the Jacobian\n directly (MF = 121), but if this is not feasible, DLSODES will\n compute it internally by difference quotients (MF = 222).\n If you are supplying the Jacobian, provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), IAN ( * ), JAN ( * ), PDJ ( * ) Here NEQ, T, Y, and J are input arguments, and the JAC routine is to\n load the array PDJ (of length NEQ) with the J-th column of df/dy.\n I.e., load PDJ(i) with df(i)/dy(J) for all relevant values of i.\n The arguments IAN and JAN should be ignored for normal situations.\n DLSODES will call the JAC routine with J = 1,2,…,NEQ.\n Only nonzero elements need be loaded.  Usually, a crude approximation\n to df/dy, possibly with fewer nonzero elements, will suffice. D. Write a main program which calls Subroutine DLSODES once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODES.  On the first call to DLSODES, supply arguments as follows: F name of subroutine for right-hand side vector f.\n This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable t. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n The estimated local error in Y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of Y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + 16*NEQ            for MF = 10,\n     20 + (2 + 1./LENRAT)*NNZ + (11 + 9./LENRAT)*NEQ\n                            for MF = 121 or 222, where: argument description NNZ the number of nonzero elements in the sparse Jacobian (if this is unknown, use an estimate), and LENRAT the real to integer wordlength ratio (usually 1 in single precision and 2 in double precision). In any case, the required size of RWORK cannot generally\n  be predicted in advance if MF = 121 or 222, and the value\n  above is a rough estimate of a crude lower bound.  Some\n  experimentation with this size may be necessary.\n  (When known, the correct required length is an optional\n  output, available in IWORK(17).) LRW declared length of RWORK (in user dimension). IWORK integer work array of length at least 30. LIW declared length of IWORK (in user dimension). JAC name of subroutine for Jacobian matrix (MF = 121).\n If used, this name must be declared External in calling\n program.  If not used, pass a dummy name. MF method flag.  Standard values are: value description 10 for nonstiff (Adams) method, no Jacobian used 121 for stiff (BDF) method, user-supplied sparse Jacobian 222 for stiff method, internally generated sparse Jacobian Note that the main program must declare arrays Y, RWORK, IWORK,\n and possibly ATOL. E. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE the meaning of ISTATE values are as follows: value description 2 if DLSODES was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong MF). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of MF or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means a fatal error return flag came from sparse solver CDRV by way of DPRJS or DSOLSS.  Should never happen. A return with ISTATE = -1, -4, or -5 may result from using\n an inappropriate sparsity structure, one that is quite\n different from the initial structure.  Consider calling\n DLSODES again with ISTATE = 3 to force the structure to be\n reevaluated.  See the full description of ISTATE below. F. To continue the integration after a successful return, simply\n reset TOUT and call DLSODES again.  No other parameters need be reset. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODES.  The problem is from chemical\n kinetics, and consists of the following 12 rate equations: dy1/dt  = -rk1*y1\n    dy2/dt  = rk1*y1 + rk11*rk14*y4 + rk19*rk14*y5\n                - rk3*y2*y3 - rk15*y2*y12 - rk2*y2\n    dy3/dt  = rk2*y2 - rk5*y3 - rk3*y2*y3 - rk7*y10*y3\n                + rk11*rk14*y4 + rk12*rk14*y6\n    dy4/dt  = rk3*y2*y3 - rk11*rk14*y4 - rk4*y4\n    dy5/dt  = rk15*y2*y12 - rk19*rk14*y5 - rk16*y5\n    dy6/dt  = rk7*y10*y3 - rk12*rk14*y6 - rk8*y6\n    dy7/dt  = rk17*y10*y12 - rk20*rk14*y7 - rk18*y7\n    dy8/dt  = rk9*y10 - rk13*rk14*y8 - rk10*y8\n    dy9/dt  = rk4*y4 + rk16*y5 + rk8*y6 + rk18*y7\n    dy10/dt = rk5*y3 + rk12*rk14*y6 + rk20*rk14*y7\n                + rk13*rk14*y8 - rk7*y10*y3 - rk17*y10*y12\n                - rk6*y10 - rk9*y10\n    dy11/dt = rk10*y8\n    dy12/dt = rk6*y10 + rk19*rk14*y5 + rk20*rk14*y7\n                - rk15*y2*y12 - rk17*y10*y12\n\n with rk1 = rk5 = 0.1,  rk4 = rk8 = rk16 = rk18 = 2.5,\n      rk10 = 5.0,  rk2 = rk6 = 10.0,  rk14 = 30.0,\n      rk3 = rk7 = rk9 = rk11 = rk12 = rk13 = rk19 = rk20 = 50.0,\n      rk15 = rk17 = 100.0. The t interval is from 0 to 1000, and the initial conditions\n are y1 = 1, y2 = y3 = … = y12 = 0.  The problem is stiff. The following coding solves this problem with DLSODES, using MF = 121\n and printing results at t = .1, 1., 10., 100., 1000.  It uses\n ITOL = 1 and mixed relative/absolute tolerance controls.\n During the run and at the end, statistical quantities of interest\n are printed (see optional outputs in the full description below). program dlsodes_ex use m_odepack implicit none external fex external jex integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: atol , rtol , t , tout integer :: i , iopt , iout , istate , itask , itol , leniw , lenrw , & & mf , neq , nfe , nje , nlu , nnz , nnzlu , nst integer , dimension ( 30 ) :: iwork integer , save :: liw , lrw real ( kind = dp ), dimension ( 500 ) :: rwork real ( kind = dp ), dimension ( 12 ) :: y data lrw / 500 / , liw / 30 / neq = 12 do i = 1 , neq y ( i ) = 0.0D0 enddo y ( 1 ) = 1.0D0 t = 0.0D0 tout = 0.1D0 itol = 1 rtol = 1.0D-4 atol = 1.0D-6 itask = 1 istate = 1 iopt = 0 mf = 121 do iout = 1 , 5 call dlsodes ( fex ,[ neq ], y , t , tout , itol ,[ rtol ],[ atol ], itask , istate , iopt ,& & rwork , lrw , iwork , liw , jex , mf ) write ( 6 , 99010 ) t , iwork ( 11 ), rwork ( 11 ),( y ( i ), i = 1 , neq ) 99010 format ( // ' At t =' , d11 . 3 , 4 x , ' No. steps =' , i5 , 4 x , ' Last step =' , & & d11 . 3 / '  Y array =  ' , 4 D14 . 5 / 13 x , 4 D14 . 5 / 13 x , 4 D14 . 5 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0.0D0 endif enddo lenrw = iwork ( 17 ) leniw = iwork ( 18 ) nst = iwork ( 11 ) nfe = iwork ( 12 ) nje = iwork ( 13 ) nlu = iwork ( 21 ) nnz = iwork ( 19 ) nnzlu = iwork ( 25 ) + iwork ( 26 ) + neq write ( 6 , 99030 ) lenrw , leniw , nst , nfe , nje , nlu , nnz , nnzlu 99030 format ( // ' Required RWORK size =' , i4 , '   IWORK size =' , & & i4 / ' No. steps =' , i4 , '   No. f-s =' , i4 , '   No. J-s =' , i4 , & & '   No. LU-s =' , i4 / ' No. of nonzeros in J =' , i5 , & & '   No. of nonzeros in LU =' , i5 ) end program dlsodes_ex subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 12 ) :: Y real ( kind = dp ), intent ( out ), dimension ( 12 ) :: Ydot real ( kind = dp ), save :: rk1 , rk10 , rk11 , rk12 , rk13 , rk14 , rk15 , & & rk16 , rk17 , rk2 , rk3 , rk4 , rk5 , rk6 , rk7 ,& & rk8 , rk9 real , save :: rk18 , rk19 , rk20 data rk1 / 0.1D0 / , rk2 / 1 0.0D0 / , rk3 / 5 0.0D0 / , rk4 / 2.5D0 / , rk5 / 0.1D0 / ,& & rk6 / 1 0.0D0 / , rk7 / 5 0.0D0 / , rk8 / 2.5D0 / , rk9 / 5 0.0D0 / , & & rk10 / 5.0D0 / , rk11 / 5 0.0D0 / , rk12 / 5 0.0D0 / , rk13 / 5 0.0D0 / , & & rk14 / 3 0.0D0 / , rk15 / 10 0.0D0 / , rk16 / 2.5D0 / , rk17 / 10 0.0D0 / , & & rk18 / 2.5D0 / , rk19 / 5 0.0D0 / , rk20 / 5 0.0D0 / Ydot ( 1 ) = - rk1 * Y ( 1 ) Ydot ( 2 ) = rk1 * Y ( 1 ) + rk11 * rk14 * Y ( 4 ) + rk19 * rk14 * Y ( 5 ) - rk3 * Y ( 2 ) * Y ( 3 ) & & - rk15 * Y ( 2 ) * Y ( 12 ) - rk2 * Y ( 2 ) Ydot ( 3 ) = rk2 * Y ( 2 ) - rk5 * Y ( 3 ) - rk3 * Y ( 2 ) * Y ( 3 ) - rk7 * Y ( 10 ) * Y ( 3 ) & & + rk11 * rk14 * Y ( 4 ) + rk12 * rk14 * Y ( 6 ) Ydot ( 4 ) = rk3 * Y ( 2 ) * Y ( 3 ) - rk11 * rk14 * Y ( 4 ) - rk4 * Y ( 4 ) Ydot ( 5 ) = rk15 * Y ( 2 ) * Y ( 12 ) - rk19 * rk14 * Y ( 5 ) - rk16 * Y ( 5 ) Ydot ( 6 ) = rk7 * Y ( 10 ) * Y ( 3 ) - rk12 * rk14 * Y ( 6 ) - rk8 * Y ( 6 ) Ydot ( 7 ) = rk17 * Y ( 10 ) * Y ( 12 ) - rk20 * rk14 * Y ( 7 ) - rk18 * Y ( 7 ) Ydot ( 8 ) = rk9 * Y ( 10 ) - rk13 * rk14 * Y ( 8 ) - rk10 * Y ( 8 ) Ydot ( 9 ) = rk4 * Y ( 4 ) + rk16 * Y ( 5 ) + rk8 * Y ( 6 ) + rk18 * Y ( 7 ) Ydot ( 10 ) = rk5 * Y ( 3 ) + rk12 * rk14 * Y ( 6 ) + rk20 * rk14 * Y ( 7 ) + rk13 * rk14 * Y ( 8 ) & & - rk7 * Y ( 10 ) * Y ( 3 ) - rk17 * Y ( 10 ) * Y ( 12 ) - rk6 * Y ( 10 ) - rk9 * Y ( 10 ) Ydot ( 11 ) = rk10 * Y ( 8 ) Ydot ( 12 ) = rk6 * Y ( 10 ) + rk19 * rk14 * Y ( 5 ) + rk20 * rk14 * Y ( 7 ) - rk15 * Y ( 2 ) * Y ( 12 )& & - rk17 * Y ( 10 ) * Y ( 12 ) end subroutine fex subroutine jex ( Neq , T , Y , J , Ia , Ja , Pdj ) implicit none ! integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 12 ) :: Y integer , intent ( in ) :: J integer , dimension ( * ) :: Ia integer , dimension ( * ) :: Ja real ( kind = dp ), intent ( out ), dimension ( 12 ) :: Pdj ! real ( kind = dp ), save :: rk1 , rk10 , rk11 , rk12 , rk13 , rk14 , rk15 , & & rk16 , rk17 , rk2 , rk3 , rk4 , rk5 , rk6 , rk7 ,& & rk8 , rk9 real , save :: rk18 , rk19 , rk20 ! data rk1 / 0.1D0 / , rk2 / 1 0.0D0 / , rk3 / 5 0.0D0 / , rk4 / 2.5D0 / , rk5 / 0.1D0 / ,& & rk6 / 1 0.0D0 / , rk7 / 5 0.0D0 / , rk8 / 2.5D0 / , rk9 / 5 0.0D0 / , & & rk10 / 5.0D0 / , rk11 / 5 0.0D0 / , rk12 / 5 0.0D0 / , rk13 / 5 0.0D0 / , & & rk14 / 3 0.0D0 / , rk15 / 10 0.0D0 / , rk16 / 2.5D0 / , rk17 / 10 0.0D0 / , & & rk18 / 2.5D0 / , rk19 / 5 0.0D0 / , rk20 / 5 0.0D0 / select case ( J ) case ( 2 ) Pdj ( 2 ) = - rk3 * Y ( 3 ) - rk15 * Y ( 12 ) - rk2 Pdj ( 3 ) = rk2 - rk3 * Y ( 3 ) Pdj ( 4 ) = rk3 * Y ( 3 ) Pdj ( 5 ) = rk15 * Y ( 12 ) Pdj ( 12 ) = - rk15 * Y ( 12 ) case ( 3 ) Pdj ( 2 ) = - rk3 * Y ( 2 ) Pdj ( 3 ) = - rk5 - rk3 * Y ( 2 ) - rk7 * Y ( 10 ) Pdj ( 4 ) = rk3 * Y ( 2 ) Pdj ( 6 ) = rk7 * Y ( 10 ) Pdj ( 10 ) = rk5 - rk7 * Y ( 10 ) case ( 4 ) Pdj ( 2 ) = rk11 * rk14 Pdj ( 3 ) = rk11 * rk14 Pdj ( 4 ) = - rk11 * rk14 - rk4 Pdj ( 9 ) = rk4 case ( 5 ) Pdj ( 2 ) = rk19 * rk14 Pdj ( 5 ) = - rk19 * rk14 - rk16 Pdj ( 9 ) = rk16 Pdj ( 12 ) = rk19 * rk14 case ( 6 ) Pdj ( 3 ) = rk12 * rk14 Pdj ( 6 ) = - rk12 * rk14 - rk8 Pdj ( 9 ) = rk8 Pdj ( 10 ) = rk12 * rk14 case ( 7 ) Pdj ( 7 ) = - rk20 * rk14 - rk18 Pdj ( 9 ) = rk18 Pdj ( 10 ) = rk20 * rk14 Pdj ( 12 ) = rk20 * rk14 case ( 8 ) Pdj ( 8 ) = - rk13 * rk14 - rk10 Pdj ( 10 ) = rk13 * rk14 Pdj ( 11 ) = rk10 case ( 9 ) case ( 10 ) Pdj ( 3 ) = - rk7 * Y ( 3 ) Pdj ( 6 ) = rk7 * Y ( 3 ) Pdj ( 7 ) = rk17 * Y ( 12 ) Pdj ( 8 ) = rk9 Pdj ( 10 ) = - rk7 * Y ( 3 ) - rk17 * Y ( 12 ) - rk6 - rk9 Pdj ( 12 ) = rk6 - rk17 * Y ( 12 ) case ( 11 ) case ( 12 ) Pdj ( 2 ) = - rk15 * Y ( 2 ) Pdj ( 5 ) = rk15 * Y ( 2 ) Pdj ( 7 ) = rk17 * Y ( 10 ) Pdj ( 10 ) = - rk17 * Y ( 10 ) Pdj ( 12 ) = - rk15 * Y ( 2 ) - rk17 * Y ( 10 ) case default Pdj ( 1 ) = - rk1 Pdj ( 2 ) = rk1 endselect end subroutine jex The output of this program (on a Cray-1 in single precision)\n is as follows: At t =  1.000e-01     No. steps =   12     Last step =  1.515e-02\n  Y array =     9.90050e-01   6.28228e-03   3.65313e-03   7.51934e-07\n                1.12167e-09   1.18458e-09   1.77291e-12   3.26476e-07\n                5.46720e-08   9.99500e-06   4.48483e-08   2.76398e-06\n\n\n At t =  1.000e+00     No. steps =   33     Last step =  7.880e-02\n  Y array =     9.04837e-01   9.13105e-03   8.20622e-02   2.49177e-05\n                1.85055e-06   1.96797e-06   1.46157e-07   2.39557e-05\n                3.26306e-05   7.21621e-04   5.06433e-05   3.05010e-03\n\n\n At t =  1.000e+01     No. steps =   48     Last step =  1.239e+00\n  Y array =     3.67876e-01   3.68958e-03   3.65133e-01   4.48325e-05\n                6.10798e-05   4.33148e-05   5.90211e-05   1.18449e-04\n                3.15235e-03   3.56531e-03   4.15520e-03   2.48741e-01\n\n\n At t =  1.000e+02     No. steps =   91     Last step =  3.764e+00\n  Y array =     4.44981e-05   4.42666e-07   4.47273e-04  -3.53257e-11\n                2.81577e-08  -9.67741e-11   2.77615e-07   1.45322e-07\n                1.56230e-02   4.37394e-06   1.60104e-02   9.52246e-01\n\n\n At t =  1.000e+03     No. steps =  111     Last step =  4.156e+02\n  Y array =    -2.65492e-13   2.60539e-14  -8.59563e-12   6.29355e-14\n               -1.78066e-13   5.71471e-13  -1.47561e-12   4.58078e-15\n                1.56314e-02   1.37878e-13   1.60184e-02   9.52719e-01\n\n\n Required RWORK size = 442   IWORK size =  30\n No. steps = 111   No. f-s = 142   No. J-s =   2   No. LU-s =  20\n No. of nonzeros in J =   44   No. of nonzeros in LU =   50 Full Description of User Interface to DLSODES. The user interface to DLSODES consists of the following parts. The call sequence to Subroutine DLSODES, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODES package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODES package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n      F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF,\n and those used for both input and output are\n      Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODES to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter y(1),…,y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODES, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODES package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F and JAC.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F and/or JAC.  Subroutines F and/or JAC must include\n NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n on the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to\n F and JAC.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F and/or JAC.  (The DLSODES package accesses only\n Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n on output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, the conditional inputs IA and JA, and any of the optional inputs except H0. In particular, if MITER = 1 or 2, a call with ISTATE = 3 will cause the sparsity structure of the problem to be recomputed (or reread from IA and JA if MOSS = 0). Note:  a preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means a fatal error return flag came from the sparse solver CDRV by way of DPRJS or DSOLSS (numerical factorization or backsolve).  This should never happen. The integration was successful as far as T. Note: an error return with ISTATE = -1, -4, or -5 and with\n MITER = 1 or 2 may mean that the sparsity structure of the\n problem has changed significantly since it was last\n determined (or input).  In that case, one can attempt to\n complete the integration by setting ISTATE = 3 on the next\n call, so that a new structure determination is done. Note:  since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK a work array used for a mixture of real (double precision)\n and integer work space.\n The length of RWORK (in real words) must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LWM = 0                                    if MITER = 0,\n          LWM = 2*NNZ + 2*NEQ + (NNZ+9*NEQ)/LENRAT   if MITER = 1,\n          LWM = 2*NNZ + 2*NEQ + (NNZ+10*NEQ)/LENRAT  if MITER = 2,\n          LWM = NEQ + 2                              if MITER = 3. In the above formulas, NNZ    = number of nonzero elements in the Jacobian matrix.\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          (See the MF description for METH and MITER.) Thus if MAXORD has its default value and NEQ is constant,\n the minimum length of RWORK is: 20 + 16*NEQ        for MF = 10,\n             20 + 16*NEQ + LWM  for MF = 11, 111, 211, 12, 112, 212,\n             22 + 17*NEQ        for MF = 13,\n             20 +  9*NEQ        for MF = 20,\n             20 +  9*NEQ + LWM  for MF = 21, 121, 221, 22, 122, 222,\n             22 + 10*NEQ        for MF = 23. If MITER = 1 or 2, the above formula for LWM is only a\n crude lower bound.  The required length of RWORK cannot\n be readily predicted in general, as it depends on the\n sparsity structure of the problem.  Some experimentation\n may be necessary. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT = critical value of t which the solver\n                       is not to overshoot.  Required if ITASK is\n                       4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n      (This will be checked by the solver.) IWORK  = integer work array.  The length of IWORK must be at least 31 + NEQ + NNZ   if MOSS = 0 and MITER = 1 or 2, or\n   30               otherwise. (NNZ is the number of nonzero elements in df/dy.) In DLSODES, IWORK is used only for conditional and\n optional inputs and optional outputs. The following two blocks of words in IWORK are conditional\n inputs, required if MOSS = 0 and MITER = 1 or 2, but not\n otherwise (see the description of MF for MOSS). IWORK(30+j) = IA(j)     (j=1,...,NEQ+1)\n   IWORK(31+NEQ+k) = JA(k) (k=1,...,NNZ) The two arrays IA and JA describe the sparsity structure\n to be assumed for the Jacobian matrix.  JA contains the row\n indices where nonzero elements occur, reading in columnwise\n order, and IA contains the starting locations in JA of the\n descriptions of columns 1,…,NEQ, in that order, with\n IA(1) = 1.  Thus, for each column index j = 1,…,NEQ, the\n values of the row index i in column j where a nonzero\n element may occur are given by i = JA(k),  where   IA(j) .le. k .lt. IA(j+1). If NNZ is the total number of nonzero locations assumed,\n then the length of the JA array is NNZ, and IA(NEQ+1) must\n be NNZ + 1.  Duplicate entries are not allowed. LIW the length of the array IWORK, as declared by the user.\n   (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODES\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODES between calls, if\n desired (but not for use by F or JAC). JAC name of user-supplied routine (MITER = 1 or MOSS = 1) to\n compute the Jacobian matrix, df/dy, as a function of\n the scalar t and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), IAN ( * ), JAN ( * ), PDJ ( * ) where NEQ, T, Y, J, IAN, and JAN are input, and the array\n PDJ, of length NEQ, is to be loaded with column J\n of the Jacobian on output.  Thus df(i)/dy(J) is to be\n loaded into PDJ(i) for all relevant values of i.\n Here T and Y have the same meaning as in Subroutine F,\n and J is a column index (1 to NEQ).  IAN and JAN are\n undefined in calls to JAC for structure determination\n (MOSS = 1).  otherwise, IAN and JAN are structure\n descriptors, as defined under optional outputs below, and\n so can be used to determine the relevant row indices i, if\n desired. JAC need not provide df/dy exactly.  A crude\n approximation (possibly with greater sparsity) will do. In any case, PDJ is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Calls to JAC are made with J = 1,…,NEQ, in that order, and\n each such set of calls is preceded by a call to F with the\n same arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  JAC must not alter its input arguments.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. MF the method flag.  Used only for input.\n MF has three decimal digits– MOSS, METH, MITER– MF = 100*MOSS + 10*METH + MITER. MOSS indicates the method to be used to obtain the sparsity\n structure of the Jacobian matrix if MITER = 1 or 2:\n            MOSS = 0 | means the user has supplied IA and JA\n                     | (see descriptions under IWORK above).\n            MOSS = 1 | means the user has supplied JAC (see below)\n                     | and the structure will be obtained from NEQ\n                     | initial calls to JAC.\n            MOSS = 2 | means the structure will be obtained from NEQ+1\n                     | initial calls to F.\n METH indicates the basic linear multistep method:\n            METH = 1 | means the implicit Adams method.\n            METH = 2 | means the method based on Backward\n                     | Differentiation Formulas (BDFs).\n MITER indicates the corrector iteration method: value description MITER = 0 means functional iteration (no Jacobian matrix is involved). MITER = 1 means chord iteration with a user-supplied sparse Jacobian, given by Subroutine JAC. MITER = 2 means chord iteration with an internally generated (difference quotient) sparse Jacobian (using NGP extra calls to F per df/dy value, where NGP is an optional output described below.) MITER = 3 means chord iteration with an internally generated diagonal Jacobian approximation (using 1 extra call to F per df/dy evaluation). If MITER = 1 or MOSS = 1, the user must supply a Subroutine\n JAC (the name is arbitrary) as described above under JAC.\n Otherwise, a dummy argument can be used. The standard choices for MF are: value description MF = 10 for a nonstiff problem, MF = 21 or 22 for a stiff problem with IA/JA supplied (21 if JAC is supplied, 22 if not), MF = 121 for a stiff problem with JAC supplied, but not IA/JA, MF = 222 for a stiff problem with neither IA/JA nor JAC supplied. The sparseness structure can be changed during the\n problem by making a call to DLSODES with ISTATE = 3. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) SETH RWORK(8) the element threshhold for sparsity determination when MOSS = 1 or 2.  If the absolute value of an estimated Jacobian element is .le. SETH, it will be assumed to be absent in the structure. The default value of SETH is 0. MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSODES, the variables listed\n below are quantities related to the performance of DLSODES\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODES, and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far, excluding those for structure determination (MOSS = 2). NJE IWORK(13) the number of Jacobian evaluations for the problem so far, excluding those for structure determination (MOSS = 1). NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNZ IWORK(19) the number of nonzero elements in the Jacobian matrix, including the diagonal (MITER = 1 or 2). (This may differ from that given by IA(NEQ+1)-1 if MOSS = 0, because of added diagonal entries.) NGP IWORK(20) the number of groups of column indices, used in difference quotient Jacobian aproximations if MITER = 2.  This is also the number of extra f evaluations needed for each Jacobian evaluation. NLU IWORK(21) the number of sparse LU decompositions for the problem so far. LYH IWORK(22) the base address in RWORK of the history array YH, described below in this list. IPIAN IWORK(23) the base address of the structure descriptor array IAN, described below in this list. IPJAN IWORK(24) the base address of the structure descriptor array JAN, described below in this list. NZL IWORK(25) the number of nonzero elements in the strict lower triangle of the LU factorization used in the chord iteration (MITER = 1 or 2). NZU IWORK(26) the number of nonzero elements in the strict upper triangle of the LU factorization used in the chord iteration (MITER = 1 or 2). The total number of nonzeros in the factorization is therefore NZL + NZU + NEQ. The following four arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address, and its description.\n For YH and ACOR, the base addresses are in RWORK (a real array).\n The integer arrays IAN and JAN are to be obtained by declaring an\n integer array IWK and identifying IWK(1) with RWORK(21), using either\n an equivalence statement or a subroutine call.  Then the base\n addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained\n as optional outputs IWORK(23) and IWORK(24), respectively.\n Thus IAN(1) is IWK(IPIAN), etc. Name Base Address Description IAN IPIAN (in IWK) structure descriptor array of size NEQ + 1. JAN IPJAN (in IWK) structure descriptor array of size NNZ. (see above) IAN and JAN together describe the sparsity structure of the Jacobian matrix, as used by DLSODES when MITER = 1 or 2. JAN contains the row indices of the nonzero locations, reading in columnwise order, and IAN contains the starting locations in JAN of the descriptions of columns 1,…,NEQ, in that order, with IAN(1) = 1.  Thus for each j = 1,…,NEQ, the row indices i of the nonzero locations in column j are i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1). Note that IAN(NEQ+1) = NNZ + 1. (If MOSS = 0, IAN/JAN may differ from the input IA/JA because of a different ordering in each column, and added diagonal entries.) YH LYH the Nordsieck history array, of size NYH by (optional (NQCUR + 1), where NYH is the initial value output) of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR.  The base address LYH is another optional output, listed above. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E  in the description of the error control.  It is defined only on a successful return from DLSODES. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODES.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODES, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODES. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCMS(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODES (see Part 3 below). RSAV must be a real array of length 224 or more, and ISAV must be an integer array of length 71 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCMS is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODES. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODES. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = IWORK ( 22 ) CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODES).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (See optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODES directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. LYH the base address of the history array YH, obtained\n as an optional output as shown above.\n NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Problem State If the solution of a given problem by DLSODES is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODES call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSODES call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCMS (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODES package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET. The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: Subroutine DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODES call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODES in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM. The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W)\n where\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODES.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might: substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. References: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: I. The Symmetric Codes,\n     Int. J. Num. Meth. Eng., 18 (1982), pp. 1145-1151. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: II. The Nonsymmetric Codes,\n     Research Report No. 114, Dept. of Computer Sciences, Yale\n     University, 1977. Authors:    Alan C. Hindmarsh\n             Center for Applied Scientific Computing, L-561\n             Lawrence Livermore National Laboratory\n             Livermore, CA 94551\n\n             Andrew H. Sherman\n             J. S. Nolen and Associates\n             Houston, TX 77084 Pedigree: This version of DLSODES is derived from the the 12 November 2003 version of\n “DLSODES: Livermore Solver for Ordinary Differential Equations\n          with general Sparse Jacobian matrix.” This version is in double precision. Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf Calls proc~~dlsodes~2~~CallsGraph proc~dlsodes~2 dlsodes proc~dewset~2 dewset proc~dlsodes~2->proc~dewset~2 proc~xerrwd~2 xerrwd proc~dlsodes~2->proc~xerrwd~2 proc~dvnorm~2 dvnorm proc~dlsodes~2->proc~dvnorm~2 proc~diprep~2 diprep proc~dlsodes~2->proc~diprep~2 proc~dumach~2 dumach proc~dlsodes~2->proc~dumach~2 proc~dintdy~2 dintdy proc~dlsodes~2->proc~dintdy~2 proc~dstode dstode proc~dlsodes~2->proc~dstode proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dprep dprep proc~diprep~2->proc~dprep none~dumsum dumsum proc~dumach~2->none~dumsum proc~dintdy~2->proc~xerrwd~2 proc~dcfode dcfode proc~dstode->proc~dcfode proc~dvnorm dvnorm proc~dstode->proc~dvnorm none~wrapup500 wrapup500 proc~dprep->none~wrapup500 proc~odrv odrv proc~dprep->proc~odrv proc~jgroup jgroup proc~dprep->proc~jgroup proc~cdrv cdrv proc~dprep->proc~cdrv none~wrapup400 wrapup400 proc~dprep->none~wrapup400 none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~adjlr adjlr proc~dprep->proc~adjlr iwk iwk none~wrapup600->iwk proc~cntnzu cntnzu none~wrapup600->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big dp ewti h0 hmax hmx i i1 i2 iflag ihit imax imul imxer ipflag ipgo irem j kgo leniw lenrat lenrw lenyht lf0 lia lja lrtem lwtem lyhd lyhn mf1 mord msg mxhnl0 mxstp0 ncolm rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsodes Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: iflag logical, public :: ihit integer, public :: imax integer, public :: imul integer, public :: imxer integer, public :: ipflag integer, public :: ipgo integer, public :: irem integer, public :: j integer, public :: kgo integer, public :: leniw integer, public, save :: lenrat integer, public :: lenrw integer, public :: lenyht integer, public :: lf0 integer, public :: lia integer, public :: lja integer, public :: lrtem integer, public :: lwtem integer, public :: lyhd integer, public :: lyhn integer, public :: mf1 integer, public, dimension(2), save :: mord character(len=60), public :: msg integer, public, save :: mxhnl0 integer, public, save :: mxstp0 integer, public :: ncolm real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsodes ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Mf ) integer , parameter :: dp = kind ( 0.0d0 ) ! external f external jac real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imax , imul , imxer , ipflag , ipgo , irem , j , kgo , leniw , lenrw , lenyht , lf0 , lia , lja , & & lrtem , lwtem , lyhd , lyhn , mf1 , ncolm logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , save :: lenrat , mxhnl0 , mxstp0 integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODES, DIPREP, DPREP, !  DINTDY, DSTODE, DPRJS, and DSOLSS. !  The block DLSS01 is declared in subroutines DLSODES, DIPREP, DPREP, !  DPRJS, and DSOLSS. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ! ----------------------------------------------------------------------- !  In the Data statement below, set LENRAT equal to the ratio of !  the wordlength for a real number to that for an integer.  Usually, !  LENRAT = 1 for single precision and 2 for double precision.  If the !  true ratio is not an integer, use the next smaller integer (.ge. 1). ! ----------------------------------------------------------------------- data lenrat / 2 / ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- ihit = . false . if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODES- ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 2000 ! msg = 'DLSODES- Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODES- ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODES- ISTATE.gt.1 but DLSODES not initialized. ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. !  If ISTATE = 1, the final setting of work space pointers, the matrix !  preprocessing, and other initializations are done in Block C. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODES- NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODES- ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 2000 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODES- ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODES- IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else dlss % moss = Mf / 100 mf1 = Mf - 100 * dlss % moss dls1 % meth = mf1 / 10 dls1 % miter = mf1 - 10 * dls1 % meth if ( dlss % moss < 0 . or . dlss % moss > 2 ) goto 700 if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 700 if ( dls1 % miter < 0 . or . dls1 % miter > 3 ) goto 700 if ( dls1 % miter == 0 . or . dls1 % miter == 3 ) dlss % moss = 0 !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODES- MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODES- MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODES- MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODES- TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 2000 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODES- HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 2000 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODES- HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 2000 else dlss % seth = Rwork ( 8 ) if ( dlss % seth < 0.0D0 ) then msg = 'DLSODES- SETH (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 9 , 0 , 0 , 0 , 0 , 1 , dlss % seth , 0.0D0 ) goto 2000 endif endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 dlss % seth = 0.0D0 endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODES- RTOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 2000 elseif ( atoli < 0.0D0 ) then msg = 'DLSODES- ATOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 2000 endif enddo ! ----------------------------------------------------------------------- !  Compute required work array lengths, as far as possible, and test !  these against LRW and LIW.  Then set tentative pointers for work !  arrays.  Pointers to RWORK/IWORK segments are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  WM, YH, SAVF, EWT, ACOR. !  If MITER = 1 or 2, the required length of the matrix work space WM !  is not yet known, and so a crude minimum value is used for the !  initial tests of LRW and LIW, and YH is temporarily stored as far !  to the right in RWORK as possible, to leave the maximum amount !  of space for WM for matrix preprocessing.  Thus if MITER = 1 or 2 !  and MOSS .ne. 2, some of the segments of RWORK are temporarily !  omitted, as they are not needed in the preprocessing.  These !  omitted segments are: ACOR if ISTATE = 1, EWT and ACOR if ISTATE = 3 !  and MOSS = 1, and SAVF, EWT, and ACOR if ISTATE = 3 and MOSS = 0. ! ----------------------------------------------------------------------- dlss % lrat = lenrat if ( Istate == 1 ) dls1 % nyh = dls1 % n dlss % lwmin = 0 if ( dls1 % miter == 1 ) dlss % lwmin = 4 * dls1 % n + 10 * dls1 % n / dlss % lrat if ( dls1 % miter == 2 ) dlss % lwmin = 4 * dls1 % n + 11 * dls1 % n / dlss % lrat if ( dls1 % miter == 3 ) dlss % lwmin = dls1 % n + 2 dlss % lenyh = ( dls1 % maxord + 1 ) * dls1 % nyh dlss % lrest = dlss % lenyh + 3 * dls1 % n lenrw = 20 + dlss % lwmin + dlss % lrest Iwork ( 17 ) = lenrw leniw = 30 if ( dlss % moss == 0 . and . dls1 % miter /= 0 . and . dls1 % miter /= 3 ) leniw = leniw + dls1 % n + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) goto 800 if ( leniw > Liw ) goto 900 lia = 31 if ( dlss % moss == 0 . and . dls1 % miter /= 0 . and . dls1 % miter /= 3 ) leniw = leniw + Iwork ( lia + dls1 % n ) - 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 900 lja = lia + dls1 % n + 1 lia = min ( lia , Liw ) lja = min ( lja , Liw ) dls1 % lwm = 21 if ( Istate == 1 ) dls1 % nq = 1 ncolm = min ( dls1 % nq + 1 , dls1 % maxord + 2 ) dlss % lenyhm = ncolm * dls1 % nyh lenyht = dlss % lenyh if ( dls1 % miter == 1 . or . dls1 % miter == 2 ) lenyht = dlss % lenyhm imul = 2 if ( Istate == 3 ) imul = dlss % moss if ( dlss % moss == 2 ) imul = 3 lrtem = lenyht + imul * dls1 % n lwtem = dlss % lwmin if ( dls1 % miter == 1 . or . dls1 % miter == 2 ) lwtem = Lrw - 20 - lrtem dlss % lenwk = lwtem lyhn = dls1 % lwm + lwtem dls1 % lsavf = lyhn + lenyht dls1 % lewt = dls1 % lsavf + dls1 % n dls1 % lacor = dls1 % lewt + dls1 % n dlss % istatc = Istate if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  the sparse matrix preprocessing (MITER = 1 or 2), and the !  calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh dls1 % tn = T dls1 % nst = 0 dls1 % h = 1.0D0 dlss % nnz = 0 dlss % ngp = 0 dlss % nzl = 0 dlss % nzu = 0 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1000 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo if ( dls1 % miter /= 0 . and . dls1 % miter /= 3 ) then !  DIPREP and DPREP do sparse matrix preprocessing if MITER = 1 or 2. --- dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprep ( Neq , Y , Rwork , Iwork ( lia ), Iwork ( lja ), ipflag , f , jac ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1400 case ( 3 ) goto 1500 case ( 4 ) goto 1600 case ( 5 ) goto 1700 case ( 6 ) goto 1800 case ( 7 ) goto 1900 case default Iwork ( 22 ) = dls1 % lyh if ( lenrw > Lrw ) goto 800 endselect endif !  Check TCRIT for legality (ITASK = 4 or 5). --------------------------- if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1200 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif !  Initialize all remaining parameters. --------------------------------- dls1 % uround = dumach () dls1 % jstart = 0 if ( dls1 % miter /= 0 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dlss % msbj = 50 dlss % nslj = 0 dlss % ccmxj = 0.2D0 dlss % psmall = 100 0.0D0 * dls1 % uround dlss % rbig = 0.01D0 / dlss % psmall dls1 % nhnil = 0 dls1 % nje = 0 dlss % nlu = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( f(i)/ywt(i) )**2  ) !                                        1 !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          f(i)   = i-th component of initial value of f, !          ywt(i) = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. !  ABS(H0) is made .le. ABS(TOUT-T) in any case. ! ----------------------------------------------------------------------- lf0 = dls1 % lyh + dls1 % nyh if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODES- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 2000 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 200 else ! ----------------------------------------------------------------------- !  ISTATE = 3.  Move YH to its new location. !  Note that only the part of YH needed for the next step, namely !  MIN(NQ+1,MAXORD+2) columns, is actually moved. !  A temporary error weight array EWT is loaded if MOSS = 2. !  Sparse matrix processing is done in DIPREP/DPREP if MITER = 1 or 2. !  If MAXORD was reduced below NQ, then the pointers are finally set !  so that SAVF is identical to YH(*,MAXORD+2). ! ----------------------------------------------------------------------- lyhd = dls1 % lyh - lyhn imax = lyhn - 1 + dlss % lenyhm !  Move YH.  Move right if LYHD < 0; move left if LYHD > 0. ------------- if ( lyhd < 0 ) then do i = lyhn , imax j = imax + lyhn - i Rwork ( j ) = Rwork ( j + lyhd ) enddo endif if ( lyhd > 0 ) then do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo endif dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh if ( dls1 % miter /= 0 . and . dls1 % miter /= 3 ) then if ( dlss % moss == 2 ) then !  Temporarily load EWT if MITER = 1 or 2 and MOSS = 2. ----------------- call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1000 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo endif !  DIPREP and DPREP do sparse matrix preprocessing if MITER = 1 or 2. --- dls1 % lsavf = min ( dls1 % lsavf , Lrw ) dls1 % lewt = min ( dls1 % lewt , Lrw ) dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprep ( Neq , Y , Rwork , Iwork ( lia ), Iwork ( lja ), ipflag , f , jac ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1400 case ( 3 ) goto 1500 case ( 4 ) goto 1600 case ( 5 ) goto 1700 case ( 6 ) goto 1800 case ( 7 ) goto 1900 case default Iwork ( 22 ) = dls1 % lyh if ( lenrw > Lrw ) goto 800 endselect endif !  Set flag to signal parameter changes to DSTODE. ---------------------- dls1 % jstart = - 1 if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODES- ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 2000 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1200 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODE. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODES- At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODES- At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 600 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODES- Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODES- Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !     CALL DSTODE(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,WM,f,JAC,DPRJS,DSOLSS) ! ----------------------------------------------------------------------- call dstode ( Neq , Y , & & Rwork ( dls1 % lyh ), & & dls1 % nyh , & & Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), & & f , jac , dprjs , dsolss ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODES- At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODES- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) !  KFLAG = -3.  Fatal error flag returned by DPRJS or DSOLSS (CDRV). ---- msg = 'DLSODES- At T (=R1) and step size H (=R2), a fatal' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error flag was returned by CDRV (by way of  ' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Subroutine DPRJS or DSOLSS)       ' call xerrwd ( msg , 40 , 207 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 7 goto 600 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  if TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODES- At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 2000 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODES- At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 600 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODES. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 600 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return 700 continue msg = 'DLSODES- MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 800 continue msg = 'DLSODES- RWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 17 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 900 continue msg = 'DLSODES- IWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 18 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1000 continue ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODES- EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 2000 1100 continue msg = 'DLSODES- ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 2000 1200 continue msg = 'DLSODES- ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 2000 1300 continue msg = 'DLSODES- Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) goto 2000 1400 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine DPREP).  ' call xerrwd ( msg , 60 , 28 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 28 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1500 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine JGROUP). ' call xerrwd ( msg , 60 , 29 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 29 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1600 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine ODRV).   ' call xerrwd ( msg , 60 , 30 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 30 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1700 continue msg = 'DLSODES- Error from ODRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), ODRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 31 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) goto 2000 1800 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine CDRV).   ' call xerrwd ( msg , 60 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 32 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1900 continue msg = 'DLSODES- Error from CDRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), CDRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 33 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) if ( imul == 2 ) then msg = '        Duplicate entry in sparsity structure descriptors.  ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( imul == 3 . or . imul == 6 ) then msg = '        Insufficient storage for NSFC (called by CDRV).     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif ! 2000 continue Istate = - 3 return 99999 continue end subroutine dlsodes","tags":"","loc":"proc/dlsodes~2.html"},{"title":"dlsodpk – odepack","text":"subroutine dlsodpk(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf) Synopsis DLSODPK: Livermore Solver for Ordinary Differential equations,\n          with Preconditioned Krylov iteration methods for the\n          Newton correction linear systems. DLSODPK solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). This version is in double precision. Introduction. This is a modification of the DLSODE package which incorporates\n various preconditioned Krylov subspace iteration methods for the\n linear algebraic systems that arise in the case of stiff systems. The linear systems that must be solved have the form A * x  = b,  where  A = identity - hl0 * (df/dy) . Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial\n derivatives of f (NEQ by NEQ). The particular Krylov method is chosen by setting the second digit,\n MITER, in the method flag MF.\n Currently, the values of MITER have the following meanings: MITER description 1 means the preconditioned Scaled Incomplete Orthogonalization Method (SPIOM). 2 means an incomplete version of the Preconditioned Scaled Generalized Minimal Residual method (SPIGMR). This is the best choice in general. 3 means the Preconditioned Conjugate Gradient method (PCG). Recommended only when df/dy is symmetric or nearly so. 4 means the scaled Preconditioned Conjugate Gradient method (PCGS).  Recommended only when D-inverse * df/dy * D is symmetric or nearly so, where D is the diagonal scaling matrix with elements 1/EWT(i) (see RTOL/ATOL description). 9 means that only a user-supplied matrix P (approximating A) will be used, with no Krylov iteration done.  This option allows the user to provide the complete linear system solution algorithm, if desired. The user can apply preconditioning to the linear system A*x = b,\n by means of arbitrary matrices (the preconditioners). In the case of SPIOM and SPIGMR, one can apply left and right\n preconditioners P1 and P2, and the basic iterative method is then\n applied to the matrix (P1-inverse)*A*(P2-inverse) instead of to the\n matrix A.  The product P1*P2 should be an approximation to matrix A\n such that linear systems with P1 or P2 are easier to solve than with\n A.  Preconditioning from the left only or right only means using\n P2 = identity or P1 = identity, respectively. In the case of the PCG and PCGS methods, there is only one\n preconditioner matrix P (but it can be the product of more than one).\n It should approximate the matrix A but allow for relatively\n easy solution of linear systems with coefficient matrix P. For PCG, P should be positive definite symmetric, or nearly so,\n and for PCGS, the scaled preconditioner D-inverse * P * D\n should be symmetric or nearly so. If the Jacobian J = df/dy splits in a natural way into a sum\n J = J1 + J2, then one possible choice of preconditioners is\n P1 = identity - hl0 * J1  and  P2 = identity - hl0 * J2\n provided each of these is easy to solve (or approximately solve). Summary of Usage. Communication between the user and the DLSODPK package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the demonstration\n program distributed with this solver. A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). B. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, MF should be between 21\n and 24, or possibly 29.  MF = 22 is generally the best choice.\n Use 23 or 24 only if symmetry is present.  Use MF = 29 if the\n complete linear system solution is to be provided by the user.\n The following four parameters must also be set. IWORK(1) = LWP  = length of real array WP for preconditioning.\n  IWORK(2) = LIWP = length of integer array IWP for preconditioning.\n  IWORK(3) = JPRE = preconditioner type flag:\n                  = 0 for no preconditioning (P1 = P2 = P = identity)\n                  = 1 for left-only preconditioning (P2 = identity)\n                  = 2 for right-only preconditioning (P1 = identity)\n                  = 3 for two-sided preconditioning (and PCG or PCGS)\n  IWORK(4) = JACFLG = flag for whether JAC is called.\n                    = 0 if JAC is not to be called,\n                    = 1 if JAC is to be called. Use JACFLG = 1 if JAC computes any nonconstant data for use in\n  preconditioning, such as Jacobian elements.\n  The arrays WP and IWP are work arrays under the user’s control,\n  for use in the routines that perform preconditioning operations. C. If the problem is stiff, you must supply two routines that deal\n with the preconditioning of the linear systems to be solved.\n These are as follows: SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , HL0 , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy involved in the preconditioners P1, P2, P.\n The Y and FTY arrays contain the current values of y and f(t,y),\n respectively, and YSV also contains the current value of y.\n The array V is work space of length NEQ. JAC must multiply all computed Jacobian elements by the scalar\n -HL0, add the identity matrix, and do any factorization\n operations called for, in preparation for solving linear systems\n with a coefficient matrix of P1, P2, or P.  The matrix P1*P2 or P\n should be an approximation to  identity - HL0 * (df/dy).\n JAC should return IER = 0 if successful, and IER .ne. 0 if not.\n (If IER .ne. 0, a smaller time step will be tried.) SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P, as\n coefficient matrix, and return the solution vector in B. LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2.\n In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner matrix P.\n In the case MF = 29 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - HL0 * (df/dy). PSOL can use data generated in the JAC routine and stored in\n WP and IWP.  WK is a work array of length NEQ. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, at the time of the last\n JAC call, is needed, it must have been saved by JAC in WP.\n On return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful , IER . gt . 0 if a recoverable error occurred , meaning that the time step will be retried , IER . lt . 0 if an unrecoverable error occurred , meaning that the solver is to stop immediately . D. Write a main program which calls Subroutine DLSODPK once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODPK.  On the first call to DLSODPK, supply arguments as follows: F name of subroutine for right-hand side vector f.\n This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + 16*NEQ           for MF = 10,\n        45 + 17*NEQ + LWP     for MF = 21,\n        61 + 17*NEQ + LWP     for MF = 22,\n        20 + 15*NEQ + LWP     for MF = 23 or 24,\n        20 + 12*NEQ + LWP     for MF = 29. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least: 30            for MF = 10,\n        35 + LIWP     for MF = 21,\n        30 + LIWP     for MF = 22, 23, 24, or 29. LIW declared length of IWORK (in user’s dimension). JAC,PSOL names of subroutines for preconditioning.\n These names must be declared External in the calling program. MF method flag.  Standard values are: value description 10 for nonstiff (Adams) method. 21 for stiff (BDF) method, with preconditioned SIOM. 22 for stiff method, with preconditioned GMRES method. 23 for stiff method, with preconditioned CG method. 24 for stiff method, with scaled preconditioned CG method. 29 for stiff method, with user’s PSOL routine only. Note that the main program must declare arrays Y, RWORK, IWORK,\n and possibly ATOL. E. The output from the first call (or any call) is: Y = array of computed values of y ( t ) vector . T = corresponding value of independent variable ( normally TOUT ) . ISTATE table of values: value description 2 if DLSODPK was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong MF). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad JAC or PSOL routine supplied or wrong choice of MF or tolerances, or this solver is inappropriate). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means an unrecoverable error occurred in PSOL. F. To continue the integration after a successful return, simply\n reset TOUT and call DLSODPK again.  No other parameters need be reset. Full Description of User Interface to DLSODPK. The user interface to DLSODPK consists of the following parts. The call sequence to Subroutine DLSODPK, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODPK package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODPK package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF, and those used for both input and output are\n  Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODPK to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODPK, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in the user-supplied subroutines. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODPK package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F, JAC, and PSOL.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to the user-supplied subroutines.  Each such routine must\n include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F,\n JAC, and PSOL. Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to the user-supplied subroutines.  (The DLSODPK\n package accesses only Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n      where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n the following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK  = an index specifying the task to be performed. Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note :  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE = an index used for input and output to specify the\n          the state of the calculation. On input, the values of ISTATE are as follows: value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, and any of the optional inputs except H0. Note :  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the PSOL routine returned an unrecoverable error flag (IER .lt. 0).  The integration was successful as far as T. Note :  since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a real working array (double precision). The length of RWORK must be at least\n          20 + NYH*(MAXORD + 1) + 3*NEQ + LENLS + LWP    where\n       NYH    = the initial value of NEQ,\n       MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                smaller value is given as an optional input),\n       LENLS = length of work space for linear system (Krylov)\n               method, excluding preconditioning:\n         LENLS = 0                               if MITER = 0,\n         LENLS = NEQ*(MAXL+3) + MAXL**2          if MITER = 1,\n         LENLS = NEQ*(MAXL+3+MIN(1,MAXL-KMP))\n              + (MAXL+3)*MAXL + 1                if MITER = 2,\n         LENLS = 6*NEQ                           if MITER = 3 or 4,\n         LENLS = 3*NEQ                           if MITER = 9. (See the MF description for METH and MITER, and the\n list of optional inputs for MAXL and KMP.) LWP length of real user work space for preconditioning\n (see JAC/PSOL).\n Thus if default values are used and NEQ is constant,\n this length is: 20 + 16*NEQ           for MF = 10,\n             45 + 24*NEQ + LWP     FOR MF = 11,\n             61 + 24*NEQ + LWP     FOR MF = 12,\n             20 + 22*NEQ + LWP     FOR MF = 13 OR 14,\n             20 + 19*NEQ + LWP     FOR MF = 19,\n             20 + 9*NEQ            FOR MF = 20,\n             45 + 17*NEQ + LWP     FOR MF = 21,\n             61 + 17*NEQ + LWP     FOR MF = 22,\n             20 + 15*NEQ + LWP     FOR MF = 23 OR 24,\n             20 + 12*NEQ + LWP     for MF = 29. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT = critical value of t which the solver\n                    is not to overshoot.  Required if ITASK is\n                    4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least 30 if MITER = 0 ( MF = 10 or 20 ) , 30 + MAXL + LIWP if MITER = 1 ( MF = 11 , 21 ) , 30 + LIWP if MITER = 2 , 3 , 4 , or 9 . MAXL = 5 unless a different optional input value is given . LIWP = length of integer user work space for preconditioning ( see conditional input list following ) . The first few words of IWORK are used for conditional and\n optional inputs and optional outputs. The following 4 words in IWORK are conditional inputs,\n required if MITER .ge. 1: IWORK(1) = LWP  = length of real array WP for use in\n                     preconditioning (part of RWORK array).\n          IWORK(2) = LIWP = length of integer array IWP for use in\n                     preconditioning (part of IWORK array).\n                     The arrays WP and IWP are work arrays under the\n                     user's control, for use in the routines that\n                     perform preconditioning operations (JAC and PSOL).\n          IWORK(3) = JPRE = preconditioner type flag:\n                   = 0 for no preconditioning (P1 = P2 = P = identity)\n                   = 1 for left-only preconditioning (P2 = identity)\n                   = 2 for right-only preconditioning (P1 = identity)\n                   = 3 for two-sided preconditioning (and PCG or PCGS)\n          IWORK(4) = JACFLG = flag for whether JAC is called.\n                   = 0 if JAC is not to be called,\n                   = 1 if JAC is to be called.\n                     Use JACFLG = 1 if JAC computes any nonconstant\n                     data needed in preconditioning operations,\n                     such as some of the Jacobian elements. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODPK\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODPK between calls, if\n desired (but not for use by any of the user-supplied subroutines). JAC the name of the user-supplied routine to compute any\n Jacobian elements (or approximations) involved in the\n matrix preconditioning operations (MITER .ge. 1).\n It is to have the form SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , & & HL0 , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), & & HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy used in the preconditioners P1, P2, P. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively, and YSV also contains the current\n value of y.  The array V is work space of length\n NEQ for use by JAC.  REWT is the array of reciprocal error\n weights (1/EWT).  JAC must multiply all computed Jacobian\n elements by the scalar -HL0, add the identity matrix, and do\n any factorization operations called for, in preparation\n for solving linear systems with a coefficient matrix of\n P1, P2, or P.  The matrix P1*P2 or P should be an\n approximation to  identity - HL0 * (df/dy).  JAC should\n return IER = 0 if successful, and IER .ne. 0 if not.\n (If IER .ne. 0, a smaller time step will be tried.)\n The arrays WP (of length LWP) and IWP (of length LIWP)\n are for use by JAC and PSOL for work space and for storage\n of data needed for the solution of the preconditioner\n linear systems.  Their lengths and contents are under the\n user’s control. The JAC routine may save relevant Jacobian elements (or\n approximations) used in the preconditioners, along with the\n value of HL0, and use these to reconstruct preconditioner\n matrices later without reevaluationg those elements. This may be cost-effective if JAC is called with HL0\n considerably different from its earlier value, indicating\n that a corrector convergence failure has occurred because\n of the change in HL0, not because of changes in the\n value of the Jacobian.  In doing this, use the saved and\n current values of HL0 to decide whether to use saved\n or reevaluated elements. JAC may alter V, but may not alter Y, YSV, REWT, FTY, or HL0. JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. PSOL the name of the user-supplied routine for the\n solution of preconditioner linear systems.\n It is to have the form SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P,\n as coefficient matrix, and return the solution vector in B. LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner P. In the case MITER = 9 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - HL0 * (df/dy). PSOL can use data generated in the JAC routine and stored in\n WP and IWP. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively.  The array WK is work space of length\n NEQ for use by PSOL. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, as of the last\n JAC call, is needed, it must have been saved by JAC in WP.\n On return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful , IER . gt . 0 on a recoverable error , meaning that the time step will be retried , IER . lt . 0 on an unrecoverable error , meaning that the solver is to stop immediately . PSOL may not alter Y, FTY, or HL0. PSOL must be declared External in the calling program. Subroutine PSOL may access user-defined quantities in\n NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in PSOL) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. MF the method flag.  Used only for input.  The legal values of\n MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29. MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). MITER indicates the corrector iteration method: MITER description 0 means functional iteration (no linear system is involved). 1 means Newton iteration with Scaled Preconditioned Incomplete Orthogonalization Method (SPIOM) for the linear systems. 2 means Newton iteration with Scaled Preconditioned Generalized Minimal Residual method (SPIGMR) for the linear systems. 3 means Newton iteration with Preconditioned Conjugate Gradient method (PCG) for the linear systems. 4 means Newton iteration with scaled Preconditioned Conjugate Gradient method (PCGS) for the linear systems. 9 means Newton iteration with only the user-supplied PSOL routine called (no Krylov iteration) for the linear systems. JPRE is ignored, and PSOL is called with LR = 0. See comments in the introduction about the choice of MITER.\n If MITER .ge. 1, the user must supply routines JAC and PSOL\n (the names are arbitrary) as described above.\n For MITER = 0, dummy arguments can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) DELT RWORK(8) convergence test constant in Krylov iteration algorithm.  The default is .05. MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MAXL IWORK(8) maximum number of iterations in the SPIOM, SPIGMR, PCG, or PCGS algorithm (.le. NEQ). The default is MAXL = MIN(5,NEQ). KMP IWORK(9) number of vectors on which orthogonalization is done in SPIOM or SPIGMR algorithm (.le. MAXL). The default is KMP = MAXL. Note:  When KMP .lt. MAXL and MF = 22, the length of RWORK must be defined accordingly.  See the definition of RWORK above. Optional Outputs. As optional additional output from DLSODPK, the variables listed\n below are quantities related to the performance of DLSODPK\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODPK, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NPE IWORK(13) the number of calls to JAC so far (for Jacobian evaluation associated with preconditioning). NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNI IWORK(19) number of nonlinear iterations so far (each of which calls an iterative linear solver). NLI IWORK(20) number of linear iterations so far. Note: A measure of the success of algorithm is the average number of linear iterations per nonlinear iteration, given by NLI/NNI. If this is close to MAXL, MAXL may be too small. NPS IWORK(21) number of preconditioning solve operations (PSOL calls) so far. NCFN IWORK(22) number of convergence failures of the nonlinear (Newton) iteration so far. Note: A measure of success is the overall rate of nonlinear convergence failures, NCFN/NST. NCFL IWORK(23) number of convergence failures of the linear iteration so far. Note: A measure of success is the overall rate of linear convergence failures, NCFL/NNI. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODPK. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODPK.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODPK, if the default is not desired. The default value of lun is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODPK. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCPK(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODPK (see Part 3 below). RSAV must be a real array of length 222 or more, and ISAV must be an integer array of length 50 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCPK is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODPK. CALL DINTDY(,,,,,) Provide derivatives of y, of various (See below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODPK. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODPK).\n for valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.)\n K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODPK directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODPK is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODPK call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variable, and later restore these values before the\n next DLSODPK call for that problem.  To save and restore the values\n , use Subroutine DSRCPK (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. below are descriptions of two routines in the DLSODPK package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODPK call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODPK in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W) where: N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODPK.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n  - substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n  - ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. Pedigree: DLSODE is derived from the 18 November 2003 version of\n Livermore Solver for Ordinary\n Differential Equations package ODEPACK, References: Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix\n     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989),\n     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987. Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Peter N. Brown\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf Calls proc~~dlsodpk~2~~CallsGraph proc~dlsodpk~2 dlsodpk proc~dewset~2 dewset proc~dlsodpk~2->proc~dewset~2 proc~xerrwd~2 xerrwd proc~dlsodpk~2->proc~xerrwd~2 proc~dvnorm~2 dvnorm proc~dlsodpk~2->proc~dvnorm~2 proc~dintdy~2 dintdy proc~dlsodpk~2->proc~dintdy~2 proc~dumach~2 dumach proc~dlsodpk~2->proc~dumach~2 proc~dstodpk~2 dstodpk proc~dlsodpk~2->proc~dstodpk~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dintdy~2->proc~xerrwd~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dstodpk~2->proc~dvnorm~2 proc~dcfode~2 dcfode proc~dstodpk~2->proc~dcfode~2 proc~dsolpk~2 dsolpk proc~dstodpk~2->proc~dsolpk~2 proc~dpkset~2 dpkset proc~dstodpk~2->proc~dpkset~2 proc~dusol~2 dusol proc~dsolpk~2->proc~dusol~2 proc~dspiom~2 dspiom proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dpcgs~2 dpcgs proc~dsolpk~2->proc~dpcgs~2 proc~dscal~2 dscal proc~dsolpk~2->proc~dscal~2 proc~dpcg~2 dpcg proc~dsolpk~2->proc~dpcg~2 proc~dusol~2->proc~dvnorm~2 proc~dspiom~2->proc~dscal~2 proc~dnrm2~2 DNRM2 proc~dspiom~2->proc~dnrm2~2 proc~datv~2 datv proc~dspiom~2->proc~datv~2 none~approximate~2 approximate proc~dspiom~2->none~approximate~2 proc~dhefa~2 dhefa proc~dspiom~2->proc~dhefa~2 proc~dorthog~2 dorthog proc~dspiom~2->proc~dorthog~2 proc~dspigmr~2->proc~dscal~2 proc~dspigmr~2->proc~dnrm2~2 proc~dspigmr~2->proc~datv~2 none~approximate approximate proc~dspigmr~2->none~approximate proc~dspigmr~2->proc~dorthog~2 proc~dheqr~2 dheqr proc~dspigmr~2->proc~dheqr~2 proc~dpcgs~2->proc~dvnorm~2 proc~datp~2 datp proc~dpcgs~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcgs~2->proc~daxpy~2 proc~dpcg~2->proc~dvnorm~2 proc~dpcg~2->proc~datp~2 proc~dpcg~2->proc~daxpy~2 proc~ddot~2 ddot proc~dpcg~2->proc~ddot~2 proc~datv~2->proc~dnrm2~2 none~approximate~2->proc~daxpy~2 x x none~approximate~2->x wght wght none~approximate~2->wght b b none~approximate~2->b v v none~approximate~2->v proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 psol psol none~approximate~2->psol none~approximate->proc~daxpy~2 none~approximate->x none~approximate->wght proc~dhels~2 dhels none~approximate->proc~dhels~2 none~approximate->b none~approximate->v none~approximate->psol proc~datp~2->proc~dvnorm~2 proc~dhefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~dorthog~2->proc~ddot~2 proc~dhels~2->proc~daxpy~2 proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli avdim ayi big ewti h0 hmax hmx i i1 i2 iflag ihit imxer kgo lavd lcfl lcfn leniw leniwk lenrw lenwk lenwm lf0 liwp lwarn lwp mord msg mxhnl0 mxstp0 ncfl0 ncfn0 nli0 nni0 nnid nstd nwarn rcfl rcfn rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsodpk Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: avdim real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: kgo logical, public :: lavd logical, public :: lcfl logical, public :: lcfn integer, public :: leniw integer, public :: leniwk integer, public :: lenrw integer, public :: lenwk integer, public :: lenwm integer, public :: lf0 integer, public :: liwp logical, public :: lwarn integer, public :: lwp integer, public, dimension(2), save :: mord character(len=60), public :: msg integer, public, save :: mxhnl0 integer, public, save :: mxstp0 integer, public :: ncfl0 integer, public :: ncfn0 integer, public :: nli0 integer, public :: nni0 integer, public :: nnid integer, public :: nstd integer, public :: nwarn real(kind=dp), public :: rcfl real(kind=dp), public :: rcfn real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsodpk ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , psol , Mf ) external f external jac external psol real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , avdim , ayi , big , ewti , h0 , hmax , hmx , rcfl , rcfn , rh , rtoli , size , sum , tcrit , tdist , tnext ,& & tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , kgo , leniw , leniwk , lenrw , lenwk , lenwm , lf0 , liwp , lwp , ncfl0 , ncfn0 , nli0 , & & nni0 , nnid , nstd , nwarn logical :: ihit , lavd , lcfl , lcfn , lwarn integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODPK, DINTDY, DSTODPK, !  DSOLPK, and DATV. !  The block DLPK01 is declared in subroutines DLSODPK, DSTODPK, DPKSET, !  and DSOLPK. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODPK-  ISTATE(=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1100 ! msg = 'DLSODPK-  Run aborted.. apparent infinite loop.   ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODPK-  ITASK (=I1) illegal.' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODPK-  ISTATE.gt.1 but DLSODPK not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, MF. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODPK-  NEQ (=I1) .lt. 1    ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODPK-  ISTATE = 3 and NEQ increased (I1 to I2).' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODPK-  ITOL (=I1) illegal. ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODPK-  IOPT (=I1) illegal. ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 700 if ( dls1 % miter < 0 ) goto 700 if ( dls1 % miter > 4 . and . dls1 % miter < 9 ) goto 700 if ( dls1 % miter >= 1 ) dlpk % jpre = Iwork ( 3 ) dlpk % jacflg = 0 if ( dls1 % miter >= 1 ) dlpk % jacflg = Iwork ( 4 ) !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODPK-  MAXORD (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODPK-  MXSTEP (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODPK-  MXHNIL (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODPK-  TOUT (=R1) behind T (=R2)     ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1100 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODPK-  HMAX (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1100 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODPK-  HMIN (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1100 else dlpk % maxl = Iwork ( 8 ) if ( dlpk % maxl == 0 ) dlpk % maxl = 5 dlpk % maxl = min ( dlpk % maxl , dls1 % n ) dlpk % kmp = Iwork ( 9 ) if ( dlpk % kmp == 0 . or . dlpk % kmp > dlpk % maxl ) dlpk % kmp = dlpk % maxl dlpk % delt = Rwork ( 8 ) if ( dlpk % delt == 0.0D0 ) dlpk % delt = 0.05D0 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 dlpk % maxl = min ( 5 , dls1 % n ) dlpk % kmp = dlpk % maxl dlpk % delt = 0.05D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  RWORK segments (in order) are denoted  YH, WM, EWT, SAVF, SAVX, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate == 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh if ( dls1 % miter == 0 ) lenwk = 0 if ( dls1 % miter == 1 ) lenwk = dls1 % n * ( dlpk % maxl + 2 ) + dlpk % maxl * dlpk % maxl if ( dls1 % miter == 2 ) lenwk = dls1 % n * ( dlpk % maxl + 2 + min ( 1 , dlpk % maxl - dlpk % kmp )) + ( dlpk % maxl + 3 ) * dlpk % maxl + 1 if ( dls1 % miter == 3 . or . dls1 % miter == 4 ) lenwk = 5 * dls1 % n if ( dls1 % miter == 9 ) lenwk = 2 * dls1 % n lwp = 0 if ( dls1 % miter >= 1 ) lwp = Iwork ( 1 ) lenwm = lenwk + lwp dlpk % locwp = lenwk + 1 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dlpk % lsavx = dls1 % lsavf + dls1 % n dls1 % lacor = dlpk % lsavx + dls1 % n if ( dls1 % miter == 0 ) dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 31 leniwk = 0 if ( dls1 % miter == 1 ) leniwk = dlpk % maxl liwp = 0 if ( dls1 % miter >= 1 ) liwp = Iwork ( 2 ) leniw = 30 + leniwk + liwp dlpk % lociwp = leniwk + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODPK-  RWORK length needed, LENRW(=I1), exceeds LRW(=I2) ' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( leniw > Liw ) then msg = 'DLSODPK-  IWORK length needed, LENIW(=I1), exceeds LIW(=I2) ' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1100 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODPK-  RTOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1100 elseif ( atoli < 0.0D0 ) then msg = 'DLSODPK-  ATOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1100 endif enddo !  Load SQRT(N) and its reciprocal in Common. --------------------------- dlpk % sqrtn = sqrt ( real ( dls1 % n )) dlpk % rsqrtn = 1.0D0 / dlpk % sqrtn if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 900 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 nli0 = 0 nni0 = 0 ncfn0 = 0 ncfl0 = 0 nwarn = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 dlpk % nni = 0 dlpk % nli = 0 dlpk % nps = 0 dlpk % ncfn = 0 dlpk % ncfl = 0 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODPK-  EWT(I1) is R1 .le. 0.0        ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1100 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( f(i)/ywt(i) )**2  ) !                                        1 !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          f(i)   = i-th component of initial value of f, !          ywt(i) = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODPK- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1100 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODPK. ------ dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into SAVF. --------- do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst nli0 = dlpk % nli nni0 = dlpk % nni ncfn0 = dlpk % ncfn ncfl0 = dlpk % ncfl nwarn = 0 select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODPK-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2) ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1100 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 900 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODPK. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, !  Check for poor Newton/Krylov method performance, update EWT (if not !  at start of problem), check for too much accuracy being requested, !  and check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODPK-  At current T (=R1), MXSTEP (=I1) steps  ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else nstd = dls1 % nst - dls1 % nslast nnid = dlpk % nni - nni0 if ( nstd >= 10 . and . nnid /= 0 ) then avdim = real ( dlpk % nli - nli0 ) / real ( nnid ) rcfn = real ( dlpk % ncfn - ncfn0 ) / real ( nstd ) rcfl = real ( dlpk % ncfl - ncfl0 ) / real ( nnid ) lavd = avdim > ( dlpk % maxl - 0.05D0 ) lcfn = rcfn > 0.9D0 lcfl = rcfl > 0.9D0 lwarn = lavd . or . lcfn . or . lcfl if ( lwarn ) then nwarn = nwarn + 1 if ( nwarn <= 10 ) then if ( lavd ) then msg = 'DLSODPK- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lavd ) then msg = '      at T = R1 by average no. of linear iterations = R2    ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , avdim ) endif if ( lcfn ) then msg = 'DLSODPK- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfn ) then msg = '      at T = R1 by nonlinear convergence failure rate = R2  ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfn ) endif if ( lcfl ) then msg = 'DLSODPK- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfl ) then msg = '      at T = R1 by linear convergence failure rate = R2     ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfl ) endif endif endif endif call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODPK-  At T (=R1), EWT(I1) has become R2.le.0. ' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 600 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODPK-  Warning..Internal T(=R1) and H(=R2) are ' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODPK-  Above warning has been issued I1 times. ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODPK(NEQ,Y,YH,NYH,YH,EWT,SAVF,SAVX,ACOR,WM,IWM,f,JAC,PSOL) ! ----------------------------------------------------------------------- call dstodpk ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dlpk % lsavx ), & & Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), f , jac , psol ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODPK-  At T(=R1), step size H(=R2), the error  ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODPK-  At T (=R1) and step size H (=R2), the   ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) !  KFLAG = -3.  Unrecoverable error from PSOL. -------------------------- msg = 'DLSODPK-  At T (=R1) an unrecoverable error return' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      was made from Subroutine PSOL     ' call xerrwd ( msg , 40 , 205 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 600 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  see if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODPK-  At start of problem, too much accuracy  ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1100 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODPK-  At T (=R1), too much accuracy requested ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 600 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODPK. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 600 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl return 700 continue msg = 'DLSODPK-  MF (=I1) illegal.   ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 800 continue msg = 'DLSODPK-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)  ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1100 900 continue msg = 'DLSODPK-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)  ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1100 1000 continue msg = 'DLSODPK-  Trouble in DINTDY. ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1100 continue Istate = - 3 return 99999 continue end subroutine dlsodpk","tags":"","loc":"proc/dlsodpk~2.html"},{"title":"dlsodi – odepack","text":"subroutine dlsodi(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) Synopsis DLSODI solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ\n\n      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n           i      1   2       NEQ If A is singular, this is a differential-algebraic system.\n This version is in double precision. Summary of Usage Communication between the user and the DLSODI package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form: SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) which computes the residual function r = g(t,y)  -  A(t,y) * s , as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSODI.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. Next, decide whether full or banded form is more economical\n for the storage of matrices.  DLSODI must deal internally with the\n matrices A and dr/dy, where r is the residual function defined above.\n DLSODI generates a linear combination of these two matrices, and\n this is treated in either full or banded form. The matrix structure is communicated by a method flag MF,\n which is 21 or 22 for the full case, and 24 or 25 in the band case. In the banded case, DLSODI requires two half-bandwidth\n parameters ML and MU.  These are, respectively, the widths of the\n lower and upper parts of the band, excluding the main diagonal.\n Thus the band consists of the locations (i,j) with\n i-ML .le. j .le. i+MU, and the full bandwidth is ML+MU+1.\n Note that the band must accommodate the nonzero elements of\n A(t,y), dg/dy, and d(A*s)/dy (s fixed).  Alternatively, one\n can define a band that encloses only the elements that are relatively\n large in magnitude, and gain some economy in storage and possibly\n also efficiency, although the appropriate threshhold for\n retaining matrix elements is highly problem-dependent. C. You must also provide a subroutine of the form: SUBROUTINE ADDA ( NEQ , T , Y , ML , MU , P , NROWP ) DOUBLE PRECISION T , Y ( * ), P ( NROWP , * ) which adds the matrix A = A(t,y) to the contents of the array P.\n T and the Y array are input and should not be altered. In the full matrix case, this routine should add elements of\n to P in the usual order.  I.e., add A(i,j) to P(i,j).  (Ignore the\n ML and MU arguments in this case.) In the band matrix case, this routine should add element A(i,j)\n to P(i-j+MU+1,j).  I.e., add the diagonal lines of A to the rows of\n P from the top down (the top line of A added to the first row of P). D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)*s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21 or 24, and provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , S , ML , MU , P , NROWP ) DOUBLE PRECISION T , Y ( * ), S ( * ), P ( NROWP , * ) which computes dr/dy as a function of t, y, and s.  Here T, Y, and\n S are inputs, and the routine is to load dr/dy into P as follows: In the full matrix case (MF = 21), load P(i,j) with dr(i)/dy(j),\n the partial derivative of r(i) with respect to y(j).  (Ignore the\n ML and MU arguments in this case.) In the band matrix case (MF = 24), load P(i-j+mu+1,j) with\n dr(i)/dy(j), i.e. load the diagonal lines of dr/dy into the rows of\n P from the top down. In either case, only nonzero elements need be loaded, and the\n indexing of P is the same as in the ADDA routine. Note that if A is independent of y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy. If it is not feasible to provide a JAC routine, use\n MF = 22 or 25, and DLSODI will compute an approximate Jacobian\n internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSODI compute\n this vector (ISTATE = 0).  (DLSODI will solve the system A * s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI. The input array YDOTI and the initial Y array must be consistent with\n the equations A * dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y) * YDOTI  must be approximately zero. F. Write a main program which calls Subroutine DLSODI once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODI.  On the first call to DLSODI, supply arguments as follows: RES name of user subroutine for residual function r. ADDA name of user subroutine for computing and adding A(t,y). JAC name of user subroutine for Jacobian matrix dr/dy\n (MF = 21 or 24).  If not used, pass a dummy name. Note: the names for the RES and ADDA routines and (if used) the\n JAC routine must be declared External in the calling program. NEQ number of scalar equations in the system. Y array of initial values, of length NEQ. YDOTI array of length NEQ (containing initial dy/dt if ISTATE = 1). T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control. Caution : Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1 if the\n initial dy/dt is supplied, and 0 otherwise. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 +  9*NEQ + NEQ**2           for MF = 21 or 22,\n       22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least 20 + NEQ.\n If MF = 24 or 25, input in IWORK(1),IWORK(2) the lower\n and upper half-bandwidths ML,MU. LIW declared length of IWORK (in user’s dimension). MF method flag.  Standard values are: value description 21 for a user-supplied full Jacobian. 22 for an internally generated full Jacobian. 24 for a user-supplied banded Jacobian. 25 for an internally generated banded Jacobian. for other choices of MF, see the paragraph on MF in\n the full description below. Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE allowed values and their descripitions: values description 2 if DLSODI was successful, negative otherwise. -1 means excess work done on this call (check all inputs). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 cannot occur in casual use. -8 means DLSODI was unable to compute the initial dy/dt. In casual use, this means A(t,y) is initially singular. Supply YDOTI and use ISTATE = 1 on the first call. If DLSODI returns ISTATE = -1, -4, or -5, then the output of\n  DLSODI also includes YDOTI = array containing residual vector\n  r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSODI again.  No other parameters need be reset. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODI.  The problem is from chemical\n kinetics, and consists of the following three equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n       0.   = y1 + y2 + y3 - 1. on the interval from t = 0.0 to t = 4.e10, with initial conditions y1 = 1.0, y2 = y3 = 0. The following coding solves this problem with DLSODI, using MF = 21\n and printing results at t = .4, 4., …, 4.e10.  It uses\n ITOL = 2 and ATOL much smaller for y2 than y1 or y3 because\n y2 has much smaller values.  dy/dt is supplied in YDOTI. We had\n obtained the initial value of dy3/dt by differentiating the\n third equation and evaluating the first two at t = 0.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsodi_ex use m_odepack implicit none external aplusp external dgbydy external resid integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y , ydoti integer :: iopt , iout , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 58 ) :: rwork call reference () neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. ydoti ( 1 ) = - . 04 ydoti ( 2 ) = . 04 ydoti ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 58 liw = 23 mf = 21 do iout = 1 , 12 call dlsodi ( resid , aplusp , dgbydy ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & atol , itask , istate , iopt , rwork , lrw , iwork , liw , mf ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0. endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99030 format ( / ' No. steps =' , i4 , '  No. r-s =' , i4 , '  No. J-s =' , i4 ) end program dlsodi_ex subroutine resid ( Neq , T , Y , S , R , Ires ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( in ), dimension ( 3 ) :: S real ( kind = dp ), intent ( out ), dimension ( 3 ) :: R integer :: Ires R ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) - S ( 1 ) R ( 2 ) = . 04 * Y ( 1 ) - 1.D4 * Y ( 2 ) * Y ( 3 ) - 3.D7 * Y ( 2 ) * Y ( 2 ) - S ( 2 ) R ( 3 ) = Y ( 1 ) + Y ( 2 ) + Y ( 3 ) - 1. end subroutine resid subroutine aplusp ( Neq , T , Y , Ml , Mu , P , Nrowp ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), dimension ( 3 ) :: Y integer :: Ml integer :: Mu real ( kind = dp ), intent ( inout ), dimension ( Nrowp , 3 ) :: P integer , intent ( in ) :: Nrowp P ( 1 , 1 ) = P ( 1 , 1 ) + 1. P ( 2 , 2 ) = P ( 2 , 2 ) + 1. end subroutine aplusp subroutine dgbydy ( Neq , T , Y , S , Ml , Mu , P , Nrowp ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), dimension ( 3 ) :: S integer :: Ml integer :: Mu real ( kind = dp ), intent ( out ), dimension ( Nrowp , 3 ) :: P integer , intent ( in ) :: Nrowp P ( 1 , 1 ) = - . 04 P ( 1 , 2 ) = 1.D4 * Y ( 3 ) P ( 1 , 3 ) = 1.D4 * Y ( 2 ) P ( 2 , 1 ) = . 04 P ( 2 , 2 ) = - 1.D4 * Y ( 3 ) - 6.D7 * Y ( 2 ) P ( 2 , 3 ) = - 1.D4 * Y ( 2 ) P ( 3 , 1 ) = 1. P ( 3 , 2 ) = 1. P ( 3 , 3 ) = 1. end subroutine dgbydy The output of this program (on a CDC-7600 in single precision)\n is as follows:\n\n   At t =  4.0000e-01   Y =  9.851726e-01  3.386406e-05  1.479357e-02\n   At t =  4.0000e+00   Y =  9.055142e-01  2.240418e-05  9.446344e-02\n   At t =  4.0000e+01   Y =  7.158050e-01  9.184616e-06  2.841858e-01\n   At t =  4.0000e+02   Y =  4.504846e-01  3.222434e-06  5.495122e-01\n   At t =  4.0000e+03   Y =  1.831701e-01  8.940379e-07  8.168290e-01\n   At t =  4.0000e+04   Y =  3.897016e-02  1.621193e-07  9.610297e-01\n   At t =  4.0000e+05   Y =  4.935213e-03  1.983756e-08  9.950648e-01\n   At t =  4.0000e+06   Y =  5.159269e-04  2.064759e-09  9.994841e-01\n   At t =  4.0000e+07   Y =  5.306413e-05  2.122677e-10  9.999469e-01\n   At t =  4.0000e+08   Y =  5.494532e-06  2.197826e-11  9.999945e-01\n   At t =  4.0000e+09   Y =  5.129457e-07  2.051784e-12  9.999995e-01\n   At t =  4.0000e+10   Y = -7.170472e-08 -2.868188e-13  1.000000e+00\n\n   No. steps = 330  No. r-s = 404  No. J-s =  69 Full Description of User Interface to DLSODI. The user interface to DLSODI consists of the following parts. The call sequence to Subroutine DLSODI, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODI package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODI package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF, and those used for both input and output are\n     Y, T, ISTATE, YDOTI. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODI to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES the name of the user-supplied subroutine which supplies\n the residual vector for the ODE system, defined by r = g(t,y) - A(t,y) * s as a function of the scalar t and the vectors\n s and y (s approximates dy/dt).  This subroutine\n is to have the form SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) where NEQ, T, Y, S, and IRES are input, and R and\n IRES are output.  Y, S, and R are arrays of length NEQ. On input, IRES indicates how DLSODI will use the\n returned array R, as follows: IRES description 1 means that DLSODI needs the full residual, r = g - A*s, exactly. -1 means that DLSODI is using R only to compute the Jacobian dr/dy by difference quotients. The RES routine can ignore IRES, or it can omit some terms\n if IRES = -1.  If A does not depend on y, then RES can\n just return R = g when IRES = -1.  If g - A*s contains other\n additive terms that are independent of y, these can also be\n dropped, if done consistently, when IRES = -1. The subroutine should set the flag IRES if it\n encounters a halt condition or illegal input.\n Otherwise, it should not reset IRES.  On output, IRES = 1 or -1 represents a normal return, and\n DLSODI continues integrating the ODE.  Leave IRES\n unchanged from its input value. IRES = 2 tells DLSODI to immediately return control\n to the calling program, with ISTATE = 3.  This lets\n the calling program change parameters of the problem,\n if necessary. IRES = 3 represents an error condition (for example, an\n illegal value of y).  DLSODI tries to integrate the system\n without getting IRES = 3 from RES.  If it cannot, DLSODI\n returns with ISTATE = -7 or -1. On an DLSODI return with ISTATE = 3, -1, or -7, the values\n of T and Y returned correspond to the last point reached\n successfully without getting the flag IRES = 2 or 3. The flag values IRES = 2 and 3 should not be used to\n handle switches or root-stop conditions.  This is better\n done by calling DLSODI in a one-step mode and checking the\n stopping function for a sign change at each step. If quantities computed in the RES routine are needed\n externally to DLSODI, an extra call to RES should be made\n for this purpose, for consistent and accurate results.\n To get the current dy/dt for the S argument, use DINTDY. RES must be declared External in the calling\n program.  See note below for more about RES. ADDA the name of the user-supplied subroutine which adds the\n matrix A = A(t,y) to another matrix stored in the same form\n as A.  The storage form is determined by MITER (see MF).\n This subroutine is to have the form SUBROUTINE ADDA (NEQ, T, Y, ML, MU, P, NROWP)\n               DOUBLE PRECISION T, Y(*), P(NROWP,*) where NEQ, T, Y, ML, MU, and NROWP are input and P is\n output.  Y is an array of length NEQ, and the matrix P is\n stored in an NROWP by NEQ array. In the full matrix case ( MITER = 1 or 2) ADDA should\n add  A    to P(i,j).  ML and MU are ignored.\n       i,j\n\n In the band matrix case ( MITER = 4 or 5) ADDA should\n add  A    to  P(i-j+MU+1,j).\n       i,j See JAC for details on this band storage form. ADDA must be declared External in the calling program.\n See note below for more information about ADDA. JAC the name of the user-supplied subroutine which supplies the\n Jacobian matrix, dr/dy, where r = g - A*s.  The form of the\n Jacobian matrix is determined by MITER.  JAC is required\n if MITER = 1 or 4 – otherwise a dummy name can be\n passed.  This subroutine is to have the form SUBROUTINE JAC ( NEQ , T , Y , S , ML , MU , P , NROWP ) DOUBLE PRECISION T , Y ( * ), S ( * ), P ( NROWP , * ) where NEQ, T, Y, S, ML, MU, and NROWP are input and P\n is output.  Y and S are arrays of length NEQ, and the\n matrix P is stored in an NROWP by NEQ array.\n P is to be loaded with partial derivatives (elements\n of the Jacobian matrix) on output. In the full matrix case (MITER = 1), ML and MU\n are ignored and the Jacobian is to be loaded into P\n by columns– i.e., dr(i)/dy(j) is loaded into P(i,j). In the band matrix case (MITER = 4), the elements\n within the band are to be loaded into P by columns,\n with diagonal lines of dr/dy loaded into the\n rows of P.  Thus dr(i)/dy(j) is to be loaded\n into P(i-j+MU+1,j).  The locations in P in the two\n triangular areas which correspond to nonexistent matrix\n elements can be ignored or loaded arbitrarily, as they\n they are overwritten by DLSODI.  ML and MU are the\n half-bandwidth parameters (see IWORK). In either case, P is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to RES with the same\n arguments NEQ, T, Y, and S.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by RES and not recomputed by JAC\n if desired.  Also, JAC may alter the Y array, if desired. JAC need not provide dr/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. JAC must be declared External in the calling program.\n See note below for more about JAC. Notes on RES, ADDA, and JAC: These subroutines may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in the subroutines) and/or Y has length\n exceeding NEQ(1).  However, these routines should not alter\n NEQ(1), Y(1),…,Y(NEQ) or any other input variables.\n See the descriptions of NEQ and Y below. NEQ the size of the system (number of first order ordinary\n differential equations or scalar algebraic equations).\n Used only for input. NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in RES, ADDA, or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODI package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to RES, ADDA, and JAC.  Hence, if it is an array,\n locations NEQ(2),… may be used to store other integer data\n and pass it to RES, ADDA, or JAC.  Each such subroutine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 0 or 1), and only for output on other\n calls.  On the first call, Y must contain the vector of\n initial values.  On output, Y contains the computed solution\n vector, evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n ADDA, and JAC.  Hence its length may exceed NEQ,\n and locations Y(NEQ+1),… may be used to store other real\n data and pass it to RES, ADDA, or JAC.  (The DLSODI\n package accesses only Y(1),…,Y(NEQ). ) YDOTI a real array for the initial value of the vector\n dy/dt and for work space, of dimension at least NEQ. On input: If ISTATE = 0, then DLSODI will compute the initial value\n of dy/dt, if A is nonsingular.  Thus YDOTI will\n serve only as work space and may have any value. If ISTATE = 1, then YDOTI must contain the initial value\n of dy/dt. If ISTATE = 2 or 3 (continuation calls), then YDOTI\n may have any value. Note: If the initial value of A is singular, then\n DLSODI cannot compute the initial value of dy/dt, so\n it must be provided in YDOTI, with ISTATE = 1. On output, when DLSODI terminates abnormally with ISTATE =\n -1, -4, or -5, YDOTI will contain the residual\n r = g(t,y) - A(t,y)*(dy/dt).  If r is large, t is near\n its initial value, and YDOTI is supplied with ISTATE = 1,\n then there may have been an incorrect input value of\n YDOTI = dy/dt, or the problem (as given to DLSODI)\n may not have a solution. If desired, the YDOTI array may be used for other\n purposes between calls to the solver. T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n on an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 0 or 1), TOUT may be\n equal to T for one call, then should .ne. T for the next\n call.  For the initial T, an input value of TOUT .ne. T is\n used in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is RMS-norm(v) = SQRT(sum v(i)**2 / NEQ) Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array scalar RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n state of the calculation. On input, the values of ISTATE are as follows. value description 0 means this is the first call for the problem, and DLSODI is to compute the initial value of dy/dt (while doing other initializations).  See note below. 1 means this is the first call for the problem, and the initial value of dy/dt has been supplied in YDOTI (DLSODI will do other initializations).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, ML, MU, and any of the optional inputs except H0. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 0 or 1 on input. On output, ISTATE has the following values and meanings. value description 0 or 1  means nothing was done; TOUT = t and ISTATE = 0 or 1 on input. 2 means that the integration was performed successfully. 3 means that the user-supplied Subroutine RES signalled DLSODI to halt the integration and return (IRES = 2). Integration as far as T was achieved with no occurrence of IRES = 2, but this flag was set on attempting the next step. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix. -6 means EWT(i) became zero for some i during the integration.  pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. the integration was successful as far as T. -7 means that the user-supplied Subroutine RES set its error flag (IRES = 3) despite repeated tries by DLSODI to avoid that condition. -8 means that ISTATE was 0 on input but DLSODI was unable to compute the initial value of dy/dt.  See the printed message for details. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Similarly, ISTATE (= 3) need not be reset if RES told\n DLSODI to return because the calling program must change\n the parameters of the problem.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT description 0 means no optional inputs are being used. Default values will be used in all cases. 1 means one or more optional inputs are being used. RWORK a real working array (double precision).\n The length of RWORK must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LENWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENWM   = NEQ**2 + 2    if MITER is 1 or 2, and\n          LENWM   = (2*ML+MU+1)*NEQ + 2 if MITER is 4 or 5. (See MF description for the definition of METH and MITER.)\n Thus if MAXORD has its default value and NEQ is constant,\n this length is 22 + 16*NEQ + NEQ**2         for MF = 11 or 12,\n             22 + 17*NEQ + (2*ML+MU)*NEQ  for MF = 14 or 15,\n             22 +  9*NEQ + NEQ**2         for MF = 21 or 22,\n             22 + 10*NEQ + (2*ML+MU)*NEQ  for MF = 24 or 25. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least\n 20 + NEQ .  The first few words of IWORK are used for\n conditional and optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs: IWORK(1) = ML\n      IWORK(2) = MU These are the lower and upper half-bandwidths, respectively, of the\n matrices in the problem– the Jacobian dr/dy and the left-hand side\n matrix A. These half-bandwidths exclude the main diagonal, so the total\n bandwidth is ML + MU + 1 . The band is defined by the matrix locations (i,j) with i-ML .le. j\n .le. i+MU.  ML and MU must satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are\n required if MITER is 4 or 5, and ignored otherwise. ML and MU may in fact be the band parameters for matrices to which\n dr/dy and A are only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODI\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODI between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF the method flag.  Used only for input.  The legal values of\n MF are 11, 12, 14, 15, 21, 22, 24, and 25. MF has decimal digits METH and MITER: MF = 10*METH + MITER. METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). The BDF method is strongly preferred for stiff\n problems, while the Adams method is preferred when\n the problem is not stiff.  If the matrix A(t,y) is\n nonsingular, stiffness here can be taken to mean that of\n the explicit ODE system dy/dt = A-inverse * g.  If A is\n singular, the concept of stiffness is not well defined. If you do not know whether the problem is stiff, we\n recommend using METH = 2.  If it is stiff, the advantage\n of METH = 2 over METH = 1 will be great, while if it is\n not stiff, the advantage of METH = 1 will be slight.\n If maximum efficiency is important, some experimentation\n with METH may be necessary. MITER indicates the corrector iteration method: MITER description 1 means chord iteration with a user-supplied full (NEQ by NEQ) Jacobian. 2 means chord iteration with an internally generated (difference quotient) full Jacobian. This uses NEQ+1 extra calls to RES per dr/dy evaluation. 4 means chord iteration with a user-supplied banded Jacobian. 5 means chord iteration with an internally generated banded Jacobian (using ML+MU+2 extra calls to RES per dr/dy evaluation). If MITER = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n For other values of MITER, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n the use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSODI, the variables listed\n below are quantities related to the performance of DLSODI\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODI, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NRE IWORK(12) the number of residual evaluations (RES calls) for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (each involving an evaluation of A and dr/dy) for the problem so far.  This equals the number of calls to ADDA and (if MITER = 1 or 4) JAC, and the number of matrix LU decompositions. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step. This is the vector E in the descrip- tion of the error control.  It is defined only on a return from DLSODI with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODI.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODI, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODI. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODI (see Part 3 below). RSAV must be a real array of length 218 or more, and ISAV must be an integer array of length 37 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCOM is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODI. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODI. The detailed instructions for using DINTDY are as follows. The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODI).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODI directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODI is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODI call prior to the\n interruption, the contents of the call sequence variables and the\n internal state values, and later restore these values before the\n next DLSODI call for that problem.  To save and restore the values\n use Subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODI package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODI call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODI in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODI.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might: substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. Pedigree: DLSODI is a derived from the 18 November 2003 version of\n “DLSODI: Livermore Solver for Ordinary Differential Equations\n (implicit form)”. Reference: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n North-Holland, Amsterdam, 1983, pp. 55-64. Authors: Alan C. Hindmarsh and Jeffrey F. Painter\n      Center for Applied Scientific Computing, L-561\n      Lawrence Livermore National Laboratory\n      Livermore, CA 94551 Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf Calls proc~~dlsodi~2~~CallsGraph proc~dlsodi~2 dlsodi proc~dewset~2 dewset proc~dlsodi~2->proc~dewset~2 proc~dstodi dstodi proc~dlsodi~2->proc~dstodi proc~dainvg~2 dainvg proc~dlsodi~2->proc~dainvg~2 proc~xerrwd~2 xerrwd proc~dlsodi~2->proc~xerrwd~2 proc~dvnorm~2 dvnorm proc~dlsodi~2->proc~dvnorm~2 proc~dumach~2 dumach proc~dlsodi~2->proc~dumach~2 proc~dintdy~2 dintdy proc~dlsodi~2->proc~dintdy~2 proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dvnorm dvnorm proc~dstodi->proc~dvnorm proc~dgesl~2 dgesl proc~dainvg~2->proc~dgesl~2 proc~dgbfa~2 dgbfa proc~dainvg~2->proc~dgbfa~2 proc~dgefa~2 dgefa proc~dainvg~2->proc~dgefa~2 proc~dgbsl~2 dgbsl proc~dainvg~2->proc~dgbsl~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dintdy~2->proc~xerrwd~2 proc~daxpy~2 daxpy proc~dgesl~2->proc~daxpy~2 proc~ddot~2 ddot proc~dgesl~2->proc~ddot~2 proc~dgbfa~2->proc~daxpy~2 proc~dscal~2 dscal proc~dgbfa~2->proc~dscal~2 proc~idamax~2 idamax proc~dgbfa~2->proc~idamax~2 proc~dgefa~2->proc~daxpy~2 proc~dgefa~2->proc~dscal~2 proc~dgefa~2->proc~idamax~2 proc~dgbsl~2->proc~daxpy~2 proc~dgbsl~2->proc~ddot~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big ewti h0 hmax hmx i i1 i2 ier iflag ihit imxer ires kgo leniw lenrw lenwm lp lyd0 ml mord msg mu mxhnl0 mxstp0 rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsodi Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: ires integer, public :: kgo integer, public :: leniw integer, public :: lenrw integer, public :: lenwm integer, public :: lp integer, public :: lyd0 integer, public :: ml integer, public, save :: mord (2) character(len=60), public :: msg integer, public :: mu integer, public, save :: mxhnl0 integer, public, save :: mxstp0 real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsodi ( res , adda , jac , Neq , Y , Ydoti , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , Mf ) external adda external jac external res real ( kind = dp ) :: Atol ( * ) real ( kind = dp ) :: Rtol ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydoti ( * ) real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , ier , iflag , imxer , ires , kgo , leniw , lenrw , lenwm , lp , lyd0 , ml , mu logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ) :: Iwork ( Liw ) integer , save :: mord ( 2 ) character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Rwork ( Lrw ) real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following internal Common block contains !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODI, DINTDY, DSTODI, !  DPREPJI, and DSOLSY. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 0 or 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 0 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODI-  ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1300 ! msg = 'DLSODI-  Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODI-  ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( Istate <= 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODI-  ISTATE .gt. 1 but DLSODI not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 0 or 1) !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODI-  NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( Istate > 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODI-  ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1300 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODI-  ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODI-  IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 900 if ( dls1 % miter <= 0 . or . dls1 % miter > 5 ) goto 900 if ( dls1 % miter == 3 ) goto 900 if ( dls1 % miter >= 3 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODI-  ML(=I1) illegal: .lt. 0 or .ge. NEQ(=I2) ' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODI-  MU(=I1) illegal: .lt. 0 or .ge. NEQ(=I2) ' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1300 endif endif !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODI-  MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODI-  MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODI-  MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODI-  TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1300 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODI-  HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1300 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODI-  HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1300 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted YH, WM, EWT, SAVR, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate <= 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh lenwm = 0 if ( dls1 % miter <= 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( dls1 % miter >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODI-  RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( leniw > Liw ) then msg = 'DLSODI-  IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1300 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODI-  RTOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1300 elseif ( atoli < 0.0D0 ) then msg = 'DLSODI-  ATOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1300 endif enddo if ( Istate <= 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 0 or 1). !  It contains all remaining initializations, the call to DAINVG !  (if ISTATE = 1), and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1100 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nfe = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Compute initial dy/dt, if necessary, and load it and initial Y into YH lyd0 = dls1 % lyh + dls1 % nyh lp = dls1 % lwm + 1 if ( Istate == 1 ) then !  Initial dy/dt was supplied.  Load into YH (LYD0 points to YH(*,2).). - do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) Rwork ( i + lyd0 - 1 ) = Ydoti ( i ) enddo else !  DLSODI must compute initial dy/dt (LYD0 points to YH(*,2)). ---------- call dainvg ( res , adda , Neq ( 1 ), T , Y , Rwork ( lyd0 ), dls1 % miter , ml , mu , Rwork ( lp ), Iwork ( 21 ), ier ) dls1 % nfe = dls1 % nfe + 1 if ( ier < 0 ) then !  DAINVG failed because matrix A was singular. ------------------------- ier = - ier msg = 'DLSODI- Attempt to initialize dy/dt failed:  Matrix A is    ' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      singular.  DGEFA or DGBFA returned INFO = I1' call xerrwd ( msg , 50 , 207 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return elseif ( ier > 0 ) then !  DAINVG failed because RES set IRES to 2 or 3. ------------------------ msg = 'DLSODI-  Attempt to initialize dy/dt failed       ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      because residual routine set its error flag ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to IRES = (I1)' call xerrwd ( msg , 20 , 208 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return else do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo endif endif !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODI-  EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1300 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( YDOT(i)/ywt(i) )**2  ) !                                        1 !  where   w0      = MAX ( ABS(T), ABS(TOUT) ), !          YDOT(i) = i-th component of initial value of dy/dt, !          ywt(i)  = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODI-  TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1300 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lyd0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = h0 * Rwork ( i + lyd0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODI. ------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into YDOTI.--------- do i = 1 , dls1 % n Ydoti ( i ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif !  Reload WM(1) = RWORK(lWM), since lWM may have changed. --------------- Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODI-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1300 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1000 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1100 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1200 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1000 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1200 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODI. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODI-  At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODI-  At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 700 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODI-  Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODI-  Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODI(NEQ,Y,YH,NYH,YH1,EWT,SAVF,SAVR,ACOR,WM,IWM,RES, !                  ADDA,JAC,DPREPJI,DSOLSY) !  Note: SAVF in DSTODI occupies the same space as YDOTI in DLSODI. ! ----------------------------------------------------------------------- call dstodi ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Ydoti , Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), res , adda , jac , dprepji , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODI-  At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODI-  At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) case ( 5 ) !  IRES = 3 returned by RES, despite retries by DSTODI. ----------------- msg = 'DLSODI-  At T (=R1) residual routine returned     ' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error IRES = 3 repeatedly.        ' call xerrwd ( msg , 40 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 700 case default ! !  KGO = 1:success; 2:error test failure; 3:convergence failure; !        4:RES ordered return. 5:RES returned error. ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  see if TOUT or TCRIT was reached.  adjust dls1%h if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODI-  At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1300 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODI-  At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 700 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODI. !  if ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 if ( dls1 % kflag ==- 3 ) Istate = 3 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer ! Compute residual if relevant. ---------------------------------------- 600 continue lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + lyd0 - 1 ) / dls1 % h Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo ires = 1 call res ( Neq , dls1 % tn , Y , Rwork ( dls1 % lsavf ), Ydoti , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then msg = 'DLSODI-  Residual routine set its flag IRES       ' call xerrwd ( msg , 50 , 210 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to (I1) when called for final output.       ' call xerrwd ( msg , 50 , 210 , 0 , 1 , ires , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 800 ! Set Y vector, T, and optional outputs. ------------------------------- 700 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo 800 continue T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return 900 continue msg = 'DLSODI-  MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 1000 continue msg = 'DLSODI-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1300 1100 continue msg = 'DLSODI-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1300 1200 continue msg = 'DLSODI-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1300 continue Istate = - 3 return 99999 continue end subroutine dlsodi","tags":"","loc":"proc/dlsodi~2.html"},{"title":"dlsodkr – odepack","text":"subroutine dlsodkr(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf, g, Ng, Jroot) Synopsis DLSODKR: Livermore Solver for Ordinary Differential equations,\n          with preconditioned Krylov iteration methods for the\n          Newton correction linear systems, and with Rootfinding. DLSODKR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). At the same time, it locates the roots of any of a set of functions g(i) = g(i,t,y(1),...,y(NEQ))  (i = 1,...,ng). This version is in double precision. Introduction. This is a modification of the DLSODE package, and differs from it\n in five ways:\n 1.  It uses various preconditioned Krylov subspace iteration methods\n     for the linear algebraic systems that arise in the case of stiff\n     systems.  See the introductory notes below.\n 2.  It does automatic switching between functional (fixpoint)\n     iteration and Newton iteration in the corrector iteration.\n 3.  It finds the root of at least one of a set of constraint\n     functions g(i) of the independent and dependent variables.\n     It finds only those roots for which some g(i), as a function\n     of t, changes sign in the interval of integration.\n     It then returns the solution at the root, if that occurs\n     sooner than the specified stop condition, and otherwise returns\n     the solution according the specified stop condition.\n 4.  It supplies to JAC an input flag, JOK, which indicates whether\n     JAC may (optionally) bypass the evaluation of Jacobian matrix data\n     and instead process saved data (with the current value of scalar hl0).\n 5.  It contains a new subroutine that calculates the initial step\n     size to be attempted. Introduction to the Krylov methods in DLSODKR: The linear systems that must be solved have the form A * x  = b,  where  A = identity - hl0 * (df/dy) . Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial\n derivatives of f (NEQ by NEQ). The particular Krylov method is chosen by setting the second digit,\n MITER, in the method flag MF.\n Currently, the values of MITER have the following meanings: MITER description 1 means the Scaled Preconditioned Incomplete Orthogonalization Method (SPIOM). 2 means an incomplete version of the preconditioned scaled Generalized Minimal Residual method (SPIGMR). This is the best choice in general. 3 means the Preconditioned Conjugate Gradient method (PCG). Recommended only when df/dy is symmetric or nearly so. 4 means the scaled Preconditioned Conjugate Gradient method (PCGS).  Recommended only when D-inverse * df/dy * D is symmetric or nearly so, where D is the diagonal scaling matrix with elements 1/EWT(i) (see RTOL/ATOL description). 9 means that only a user-supplied matrix P (approximating A) will be used, with no Krylov iteration done.  This option allows the user to provide the complete linear system solution algorithm, if desired. The user can apply preconditioning to the linear system A*x = b,\n by means of arbitrary matrices (the preconditioners). In the case of SPIOM and SPIGMR, one can apply left and right\n preconditioners P1 and P2, and the basic iterative method is then\n applied to the matrix (P1-inverse)*A*(P2-inverse) instead of to the\n matrix A.  The product P1*P2 should be an approximation to matrix A\n such that linear systems with P1 or P2 are easier to solve than with\n A.  Preconditioning from the left only or right only means using\n P2 = identity or P1 = identity, respectively. In the case of the PCG and PCGS methods, there is only one\n preconditioner matrix P (but it can be the product of more than one).\n It should approximate the matrix A but allow for relatively\n easy solution of linear systems with coefficient matrix P.\n For PCG, P should be positive definite symmetric, or nearly so,\n and for PCGS, the scaled preconditioner D-inverse * P * D\n should be symmetric or nearly so. If the Jacobian J = df/dy splits in a natural way into a sum\n J = J1 + J2, then one possible choice of preconditioners is\n P1 = identity - hl0 * J1  and  P2 = identity - hl0 * J2\n provided each of these is easy to solve (or approximately solve). Summary of Usage. Communication between the user and the DLSODKR package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the demonstration\n program distributed with this solver. A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). B. Provide a subroutine of the form: SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) which supplies the vector function g by loading GOUT(i) with\n g(i), the i-th constraint function whose root is sought. C. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, MF should be between 21\n and 24, or possibly 29.  MF = 22 is generally the best choice.\n Use 23 or 24 only if symmetry is present.  Use MF = 29 if the\n complete linear system solution is to be provided by the user.\n The following four parameters must also be set. IWORK(1) = LWP  = length of real array WP for preconditioning.\n  IWORK(2) = LIWP = length of integer array IWP for preconditioning.\n  IWORK(3) = JPRE = preconditioner type flag:\n                  = 0 for no preconditioning (P1 = P2 = P = identity)\n                  = 1 for left-only preconditioning (P2 = identity)\n                  = 2 for right-only preconditioning (P1 = identity)\n                  = 3 for two-sided preconditioning (and PCG or PCGS)\n  IWORK(4) = JACFLG = flag for whether JAC is called.\n                    = 0 if JAC is not to be called,\n                    = 1 if JAC is to be called. Use JACFLG = 1 if JAC computes any nonconstant data for use in\n preconditioning, such as Jacobian elements.\n The arrays WP and IWP are work arrays under the user’s control,\n for use in the routines that perform preconditioning operations. D. If the problem is stiff, you must supply two routines that deal\n with the preconditioning of the linear systems to be solved. These are as follows: SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , HL0 , JOK , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy involved in the preconditioners P1, P2, P.\n The Y and FTY arrays contain the current values of y and f(t,y),\n respectively, and YSV also contains the current value of y.\n The array V is work space of length NEQ. JAC must multiply all computed Jacobian elements by the scalar\n -HL0, add the identity matrix, and do any factorization\n operations called for, in preparation for solving linear systems\n with a coefficient matrix of P1, P2, or P.  The matrix P1*P2 or P\n should be an approximation to  identity - hl0 * (df/dy).\n JAC should return IER = 0 if successful, and IER .ne. 0 if not.\n (If IER .ne. 0, a smaller time step will be tried.) JAC may alter Y and V, but not YSV, REWT, FTY, or HL0. The JOK argument can be ignored (or see full description below). SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P, as\n coefficient matrix, and return the solution vector in B. LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner matrix P. In the case MF = 29 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - hl0 * (df/dy). PSOL can use data generated in the JAC routine and stored in\n WP and IWP.  WK is a work array of length NEQ. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, at the time of the last\n JAC call, is needed, it must have been saved by JAC in WP. on return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful,\n       IER .gt. 0 if a recoverable error occurred, meaning that the\n              time step will be retried,\n       IER .lt. 0 if an unrecoverable error occurred, meaning that the\n              solver is to stop immediately. E. Write a main program which calls Subroutine DLSODKR once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODKR.  On the first call to DLSODKR, supply arguments as\n follows: F name of subroutine for right-hand side vector f.\n   This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n   The estimated local error in y(i) will be controlled so as\n   to be roughly less (in magnitude) than\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n   Thus the local error test passes if, in each component,\n   either the absolute error is less than ATOL (or ATOL(i)),\n   or the relative error is less than RTOL.\n   Use RTOL = 0.0 for pure absolute error control, and\n   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n   control.  Caution: Actual (global) errors may exceed these\n   local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + 16*NEQ + 3*NG           for MF = 10,\n        45 + 17*NEQ + 3*NG + LWP     for MF = 21,\n        61 + 17*NEQ + 3*NG + LWP     for MF = 22,\n        20 + 15*NEQ + 3*NG + LWP     for MF = 23 or 24,\n        20 + 12*NEQ + 3*NG + LWP     for MF = 29. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least: 30            for MF = 10,\n        35 + LIWP     for MF = 21,\n        30 + LIWP     for MF = 22, 23, 24, or 29. LIW declared length of IWORK (in user’s dimension). JAC,PSOL names of subroutines for preconditioning.\n These names must be declared External in the calling program. MF method flag.  Standard values are: value description 10 for nonstiff (Adams) method. 21 for stiff (BDF) method, with preconditioned SIOM. 22 for stiff method, with preconditioned GMRES method. 23 for stiff method, with preconditioned CG method. 24 for stiff method, with scaled preconditioned CG method. 29 for stiff method, with user’s PSOL routine only. G name of subroutine for constraint functions, whose\n roots are desired during the integration.\n This name must be declared External in calling program. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG for output of root information.\n See next paragraph. Note that the main program must declare arrays Y, RWORK, IWORK,\n JROOT, and possibly ATOL. F. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE values and meanings: value description 2 or 3 if DLSODKR was successful, negative otherwise. 2 means no root was found, and TOUT was reached as desired. 3 means a root was found prior to reaching TOUT. -1 means excess work done on this call (perhaps wrong MF). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad JAC or PSOL routine supplied or wrong choice of MF or tolerances, or this solver is inappropriate). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means an unrecoverable error occurred in PSOL. JROOT array showing roots found if ISTATE = 3 on return.\n   JROOT(i) = 1 if g(i) has a root at T, or 0 otherwise. G. To continue the integration after a successful return, proceed\n as follows: If ISTATE = 2 on return, reset TOUT and call DLSODKR again. If ISTATE = 3 on return, reset ISTATE to 2 and call DLSODKR again. In either case, no other parameters need be reset. Full Description of User Interface to DLSODKR. The user interface to DLSODKR consists of the following parts. The call sequence to Subroutine DLSODKR, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODKR package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODKR package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF,\n  G, and NG, that used only for output is  JROOT,\n and those used for both input and output are\n  Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODKR to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODKR, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in the user-supplied routines. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODKR package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to the user-supplied routines.  Hence, if it is an array,\n locations NEQ(2),… may be used to store other integer data\n and pass it to the user-supplied routines. Each such routine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F, G,\n JAC, and PSOL.  Hence its length may exceed NEQ, and\n locations Y(NEQ+1),… may be used to store other real data\n and pass it to the user-supplied routines.\n (The DLSODKR package accesses only Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n If a root was found, T is the computed location of the\n root reached first, on output.\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n        where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at T = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, and any of the optional inputs except H0. In addition, immediately following a return with ISTATE = 3 (root found), NG and G may be changed. (But changing NG from 0 to .gt. 0 is not allowed.) Note:  A preliminary call with TOUT = T is not counted as a first call here, as no initialization or checking of input is done.  (Such a call is sometimes useful for the purpose of outputting the initial conditions.) Thus the first call for which TOUT .ne. T requires ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. 3 means the integration was successful, and one or more roots were found before satisfying the stop condition specified by ITASK.  See JROOT. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the PSOL routine returned an unrecoverable error flag (IER .lt. 0).  The integration was successful as far as T. Note :  Since the normal output value of ISTATE is 2,\n  it does not need to be reset for normal continuation.\n  Also, since a negative input value of ISTATE will be\n  regarded as illegal, a negative output value requires the\n  user to change it, and possibly other inputs, before\n  calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a real working array (double precision). The length of RWORK must be at least\n         20 + NYH*(MAXORD+1) + 3*NEQ + 3*NG + LENLS + LWP    where\n      NYH    = the initial value of NEQ,\n      MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n               smaller value is given as an optional input),\n      LENLS = length of work space for linear system (Krylov)\n              method, excluding preconditioning:\n        LENLS = 0                               if MITER = 0,\n        LENLS = NEQ*(MAXL+3) + MAXL**2          if MITER = 1,\n        LENLS = NEQ*(MAXL+3+MIN(1,MAXL-KMP))\n             + (MAXL+3)*MAXL + 1                if MITER = 2,\n        LENLS = 6*NEQ                           if MITER = 3 or 4,\n        LENLS = 3*NEQ                           if MITER = 9.\n      (See the MF description for METH and MITER, and the\n      list of optional inputs for MAXL and KMP.)\n      LWP = length of real user work space for preconditioning\n      (see JAC/PSOL).\n      Thus if default values are used and NEQ is constant,\n      this length is:\n         20 + 16*NEQ + 3*NG           for MF = 10,\n         45 + 24*NEQ + 3*NG + LWP     for MF = 11,\n         61 + 24*NEQ + 3*NG + LWP     for MF = 12,\n         20 + 22*NEQ + 3*NG + LWP     for MF = 13 or 14,\n         20 + 19*NEQ + 3*NG + LWP     for MF = 19,\n         20 + 9*NEQ + 3*NG            for MF = 20,\n         45 + 17*NEQ + 3*NG + LWP     for MF = 21,\n         61 + 17*NEQ + 3*NG + LWP     for MF = 22,\n         20 + 15*NEQ + 3*NG + LWP     for MF = 23 or 24,\n         20 + 12*NEQ + 3*NG + LWP     for MF = 29. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT = critical value of t which the solver\n is not to overshoot.  Required if ITASK is\n 4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least\n         30                 if MITER = 0 (MF = 10 or 20),\n         30 + MAXL + LIWP   if MITER = 1 (MF = 11, 21),\n         30 + LIWP          if MITER = 2, 3, 4, or 9.\n      MAXL = 5 unless a different optional input value is given.\n      LIWP = length of integer user work space for preconditioning\n      (see conditional input list following).\n      The first few words of IWORK are used for conditional and\n      optional inputs and optional outputs. The following 4 words in IWORK are conditional inputs , required if MITER . ge . 1 : IWORK ( 1 ) = LWP = length of real array WP for use in preconditioning ( part of RWORK array ) . IWORK ( 2 ) = LIWP = length of integer array IWP for use in preconditioning ( part of IWORK array ) . The arrays WP and IWP are work arrays under the user 's control, for use in the routines that perform preconditioning operations ( JAC and PSOL ) . IWORK ( 3 ) = JPRE = preconditioner type flag : = 0 for no preconditioning ( P1 = P2 = P = identity ) = 1 for left - only preconditioning ( P2 = identity ) = 2 for right - only preconditioning ( P1 = identity ) = 3 for two - sided preconditioning ( and PCG or PCGS ) IWORK ( 4 ) = JACFLG = flag for whether JAC is called . = 0 if JAC is not to be called , = 1 if JAC is to be called . Use JACFLG = 1 if JAC computes any nonconstant data needed in preconditioning operations , such as some of the Jacobian elements . LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODKR\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODKR between calls, if\n desired (but not for use by any of the user-supplied routines). JAC the name of the user-supplied routine to compute any\n Jacobian elements (or approximations) involved in the\n matrix preconditioning operations (MITER .ge. 1).\n It is to have the form SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , & & HL0 , JOK , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), & & HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy used in the preconditioners P1, P2, P. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively, and the YSV array also contains\n the current y vector.  The array V is work space of length\n NEQ for use by JAC.  REWT is the array of reciprocal error\n weights (1/EWT).  JAC must multiply all computed Jacobian\n elements by the scalar -HL0, add the identity matrix, and do\n any factorization operations called for, in preparation\n for solving linear systems with a coefficient matrix of\n P1, P2, or P.  The matrix P1*P2 or P should be an &\n approximation to  identity - hl0 * (df/dy).  JAC should\n return IER = 0 if successful, and IER .ne. 0 if not. (If IER .ne. 0, a smaller time step will be tried.)\n The arrays WP (of length LWP) and IWP (of length LIWP)\n are for use by JAC and PSOL for work space and for storage\n of data needed for the solution of the preconditioner\n linear systems.  Their lengths and contents are under the\n user’s control. The argument JOK is an input flag for optional use\n by JAC in deciding whether to recompute Jacobian elements\n or use saved values.  If JOK = -1, then JAC must compute\n any relevant Jacobian elements (or approximations) used in\n the preconditioners.  Optionally, JAC may also save these\n elements for later reuse.  If JOK = 1, the integrator has\n made a judgement (based on the convergence history and the\n value of HL0) that JAC need not recompute Jacobian elements,\n but instead use saved values, and the current value of HL0,\n to reconstruct the preconditioner matrices, followed by\n any required factorizations.  This may be cost-effective if\n Jacobian elements are costly and storage is available. JAC may alter Y and V, but not YSV, REWT, FTY, or HL0.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. PSOL the name of the user-supplied routine for the\n solution of preconditioner linear systems.\n It is to have the form SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P,\n as coefficient matrix, and return the solution vector in B.\n LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2.\n In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner P.\n In the case MITER = 9 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - hl0 * (df/dy).\n PSOL can use data generated in the JAC routine and stored in\n WP and IWP. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively.  The array WK is work space of length\n NEQ for use by PSOL. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, as of the last\n JAC call, is needed, it must have been saved by JAC in WP. On return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful,\n        IER .gt. 0 on a recoverable error, meaning that the\n               time step will be retried,\n        IER .lt. 0 on an unrecoverable error, meaning that the\n               solver is to stop immediately.\n      PSOL may not alter Y, FTY, or HL0.\n      PSOL must be declared External in the calling program.\n           Subroutine PSOL may access user-defined quantities in\n      NEQ(2),... and Y(NEQ(1)+1),... if NEQ is an array\n      (dimensioned in PSOL) and/or Y has length exceeding NEQ(1).\n      See the descriptions of NEQ and Y above. MF the method flag.  Used only for input.  The legal values of\n MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29.\n MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). MITER indicates the corrector iteration method:\n  MITER | description\n  ----- | ----------------------------------------------------\n  0     | means functional iteration (no linear system\n        | is involved).\n  1     | means Newton iteration with Scaled Preconditioned\n        | Incomplete Orthogonalization Method (SPIOM)\n        | for the linear systems.\n  2     | means Newton iteration with Scaled Preconditioned\n        | Incomplete Generalized Minimal Residual method\n        | (SPIGMR) for the linear systems.\n  3     | means Newton iteration with Preconditioned\n        | Conjugate Gradient method (PCG)\n        | for the linear systems.\n  4     | means Newton iteration with scaled preconditioned\n        | Conjugate Gradient method (PCGS)\n        | for the linear systems.\n  9     | means Newton iteration with only the\n        | user-supplied PSOL routine called (no Krylov\n        | iteration) for the linear systems.\n        | JPRE is ignored, and PSOL is called with LR = 0. See comments in the introduction about the choice of MITER.\n If MITER .ge. 1, the user must supply routines JAC and PSOL\n (the names are arbitrary) as described above.\n For MITER = 0, a dummy argument can be used. G the name of subroutine for constraint functions, whose\n roots are desired during the integration.  It is to have\n the form SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) where NEQ, T, Y, and NG are input, and the array GOUT\n is output.  NEQ, T, and Y have the same meaning as in\n the F routine, and GOUT is an array of length NG.\n For i = 1,…,NG, this routine is to load into GOUT(i)\n the value at (t,y) of the i-th constraint function g(i).\n DLSODKR will find roots of the g(i) of odd multiplicity\n (i.e. sign changes) as they occur during the integration.\n G must be declared External in the calling program. Caution: Because of numerical errors in the functions\n g(i) due to roundoff and integration error, DLSODKR may\n return false roots, or return the same root at two or more\n nearly equal values of t.  If such false roots are\n suspected, the user should consider smaller error tolerances\n and/or higher precision in the evaluation of the g(i). If a root of some g(i) defines the end of the problem,\n the input to DLSODKR should nevertheless allow integration\n to a point slightly past that root, so that DLSODKR can\n locate the root by interpolation. Subroutine G may access user-defined quantities in\n NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in G) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG.  Used only for output.\n On a return with ISTATE = 3 (one or more roots found),\n JROOT(i) = 1 if g(i) has a root at t, or JROOT(i) = 0 if not. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) DELT RWORK(8) convergence test constant in Krylov iteration algorithm.  The default is .05. MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MAXL IWORK(8) maximum number of iterations in the SPIOM, SPIGMR, PCG, or PCGS algorithm (.le. NEQ). The default is MAXL = MIN(5,NEQ). KMP IWORK(9) number of vectors on which orthogonalization is done in SPIOM or SPIGMR algorithm (.le. MAXL). The default is KMP = MAXL. Note:  When KMP .lt. MAXL and MF = 22, the length of RWORK must be defined accordingly.  See the definition of RWORK above. Optional Outputs. As optional additional output from DLSODKR, the variables listed\n below are quantities related to the performance of DLSODKR\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown. Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODKR, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW. On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NGE IWORK(10) the number of g evaluations for the problem so far. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NPE IWORK(13) the number of calls to JAC so far (for evaluation of preconditioners). NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNI IWORK(19) number of nonlinear iterations so far (each of which calls an iterative linear solver). NLI IWORK(20) number of linear iterations so far. Note: A measure of the success of algorithm is the average number of linear iterations per nonlinear iteration, given by NLI/NNI. If this is close to MAXL, MAXL may be too small. NPS IWORK(21) number of preconditioning solve operations (PSOL calls) so far. NCFN IWORK(22) number of convergence failures of the nonlinear (Newton) iteration so far. Note: A measure of success is the overall rate of nonlinear convergence failures, NCFN/NST. NCFL IWORK(23) number of convergence failures of the linear iteration so far. Note: A measure of success is the overall rate of linear convergence failures, NCFL/NNI. NSFI IWORK(24) number of functional iteration steps so far. Note: A measure of the extent to which the problem is nonstiff is the ratio NSFI/NST. NJEV IWORK(25) number of JAC calls with JOK = -1 so far (number of evaluations of Jacobian data). The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 + 3*NG the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODKR. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODKR.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODKR, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODKR. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCKR(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODKR (see Part 3 below). RSAV must be a real array of length 228 or more, and ISAV must be an integer array of length 63 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCKR is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODKR. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODKR. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = 21 + 3 * NG CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODKR).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.)\n K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODKR directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY.\n LYH 21 + 3*NG = base address in RWORK of the history array YH.\n NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n         of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Common Blocks. If DLSODKR is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in: (1) the call sequence to DLSODKR, and\n   (2) the four internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         /DLS002/  of length   5  (1 double precision word\n                      followed by  4 integer words),\n         /DLPK01/  of length  17  (4 double precision words\n                      followed by 13 integer words),\n         /DLSR01/  of length  14     (5 double precision words\n                      followed by  9 integer words). If DLSODKR is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODKR is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODKR call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODKR call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCKR (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODKR package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODKR call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODKR in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM()\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODKR.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might: substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or ignore some components of V in the norm, with the effect of\n     suppressing the error control on those components of y. Pedigree: This is the 18 November 2003 version of\n   DLSODKR is derived from the Livermore Solver for Ordinary\n   Differential Equations package ODEPACK, References:\n 1.  Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix\n     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989),\n     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987.\n 2.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Peter N. Brown\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf real :: g integer :: Ng integer :: Jroot (*) Calls proc~~dlsodkr~2~~CallsGraph proc~dlsodkr~2 dlsodkr proc~dewset~2 dewset proc~dlsodkr~2->proc~dewset~2 proc~dcopy~2 dcopy proc~dlsodkr~2->proc~dcopy~2 proc~drchek~2 drchek proc~dlsodkr~2->proc~drchek~2 proc~xerrwd~2 xerrwd proc~dlsodkr~2->proc~xerrwd~2 proc~dlhin~2 dlhin proc~dlsodkr~2->proc~dlhin~2 proc~dumach~2 dumach proc~dlsodkr~2->proc~dumach~2 proc~dintdy~2 dintdy proc~dlsodkr~2->proc~dintdy~2 proc~dvnorm~2 dvnorm proc~dlsodkr~2->proc~dvnorm~2 proc~dstoka~2 dstoka proc~dlsodkr~2->proc~dstoka~2 proc~drchek~2->proc~dintdy~2 proc~droots~2 droots proc~drchek~2->proc~droots~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dlhin~2->proc~dvnorm~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dintdy~2->proc~xerrwd~2 proc~dstoka~2->proc~dvnorm~2 proc~dcfode~2 dcfode proc~dstoka~2->proc~dcfode~2 proc~dsolpk~2 dsolpk proc~dstoka~2->proc~dsolpk~2 proc~dsetpk~2 dsetpk proc~dstoka~2->proc~dsetpk~2 proc~dusol~2 dusol proc~dsolpk~2->proc~dusol~2 proc~dspiom~2 dspiom proc~dsolpk~2->proc~dspiom~2 proc~dspigmr~2 dspigmr proc~dsolpk~2->proc~dspigmr~2 proc~dpcgs~2 dpcgs proc~dsolpk~2->proc~dpcgs~2 proc~dscal~2 dscal proc~dsolpk~2->proc~dscal~2 proc~dpcg~2 dpcg proc~dsolpk~2->proc~dpcg~2 proc~dusol~2->proc~dvnorm~2 proc~dspiom~2->proc~dscal~2 proc~dnrm2~2 DNRM2 proc~dspiom~2->proc~dnrm2~2 proc~datv~2 datv proc~dspiom~2->proc~datv~2 none~approximate~2 approximate proc~dspiom~2->none~approximate~2 proc~dhefa~2 dhefa proc~dspiom~2->proc~dhefa~2 proc~dorthog~2 dorthog proc~dspiom~2->proc~dorthog~2 proc~dspigmr~2->proc~dscal~2 proc~dspigmr~2->proc~dnrm2~2 proc~dspigmr~2->proc~datv~2 none~approximate approximate proc~dspigmr~2->none~approximate proc~dspigmr~2->proc~dorthog~2 proc~dheqr~2 dheqr proc~dspigmr~2->proc~dheqr~2 proc~dpcgs~2->proc~dvnorm~2 proc~datp~2 datp proc~dpcgs~2->proc~datp~2 proc~daxpy~2 daxpy proc~dpcgs~2->proc~daxpy~2 proc~dpcg~2->proc~dvnorm~2 proc~dpcg~2->proc~datp~2 proc~dpcg~2->proc~daxpy~2 proc~ddot~2 ddot proc~dpcg~2->proc~ddot~2 proc~datv~2->proc~dnrm2~2 none~approximate~2->proc~daxpy~2 x x none~approximate~2->x wght wght none~approximate~2->wght b b none~approximate~2->b v v none~approximate~2->v proc~dhesl~2 dhesl none~approximate~2->proc~dhesl~2 psol psol none~approximate~2->psol none~approximate->proc~daxpy~2 none~approximate->x none~approximate->wght proc~dhels~2 dhels none~approximate->proc~dhels~2 none~approximate->b none~approximate->v none~approximate->psol proc~datp~2->proc~dvnorm~2 proc~dhefa~2->proc~daxpy~2 proc~idamax~2 idamax proc~dhefa~2->proc~idamax~2 proc~dorthog~2->proc~dnrm2~2 proc~dorthog~2->proc~daxpy~2 proc~dorthog~2->proc~ddot~2 proc~dhels~2->proc~daxpy~2 proc~dhesl~2->proc~daxpy~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli avdim big ewti h0 hmax hmx i i1 i2 ier iflag ihit imxer irfp irt kgo lavd lcfl lcfn leniw leniwk lenrw lenwk lenwm lenyh lf0 liwp lwarn lwp lyhnew mord msg mxhnl0 mxstp0 ncfl0 ncfn0 niter nli0 nni0 nnid nstd nwarn rcfl rcfn rh rtoli size tcrit tnext tolsf tp Source Code dlsodkr Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: avdim real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: irfp integer, public :: irt integer, public :: kgo logical, public :: lavd logical, public :: lcfl logical, public :: lcfn integer, public :: leniw integer, public :: leniwk integer, public :: lenrw integer, public :: lenwk integer, public :: lenwm integer, public :: lenyh integer, public :: lf0 integer, public :: liwp logical, public :: lwarn integer, public :: lwp integer, public :: lyhnew integer, public, dimension(2), save :: mord character(len=60), public :: msg integer, public, save :: mxhnl0 integer, public, save :: mxstp0 integer, public :: ncfl0 integer, public :: ncfn0 integer, public :: niter integer, public :: nli0 integer, public :: nni0 integer, public :: nnid integer, public :: nstd integer, public :: nwarn real(kind=dp), public :: rcfl real(kind=dp), public :: rcfn real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: tcrit real(kind=dp), public :: tnext real(kind=dp), public :: tolsf real(kind=dp), public :: tp Source Code subroutine dlsodkr ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , psol , Mf , g , Ng , Jroot ) external f external g external jac external psol real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , avdim , big , ewti , h0 , hmax , hmx , rcfl , rcfn , rh , rtoli , size , tcrit , tnext , tolsf , tp integer :: i , i1 , i2 , ier , iflag , imxer , irfp , irt , kgo , leniw , leniwk , lenrw , lenwk , lenwm , lenyh , lf0 , liwp , & & lwp , lyhnew , ncfl0 , ncfn0 , niter , nli0 , nni0 , nnid , nstd , nwarn logical :: ihit , lavd , lcfl , lcfn , lwarn integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf , Ng integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( * ) :: Neq integer :: Jroot ( * ) integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following four internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODKR, DINTDY, !  DSTOKA, DSOLPK, and DATV. !  The block DLS002 is declared in subroutines DLSODKR and DSTOKA. !  The block DLSR01 is declared in subroutines DLSODKR, DRCHEK, DROOTS. !  The block DLPK01 is declared in subroutines DLSODKR, DSTOKA, DSETPK, !  and DSOLPK. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( ng . ne . 0 ) jroot (: ng ) = 0 if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODKR-  ISTATE(=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1000 ! msg = 'DLSODKR-  Run aborted.. apparent infinite loop.   ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODKR-  ITASK (=I1) illegal.' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else dlsr % itaskc = Itask if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODKR- ISTATE.gt.1 but DLSODKR not initialized. ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, MF, !  and NG. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODKR-  NEQ (=I1) .lt. 1    ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODKR-  ISTATE = 3 and NEQ increased (I1 to I2).' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1000 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODKR-  ITOL (=I1) illegal. ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODKR-  IOPT (=I1) illegal. ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 600 if ( dls1 % miter < 0 ) goto 600 if ( dls1 % miter > 4 . and . dls1 % miter < 9 ) goto 600 if ( dls1 % miter >= 1 ) dlpk % jpre = Iwork ( 3 ) dlpk % jacflg = 0 if ( dls1 % miter >= 1 ) dlpk % jacflg = Iwork ( 4 ) if ( Ng < 0 ) then msg = 'DLSODKR-  NG (=I1) .lt. 0     ' call xerrwd ( msg , 30 , 30 , 0 , 1 , Ng , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( Istate /= 1 ) then if ( dlsr % irfnd == 0 . and . Ng /= dlsr % ngc ) then msg = 'DLSODKR-  NG changed (from I1 to I2) illegally,   ' call xerrwd ( msg , 50 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      i.e. not immediately after a root was found.' call xerrwd ( msg , 50 , 31 , 0 , 2 , dlsr % ngc , Ng , 0 , 0.0D0 , 0.0D0 ) goto 1000 endif endif dlsr % ngc = Ng !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODKR-  MAXORD (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODKR-  MXSTEP (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODKR-  MXHNIL (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODKR-  TOUT (=R1) behind T (=R2)     ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1000 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODKR-  HMAX (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1000 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODKR-  HMIN (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1000 else dlpk % maxl = Iwork ( 8 ) if ( dlpk % maxl == 0 ) dlpk % maxl = 5 dlpk % maxl = min ( dlpk % maxl , dls1 % n ) dlpk % kmp = Iwork ( 9 ) if ( dlpk % kmp == 0 . or . dlpk % kmp > dlpk % maxl ) dlpk % kmp = dlpk % maxl dlpk % delt = Rwork ( 8 ) if ( dlpk % delt == 0.0D0 ) dlpk % delt = 0.05D0 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 dlpk % maxl = min ( 5 , dls1 % n ) dlpk % kmp = dlpk % maxl dlpk % delt = 0.05D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  RWORK segments (in order) are denoted  G0, G1, GX, YH, WM, !  EWT, SAVF, SAVX, ACOR. ! ----------------------------------------------------------------------- if ( Istate == 1 ) dls1 % nyh = dls1 % n dlsr % lg0 = 21 dlsr % lg1 = dlsr % lg0 + Ng dlsr % lgx = dlsr % lg1 + Ng lyhnew = dlsr % lgx + Ng if ( Istate == 1 ) dls1 % lyh = lyhnew if ( lyhnew /= dls1 % lyh ) then !  If ISTATE = 3 and NG was changed, shift YH to its new location. ------ lenyh = dls1 % l * dls1 % nyh if ( Lrw >= lyhnew - 1 + lenyh ) then i1 = 1 if ( lyhnew > dls1 % lyh ) i1 = - 1 call dcopy ( lenyh , Rwork ( dls1 % lyh ), i1 , Rwork ( lyhnew ), i1 ) dls1 % lyh = lyhnew endif endif dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh if ( dls1 % miter == 0 ) lenwk = 0 if ( dls1 % miter == 1 ) lenwk = dls1 % n * ( dlpk % maxl + 2 ) + dlpk % maxl * dlpk % maxl if ( dls1 % miter == 2 ) lenwk = dls1 % n * ( dlpk % maxl + 2 + min ( 1 , dlpk % maxl - dlpk % kmp )) + ( dlpk % maxl + 3 ) * dlpk % maxl + 1 if ( dls1 % miter == 3 . or . dls1 % miter == 4 ) lenwk = 5 * dls1 % n if ( dls1 % miter == 9 ) lenwk = 2 * dls1 % n lwp = 0 if ( dls1 % miter >= 1 ) lwp = Iwork ( 1 ) lenwm = lenwk + lwp dlpk % locwp = lenwk + 1 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dlpk % lsavx = dls1 % lsavf + dls1 % n dls1 % lacor = dlpk % lsavx + dls1 % n if ( dls1 % miter == 0 ) dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 31 leniwk = 0 if ( dls1 % miter == 1 ) leniwk = dlpk % maxl liwp = 0 if ( dls1 % miter >= 1 ) liwp = Iwork ( 2 ) leniw = 30 + leniwk + liwp dlpk % lociwp = leniwk + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODKR-  RWORK length needed, LENRW(=I1), exceeds LRW(=I2) ' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1000 elseif ( leniw > Liw ) then msg = 'DLSODKR-  IWORK length needed, LENIW(=I1), exceeds LIW(=I2) ' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1000 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODKR-  RTOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1000 elseif ( atoli < 0.0D0 ) then msg = 'DLSODKR-  ATOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1000 endif enddo !  Load SQRT(N) and its reciprocal in Common. --------------------------- dlpk % sqrtn = sqrt ( real ( dls1 % n )) dlpk % rsqrtn = 1.0D0 / dlpk % sqrtn if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 800 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 nli0 = 0 nni0 = 0 ncfn0 = 0 ncfl0 = 0 nwarn = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 dlpk % nni = 0 dlpk % nli = 0 dlpk % nps = 0 dlpk % ncfn = 0 dlpk % ncfl = 0 dls % nsfi = 0 dls % njev = 0 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODKR-  EWT(I1) is R1 .le. 0.0        ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1000 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo if ( h0 == 0.0D0 ) then !  Call DLHIN to set initial step size H0 to be attempted. -------------- call dlhin ( Neq , dls1 % n , T , Rwork ( dls1 % lyh ), Rwork ( lf0 ), & & f , Tout , dls1 % uround , Rwork ( dls1 % lewt ), Itol , Atol , Y , & & Rwork ( dls1 % lacor ), h0 , niter , ier ) dls1 % nfe = dls1 % nfe + niter if ( ier /= 0 ) then msg = 'DLSODKR- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1000 endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo !  Check for a zero of g at T. ------------------------------------------ dlsr % irfnd = 0 dlsr % toutc = Tout if ( dlsr % ngc == 0 ) goto 200 call drchek ( 1 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 0 ) goto 200 msg = 'DLSODKR-  One or more components of g has a root  ' call xerrwd ( msg , 50 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      too near to the initial point.    ' call xerrwd ( msg , 40 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else !  If ISTATE = 3, set flag to signal parameter changes to DSTOKA.-------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into SAVF. --------- do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. !  First, DRCHEK is called to check for a root within the dlsr%last step !  taken, other than the dlsr%last root found there, if any. !  If ITASK = 2 or 5, and y(TN) has not yet been returned to the user !  because of an intervening root, return through Block G. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst ! irfp = dlsr % irfnd if ( dlsr % ngc /= 0 ) then if ( Itask == 1 . or . Itask == 4 ) dlsr % toutc = Tout call drchek ( 2 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif dlsr % irfnd = 0 if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 2 ) goto 300 ! nli0 = dlpk % nli nni0 = dlpk % nni ncfn0 = dlpk % ncfn ncfl0 = dlpk % ncfl nwarn = 0 select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODKR-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2) ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1000 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 700 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 800 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 900 T = Tout Istate = 2 goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 700 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 900 T = Tout Istate = 2 goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) T = tcrit if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 5 ) goto 300 if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTOKA. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, !  check for poor Newton/Krylov method performance, update EWT (if not !  at start of problem), check for too much accuracy being requested, !  and check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODKR-  At current T (=R1), MXSTEP (=I1) steps  ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 500 else nstd = dls1 % nst - dls1 % nslast nnid = dlpk % nni - nni0 if ( nstd >= 10 . and . nnid /= 0 ) then avdim = real ( dlpk % nli - nli0 ) / real ( nnid ) rcfn = real ( dlpk % ncfn - ncfn0 ) / real ( nstd ) rcfl = real ( dlpk % ncfl - ncfl0 ) / real ( nnid ) lavd = avdim > ( dlpk % maxl - 0.05D0 ) lcfn = rcfn > 0.9D0 lcfl = rcfl > 0.9D0 lwarn = lavd . or . lcfn . or . lcfl if ( lwarn ) then nwarn = nwarn + 1 if ( nwarn <= 10 ) then if ( lavd ) then msg = 'DLSODKR- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lavd ) then msg = '      at T = R1 by average no. of linear iterations = R2    ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , avdim ) endif if ( lcfn ) then msg = 'DLSODKR- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfn ) then msg = '      at T = R1 by nonlinear convergence failure rate = R2  ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfn ) endif if ( lcfl ) then msg = 'DLSODKR- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfl ) then msg = '      at T = R1 by linear convergence failure rate = R2     ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfl ) endif endif endif endif call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODKR-  At T(=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 500 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODKR-  Warning.. Internal T(=R1) and H(=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODKR-  Above warning has been issued I1 times. ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTOKA(NEQ,Y,YH,NYH,YH,EWT,SAVF,SAVX,ACOR,WM,IWM,f,JAC,PSOL) ! ----------------------------------------------------------------------- call dstoka ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dlpk % lsavx ), Rwork ( dls1 % lacor )& & , Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), f , jac , psol ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODKR- At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 !  Compute IMXER if relevant. ------------------------------------------- big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODKR-  At T (=R1) and step size H (=R2), the   ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) !  KFLAG = -3.  Unrecoverable error from PSOL. -------------------------- msg = 'DLSODKR-  At T (=R1) an unrecoverable error return' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      was made from Subroutine PSOL     ' call xerrwd ( msg , 40 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 500 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0). !  Call DRCHEK to check for a root within the dlsr%last step. !  Then, if no root was found, check for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 ! if ( dlsr % ngc /= 0 ) then call drchek ( 3 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif ! select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODKR-  At start of problem, too much accuracy  ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1000 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODKR-  At T (=R1), too much accuracy requested ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 500 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODKR. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif Istate = 2 400 continue Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl Iwork ( 24 ) = dls % nsfi Iwork ( 25 ) = dls % njev Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return !  Set Y vector, T, and optional outputs. ------------------------------- 500 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl Iwork ( 24 ) = dls % nsfi Iwork ( 25 ) = dls % njev Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return 600 continue msg = 'DLSODKR-  MF (=I1) illegal.   ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 700 continue msg = 'DLSODKR-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)  ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1000 800 continue msg = 'DLSODKR-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)  ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1000 900 continue msg = 'DLSODKR-  Trouble in DINTDY. ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1000 continue Istate = - 3 return 99999 continue end subroutine dlsodkr","tags":"","loc":"proc/dlsodkr~2.html"},{"title":"dlsodis – odepack","text":"subroutine dlsodis(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) Synopsis DLSODIS solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ\n\n      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n           i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSODIS is a variant version of the DLSODI package, and is intended\n for stiff problems in which the matrix A and the Jacobian matrix\n d(g - A*s)/dy have arbitrary sparse structures. This version is in double precision. Summary of Usage. Communication between the user and the DLSODIS package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form: SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) which computes the residual function r = g(t,y)  -  A(t,y) * s , as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSODIS.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. DLSODIS must deal internally with the matrices A and dr/dy, where\n r is the residual function defined above.  DLSODIS generates a linear\n combination of these two matrices in sparse form.\n      The matrix structure is communicated by a method flag, MF:\n         MF =  21 or  22     when the user provides the structures of\n                             matrix A and dr/dy,\n         MF = 121 or 222     when the user does not provide structure\n                             information, and\n         MF = 321 or 422     when the user provides the structure\n                             of matrix A. C. You must also provide a subroutine of the form: SUBROUTINE ADDA ( NEQ , T , Y , J , IAN , JAN , P ) DOUBLE PRECISION T , Y ( * ), P ( * ) INTEGER IAN ( * ), JAN ( * ) which adds the matrix A = A(t,y) to the contents of the array P.\n NEQ, T, Y, and J are input arguments and should not be altered.\n This routine should add the J-th column of matrix A to the array\n P (of length NEQ).  I.e. add A(i,J) to P(i) for all relevant\n values of i.  The arguments IAN and JAN should be ignored for normal\n situations.  DLSODIS will call the ADDA routine with J = 1,2,…,NEQ. D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)*s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21, 121, or 321, and provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , S , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), S ( * ), PDJ ( * ) INTEGER IAN ( * ), JAN ( * ) which computes dr/dy as a function of t, y, and s.  Here NEQ, T, Y, S,\n and J are input arguments, and the JAC routine is to load the array\n PDJ (of length NEQ) with the J-th column of dr/dy.  I.e. load PDJ(i)\n with dr(i)/dy(J) for all relevant values of i.  The arguments IAN and\n JAN should be ignored for normal situations.  DLSODIS will call the\n JAC routine with J = 1,2,…,NEQ. Only nonzero elements need be loaded.  A crude approximation\n to dr/dy, possibly with fewer nonzero elememts, will suffice.\n Note that if A is independent of y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy. If it is not feasible to provide a JAC routine, use\n MF = 22, 222, or 422 and DLSODIS will compute an approximate\n Jacobian internally by difference quotients. E . Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSODIS compute\n this vector (ISTATE = 0).  (DLSODIS will solve the system A*s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI. The input array YDOTI and the initial Y array must be consistent with\n the equations A*dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI   must be approximately zero. F. Write a main program which calls Subroutine DLSODIS once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODIS.  On the first call to DLSODIS, supply arguments as follows: RES name of user subroutine for residual function r. ADDA name of user subroutine for computing and adding A(t,y). JAC name of user subroutine for Jacobian matrix dr/dy\n (MF = 121).  If not used, pass a dummy name.\n Note: The names for the RES and ADDA routines and (if used) the JAC routine must be declared External in the calling program. NEQ number of scalar equations in the system. Y array of initial values, of length NEQ. YDOTI array of length NEQ (containing initial dy/dt if ISTATE = 1). T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n The estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n        EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1 if the\n initial dy/dt is supplied, and 0 otherwise. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + (2 + 1./LENRAT)*NNZ + (11 + 9./LENRAT)*NEQ where: NNZ    = the number of nonzero elements in the sparse\n                   iteration matrix  P = A - con\\*dr/dy (con = scalar)\n                   (If NNZ is unknown, use an estimate of it.)\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision). In any case, the required size of RWORK cannot generally\n be predicted in advance for any value of MF, and the\n value above is a rough estimate of a crude lower bound.\n Some experimentation with this size may be necessary.\n (When known, the correct required length is an optional\n output, available in IWORK(17).) LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least 30. LIW declared length of IWORK (in user’s dimension). MF method flag.  Standard values are: 121 for a user-supplied sparse Jacobian.\n      222 for an internally generated sparse Jacobian. For other choices of MF, see the paragraph on MF in\n the full description below. Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call, or any call, is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE value and their meanings: value descriptions 2 if DLSODIS was successful, negative otherwise. -1 means excess work done on this call (check all inputs). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 cannot occur in casual use. -8 means DLSODIS was unable to compute the initial dy/dt. in casual use, this means A(t,y) is initially singular. Supply YDOTI and use ISTATE = 1 on the first call. -9 means a fatal error return flag came from sparse solver CDRV by way of DPRJIS or DSOLSS.  Should never happen. A return with ISTATE = -1, -4, or -5, may result from using\n an inappropriate sparsity structure, one that is quite\n different from the initial structure.  Consider calling\n DLSODIS again with ISTATE = 3 to force the structure to be\n reevaluated.  See the full description of ISTATE below. If DLSODIS returns ISTATE = -1, -4  or -5, then the output of\n DLSODIS also includes YDOTI = array containing residual vector\n r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSODIS again.  No other parameters need be reset. Example Problem. The following is an example problem, with the coding needed\n for its solution by DLSODIS.  The problem comes from the partial\n differential equation (the Burgers equation) du/dt  =  - u * du/dx  +  eta * d**2 u/dx**2,   eta = .05,\n on -1 .le. x .le. 1.  The boundary conditions are periodic:\n   u(-1,t) = u(1,t)  and  du/dx(-1,t) = du/dx(1,t)\n The initial profile is a square wave,\n   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere.\n The PDE is discretized in x by a simplified Galerkin method,\n using piecewise linear basis functions, on a grid of 40 intervals.\n The result is a system A * dy/dt = g(y), of size NEQ = 40,\n where y(i) is the approximation to u at x = x(i), with\n x(i) = -1 + (i-1)*delx, delx = 2/NEQ = .05.\n The individual equations in the system are (in order):\n  (1/6)dy(NEQ)/dt+(4/6)dy(1)/dt+(1/6)dy(2)/dt\n       = r4d*(y(NEQ)**2-y(2)**2)+eodsq*(y(2)-2*y(1)+y(NEQ))\n for i = 2,3,...,nm1,\n  (1/6)dy(i-1)/dt+(4/6)dy(i)/dt+(1/6)dy(i+1)/dt\n       = r4d*(y(i-1)**2-y(i+1)**2)+eodsq*(y(i+1)-2*y(i)+y(i-1))\n and finally\n  (1/6)dy(nm1)/dt+(4/6)dy(NEQ)/dt+(1/6)dy(1)/dt\n       = r4d*(y(nm1)**2-y(1)**2)+eodsq*(y(1)-2*y(NEQ)+y(nm1))\n where r4d = 1/(4*delx), eodsq = eta/delx**2 and nm1 = NEQ-1. The following coding solves the problem with MF = 121, with output\n of solution statistics at t = .1, .2, .3, and .4, and of the\n solution vector at t = .4.  Optional outputs (run statistics) are\n also printed. module c_test1 implicit none integer , parameter , private :: dp = kind ( 0.0d0 ) real ( kind = dp ), public :: EODsq , R4D integer , public :: NM1 end module c_test1 program dlsodis_ex use m_odepack use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) external :: addasp external :: jacsp external :: resid real ( kind = dp ), save :: atol , rtol real ( kind = dp ) :: delx , t , tout integer :: i , io , istate , nnzlu integer , save :: iopt , itask , itol , liw , lrw , mf , neq integer , dimension ( 30 ) :: iw real ( kind = dp ), dimension ( 1409 ) :: rw real ( kind = dp ), dimension ( 40 ) :: y , ydoti data itol / 1 / , rtol / 1.0D-3 / , atol / 1.0D-3 / , itask / 1 / , iopt / 0 / data neq / 40 / , lrw / 1409 / , liw / 30 / , mf / 121 / delx = 2.0 / neq R4D = 0.25 / delx EODsq = 0.05 / delx ** 2 NM1 = neq - 1 do i = 1 , neq y ( i ) = 0.0 enddo y ( 11 ) = 0.5 do i = 12 , 30 y ( i ) = 1.0 enddo y ( 31 ) = 0.5 t = 0.0 tout = 0.1 istate = 0 do io = 1 , 4 call dlsodis ( resid , addasp , jacsp ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & [ atol ], itask , istate , iopt , rw , lrw , iw , liw , mf ) write ( 6 , 99010 ) t , iw ( 11 ), rw ( 11 ) 99010 format ( ' At t =' , f5 . 2 , '   No. steps =' , i4 , '    Last step =' , & & d12 . 4 ) if ( istate /= 2 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout + 0.1 endif enddo write ( 6 , 99030 ) ( y ( i ), i = 1 , neq ) 99030 format ( / ' Final solution values..' / 8 ( 5 D12 . 4 / )) write ( 6 , 99040 ) iw ( 17 ), iw ( 18 ), iw ( 11 ), iw ( 12 ), iw ( 13 ) 99040 format ( / ' Required RW size =' , i5 , '   IW size =' , & & i4 / ' No. steps =' , i4 , '   No. r-s =' , i4 , '   No. J-s =' , i4 ) nnzlu = iw ( 25 ) + iw ( 26 ) + neq write ( 6 , 99050 ) iw ( 19 ), nnzlu 99050 format ( ' No. of nonzeros in P matrix =' , i4 , & & '   No. of nonzeros in LU =' , i4 ) end program dlsodis_ex subroutine gfun ( N , T , Y , G ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), intent ( out ), dimension ( N ) :: G integer :: i G ( 1 ) = R4D * ( Y ( N ) ** 2 - Y ( 2 ) ** 2 ) + EODsq * ( Y ( 2 ) - 2.0 * Y ( 1 ) + Y ( N )) do i = 2 , NM1 G ( i ) = R4D * ( Y ( i - 1 ) ** 2 - Y ( i + 1 ) ** 2 ) + EODsq * ( Y ( i + 1 ) - 2.0 * Y ( i ) + Y ( i - 1 )) enddo G ( N ) = R4D * ( Y ( NM1 ) ** 2 - Y ( 1 ) ** 2 ) + EODsq * ( Y ( 1 ) - 2.0 * Y ( N ) + Y ( NM1 )) end subroutine gfun subroutine resid ( N , T , Y , S , R , Ires ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) external :: gfun integer :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y real ( kind = dp ), intent ( in ), dimension ( N ) :: S real ( kind = dp ), intent ( inout ), dimension ( N ) :: R integer :: Ires integer :: i call gfun ( N , T , Y , R ) R ( 1 ) = R ( 1 ) - ( S ( N ) + 4.0 * S ( 1 ) + S ( 2 )) / 6.0 do i = 2 , NM1 R ( i ) = R ( i ) - ( S ( i - 1 ) + 4.0 * S ( i ) + S ( i + 1 )) / 6.0 enddo R ( N ) = R ( N ) - ( S ( NM1 ) + 4.0 * S ( N ) + S ( 1 )) / 6.0 end subroutine resid subroutine addasp ( N , T , Y , J , Ip , Jp , P ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y integer , intent ( in ) :: J integer , dimension ( * ) :: Ip integer , dimension ( * ) :: Jp real ( kind = dp ), intent ( inout ), dimension ( N ) :: P integer :: jm1 , jp1 jm1 = J - 1 jp1 = J + 1 if ( J == N ) jp1 = 1 if ( J == 1 ) jm1 = N P ( J ) = P ( J ) + ( 2.0 / 3.0 ) P ( jp1 ) = P ( jp1 ) + ( 1.0 / 6.0 ) P ( jm1 ) = P ( jm1 ) + ( 1.0 / 6.0 ) end subroutine addasp subroutine jacsp ( N , T , Y , S , J , Ip , Jp , Pdj ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), dimension ( N ) :: S integer , intent ( in ) :: J integer , dimension ( * ) :: Ip integer , dimension ( * ) :: Jp real ( kind = dp ), intent ( out ), dimension ( N ) :: Pdj integer :: jm1 , jp1 jm1 = J - 1 jp1 = J + 1 if ( J == 1 ) jm1 = N if ( J == N ) jp1 = 1 Pdj ( jm1 ) = - 2.0 * R4D * Y ( J ) + EODsq Pdj ( J ) = - 2.0 * EODsq Pdj ( jp1 ) = 2.0 * R4D * Y ( J ) + EODsq end subroutine jacsp The output of this program (on a CDC-7600 in single precision)\n is as follows: At t = 0.10   No. steps =  15    Last step =  1.6863e-02\n At t = 0.20   No. steps =  19    Last step =  2.4101e-02\n At t = 0.30   No. steps =  22    Last step =  4.3143e-02\n At t = 0.40   No. steps =  24    Last step =  5.7819e-02\n\n Final solution values..\n  1.8371e-02  1.3578e-02  1.5864e-02  2.3805e-02  3.7245e-02\n  5.6630e-02  8.2538e-02  1.1538e-01  1.5522e-01  2.0172e-01\n  2.5414e-01  3.1150e-01  3.7259e-01  4.3608e-01  5.0060e-01\n  5.6482e-01  6.2751e-01  6.8758e-01  7.4415e-01  7.9646e-01\n  8.4363e-01  8.8462e-01  9.1853e-01  9.4500e-01  9.6433e-01\n  9.7730e-01  9.8464e-01  9.8645e-01  9.8138e-01  9.6584e-01\n  9.3336e-01  8.7497e-01  7.8213e-01  6.5315e-01  4.9997e-01\n  3.4672e-01  2.1758e-01  1.2461e-01  6.6208e-02  3.3784e-02\n\n Required RW size = 1409   IW size =  30\n No. steps =  24   No. r-s =  33   No. J-s =   8\n No. of nonzeros in P matrix = 120   No. of nonzeros in LU = 194 Full Description of User Interface to DLSODIS. The user interface to DLSODIS consists of the following parts. The call sequence to Subroutine DLSODIS, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODIS package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODIS package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF, and those used for both input and output are\n     Y, T, ISTATE, YDOTI. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODIS to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES the name of the user-supplied subroutine which supplies\n the residual vector for the ODE system, defined by r = g(t,y) - A(t,y) * s as a function of the scalar t and the vectors\n s and y (s approximates dy/dt).  This subroutine\n is to have the form SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) where NEQ, T, Y, S, and IRES are input, and R and\n IRES are output.  Y, S, and R are arrays of length NEQ. On input, IRES indicates how DLSODIS will use the\n returned array R, as follows: IRES = 1  means that DLSODIS needs the full residual,\n                       r = g - A\\*s, exactly.\n             IRES = -1 means that DLSODIS is using R only to compute\n                       the Jacobian dr/dy by difference quotients. The RES routine can ignore IRES, or it can omit some terms\n if IRES = -1.  If A does not depend on y, then RES can\n just return R = g when IRES = -1.  If g - A*s contains other\n additive terms that are independent of y, these can also be\n dropped, if done consistently, when IRES = -1. The subroutine should set the flag IRES if it\n encounters a halt condition or illegal input.\n Otherwise, it should not reset IRES.  On output, IRES = 1 or -1 represents a normal return, and\n DLSODIS continues integrating the ODE.  Leave IRES\n unchanged from its input value. IRES = 2 tells DLSODIS to immediately return control\n to the calling program, with ISTATE = 3.  This lets\n the calling program change parameters of the problem\n if necessary. IRES = 3 represents an error condition (for example, an\n illegal value of y).  DLSODIS tries to integrate the system\n without getting IRES = 3 from RES.  If it cannot, DLSODIS\n returns with ISTATE = -7 or -1. On a return with ISTATE = 3, -1, or -7, the values\n of T and Y returned correspond to the last point reached\n successfully without getting the flag IRES = 2 or 3. The flag values IRES = 2 and 3 should not be used to\n handle switches or root-stop conditions.  This is better\n done by calling DLSODIS in a one-step mode and checking the\n stopping function for a sign change at each step. If quantities computed in the RES routine are needed\n externally to DLSODIS, an extra call to RES should be made\n for this purpose, for consistent and accurate results.\n To get the current dy/dt for the S argument, use DINTDY. RES must be declared External in the calling\n program.  See note below for more about RES. ADDA the name of the user-supplied subroutine which adds the\n matrix A = A(t,y) to another matrix stored in sparse form.\n This subroutine is to have the form SUBROUTINE ADDA ( NEQ , T , Y , J , IAN , JAN , P ) DOUBLE PRECISION T , Y ( * ), P ( * ) INTEGER IAN ( * ), JAN ( * ) where NEQ, T, Y, J, IAN, JAN, and P  are input.  This routine\n should add the J-th column of matrix A to the array P, of\n length NEQ.  Thus a(i,J) is to be added to P(i) for all\n relevant values of i.  Here T and Y have the same meaning as\n in Subroutine RES, and J is a column index (1 to NEQ).\n IAN and JAN are undefined in calls to ADDA for structure\n determination (MOSS .ne. 0).  Otherwise, IAN and JAN are\n structure descriptors, as defined under optional outputs\n below, and so can be used to determine the relevant row\n indices i, if desired. Calls to ADDA are made with J = 1,…,NEQ, in that\n order.  ADDA must not alter its input arguments. ADDA must be declared External in the calling program.\n See note below for more information about ADDA. JAC the name of the user-supplied subroutine which supplies\n the Jacobian matrix, dr/dy, where r = g - A*s.  JAC is\n required if MITER = 1, or MOSS = 1 or 3.  Otherwise a dummy\n name can be passed.  This subroutine is to have the form SUBROUTINE JAC ( NEQ , T , Y , S , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), S ( * ), PDJ ( * ) INTEGER IAN ( * ), JAN ( * ) where NEQ, T, Y, S, J, IAN, and JAN are input.  The\n array PDJ, of length NEQ, is to be loaded with column J\n of the Jacobian on output.  Thus dr(i)/dy(J) is to be\n loaded into PDJ(i) for all relevant values of i. Here T, Y, and S have the same meaning as in Subroutine RES,\n and J is a column index (1 to NEQ).  IAN and JAN\n are undefined in calls to JAC for structure determination\n (MOSS .ne. 0).  Otherwise, IAN and JAN are structure\n descriptors, as defined under optional outputs below, and\n so can be used to determine the relevant row indices i, if\n desired. JAC need not provide dr/dy exactly.  A crude\n approximation (possibly with greater sparsity) will do. In any case, PDJ is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Calls to JAC are made with J = 1,…,NEQ, in that order, and\n each such set of calls is preceded by a call to RES with the\n same arguments NEQ, T, Y, S, and IRES.  Thus to gain some\n efficiency intermediate quantities shared by both calculations\n may be saved in a user Common block by RES and not recomputed\n by JAC, if desired.  JAC must not alter its input arguments. JAC must be declared External in the calling program. See note below for more about JAC. Note on RES, ADDA, and JAC: These subroutines may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in the subroutines) and/or Y has length\n exceeding NEQ(1).  However, these subroutines should not\n alter NEQ(1), Y(1),…,Y(NEQ) or any other input variables.\n See the descriptions of NEQ and Y below. NEQ the size of the system (number of first order ordinary\n differential equations or scalar algebraic equations).\n Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in RES, ADDA, or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODIS package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to RES, ADDA, and JAC.  Hence, if it is an array,\n locations NEQ(2),… may be used to store other integer data\n and pass it to RES, ADDA, or JAC.  Each such subroutine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 0 or 1), and only for output on other\n calls.  On the first call, Y must contain the vector of\n initial values.  On output, Y contains the computed solution\n vector, evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n ADDA, and JAC.  Hence its length may exceed NEQ,\n and locations Y(NEQ+1),… may be used to store other real\n data and pass it to RES, ADDA, or JAC.  (The DLSODIS\n package accesses only Y(1),…,Y(NEQ). ) YDOTI a real array for the initial value of the vector\n dy/dt and for work space, of dimension at least NEQ. On input: If ISTATE = 0 then DLSODIS will compute the initial value\n of dy/dt, if A is nonsingular.  Thus YDOTI will\n serve only as work space and may have any value. If ISTATE = 1 then YDOTI must contain the initial value\n of dy/dt. If ISTATE = 2 or 3 (continuation calls) then YDOTI\n may have any value. Note: If the initial value of A is singular, then\n DLSODIS cannot compute the initial value of dy/dt, so\n it must be provided in YDOTI, with ISTATE = 1. On output, when DLSODIS terminates abnormally with ISTATE =\n -1, -4, or -5, YDOTI will contain the residual\n r = g(t,y) - A(t,y)*(dy/dt).  If r is large, t is near\n its initial value, and YDOTI is supplied with ISTATE = 1,\n there may have been an incorrect input value of\n YDOTI = dy/dt, or the problem (as given to DLSODIS)\n may not have a solution. If desired, the YDOTI array may be used for other\n purposes between calls to the solver. T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 0 or 1), TOUT may be\n equal to T for one call, then should .ne. T for the next\n call.  For the initial T, an input value of TOUT .ne. T is\n used in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array scalar RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n state of the calculation. On input, the values of ISTATE are as follows. value description 0 means this is the first call for the problem, and DLSODIS is to compute the initial value of dy/dt (while doing other initializations).  See note below. 1 means this is the first call for the problem, and the initial value of dy/dt has been supplied in YDOTI (DLSODIS will do other initializations). See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, the conditional inputs IA, JA, IC, and JC, and any of the optional inputs except H0. A call with ISTATE = 3 will cause the sparsity structure of the problem to be recomputed. (Structure information is reread from IA and JA if MOSS = 0, 3, or 4 and from IC and JC if MOSS = 0). Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 0 or 1 on input. On output, ISTATE has the following values and meanings. value description 0 or 1 means nothing was done; TOUT = T and ISTATE = 0 or 1 on input. 2 means that the integration was performed successfully. 3 means that the user-supplied Subroutine RES signalled DLSODIS to halt the integration and return (IRES = 2). Integration as far as T was achieved with no occurrence of IRES = 2, but this flag was set on attempting the next step. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i) = 0.0) was requested on a variable which has now vanished. the integration was successful as far as T. -7 means that the user-supplied Subroutine RES set its error flag (IRES = 3) despite repeated tries by DLSODIS to avoid that condition. -8 means that ISTATE was 0 on input but DLSODIS was unable to compute the initial value of dy/dt.  See the printed message for details. -9 means a fatal error return flag came from the sparse solver CDRV by way of DPRJIS or DSOLSS (numerical factorization or backsolve).  This should never happen. The integration was successful as far as T. Note: An error return with ISTATE = -1, -4, or -5\n may mean that the sparsity structure of the\n problem has changed significantly since it was last\n determined (or input).  In that case, one can attempt to\n complete the integration by setting ISTATE = 3 on the next\n call, so that a new structure determination is done. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n similarly, ISTATE (= 3) need not be reset if RES told\n DLSODIS to return because the calling program must change\n the parameters of the problem.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a work array used for a mixture of real (double precision)\n and integer work space. The length of RWORK (in real words) must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LWM where NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LWM = 2*NNZ + 2*NEQ + (NNZ+9*NEQ)/LENRAT   if MITER = 1,\n          LWM = 2*NNZ + 2*NEQ + (NNZ+10*NEQ)/LENRAT  if MITER = 2. in the above formulas, NNZ    = number of nonzero elements in the iteration matrix\n                   P = A - con*J  (con is a constant and J is the\n                   Jacobian matrix dr/dy).\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          (See the MF description for METH and MITER.) Thus if MAXORD has its default value and NEQ is constant,\n the minimum length of RWORK is: 20 + 16*NEQ + LWM  for MF = 11, 111, 311, 12, 212, 412,\n             20 +  9*NEQ + LWM  for MF = 21, 121, 321, 22, 222, 422. The above formula for LWM is only a crude lower bound.\n The required length of RWORK cannot be readily predicted\n in general, as it depends on the sparsity structure\n of the problem.  Some experimentation may be necessary. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least 32 + 2*NEQ + NZA + NZC   for MOSS = 0,\n      30                       for MOSS = 1 or 2,\n      31 + NEQ + NZA           for MOSS = 3 or 4. (NZA is the number of nonzero elements in matrix A, and\n NZC is the number of nonzero elements in dr/dy.) In DLSODIS, IWORK is used for conditional and\n optional inputs and optional outputs. The following two blocks of words in IWORK are conditional\n inputs, required if MOSS = 0, 3, or 4, but not otherwise\n (see the description of MF for MOSS). IWORK(30+j) = IA(j)     (j=1,...,NEQ+1)\n  IWORK(31+NEQ+k) = JA(k) (k=1,...,NZA) The two arrays IA and JA describe the sparsity structure\n to be assumed for the matrix A.  JA contains the row\n indices where nonzero elements occur, reading in columnwise\n order, and IA contains the starting locations in JA of the\n descriptions of columns 1,…,NEQ, in that order, with\n IA(1) = 1.  Thus, for each column index j = 1,…,NEQ, the\n values of the row index i in column j where a nonzero\n element may occur are given by i = JA(k),  where   IA(j) .le. k .lt. IA(j+1). If NZA is the total number of nonzero locations assumed,\n then the length of the JA array is NZA, and IA(NEQ+1) must\n be NZA + 1.  Duplicate entries are not allowed.\n The following additional blocks of words are required\n if MOSS = 0, but not otherwise.  If LC = 31 + NEQ + NZA, then IWORK(LC+j) = IC(j)       (j=1,...,NEQ+1), and\n      IWORK(LC+NEQ+1+k) = JC(k) (k=1,...,NZC) The two arrays IC and JC describe the sparsity\n structure to be assumed for the Jacobian matrix dr/dy.\n They are used in the same manner as the above IA and JA\n arrays.  If NZC is the number of nonzero locations\n assumed, then the length of the JC array is NZC, and\n IC(NEQ+1) must be NZC + 1.  Duplicate entries are not\n allowed. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODIS\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODIS between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF the method flag.  Used only for input.\n MF has three decimal digits– MOSS, METH, and MITER.\n For standard options: MF = 100*MOSS + 10*METH + MITER. MOSS indicates the method to be used to obtain the sparsity\n structure of the Jacobian matrix: MOSS Description 0 means the user has supplied IA, JA, IC, and JC (see descriptions under IWORK above). 1 means the user has supplied JAC (see below) and the structure will be obtained from NEQ initial calls to JAC and NEQ initial calls to ADDA. 2 means the structure will be obtained from NEQ+1 initial calls to RES and NEQ initial calls to ADDA 3 like MOSS = 1, except user has supplied IA and JA. 4 like MOSS = 2, except user has supplied IA and JA. METH indicates the basic linear multistep method: METH Description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). The BDF method is strongly preferred for stiff problems,\n  while the Adams method is preferred when the problem is\n  not stiff.  If the matrix A(t,y) is nonsingular,\n  stiffness here can be taken to mean that of the explicit\n  ODE system dy/dt = A-inverse * g.  If A is singular,\n  the concept of stiffness is not well defined. If you do not know whether the problem is stiff, we\n  recommend using METH = 2.  If it is stiff, the advantage\n  of METH = 2 over METH = 1 will be great, while if it is\n  not stiff, the advantage of METH = 1 will be slight.\n  If maximum efficiency is important, some experimentation\n  with METH may be necessary. MITER indicates the corrector iteration method: METH Description 1 means chord iteration with a user-supplied sparse Jacobian, given by Subroutine JAC. 2 means chord iteration with an internally generated (difference quotient) sparse Jacobian (using NGP extra calls to RES per dr/dy value, where NGP is an optional output described below.) If MITER = 1 or MOSS = 1 or 3 the user must supply a\n Subroutine JAC (the name is arbitrary) as described above\n under JAC.  Otherwise, a dummy argument can be used. The standard choices for MF are: MF Description 21 or 22 for a stiff problem with IA/JA and IC/JC supplied, 121 for a stiff problem with JAC supplied, but not IA/JA or IC/JC, 222 for a stiff problem with neither IA/JA, IC/JC/, nor JAC supplied, 321 for a stiff problem with IA/JA and JAC supplied, but not IC/JC, 422 for a stiff problem with IA/JA supplied, but not IC/JC or JAC. The sparseness structure can be changed during the problem\n  by making a call to DLSODIS with ISTATE = 3. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSODIS, the variables listed\n below are quantities related to the performance of DLSODIS\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown. Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODIS, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW. On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NRE IWORK(12) the number of residual evaluations (RES calls) for the problem so far, excluding those for structure determination (MOSS = 2 or 4). NJE IWORK(13) the number of Jacobian evaluations (each involving an evaluation of A and dr/dy) for the problem so far, excluding those for structure determination (MOSS = 1 or 3).  This equals the number of calls to ADDA and (if MITER = 1) JAC. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNZ IWORK(19) the number of nonzero elements in the iteration matrix  P = A - con*J  (con is a constant and J is the Jacobian matrix dr/dy). NGP IWORK(20) the number of groups of column indices, used in difference quotient Jacobian aproximations if MITER = 2.  This is also the number of extra RES evaluations needed for each Jacobian evaluation. NLU IWORK(21) the number of sparse LU decompositions for the problem so far. (Excludes the LU decomposition necessary when ISTATE = 0.) LYH IWORK(22) the base address in RWORK of the history array YH, described below in this list. IPIAN IWORK(23) the base address of the structure descriptor array IAN, described below in this list. IPJAN IWORK(24) the base address of the structure descriptor array JAN, described below in this list. NZL IWORK(25) the number of nonzero elements in the strict lower triangle of the LU factorization used in the chord iteration. NZU IWORK(26) the number of nonzero elements in the strict upper triangle of the LU factorization used in the chord iteration.  The total number of nonzeros in the factorization is therefore NZL + NZU + NEQ. The following four arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address, and its description. For YH and ACOR, the base addresses are in RWORK (a real array).\n The integer arrays IAN and JAN are to be obtained by declaring an\n integer array IWK and identifying IWK(1) with RWORK(21), using either\n an equivalence statement or a subroutine call.  Then the base\n addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained\n as optional outputs IWORK(23) and IWORK(24), respectively. Thus IAN(1) is IWK(ipian), etc. Name Base Address Description IAN IPIAN (in IWK) structure descriptor array of size NEQ + 1. JAN IPJAN (in IWK) structure descriptor array of size NNZ. (see above) IAN and JAN together describe the sparsity structure of the iteration matrix P = A - con*J,  as used by DLSODIS. JAN contains the row indices of the nonzero locations, reading in columnwise order, and IAN contains the starting locations in JAN of the descriptions of columns 1,…,NEQ, in that order, with IAN(1) = 1.  Thus for each j = 1,…,NEQ, the row indices i of the nonzero locations in column j are i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1). Note that IAN(NEQ+1) = NNZ + 1. YH LYH the Nordsieck history array, of size NYH by (optional (NQCUR + 1), where NYH is the initial value output) of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR.  The base address LYH is another optional output, listed above. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control. It is defined only on a return from DLSODIS with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODIS.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODIS, if The default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODIS. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCMS(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODIS (see Part 3 below). RSAV must be a real array of length 224 or more, and ISAV must be an integer array of length 71 or more. JOB=1 means save into RSAV/ISAV. JOB=2 means restore from RSAV/ISAV. DSRCMS is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODIS. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODIS. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = IWORK ( 22 ) CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODIS).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(t), is already provided\n by DLSODIS directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. LYH the base address of the history array YH, obtained\n as an optional output as shown above. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODIS is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODIS call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSODIS call for that problem.  To save and restore the program\n state, use Subroutines DSRCMS (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODIS package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODIS call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODIS in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W) where: N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODIS.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n  - substitute a max-norm of (V(i)*w(I)) for the RMS-norm, or\n  - ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. References:\n 1.  M. K. Seager and S. Balsdon,  LSODIS, A Sparse Implicit\n     ODE Solver, in Proceedings of the IMACS 10th World Congress,\n     Montreal, August 8-13, 1982. Alan C. Hindmarsh,  LSODE and LSODI, Two New Initial Value\n     Ordinary Differential Equation Solvers,\n     ACM-SIGNUM Newsletter, vol. 15, no. 4 (1980), pp. 10-11. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: I. The Symmetric Codes,\n     Int. J. Num. Meth. Eng., vol. 18 (1982), pp. 1145-1151. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: II. The Nonsymmetric Codes,\n     Research Report No. 114, Dept. of Computer Sciences, Yale\n     University, 1977. Pedigree: DLSODIS is derived from the 18 November 2003 version of\n Livermore Solver for Ordinary Differential Equations package ODEPACK,\n (Implicit form) with general Sparse Jacobian matrices. Authors:       Alan C. Hindmarsh\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Sheila Balsdon\n                Zycor, Inc.\n                Austin, TX 78741 Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf Calls proc~~dlsodis~2~~CallsGraph proc~dlsodis~2 dlsodis proc~dainvgs dainvgs proc~dlsodis~2->proc~dainvgs proc~dewset~2 dewset proc~dlsodis~2->proc~dewset~2 proc~dstodi dstodi proc~dlsodis~2->proc~dstodi proc~xerrwd~2 xerrwd proc~dlsodis~2->proc~xerrwd~2 proc~diprepi~2 diprepi proc~dlsodis~2->proc~diprepi~2 proc~dumach~2 dumach proc~dlsodis~2->proc~dumach~2 proc~dvnorm~2 dvnorm proc~dlsodis~2->proc~dvnorm~2 proc~dintdy~2 dintdy proc~dlsodis~2->proc~dintdy~2 proc~cdrv cdrv proc~dainvgs->proc~cdrv proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dvnorm dvnorm proc~dstodi->proc~dvnorm proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dprepi dprepi proc~diprepi~2->proc~dprepi none~dumsum dumsum proc~dumach~2->none~dumsum proc~dintdy~2->proc~xerrwd~2 proc~dprepi->proc~cdrv proc~jgroup jgroup proc~dprepi->proc~jgroup proc~adjlr adjlr proc~dprepi->proc~adjlr proc~odrv odrv proc~dprepi->proc~odrv proc~cntnzu cntnzu proc~dprepi->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big ewti h0 hmax hmx i i1 i2 ier iflag igo ihit imax imul imxer ipflag ipgo irem ires j kgo leniw lenrat lenrw lenyht lia lic lja ljc lrtem lwtem lyd0 lyhd lyhn mf1 mord msg mxhnl0 mxstp0 ncolm rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsodis Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: ier integer, public :: iflag integer, public :: igo logical, public :: ihit integer, public :: imax integer, public :: imul integer, public :: imxer integer, public :: ipflag integer, public :: ipgo integer, public :: irem integer, public :: ires integer, public :: j integer, public :: kgo integer, public :: leniw integer, public, save :: lenrat integer, public :: lenrw integer, public :: lenyht integer, public :: lia integer, public :: lic integer, public :: lja integer, public :: ljc integer, public :: lrtem integer, public :: lwtem integer, public :: lyd0 integer, public :: lyhd integer, public :: lyhn integer, public :: mf1 integer, public, save :: mord (2) character(len=60), public :: msg integer, public, save :: mxhnl0 integer, public, save :: mxstp0 integer, public :: ncolm real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsodis ( res , adda , jac , Neq , Y , Ydoti , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , Mf ) external res external adda external jac integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydoti ( * ) real ( kind = dp ), intent ( inout ) :: T real ( kind = dp ), intent ( inout ) :: Tout integer :: Itol real ( kind = dp ) :: Rtol ( * ) real ( kind = dp ) :: Atol ( * ) integer :: Itask integer :: Istate integer :: Iopt integer :: Lrw real ( kind = dp ), intent ( inout ) :: Rwork ( Lrw ) integer :: Liw integer , intent ( inout ) :: Iwork ( Liw ) integer :: Mf real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , ier , iflag , igo , imax , imul , imxer , ipflag , ipgo , irem , ires , j , kgo , leniw , lenrw , lenyht , & & lia , lic , lja , ljc , lrtem , lwtem , lyd0 , lyhd , lyhn , mf1 , ncolm logical :: ihit integer , save :: lenrat , mxhnl0 , mxstp0 integer , save :: mord ( 2 ) character ( 60 ) :: msg ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODIS, DIPREPI, DPREPI, !  DINTDY, DSTODI, DPRJIS, and DSOLSS. !  The block DLSS01 is declared in subroutines DLSODIS, DAINVGS, !  DIPREPI, DPREPI, DPRJIS, and DSOLSS. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ! ----------------------------------------------------------------------- !  In the Data statement below, set LENRAT equal to the ratio of !  the wordlength for a real number to that for an integer.  Usually, !  LENRAT = 1 for single precision and 2 for double precision.  If the !  true ratio is not an integer, use the next smaller integer (.ge. 1), ! ----------------------------------------------------------------------- data lenrat / 2 / ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropirately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 0 or 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- ihit = . false . if ( Istate < 0 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODIS- ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 2300 ! msg = 'DLSODIS- Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODIS- ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( Istate <= 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODIS-ISTATE .gt. 1 but DLSODIS not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 0 or 1) !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. !  If ISTATE = 0 or 1, the final setting of work space pointers, the !  matrix preprocessing, and other initializations are done in Block C. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, and !  MF. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODIS- NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( Istate > 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODIS- ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 2300 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODIS- ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODIS- IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else dlss % moss = Mf / 100 mf1 = Mf - 100 * dlss % moss dls1 % meth = mf1 / 10 dls1 % miter = mf1 - 10 * dls1 % meth if ( dlss % moss < 0 . or . dlss % moss > 4 ) goto 900 if ( dls1 % miter == 2 . and . dlss % moss == 1 ) dlss % moss = dlss % moss + 1 if ( dls1 % miter == 2 . and . dlss % moss == 3 ) dlss % moss = dlss % moss + 1 if ( dls1 % miter == 1 . and . dlss % moss == 2 ) dlss % moss = dlss % moss - 1 if ( dls1 % miter == 1 . and . dlss % moss == 4 ) dlss % moss = dlss % moss - 1 if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 900 if ( dls1 % miter < 1 . or . dls1 % miter > 2 ) goto 900 !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODIS- MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODIS- MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODIS- MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODIS- TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 2300 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODIS- HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 2300 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODIS- HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 2300 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODIS- RTOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 2300 elseif ( atoli < 0.0D0 ) then msg = 'DLSODIS- ATOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 2300 endif enddo ! ----------------------------------------------------------------------- !  Compute required work array lengths, as far as possible, and test !  these against LRW and LIW.  Then set tentative pointers for work !  arrays.  Pointers to RWORK/IWORK segments are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  WM, YH, SAVR, EWT, ACOR. !  The required length of the matrix work space WM is not yet known, !  and so a crude minimum value is used for the initial tests of LRW !  and LIW, and YH is temporarily stored as far to the right in RWORK !  as possible, to leave the maximum amount of space for WM for matrix !  preprocessing.  Thus if MOSS .ne. 2 or 4, some of the segments of !  RWORK are temporarily omitted, as they are not needed in the !  preprocessing.  These omitted segments are: ACOR if ISTATE = 1, !  EWT and ACOR if ISTATE = 3 and MOSS = 1, and SAVR, EWT, and ACOR if !  ISTATE = 3 and MOSS = 0. ! ----------------------------------------------------------------------- dlss % lrat = lenrat if ( Istate <= 1 ) dls1 % nyh = dls1 % n if ( dls1 % miter == 1 ) dlss % lwmin = 4 * dls1 % n + 10 * dls1 % n / dlss % lrat if ( dls1 % miter == 2 ) dlss % lwmin = 4 * dls1 % n + 11 * dls1 % n / dlss % lrat dlss % lenyh = ( dls1 % maxord + 1 ) * dls1 % nyh dlss % lrest = dlss % lenyh + 3 * dls1 % n lenrw = 20 + dlss % lwmin + dlss % lrest Iwork ( 17 ) = lenrw leniw = 30 if ( dlss % moss /= 1 . and . dlss % moss /= 2 ) leniw = leniw + dls1 % n + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) goto 1000 if ( leniw > Liw ) goto 1100 lia = 31 if ( dlss % moss /= 1 . and . dlss % moss /= 2 ) leniw = leniw + Iwork ( lia + dls1 % n ) - 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 1100 lja = lia + dls1 % n + 1 lia = min ( lia , Liw ) lja = min ( lja , Liw ) lic = leniw + 1 if ( dlss % moss == 0 ) leniw = leniw + dls1 % n + 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 1100 if ( dlss % moss == 0 ) leniw = leniw + Iwork ( lic + dls1 % n ) - 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 1100 ljc = lic + dls1 % n + 1 lic = min ( lic , Liw ) ljc = min ( ljc , Liw ) dls1 % lwm = 21 if ( Istate <= 1 ) dls1 % nq = Istate ncolm = min ( dls1 % nq + 1 , dls1 % maxord + 2 ) dlss % lenyhm = ncolm * dls1 % nyh lenyht = dlss % lenyhm imul = 2 if ( Istate == 3 ) imul = dlss % moss if ( Istate == 3 . and . dlss % moss == 3 ) imul = 1 if ( dlss % moss == 2 . or . dlss % moss == 4 ) imul = 3 lrtem = lenyht + imul * dls1 % n lwtem = Lrw - 20 - lrtem dlss % lenwk = lwtem lyhn = dls1 % lwm + lwtem dls1 % lsavf = lyhn + lenyht dls1 % lewt = dls1 % lsavf + dls1 % n dls1 % lacor = dls1 % lewt + dls1 % n dlss % istatc = Istate if ( Istate <= 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 0 or 1). !  It contains all remaining initializations, the call to DAINVGS !  (if ISTATE = 0), the sparse matrix preprocessing, and the !  calculation if the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh dls1 % tn = T dls1 % nst = 0 dls1 % nfe = 0 dls1 % h = 1.0D0 dlss % nnz = 0 dlss % ngp = 0 dlss % nzl = 0 dlss % nzu = 0 !  Load the initial value vector in YH.---------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo if ( Istate == 1 ) then !  Initial dy/dt was supplied.  Load it into YH (LYD0 points to YH(*,2).) lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = Ydoti ( i ) enddo endif !  Load and invert the EWT array.  (H is temporarily set to 1.0.)-------- call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1200 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo !  Call DIPREPI and DPREPI to do sparse matrix preprocessing.------------ dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprepi ( Neq , Y , Ydoti , Rwork , Iwork ( lia ), Iwork ( lja ), Iwork ( lic ), Iwork ( ljc ), ipflag , res , jac , adda ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1600 case ( 3 ) goto 1700 case ( 4 ) goto 1800 case ( 5 ) goto 1900 case ( 6 ) goto 2000 case ( 7 ) goto 2100 case ( 8 , 9 ) goto 2200 case default Iwork ( 22 ) = dls1 % lyh if ( lenrw > Lrw ) goto 1000 !  Compute initial dy/dt, if necessary, and load it into YH.------------- lyd0 = dls1 % lyh + dls1 % n if ( Istate == 0 ) then call dainvgs ( Neq ( 1 ), T , Y , Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), Rwork ( dls1 % lacor ), Rwork ( lyd0 ), ier , res , adda ) dls1 % nfe = dls1 % nfe + 1 igo = ier + 1 select case ( igo ) case ( 2 ) !  DAINVGS failed because RES set IRES to 2 or 3. ----------------------- msg = 'DLSODIS- Attempt to initialize dy/dt failed       ' call xerrwd ( msg , 50 , 209 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      because residual routine set its error flag ' call xerrwd ( msg , 50 , 209 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to IRES = (I1)' call xerrwd ( msg , 20 , 209 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return case ( 3 , 4 ) !  DAINVGS failed because matrix A was singular. ------------------------ msg = 'DLSODIS- Attempt to initialize dy/dt failed because matrix A' call xerrwd ( msg , 60 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     was singular.  CDRV returned zero pivot error flag.    ' call xerrwd ( msg , 60 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = 'DAINVGS set its error flag to IER = (I1)' call xerrwd ( msg , 40 , 208 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return case default endselect endif !  Check TCRIT for legality (ITASK = 4 or 5). --------------------------- if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1400 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif !  Initialize all remaining parameters. --------------------------------- dls1 % uround = dumach () dls1 % jstart = 0 Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nje = 0 dlss % nlu = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( YDOT(i)/ywt(i) )**2  ) !                                        1 !  where   w0      = MAX ( ABS(T), ABS(TOUT) ), !          YDOT(i) = i-th component of initial value of dy/dt, !          ywt(i)  = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODIS- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 2300 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lyd0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = h0 * Rwork ( i + lyd0 - 1 ) enddo goto 200 endselect else ! ----------------------------------------------------------------------- !  ISTATE = 3.  Move YH to its new location. !  Note that only the part of YH needed for the next step, namely !  MIN(NQ+1,MAXORD+2) columns, is actually moved. !  A temporary error weight array EWT is loaded if MOSS = 2 or 4. !  Sparse matrix processing is done in DIPREPI/DPREPI. !  If MAXORD was reduced below NQ, then the pointers are finally set !  so that SAVR is identical to (YH*,MAXORD+2) ! ----------------------------------------------------------------------- lyhd = dls1 % lyh - lyhn imax = lyhn - 1 + dlss % lenyhm !  Move YH.  Move right if LYHD < 0; move left if LYHD > 0. ------------- if ( lyhd < 0 ) then do i = lyhn , imax j = imax + lyhn - i Rwork ( j ) = Rwork ( j + lyhd ) enddo endif if ( lyhd > 0 ) then do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo endif dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh if ( dlss % moss == 2 . or . dlss % moss == 4 ) then !  Temporarily load EWT if MOSS = 2 or 4. call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1200 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo endif !  DIPREPI and DPREPI do sparse matrix preprocessing. ------------------- dls1 % lsavf = min ( dls1 % lsavf , Lrw ) dls1 % lewt = min ( dls1 % lewt , Lrw ) dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprepi ( Neq , Y , Ydoti , Rwork , Iwork ( lia ), Iwork ( lja ), Iwork ( lic ), Iwork ( ljc ), ipflag , res , jac , adda ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1600 case ( 3 ) goto 1700 case ( 4 ) goto 1800 case ( 5 ) goto 1900 case ( 6 ) goto 2000 case ( 7 ) goto 2100 case ( 8 , 9 ) goto 2200 case default Iwork ( 22 ) = dls1 % lyh lyd0 = dls1 % lyh + dls1 % n if ( lenrw > Lrw ) goto 1000 !  Set flag to signal changes to DSTODI.--------------------------------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into YDOTI. -------- do i = 1 , dls1 % n Ydoti ( i ) = Rwork ( i + dls1 % lsavf - 1 ) enddo endif if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endselect endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODIS- ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 2300 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1300 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1400 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1500 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1300 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1500 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODI. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODIS- At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODIS- At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 700 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODIS- Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODIS- Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODI(NEQ,Y,YH,NYH,YH1,EWT,SAVF,SAVR,ACOR,WM,WM,RES, !                  ADDA,JAC,DPRJIS,DSOLSS) !  Note: SAVF in DSTODI occupies the same space as YDOTI in DLSODIS. ! ----------------------------------------------------------------------- call dstodi ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Ydoti , Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), res , adda , jac , dprjis , dsolss ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODIS- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     error test failed repeatedly or with ABS(H) = HMIN     ' call xerrwd ( msg , 60 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODIS- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) case ( 5 ) !  IRES = 3 returned by RES, despite retries by DSTODI. ----------------- msg = 'DLSODIS- At T (=R1) residual routine returned     ' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '    error IRES = 3 repeatedly.' call xerrwd ( msg , 30 , 206 , 1 , 0 , 0 , 0 , 0 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 700 case ( 6 ) !  KFLAG = -5.  Fatal error flag returned by DPRJIS or DSOLSS (CDRV). --- msg = 'DLSODIS- At T (=R1) and step size H (=R2), a fatal' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error flag was returned by CDRV (by way of  ' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Subroutine DPRJIS or DSOLSS)      ' call xerrwd ( msg , 40 , 207 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 9 goto 600 case default ! !  KGO = 1:success; 2:error test failure; 3:convergence failure; !        4:RES ordered return; 5:RES returned error; !        6:fatal error from CDRV via DPRJIS or DSOLSS. ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODIS- At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 2300 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODIS- At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 700 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODIS. !  if ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 if ( dls1 % kflag ==- 3 ) Istate = 3 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Compute residual if relevant. ---------------------------------------- 600 continue lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + lyd0 - 1 ) / dls1 % h Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo ires = 1 call res ( Neq , dls1 % tn , Y , Rwork ( dls1 % lsavf ), Ydoti , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then msg = 'DLSODIS- Residual routine set its flag IRES       ' call xerrwd ( msg , 50 , 210 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to (I1) when called for final output.       ' call xerrwd ( msg , 50 , 210 , 0 , 1 , ires , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 800 !  set y vector, t, and optional outputs. ------------------------------- 700 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo 800 continue T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return 900 continue msg = 'DLSODIS- MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 1000 continue msg = 'DLSODIS- RWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 17 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1100 continue msg = 'DLSODIS- IWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 18 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1200 continue ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODIS- EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 2300 1300 continue msg = 'DLSODIS- ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 2300 1400 continue msg = 'DLSODIS- ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 2300 1500 continue msg = 'DLSODIS- Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) goto 2300 1600 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine DPREPI). ' call xerrwd ( msg , 60 , 28 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 28 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1700 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine JGROUP). ' call xerrwd ( msg , 60 , 29 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 29 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1800 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine ODRV).   ' call xerrwd ( msg , 60 , 30 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 30 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1900 continue msg = 'DLSODIS- Error from ODRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), ODRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 31 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) goto 2300 2000 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine CDRV).   ' call xerrwd ( msg , 60 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 32 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 2100 continue msg = 'DLSODIS- Error from CDRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), CDRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 33 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) if ( imul == 2 ) then msg = '        Duplicate entry in sparsity structure descriptors.  ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( imul == 3 . or . imul == 6 ) then msg = '        Insufficient storage for NSFC (called by CDRV).     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 2300 2200 continue msg = 'DLSODIS- At T (=R1) residual routine (called by DPREPI)     ' call xerrwd ( msg , 60 , 34 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) ier = - ipflag - 5 msg = '     returned error IRES (=I1)' call xerrwd ( msg , 30 , 34 , 0 , 1 , ier , 0 , 1 , dls1 % tn , 0.0D0 ) ! 2300 continue Istate = - 3 return 99999 continue end subroutine dlsodis","tags":"","loc":"proc/dlsodis~2.html"},{"title":"dlsoda – odepack","text":"subroutine dlsoda(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt) Synopsis DLSODA solves the initial value problem for stiff or nonstiff\n systems of first order ODEs of the form dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). with automatic method switching for stiff and nonstiff problems. This a variant version of the DLSODE package.\n It switches automatically between stiff and nonstiff methods.\n This means that the user does not have to determine whether the\n problem is stiff or not, and the solver will automatically choose the\n appropriate method.  It always starts with the nonstiff method. Summary of Usage Communication between the user and the DLSODA package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including alternative treatment of the Jacobian matrix,\n optional inputs and outputs, nonstandard options, and\n instructions for special situations.  See also the example\n problem (with program and output) following this summary. Section A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). Section B. Write a main program which calls Subroutine DLSODA once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODA .  On the first call to DLSODA , supply arguments as follows: F name of subroutine for right-hand side vector f.\n   This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a single or multi-value array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (array).\n   the estimated local error in y(i) will be controlled so as\n   to be less than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n        EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n   either the absolute error is less than ATOL (or ATOL(i)),\n   or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n   control.  Caution: actual (global) errors may exceed these\n   local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 + NEQ * MAX(16, NEQ + 9). See also Section E below. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least  20 + NEQ. LIW declared length of IWORK (in user’s dimension). JAC name of subroutine for Jacobian matrix.\n   Use a dummy name.  See also Section E below. JT Jacobian type indicator.  Set JT = 2.\n   See also Section E below.\n   Note that the main program must declare arrays Y, RWORK, IWORK,\n   and possibly ATOL. Section C. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE Status values are returned in ISTATE: values descriptions 2 if DLSODA was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong JT). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of JT or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means work space insufficient to finish (see messages). Section D. To continue the integration after a successful return, simply\n reset TOUT and call DLSODA again.  No other parameters need be reset. Section E. Note : If and when DLSODA regards the problem as stiff, and\n switches methods accordingly, it must make use of the NEQ by NEQ\n Jacobian matrix, J = df/dy.  For the sake of simplicity, the\n inputs to DLSODA recommended in Section B above cause DLSODA to\n treat J as a full matrix, and to approximate it internally by\n difference quotients.  Alternatively, J can be treated as a band\n matrix (with great potential reduction in the size of the RWORK\n array).  Also, in either the full or banded case, the user can supply\n J in closed form, with a routine whose name is passed as the JAC\n argument.  These alternatives are described in the paragraphs on\n RWORK, JAC, and JT in the full description of the call sequence below. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODA .  The problem is from chemical\n kinetics, and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n     dy3/dt = 3.e7*y2**2 on the interval from t = 0.0 to t = 4.e10, with initial conditions y1 = 1.0, y2 = y3 = 0.  The problem is stiff. The following coding solves this problem with DLSODA ,\n printing results at t = .4, 4., …, 4.e10.  It uses\n ITOL = 2, and ATOL much smaller for y2 than y1 or y3 because\n y2 has much smaller values.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsoda_ex use m_odepack implicit none external fex external jdum integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask integer :: itol , jt , liw , lrw , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 70 ) :: rwork neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 70 liw = 23 jt = 2 do iout = 1 , 12 call dlsoda ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , iopt ,& & rwork , lrw , iwork , liw , jdum , jt ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0. endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ), iwork ( 19 ), & & rwork ( 15 ) 99030 format ( / ' No. steps =' , i4 , '  No. f-s =' , i4 , '  No. J-s =' , & & i4 / ' Method last used =' , i2 , '   Last switch was at t =' ,& & d12 . 4 ) end program dlsoda_ex subroutine jdum () implicit none end subroutine jdum subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  4.0000e-01   y =  9.851712e-01  3.386380e-05  1.479493e-02\n   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02\n   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01\n   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01\n   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01\n   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01\n   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01\n   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01\n   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01\n   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01\n   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01\n   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00\n\n   No. steps = 361  No. f-s = 693  No. J-s =  64\n   Method last used = 2   Last switch was at t =  6.0092e-03 Full description of user interface to DLSODA . The user interface to DLSODA consists of the following parts. The call sequence to Subroutine DLSODA , which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODA package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of a subroutine in the DLSODA package,\n      which the user may replace with his/her own version, if desired.\n      this relates to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, JT, and those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODA to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows: F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODA , an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a single value, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ must be an array, with NEQ(1) set to the system size.\n (The DLSODA package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F and JAC.  Hence, if it is an multi-value array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F and/or JAC.  Subroutines F and/or JAC must include\n NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to\n F and JAC.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F and/or JAC.  (The DLSODA package accesses only\n Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n on output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n on an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial t, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter,\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter,\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form max-norm of ( E(i)/EWT(i) )   .le.   1, where EWT = (EWT(i)) is a vector of positive error weights.\n The values of RTOL and ATOL should all be non-negative.\n The following table gives the types (single/mult-value array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 single single RTOL*ABS(Y(i)) + ATOL 2 single array RTOL*ABS(Y(i)) + ATOL(i) 3 array single RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) Even when these parameters are a single value, it needs to be an array\n in the user’s calling program, or passed as a temporary array (ie. use\n “[NEQ]” on the call if NEQ is a scalar). If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting a\n user-supplied routine for the setting of EWT.\n See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value descriptions 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows: value descriptions 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, and any optional inputs except H0, MXORDN, and MXORDS. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value. descriptions 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the length of RWORK and/or IWORK was too small to proceed, but the integration was successful as far as T. This happens when DLSODA chooses to switch methods but LRW and/or LIW is too small for the new method. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK a real array (double precision) for work space, and (in the\n first 20 words) for conditional and optional inputs and\n optional outputs. As DLSODA switches automatically between stiff and nonstiff\n methods, the required length of RWORK can change during the\n problem.  Thus the RWORK array passed to DLSODA can either\n have a static (fixed) length large enough for both methods,\n or have a dynamic (changing) length altered by the calling\n program in response to output from DLSODA . Fixed Length Case If the RWORK length is to be fixed, it should be at least\n        MAX (LRN, LRS),\n   where LRN and LRS are the RWORK lengths required when the\n   current method is nonstiff or stiff, respectively.\n\n   The separate RWORK length requirements LRN and LRS are\n   as follows:\n   IF NEQ is constant and the maximum method orders have\n   their default values, then\n      LRN = 20 + 16*NEQ,\n      LRS = 22 + 9*NEQ + NEQ**2           if JT = 1 or 2,\n      LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ   if JT = 4 or 5.\n   Under any other conditions, LRN and LRS are given by:\n      LRN = 20 + NYH*(MXORDN+1) + 3*NEQ,\n      LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT,\n   where\n      NYH    = the initial value of NEQ,\n      MXORDN = 12, unless a smaller value is given as an\n               optional input,\n      MXORDS = 5, unless a smaller value is given as an\n               optional input,\n      LMAT   = length of matrix work space:\n      LMAT   = NEQ**2 + 2              if JT = 1 or 2,\n      LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. Dynamic Length Case If the length of RWORK is to be dynamic, then it should\n be at least LRN or LRS, as defined above, depending on the\n current method. Initially, it must be at least LRN (since DLSODA starts with the nonstiff method). On any return from DLSODA , the optional output MCUR indicates the\n current method.  If MCUR differs from the value it had on the previous\n return, or if there has only been one call to DLSODA and MCUR is now 2,\n then DLSODA has switched methods during the last call, and the length\n of RWORK should be reset (to LRN if MCUR = 1, or to LRS if MCUR = 2).\n (An increase in the RWORK length is required if DLSODA returned\n ISTATE = -7, but not otherwise.) After resetting the length, call DLSODA with ISTATE = 3\n to signal that change. LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer array for work space.\n As DLSODA switches automatically between stiff and nonstiff\n methods, the required length of IWORK can change during\n problem, between\n             LIS = 20 + NEQ   and   LIN = 20,\n respectively.  Thus the IWORK array passed to DLSODA can\n either have a fixed length of at least 20 + NEQ, or have a\n dynamic length of at least LIN or LIS, depending on the\n current method.  The comments on dynamic length under\n RWORK above apply here.  Initially, this length need\n only be at least LIN = 20 . The first few words of IWORK are used for conditional and\n optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs: IWORK(1) = ML\n   IWORK(2) = MU These are the lower and upper half-bandwidths, respectively, of the\n banded Jacobian, excluding the main diagonal.  The band is defined by\n the matrix locations (i,j) with i-ML .le. j .le. i+MU.  ML and MU must\n satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are required if JT is 4 or 5,\n and ignored otherwise.  ML and MU may in fact be the band parameters\n for a matrix to which df/dy is only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note: The base addresses of the work arrays must not be\n altered between calls to DLSODA for the same problem.\n The contents of the work arrays must not be altered\n between calls, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODA between calls, if\n desired (but not for use by F or JAC). JAC the name of the user-supplied routine to compute the\n Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine\n is optional, but if the problem is expected to be stiff much\n of the time, you are encouraged to supply JAC, for the sake\n of efficiency.  (Alternatively, set JT = 2 or 5 to have DLSODA compute df/dy internally by difference quotients.)\n If and when DLSODA uses df/dy, it treats this NEQ by NEQ\n matrix either as full (JT = 1 or 2), or as banded (JT =\n 4 or 5) with half-bandwidths ML and MU (discussed under\n IWORK above).  In either case, if JT = 1 or 4, the JAC\n routine must compute df/dy as a function of the scalar t\n and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the array\n PD is to be loaded with partial derivatives (elements of\n the Jacobian matrix) on output.  PD must be given a first\n dimension of NROWPD.  T and Y have the same meaning as in\n Subroutine F. In the full matrix case (JT = 1), ML and MU are\n ignored, and the Jacobian is to be loaded into PD in\n columnwise manner, with df(i)/dy(j) loaded into PD(i,j). In the band matrix case (JT = 4), the elements\n within the band are to be loaded into PD in columnwise\n manner, with diagonal lines of df/dy loaded into the rows\n of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).\n ML and MU are the half-bandwidth parameters (see IWORK).\n The locations in PD in the two triangular areas which\n correspond to nonexistent matrix elements can be ignored\n or loaded arbitrarily, as they are overwritten by DLSODA . JAC need not provide df/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to F with the same\n arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  Also, JAC may alter the Y array, if desired.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. JT Jacobian type indicator.  Used only for input.\n JT specifies how the Jacobian matrix df/dy will be\n treated, if and when DLSODA requires this matrix.\n JT has the following values and meanings: value description 1 means a user-supplied full (NEQ by NEQ) Jacobian. 2 means an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 4 means a user-supplied banded Jacobian. 5 means an internally generated banded Jacobian (using ML+MU+1 extra calls to F per df/dy evaluation). If JT = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n If JT = 2 or 5, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) IXPR IWORK(5) flag to generate extra printing at method switches. IXPR = 0 means no extra printing (the default). IXPR = 1 means print data on each switch. T, H, and NST will be printed on the same logical unit as used for error messages. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MXORDN IWORK(8) the maximum order to be allowed for the nonstiff (Adams) method.  the default value is 12. if MXORDN exceeds the default value, it will be reduced to the default value. MXORDN is held constant during the problem. MXORDS IWORK(9) the maximum order to be allowed for the stiff (BDF) method.  The default value is 5. If MXORDS exceeds the default value, it will be reduced to the default value. MXORDS is held constant during the problem. Optional Outputs. As optional additional output from DLSODA , the variables listed\n below are quantities related to the performance of DLSODA which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODA , and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) TSW RWORK(15) the value of t at the time of the last method switch, if any. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required, assuming that the length of RWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required, assuming that the length of IWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. MUSED IWORK(19) the method indicator for the last successful step: 1 means Adams (nonstiff), 2 means BDF (stiff). MCUR IWORK(20) the current method indicator: 1 means Adams (nonstiff), 2 means BDF (stiff). This is the method to be attempted on the next step.  Thus it differs from MUSED only if a method switch has just been made. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at T = TCUR. ACOR LACOR array of size NEQ used for the accumulated (from Common corrections on each step, scaled on output as noted) to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODA .  The base address LACOR is obtained by including in the user’s program the following 2 lines: COMMON /DLS001/ RLS(218), ILS(37) LACOR = ILS(22) Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODA .\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) set the logical unit number, LUN, for output of messages from DLSODA , if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) set a flag to control the printing of messages by DLSODA . MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCMA(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODA (see Part 3 below). RSAV must be a real array of length 240 or more, and ISAV must be an integer array of length 46 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCMA is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODA . CALL DINTDY(,,,,,) provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODA . The detailed instructions for using DINTDY are as follows: The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODA ).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODA directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Interrupting and Continuing If the solution of a given problem by DLSODA is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODA call prior to the\n interruption, the contents of the call sequence variables and state\n and later restore these values before the\n next DLSODA call for that problem.  To save and restore the current\n state, use Subroutine DSRCMA (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below is a description of a routine in the DLSODA package which\n relates to the measurement of errors, and can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) DEWSET The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: Subroutine DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODA call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the\n DMNORM routine, and also used by DLSODA in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). Pedigree: DLSODA is derived from the Livermore Solver for Ordinary\n Differential Equations package ODEPACK, and is\n based on the 12 November 2003 version in double precision. Authors: Alan C. Hindmarsh\n    Center for Applied Scientific Computing, L-561\n    Lawrence Livermore National Laboratory\n    Livermore, CA 94551 and Linda R. Petzold\n    Univ. of California at Santa Barbara\n    Dept. of Computer Science\n    Santa Barbara, CA 93106 References: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Linda R. Petzold, Automatic Selection of Methods for Solving\n     Stiff and Nonstiff Systems of Ordinary Differential Equations,\n     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Other routines in the DLSODA package. In addition to Subroutine DLSODA , the DLSODA package includes the\n following subroutines and function routines: DINTDY computes an interpolated value of the y vector at t = TOUT. DSTODA is the core integrator, which does one step of the\n  integration and the associated error control. DCFODE sets all method coefficients and test constants. DPRJA computes and preprocesses the Jacobian matrix J = df/dy\n  and the Newton iteration matrix P = I - h*l0*J. DSOLSY manages solution of linear system in chord iteration. DEWSET sets the error weight vector EWT before each step. DMNORM computes the weighted max-norm of a vector. DFNORM computes the norm of a full matrix consistent with the\n  weighted max-norm on vectors. DBNORM computes the norm of a band matrix consistent with the\n  weighted max-norm on vectors. DSRCMA is a user-callable routine to save and restore\n  the contents of the internal Common blocks. DGEFA and DGESL are routines from LINPACK for solving full\n  systems of linear algebraic equations. DGBFA and DGBSL are routines from LINPACK for solving banded\n  linear systems. DUMACH computes the unit roundoff in a machine-independent manner. XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n   error messages and warnings.  XERRWD is machine-dependent. Note : DMNORM , DFNORM , DBNORM , DUMACH , and IXSAV are\n function routines.  All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: jac integer :: Jt Calls proc~~dlsoda~2~~CallsGraph proc~dlsoda~2 dlsoda proc~dewset~2 dewset proc~dlsoda~2->proc~dewset~2 proc~xerrwd~2 xerrwd proc~dlsoda~2->proc~xerrwd~2 proc~dmnorm~2 dmnorm proc~dlsoda~2->proc~dmnorm~2 proc~dintdy~2 dintdy proc~dlsoda~2->proc~dintdy~2 proc~dumach~2 dumach proc~dlsoda~2->proc~dumach~2 proc~dstoda~2 dstoda proc~dlsoda~2->proc~dstoda~2 proc~ixsav~2 ixsav proc~xerrwd~2->proc~ixsav~2 proc~dintdy~2->proc~xerrwd~2 none~dumsum dumsum proc~dumach~2->none~dumsum proc~dstoda~2->proc~dmnorm~2 proc~dcfode~2 dcfode proc~dstoda~2->proc~dcfode~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables atoli ayi big ewti h0 hmax hmx i i1 i2 iflag ihit imxer kgo len1 len1c len1n len1s len2 leniw leniwc lenrw lenrwc lenwm lf0 ml mord msg mu mxhnl0 mxstp0 rh rtoli size sum tcrit tdist tnext tol tolsf tp w0 Source Code dlsoda Variables Type Visibility Attributes Name Initial real(kind=dp), public :: atoli real(kind=dp), public :: ayi real(kind=dp), public :: big real(kind=dp), public :: ewti real(kind=dp), public :: h0 real(kind=dp), public :: hmax real(kind=dp), public :: hmx integer, public :: i integer, public :: i1 integer, public :: i2 integer, public :: iflag logical, public :: ihit integer, public :: imxer integer, public :: kgo integer, public :: len1 integer, public :: len1c integer, public :: len1n integer, public :: len1s integer, public :: len2 integer, public :: leniw integer, public :: leniwc integer, public :: lenrw integer, public :: lenrwc integer, public :: lenwm integer, public :: lf0 integer, public :: ml integer, public, dimension(2), save :: mord character(len=60), public :: msg integer, public :: mu integer, public, save :: mxhnl0 integer, public, save :: mxstp0 real(kind=dp), public :: rh real(kind=dp), public :: rtoli real(kind=dp), public :: size real(kind=dp), public :: sum real(kind=dp), public :: tcrit real(kind=dp), public :: tdist real(kind=dp), public :: tnext real(kind=dp), public :: tol real(kind=dp), public :: tolsf real(kind=dp), public :: tp real(kind=dp), public :: w0 Source Code subroutine dlsoda ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Jt ) ! external :: f integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ), intent ( inout ) :: T real ( kind = dp ), intent ( inout ) :: Tout integer :: Itol real ( kind = dp ) :: Rtol ( * ) real ( kind = dp ) :: Atol ( * ) integer :: Itask integer :: Istate integer :: Iopt integer :: Lrw real ( kind = dp ), intent ( inout ) :: Rwork ( Lrw ) integer :: Liw integer , intent ( inout ) :: Iwork ( Liw ) external :: jac integer :: Jt real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , & & size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , kgo , len1 , len1c , len1n , len1s , & & len2 , leniw , leniwc , lenrw , lenrwc , lenwm , lf0 , ml , mu logical :: ihit integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODA, DINTDY, DSTODA, !  DPRJA, and DSOLSY. !  The type(DLSA01)::DLSA is declared in subroutines DLSODA, DSTODA, and DPRJA. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 1 . or . Istate > 3 ) then msg = 'DLSODA-  ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate < 0 ) then msg = 'DLSODA-  Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) return endif Istate = - 3 return endif if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODA-  ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return else if ( dls1 % init == 0 ) then msg = 'DLSODA-  ISTATE .gt. 1 but DLSODA not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 2 ) goto 100 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  JT, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODA-  NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODA-  ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODA-  ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODA-  IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Jt == 3 . or . Jt < 1 . or . Jt > 5 ) then msg = 'DLSODA-  JT (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Jt , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif dlsa % jtyp = Jt if ( Jt > 2 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODA-  ML (=I1) illegal: .lt.0 or .ge.NEQ (=I2) ' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODA-  MU (=I1) illegal: .lt.0 or .ge.NEQ (=I2) ' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif endif !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dlsa % ixpr = Iwork ( 5 ) if ( dlsa % ixpr < 0 . or . dlsa % ixpr > 1 ) then msg = 'DLSODA-  IXPR (=I1) illegal.  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dlsa % ixpr , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODA-  MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODA-  MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) dlsa % mxordn = Iwork ( 8 ) if ( dlsa % mxordn < 0 ) then msg = 'DLSODA-  MXORDN (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 28 , 0 , 1 , dlsa % mxordn , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dlsa % mxordn == 0 ) dlsa % mxordn = 100 dlsa % mxordn = min ( dlsa % mxordn , mord ( 1 )) dlsa % mxords = Iwork ( 9 ) if ( dlsa % mxords < 0 ) then msg = 'DLSODA-  MXORDS (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 29 , 0 , 1 , dlsa % mxords , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dlsa % mxords == 0 ) dlsa % mxords = 100 dlsa % mxords = min ( dlsa % mxords , mord ( 2 )) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODA-  TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) Istate = - 3 return endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODA-  HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) Istate = - 3 return endif dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODA-  HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) Istate = - 3 return endif else dlsa % ixpr = 0 dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 if ( Istate == 1 ) then h0 = 0.0D0 dlsa % mxordn = mord ( 1 ) dlsa % mxords = mord ( 2 ) endif endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  If ISTATE = 1, METH is initialized to 1 here to facilitate the !  checking of work space lengths. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  YH, WM, EWT, SAVF, ACOR. !  If the lengths provided are insufficient for the current method, !  an error return occurs.  This is treated as illegal input on the !  first call, but as a problem interruption with ISTATE = -7 on a !  continuation call.  If the lengths are sufficient for the current !  method but not for both methods, a warning message is sent. ! ----------------------------------------------------------------------- if ( Istate == 1 ) dls1 % meth = 1 if ( Istate == 1 ) dls1 % nyh = dls1 % n dls1 % lyh = 21 len1n = 20 + ( dlsa % mxordn + 1 ) * dls1 % nyh len1s = 20 + ( dlsa % mxords + 1 ) * dls1 % nyh dls1 % lwm = len1s + 1 lenwm = 0 if ( Jt <= 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( Jt >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 len1s = len1s + lenwm len1c = len1n if ( dls1 % meth == 2 ) len1c = len1s len1 = max ( len1n , len1s ) len2 = 3 * dls1 % n lenrw = len1 + len2 lenrwc = len1c + len2 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n leniwc = 20 if ( dls1 % meth == 2 ) leniwc = leniw Iwork ( 18 ) = leniw if ( Istate == 1 . and . Lrw < lenrwc ) then msg = 'DLSODA-  RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 1 . and . Liw < leniwc ) then msg = 'DLSODA-  IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 3 . and . Lrw < lenrwc ) goto 600 if ( Istate == 3 . and . Liw < leniwc ) goto 700 dls1 % lewt = len1 + 1 dlsa % insufr = 0 if ( Lrw < lenrw ) then dlsa % insufr = 2 dls1 % lewt = len1c + 1 msg = 'DLSODA-  Warning.. RWORK length is sufficient for now, but  ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENRW = I1, while LRW = I2.' call xerrwd ( msg , 50 , 103 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) endif dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n dlsa % insufi = 0 if ( Liw < leniw ) then dlsa % insufi = 2 msg = 'DLSODA-  Warning.. IWORK length is sufficient for now, but  ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENIW = I1, while LIW = I2.' call xerrwd ( msg , 50 , 104 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODA-  RTOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) Istate = - 3 return endif if ( atoli < 0.0D0 ) then msg = 'DLSODA-  ATOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) Istate = - 3 return endif enddo if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T dlsa % tsw = T dls1 % maxord = dlsa % mxordn if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) Istate = - 3 return endif if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dlsa % mused = 0 dls1 % miter = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODA-  EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) Istate = - 3 return endif Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by: ! !    H0**(-2)  =  1./(TOL * w0**2)  +  TOL * (norm(F))**2 ! !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          F      = the initial value of the vector f(t,y), and !          norm() = the weighted vector norm used throughout, given by !                   the DMNORM function routine, and weighted by the !                   tolerances initially loaded into the EWT array. !  The sign of H0 is inferred from the initial values of TOUT and T. !  ABS(H0) is made .le. ABS(TOUT-T) in any case. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODA-  TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) Istate = - 3 return endif tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dmnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 300 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODA. ------- dls1 % jstart = - 1 if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 100 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 200 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODA-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) Istate = - 3 return endif if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 T = dls1 % tn goto 400 case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) Istate = - 3 return endif if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) Istate = - 3 return endif if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) then msg = 'DLSODA-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) Istate = - 3 return endif T = Tout goto 500 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) Istate = - 3 return endif case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) then msg = 'DLSODA-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) Istate = - 3 return endif T = Tout goto 500 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) T = tcrit if ( ihit ) goto 400 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 . and . dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODA. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 200 continue if ( dls1 % meth /= dlsa % mused ) then if ( dlsa % insufr == 1 ) goto 600 if ( dlsa % insufi == 1 ) goto 700 endif if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then !=================================================================================================================================== ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- !  Block H. msg = 'DLSODA-  At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 900 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- !  Block H. ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODA-  At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 900 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 300 continue tolsf = dls1 % uround * dmnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODA-  Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODA-  Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !    CALL DSTODA(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,f,JAC,DPRJA,DSOLSY) ! ----------------------------------------------------------------------- call dstoda ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), & & Iwork ( dls1 % liwm ), f , jac , dprja , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- !  Block H. msg = 'DLSODA-  At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 800 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- !  Block H. msg = 'DLSODA-  At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 800 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0). !  If a method switch was just made, record TSW, reset MAXORD, !  set JSTART to -1 to signal DSTODA to complete the switch, !  and do extra printing of data if IXPR = 1. !  Then, in any case, check for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 if ( dls1 % meth /= dlsa % mused ) then dlsa % tsw = dls1 % tn dls1 % maxord = dlsa % mxordn if ( dls1 % meth == 2 ) dls1 % maxord = dlsa % mxords if ( dls1 % meth == 2 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dlsa % insufr = min ( dlsa % insufr , 1 ) dlsa % insufi = min ( dlsa % insufi , 1 ) dls1 % jstart = - 1 if ( dlsa % ixpr /= 0 ) then if ( dls1 % meth == 2 ) then msg = 'DLSODA- A switch to the BDF (stiff) method has occurred     ' call xerrwd ( msg , 60 , 105 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( dls1 % meth == 1 ) then msg = 'DLSODA- A switch to the Adams (nonstiff) method has occurred' call xerrwd ( msg , 60 , 106 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif msg = '     at T = R1,  tentative step size H = R2,  step NST = I1 ' call xerrwd ( msg , 60 , 107 , 0 , 1 , dls1 % nst , 0 , 2 , dls1 % tn , dls1 % h ) endif endif select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif goto 200 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 500 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 500 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODA-  At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf Istate = - 3 return endif !  Too much accuracy requested for machine precision. ------------------- !  Block H. msg = 'DLSODA-  At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 900 endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODA. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 400 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 500 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth return !  RWORK length too small to proceed. ----------------------------------- !  Block H. 600 continue msg = 'DLSODA-  At current T(=R1), RWORK length too small' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 900 !  IWORK length too small to proceed. ----------------------------------- !  Block H. 700 continue msg = 'DLSODA-  At current T(=R1), IWORK length too small' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 900 !=================================================================================================================================== !  Compute IMXER if relevant. ------------------------------------------- !  Block H. 800 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 900 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth ! ----------------------------------------------------------------------- !  Block I.  Many returns with ISTATE=-3 !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- ! end subroutine dlsoda","tags":"","loc":"proc/dlsoda~2.html"},{"title":"dmnorm – odepack","text":"public pure function dmnorm(n, v, w) This function routine computes the weighted max-norm\nof the vector of length N contained in the array V, with weights\ncontained in the array w of length N:\n  DMNORM = MAX(i=1,…,N) ABS(V(i))*W(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dmnorm~~CalledByGraph proc~dmnorm dmnorm proc~dlsoda dlsoda proc~dlsoda->proc~dmnorm proc~dstoda dstoda proc~dlsoda->proc~dstoda proc~dprja dprja proc~dprja->proc~dmnorm proc~dlsodar dlsodar proc~dlsodar->proc~dmnorm proc~dlsodar->proc~dstoda proc~dstoda->proc~dmnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dmnorm.html"},{"title":"dumach – odepack","text":"public function dumach() NAME dumach(3f) - [M_odepack] Compute the unit roundoff of the machine. SYNOPSIS a = dumach()\n    double precision :: dumach\n    double precision :: a DESCRIPTION The unit roundoff is defined as the smallest positive machine\n   number u such that  1.0 + u .ne. 1.0.  This is computed by DUMACH\n   in a machine-independent manner. RETURNS A the unit roundoff of the machine. Arguments None Return Value real(kind=dp) Called by proc~~dumach~~CalledByGraph proc~dumach dumach proc~dlsodi dlsodi proc~dlsodi->proc~dumach proc~dlsodkr dlsodkr proc~dlsodkr->proc~dumach proc~dlsode dlsode proc~dlsode->proc~dumach proc~dlsodes dlsodes proc~dlsodes->proc~dumach proc~dlsoda dlsoda proc~dlsoda->proc~dumach proc~dlsodar dlsodar proc~dlsodar->proc~dumach proc~dlsodis dlsodis proc~dlsodis->proc~dumach proc~dlsodpk dlsodpk proc~dlsodpk->proc~dumach proc~dlsoibt dlsoibt proc~dlsoibt->proc~dumach Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dumach.html"},{"title":"dvnorm – odepack","text":"public pure function dvnorm(n, v, w) NAME dvnorm(3f) - [M_odepack] Weighted root-mean-square vector norm. DESCRIPTION This function routine computes the weighted root-mean-square norm\n  of the vector of length N contained in the array V, with weights\n  contained in the array W of length N: DVNORM = SQRT( (1/N) * SUM( V(i)*W(i) )**2 ) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dvnorm~~CalledByGraph proc~dvnorm dvnorm proc~dstodi dstodi proc~dstodi->proc~dvnorm proc~dstode~2 dstode proc~dstode~2->proc~dvnorm proc~dlsodkr dlsodkr proc~dlsodkr->proc~dvnorm proc~dlhin dlhin proc~dlsodkr->proc~dlhin proc~dstoka dstoka proc~dlsodkr->proc~dstoka proc~dlsodi dlsodi proc~dlsodi->proc~dvnorm proc~dlsodi->proc~dstodi proc~dlhin->proc~dvnorm proc~dstoka->proc~dvnorm proc~dprepj dprepj proc~dprepj->proc~dvnorm proc~dstodi~2 dstodi proc~dstodi~2->proc~dvnorm proc~dstode dstode proc~dstode->proc~dvnorm proc~dlsode dlsode proc~dlsode->proc~dvnorm proc~dlsode->proc~dstode proc~dlsodes dlsodes proc~dlsodes->proc~dvnorm proc~dlsodes->proc~dstode proc~dlsodis dlsodis proc~dlsodis->proc~dvnorm proc~dlsodis->proc~dstodi proc~dlsodpk dlsodpk proc~dlsodpk->proc~dvnorm proc~dstodpk dstodpk proc~dlsodpk->proc~dstodpk proc~dstodpk->proc~dvnorm proc~dlsoibt dlsoibt proc~dlsoibt->proc~dvnorm proc~dlsoibt->proc~dstodi proc~dprjs dprjs proc~dprjs->proc~dvnorm proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dstodi proc~dlsode~2 dlsode proc~dlsode~2->proc~dstode proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dstodi proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dstode proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dstodi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dvnorm.html"},{"title":"adjlr – odepack","text":"public subroutine adjlr(N, Isp, Ldif) This routine computes an adjustment, LDIF, to the required\ninteger storage space in IWK (sparse matrix work space). It is called only if the word length ratio is LRAT = 1.\nThis is to account for the possibility that the symbolic LU phase\nmay require more storage than the numerical LU and solution phases. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Isp (*) integer, intent(out) :: Ldif Called by proc~~adjlr~~CalledByGraph proc~adjlr adjlr proc~dprep dprep proc~dprep->proc~adjlr proc~dprepi dprepi proc~dprepi->proc~adjlr proc~dprepi~2 dprepi proc~dprepi~2->proc~adjlr proc~dprep~2 dprep proc~dprep~2->proc~adjlr proc~diprep~2 diprep proc~diprep~2->proc~dprep proc~diprep diprep proc~diprep->proc~dprep proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprepi~2 diprepi proc~diprepi~2->proc~dprepi proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~diprepi~2 proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/adjlr.html"},{"title":"cdrv – odepack","text":"public subroutine cdrv(N, R, C, Ic, Ia, Ja, A, B, Z, Nsp, Isp, Rsp, Esp, Path, Flag) NAME cdrv(3f) - [M_odepack ] driver for solving sparse non-symmetric\n            systems of linear equations DESCRIPTION driver for subroutines for solving sparse nonsymmetric systems of\n   linear equations (compressed pointer storage) PARAMETERS class abbreviations are -- n - integer variable f - real variable v - supplies a value to the driver r - returns a result from the driver i - used internally by the driver a - array class - parameter the nonzero entries of the coefficient matrix m are stored\n   row-by-row in the array a.  to identify the individual nonzero\n   entries in each row, we need to know in which column each entry\n   lies.  the column indices which correspond to the nonzero entries\n   of m are stored in the array ja.  i.e., if  a(k) = m(i,j),  then\n   ja(k) = j.  in addition, we need to know where each row starts and\n   how long it is.  the index positions in ja and a where the rows of\n   m begin are stored in the array ia.  i.e., if m(i,j) is the first\n   nonzero entry (stored) in the i-th row and a(k) = m(i,j),  then\n   ia(i) = k.  moreover, the index in ja and a of the first location\n   following the last element in the last row is stored in ia(n+1).\n   thus, the number of entries in the i-th row is given by\n   ia(i+1) - ia(i),  the nonzero entries of the i-th row are stored\n   consecutively in a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), and the corresponding column indices are stored consecutively in ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). for example, the 5 by 5 matrix ( 1. 0. 2. 0. 0.)\n                ( 0. 3. 0. 0. 0.)\n            m = ( 0. 4. 5. 6. 0.)\n                ( 0. 0. 0. 7. 0.)\n                ( 0. 0. 0. 8. 9.) would be stored as - 1  2  3  4  5  6  7  8  9\n            ---+--------------------------\n            ia - 1  3  4  7  8 10\n            ja - 1  3  2  2  3  4  4  4  5\n             a - 1. 2. 3. 4. 5. 6. 7. 8. 9.         . nv    - n     - number of variables/equations.\n     fva   - a     - nonzero entries of the coefficient matrix m, stored\n           -           by rows.\n           -           size = number of nonzero entries in m.\n     nva   - ia    - pointers to delimit the rows in a.\n           -           size = n+1.\n     nva   - ja    - column numbers corresponding to the elements of a.\n           -           size = size of a.\n     fva   - b     - right-hand side b.  b and z can the same array.\n           -           size = n.\n     fra   - z     - solution x.  b and z can be the same array.\n           -           size = n. the rows and columns of the original matrix m can be\n   reordered (e.g., to reduce fillin or ensure numerical stability)\n   before calling the driver.  if no reordering is done, then set\n   r(i) = c(i) = ic(i) = i  for i=1,…,n.  the solution z is returned\n   in the original order. if the columns have been reordered (i.e.,  c(i).ne.i  for some\n   i), then the driver will call a subroutine (nroc) which rearranges\n   each row of ja and a, leaving the rows in the original order, but\n   placing the elements of each row in increasing order with respect\n   to the new ordering.  if  path.ne.1,  then nroc is assumed to have\n   been called already. nva   - r     - ordering of the rows of m.\n       -           size = n.\n nva   - c     - ordering of the columns of m.\n       -           size = n.\n nva   - ic    - inverse of the ordering of the columns of m.  i.e.,\n       -           ic(c(i)) = i  for i=1,...,n.\n       -           size = n. the solution of the system of linear equations is divided into\n   three stages – nsfc -- the matrix m is processed symbolically to determine where\n               fillin will occur during the numeric factorization.\n      nnfc -- the matrix m is factored numerically into the product ldu\n               of a unit lower triangular matrix l, a diagonal matrix\n               d, and a unit upper triangular matrix u, and the system\n               mx = b  is solved.\n      nnsc -- the linear system  mx = b  is solved using the ldu\n  or           factorization from nnfc.\n      nntc -- the transposed linear system  mt x = b  is solved using\n               the ldu factorization from nnf. for several systems whose coefficient matrices have the same\n   nonzero structure, nsfc need be done only once (for the first\n   system).  then nnfc is done once for each additional system.  for\n   several systems with the same coefficient matrix, nsfc and nnfc\n   need be done only once (for the first system).  then nnsc or nntc\n   is done once for each additional right-hand side. nv    - path  - path specification.  values and their meanings are --\n       -           1  perform nroc, nsfc, and nnfc.\n       -           2  perform nnfc only  (nsfc is assumed to have been\n       -               done in a manner compatible with the storage\n       -               allocation used in the driver).\n       -           3  perform nnsc only  (nsfc and nnfc are assumed to\n       -               have been done in a manner compatible with the\n       -               storage allocation used in the driver).\n       -           4  perform nntc only  (nsfc and nnfc are assumed to\n       -               have been done in a manner compatible with the\n       -               storage allocation used in the driver).\n       -           5  perform nroc and nsfc. various errors are detected by the driver and the individual\n   subroutines. nr    - flag  - error flag.  values and their meanings are --\n       -             0     no errors detected\n       -             n+k   null row in a  --  row = k\n       -            2n+k   duplicate entry in a  --  row = k\n       -            3n+k   insufficient storage in nsfc  --  row = k\n       -            4n+1   insufficient storage in nnfc\n       -            5n+k   null pivot  --  row = k\n       -            6n+k   insufficient storage in nsfc  --  row = k\n       -            7n+1   insufficient storage in nnfc\n       -            8n+k   zero pivot  --  row = k\n       -           10n+1   insufficient storage in cdrv\n       -           11n+1   illegal path specification working storage is needed for the factored form of the matrix\n   m plus various temporary vectors.  the arrays isp and rsp should be\n   equivalenced.  integer storage is allocated from the beginning of\n   isp and real storage from the end of rsp. nv    - nsp   - declared dimension of rsp.  nsp generally must\n                        be larger than  8n+2 + 2k  (where  k = (number of\n                        nonzero entries in m)).\n        nvira - isp   - integer working storage divided up into various arrays\n                        needed by the subroutines.  isp and rsp should be\n                        equivalenced.\n                             size = lratio*nsp.\n        fvira - rsp   - real working storage divided up into various arrays\n                        needed by the subroutines.  isp and rsp should be\n                        equivalenced.\n                             size = nsp.\n        nr    - esp   - if sufficient storage was available to perform the\n                        symbolic factorization (nsfc), then esp is set to\n                        the amount of excess storage provided (negative if\n                        insufficient storage was available to perform the\n                        numeric factorization (nnfc)). Arguments Type Intent Optional Attributes Name integer :: N integer :: R (*) integer :: C (*) integer :: Ic (*) integer :: Ia (*) integer :: Ja (*) real(kind=dp) :: A (*) real(kind=dp) :: B (*) real(kind=dp) :: Z (*) integer, intent(in) :: Nsp integer, intent(inout) :: Isp (*) real(kind=dp) :: Rsp (*) integer, intent(out) :: Esp integer, intent(in) :: Path integer, intent(inout) :: Flag Called by proc~~cdrv~~CalledByGraph proc~cdrv cdrv proc~dprep dprep proc~dprep->proc~cdrv proc~dainvgs dainvgs proc~dainvgs->proc~cdrv proc~dprepi~2 dprepi proc~dprepi~2->proc~cdrv proc~dprepi dprepi proc~dprepi->proc~cdrv proc~dainvgs~2 dainvgs proc~dainvgs~2->proc~cdrv proc~dprep~2 dprep proc~dprep~2->proc~cdrv proc~dprjis dprjis proc~dprjis->proc~cdrv proc~dsolss dsolss proc~dsolss->proc~cdrv proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dainvgs proc~diprepi~2 diprepi proc~dlsodis~2->proc~diprepi~2 proc~diprep diprep proc~diprep->proc~dprep proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprep~2 diprep proc~diprep~2->proc~dprep proc~dlsodis dlsodis proc~dlsodis->proc~dainvgs proc~dlsodis->proc~diprepi proc~diprepi~2->proc~dprepi proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/cdrv.html"},{"title":"cntnzu – odepack","text":"public subroutine cntnzu(N, Ia, Ja, Nzsut) This routine counts the number of nonzero elements in the strict\nupper triangle of the matrix M + M(transpose), where the sparsity\nstructure of M is given by pointer arrays IA and JA. This is needed to compute the storage requirements for the\nsparse matrix reordering operation in ODRV. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(out) :: Nzsut Called by proc~~cntnzu~~CalledByGraph proc~cntnzu cntnzu none~wrapup600 wrapup600 none~wrapup600->proc~cntnzu none~wrapup600~2 wrapup600 none~wrapup600~2->proc~cntnzu proc~dprepi dprepi proc~dprepi->proc~cntnzu proc~dprepi~2 dprepi proc~dprepi~2->proc~cntnzu proc~dprep dprep proc~dprep->none~wrapup600 proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprepi~2 diprepi proc~diprepi~2->proc~dprepi proc~dprep~2 dprep proc~dprep~2->none~wrapup600~2 proc~diprep~2 diprep proc~diprep~2->proc~dprep proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~diprepi~2 proc~diprep diprep proc~diprep->proc~dprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/cntnzu.html"},{"title":"daigbt – odepack","text":"public subroutine daigbt(res, adda, Neq, T, Y, Ydot, Mb, Nb, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSOIBT for\ninitialization only, when ISTATE = 0 .\nDAIGBT returns an error flag IER: IER = 0 means DAIGBT was successful . IER . ge . 2 means RES returned an error flag IRES = IER . IER . lt . 0 means the A matrix was found to have a singular diagonal block ( hence YDOT could not be solved for ) . Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: Neq (*) real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Mb integer, intent(inout) :: Nb real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier Called by proc~~daigbt~~CalledByGraph proc~daigbt daigbt proc~dlsoibt dlsoibt proc~dlsoibt->proc~daigbt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/daigbt.html"},{"title":"dainvg – odepack","text":"public subroutine dainvg(res, adda, Neq, T, Y, Ydot, Miter, Ml, Mu, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSODI for\ninitialization only, when ISTATE = 0 .\nDAINVG returns an error flag IER: IER  =  0  means DAINVG was successful.\nIER .ge. 2 means RES returned an error flag IRES = IER.\nIER .lt. 0 means the a-matrix was found to be singular. Arguments Type Intent Optional Attributes Name real :: res real :: adda integer, intent(inout) :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Miter integer, intent(inout) :: Ml integer, intent(inout) :: Mu real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier Calls proc~~dainvg~~CallsGraph proc~dainvg dainvg proc~dgefa dgefa proc~dainvg->proc~dgefa proc~dgesl dgesl proc~dainvg->proc~dgesl proc~dscal dscal proc~dgefa->proc~dscal proc~daxpy daxpy proc~dgefa->proc~daxpy proc~dgesl->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dainvg~~CalledByGraph proc~dainvg dainvg proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dainvg.html"},{"title":"daxpy – odepack","text":"public subroutine daxpy(N, Da, Dx, Incx, Dy, Incy) NAME daxpy(3f) - [M_odepack::matrix] Compute a constant times a vector plus a vector. SYNOPSIS subroutine daxpy(N,Da,Dx,Incx,Dy,Incy)\ninteger,intent(in)          :: N\nreal(kind=dp),intent(in)    :: Da\nreal(kind=dp),intent(in)    :: Dx(*)\ninteger,intent(in)          :: Incx\nreal(kind=dp),intent(inout) :: Dy(*)\ninteger,intent(in)          :: Incy DESCRIPTION daxpy(3f) computes a constant times a vector plus a vector.\n   It uses unrolled loops for increments equal to one. Overwrite double precision DY with double precision DA DX + DY.\n   For I = 0 to N-1, replace  DY(LY+I INCY) with \n   DA DX(LX+I INCX) + DY(LY+I*INCY), where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. INPUT OPTIONS N number of elements in input vector(s) DA double precision scalar multiplier DX double precision vector with N elements INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY RETURNS DY double precision result (unchanged if N .LE. 0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(inout) :: Dy (*) integer, intent(in) :: Incy Called by proc~~daxpy~~CalledByGraph proc~daxpy daxpy proc~dgefa dgefa proc~dgefa->proc~daxpy proc~dgesl dgesl proc~dgesl->proc~daxpy proc~dainvg dainvg proc~dainvg->proc~dgefa proc~dainvg->proc~dgesl proc~dsolsy dsolsy proc~dsolsy->proc~dgesl proc~dprja dprja proc~dprja->proc~dgefa proc~dprepj dprepj proc~dprepj->proc~dgefa proc~dprepji dprepji proc~dprepji->proc~dgefa proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/daxpy.html"},{"title":"dcfode – odepack","text":"public subroutine dcfode(meth, elco, tesco) NAME dcfode(3f) - [M_odepack] Set ODE integrator coefficients. SYNOPSIS subroutine dcfode (meth, elco, tesco)\n     integer          :: meth\n     double precision :: elco(13,12)\n     double precision :: tesco(3,12) DESCRIPTION DCFODE is called by the integrator routine to set coefficients\n   needed there. DCFODE is called once at the beginning of the problem,\n   and is not called again unless and until METH is changed. OPTIONS METH The coefficients for the current method, as\n   given by the value of METH, are set for all orders and saved.\n   The maximum order assumed here is 12 if METH = 1 and 5 if METH = 2.\n   (A smaller value of the maximum order is also allowed.) ELCO The ELCO array contains the basic method coefficients.\n   The coefficients el(i), 1 .le. i .le. nq+1, for the method of\n   order nq are stored in ELCO(i,nq).  They are given by a genetrating\n   polynomial, i.e.,\n       l(x) = el(1) + el(2) x + … + el(nq+1) x nq.\n   For the implicit Adams methods, l(x) is given by\n       dl/dx = (x+1) (x+2) … (x+nq-1)/factorial(nq-1),    l(-1) = 0.\n   For the BDF methods, l(x) is given by\n       l(x) = (x+1) (x+2) … (x+nq)/K,\n   where \n       K = factorial(nq)*(1 + 1/2 + … + 1/nq). TESCO The TESCO array contains test constants used for the\n   local error test and the selection of step size and/or order.\n   At order nq, TESCO(k,nq) is used for the selection of step\n   size at order nq - 1 if k = 1, at order nq if k = 2, and at order\n   nq + 1 if k = 3. Arguments Type Intent Optional Attributes Name integer, intent(in) :: meth real(kind=dp), intent(inout) :: elco (13,12) real(kind=dp), intent(out) :: tesco (3,12) Called by proc~~dcfode~~CalledByGraph proc~dcfode dcfode proc~dstodi dstodi proc~dstodi->proc~dcfode proc~dstode~2 dstode proc~dstode~2->proc~dcfode proc~dstoka dstoka proc~dstoka->proc~dcfode proc~dstoda dstoda proc~dstoda->proc~dcfode proc~dstodi~2 dstodi proc~dstodi~2->proc~dcfode proc~dstode dstode proc~dstode->proc~dcfode proc~dstodpk dstodpk proc~dstodpk->proc~dcfode proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~dstodi proc~dlsodi dlsodi proc~dlsodi->proc~dstodi proc~dlsodi~2 dlsodi proc~dlsodi~2->proc~dstodi proc~dlsodkr dlsodkr proc~dlsodkr->proc~dstoka proc~dlsode~2 dlsode proc~dlsode~2->proc~dstode proc~dlsodis dlsodis proc~dlsodis->proc~dstodi proc~dlsoibt~2 dlsoibt proc~dlsoibt~2->proc~dstodi proc~dlsoibt dlsoibt proc~dlsoibt->proc~dstodi proc~dlsoda dlsoda proc~dlsoda->proc~dstoda proc~dlsodar dlsodar proc~dlsodar->proc~dstoda proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~dstode proc~dlsodes dlsodes proc~dlsodes->proc~dstode proc~dlsode dlsode proc~dlsode->proc~dstode proc~dlsodpk dlsodpk proc~dlsodpk->proc~dstodpk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dcfode.html"},{"title":"dcopy – odepack","text":"public subroutine dcopy(N, Dx, Incx, Dy, Incy) NAME dcopy(3f) - [M_odepack::matrix] copy a vector SYNOPSIS subroutine dcopy(N,Dx,Incx,Dy,Incy)\n\n    integer,intent(in)        :: N\n    real(kind=dp),intent(in)  :: Dx(*)\n    integer,intent(in)        :: Incx\n    real(kind=dp),intent(out) :: Dy(*)\n    integer,intent(in)        :: Incy DESCRIPTION Copy double precision DX to double precision DY.\n   For I = 0 to N-1, copy DX(LX+I INCX) to DY(LY+I INCY),\n   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. INPUT OPTIONS N number of elements in input vector(s) DX double precision vector with N elements INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY RETURNS DY copy of vector DX (unchanged if N .LE. 0) REFERENCES B L A S  Subprogram C . L . Lawson , R . J . Hanson , D . R . Kincaid and F . T . Krogh , Basic linear algebra subprograms for Fortran usage , Algorithm No . 539 , Transactions on Mathematical Software 5 , 3 ( September 1979 ) , pp . 308 - 323 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(out) :: Dy (*) integer, intent(in) :: Incy Called by proc~~dcopy~~CalledByGraph proc~dcopy dcopy proc~dlsodar dlsodar proc~dlsodar->proc~dcopy proc~dlsodkr dlsodkr proc~dlsodkr->proc~dcopy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dcopy.html"},{"title":"dewset – odepack","text":"public subroutine dewset(N, Itol, Rtol, Atol, Ycur, Ewt) NAME dewset(3f) - [M_odepack] Set error weight vector. SYNOPSIS subroutine dewset(N,Itol,Rtol,Atol,Ycur,Ewt)\n    integer,intent(in)        :: N\n    integer,intent(in)        :: Itol\n    real(kind=dp),intent(in)  :: Rtol(*)\n    real(kind=dp),intent(in)  :: Atol(*)\n    real(kind=dp),intent(in)  :: Ycur(N)\n    real(kind=dp),intent(out) :: Ewt(N) DESCRIPTION This subroutine sets the error weight vector EWT according to EWT(i) = RTOL(i)*ABS(YCUR(i)) + ATOL(i),  i = 1,...,N, with the subscript on RTOL and/or ATOL possibly replaced by 1 above,\n  depending on the value of ITOL. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Itol real(kind=dp), intent(in) :: Rtol (*) real(kind=dp), intent(in) :: Atol (*) real(kind=dp), intent(in) :: Ycur (N) real(kind=dp), intent(out) :: Ewt (N) Called by proc~~dewset~~CalledByGraph proc~dewset dewset proc~dlsodi dlsodi proc~dlsodi->proc~dewset proc~dlsodkr dlsodkr proc~dlsodkr->proc~dewset proc~dlsode dlsode proc~dlsode->proc~dewset proc~dlsodes dlsodes proc~dlsodes->proc~dewset proc~dlsoda dlsoda proc~dlsoda->proc~dewset proc~dlsodar dlsodar proc~dlsodar->proc~dewset proc~dlsodis dlsodis proc~dlsodis->proc~dewset proc~dlsodpk dlsodpk proc~dlsodpk->proc~dewset proc~dlsoibt dlsoibt proc~dlsoibt->proc~dewset Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dewset.html"},{"title":"dgefa – odepack","text":"public subroutine dgefa(A, Lda, N, Ipvt, Info) dgefa(3f) - [M_odepack::matrix] Factor a matrix using Gaussian elimination. subroutine dgefa(A,Lda,N,Ipvt,Info)\n  real(kind=dp),intent(inout) :: A(Lda,*)\n  integer,intent(in)          :: Lda\n  integer,intent(in)          :: N\n  integer,intent(out)         :: Ipvt(*)\n  integer,intent(out)         :: Info DESCRIPTION DGEFA factors a double precision matrix by Gaussian elimination. DGEFA is usually called by DGECO, but it can be called\n   directly with a saving in time if  RCOND  is not needed.\n   (Time for DGECO) = (1 + 9/N)*(Time for DGEFA) . OPTIONS A the matrix to be factored. LDA the leading dimension of the array  A . N the order of the matrix  A . RETURNS A an upper triangular matrix and the multipliers\n   which were used to obtain it.\n   The factorization can be written  A = L*U  where L is a product of permutation and unit lower\n   triangular matrices and  U  is upper triangular. IPVT an integer vector of pivot indices. INFO = 0 normal value . = K if U ( K , K ) . EQ . 0 . 0 . This is not an error condition for this subroutine , but it does indicate that DGESL or DGEDI will divide by zero if called . Use RCOND in DGECO for a reliable indication of singularity . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(out) :: Ipvt (*) integer, intent(out) :: Info Calls proc~~dgefa~~CallsGraph proc~dgefa dgefa proc~dscal dscal proc~dgefa->proc~dscal proc~daxpy daxpy proc~dgefa->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgefa~~CalledByGraph proc~dgefa dgefa proc~dainvg dainvg proc~dainvg->proc~dgefa proc~dprja dprja proc~dprja->proc~dgefa proc~dprepji dprepji proc~dprepji->proc~dgefa proc~dprepj dprepj proc~dprepj->proc~dgefa proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dgefa.html"},{"title":"dgesl – odepack","text":"public subroutine dgesl(A, Lda, N, Ipvt, B, Job) NAME dgesl(3f) - [M_odepack::matrix] Solve the real system A X=B or TRANS(A) X=B\n               using the factors computed by DGECO or DGEFA. SYNOPSIS subroutine dgesl(A,Lda,N,Ipvt,B,Job)\ninteger,intent(in)          :: Lda\nreal(kind=dp)               :: A(Lda,*)\ninteger,intent(in)          :: N\ninteger,intent(in)          :: Ipvt(*)\nreal(kind=dp),intent(inout) :: B(*)\ninteger,intent(in)          :: Job DESCRIPTION DGESL solves the double precision system A * X = B  or  TRANS(A) * X = B using the factors computed by DGECO or DGEFA. Error Condition A division by zero will occur if the input factor contains a zero on the diagonal . Technically this indicates singularity but it is often caused by improper arguments or improper setting of LDA . It will not occur if the subroutines are called correctly and if DGECO has set RCOND . GT . 0 . 0 or DGEFA has set INFO . EQ . 0 . To compute  INVERSE(A) * C  where  C  is a matrix\n   with  P  columns CALL DGECO ( A , LDA , N , IPVT , RCOND , Z ) IF ( RCOND is too small ) GO TO ... DO J = 1 , P CALL DGESL ( A , LDA , N , IPVT , C ( 1 , J ), 0 ) ENDDO ON ENTRY A the output from DGECO or DGEFA. LDA the leading dimension of the array  A . N the order of the matrix  A . IPVT the pivot vector from DGECO or DGEFA. B the right hand side vector. JOB :\n        = 0         to solve  A X = B ,\n        = nonzero   to solve  TRANS(A) X = B  where\n                    TRANS(A)  is the transpose. ON RETURN B the solution vector  X . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) integer, intent(in) :: Job Calls proc~~dgesl~~CallsGraph proc~dgesl dgesl proc~daxpy daxpy proc~dgesl->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgesl~~CalledByGraph proc~dgesl dgesl proc~dainvg dainvg proc~dainvg->proc~dgesl proc~dsolsy dsolsy proc~dsolsy->proc~dgesl proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dgesl.html"},{"title":"dintdy – odepack","text":"public subroutine dintdy(T, K, Yh, Nyh, Dky, Iflag) DESCRIPTION DINTDY computes interpolated values of the K-th derivative of the\n  dependent variable vector y, and stores it in DKY.  This routine\n  is called within the package with K = 0 and T = TOUT, but may\n  also be called by the user for any K up to the current order.\n  (See detailed instructions in the usage documentation.) The computed values in DKY are gotten by interpolation using the\n  Nordsieck history array YH.  This array corresponds uniquely to a\n  vector-valued polynomial of degree NQCUR or less, and DKY is set\n  to the K-th derivative of this polynomial at T.\n  The formula for DKY is: q\n   DKY(i)  =  sum  c(j,K) * (T - tn)**(j-K) * h**(-j) * YH(i,j+1)\n              j=K where  c(j,K) = j (j-1) …*(j-K+1), q = NQCUR, tn = TCUR, h = HCUR. The quantities  nq = NQCUR, l = nq+1, N = NEQ, tn, and h are\n  communicated by COMMON.  The above sum is done in reverse order.\n  IFLAG is returned negative if either K or T is out of bounds. Arguments Type Intent Optional Attributes Name real(kind=dp) :: T integer :: K real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(inout) :: Dky (*) integer, intent(out) :: Iflag Calls proc~~dintdy~~CallsGraph proc~dintdy dintdy proc~xerrwd xerrwd proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dintdy~~CalledByGraph proc~dintdy dintdy proc~drchek drchek proc~drchek->proc~dintdy proc~dlsodkr dlsodkr proc~dlsodkr->proc~dintdy proc~dlsodkr->proc~drchek proc~dlsodi dlsodi proc~dlsodi->proc~dintdy proc~dlsode dlsode proc~dlsode->proc~dintdy proc~dlsoda dlsoda proc~dlsoda->proc~dintdy proc~dlsodes dlsodes proc~dlsodes->proc~dintdy proc~dlsodar dlsodar proc~dlsodar->proc~dintdy proc~dlsodar->proc~drchek proc~dlsodis dlsodis proc~dlsodis->proc~dintdy proc~dlsodpk dlsodpk proc~dlsodpk->proc~dintdy proc~dlsoibt dlsoibt proc~dlsoibt->proc~dintdy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dintdy.html"},{"title":"diprep – odepack","text":"public subroutine diprep(Neq, Y, Rwork, Ia, Ja, Ipflag, f, jac) This routine serves as an interface between the driver and\nSubroutine DPREP.  It is called only if MITER is 1 or 2.\nTasks performed here are: call DPREP, reset the required WM segment length LENWK, move YH back to its final location (following WM in RWORK), reset pointers for YH, SAVF, EWT, and ACOR, and move EWT to its new position if ISTATE = 1. IPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREP error flag IPPER\nif there was trouble in Subroutine DPREP. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer, intent(inout) :: Ipflag real :: f integer :: jac Calls proc~~diprep~~CallsGraph proc~diprep diprep proc~dprep dprep proc~diprep->proc~dprep none~wrapup500 wrapup500 proc~dprep->none~wrapup500 proc~odrv odrv proc~dprep->proc~odrv proc~jgroup jgroup proc~dprep->proc~jgroup proc~cdrv cdrv proc~dprep->proc~cdrv none~wrapup400 wrapup400 proc~dprep->none~wrapup400 none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~adjlr adjlr proc~dprep->proc~adjlr iwk iwk none~wrapup600->iwk proc~cntnzu cntnzu none~wrapup600->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~diprep~~CalledByGraph proc~diprep diprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/diprep.html"},{"title":"diprepi – odepack","text":"public subroutine diprepi(Neq, Y, S, Rwork, Ia, Ja, Ic, Jc, Ipflag, res, jac, adda) This routine serves as an interface between the driver and\nSubroutine DPREPI.  Tasks performed here are: call DPREPI, reset the required WM segment length LENWK, move YH back to its final location (following WM in RWORK), reset pointers for YH, SAVR, EWT, and ACOR, and move EWT to its new position if ISTATE = 0 or 1. IPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREPI error flag IPPER\nif there was trouble in Subroutine DPREPI. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer :: Ic (*) integer :: Jc (*) integer, intent(inout) :: Ipflag real :: res integer :: jac real :: adda Calls proc~~diprepi~~CallsGraph proc~diprepi diprepi proc~dprepi dprepi proc~diprepi->proc~dprepi proc~jgroup jgroup proc~dprepi->proc~jgroup proc~odrv odrv proc~dprepi->proc~odrv proc~cdrv cdrv proc~dprepi->proc~cdrv proc~cntnzu cntnzu proc~dprepi->proc~cntnzu proc~adjlr adjlr proc~dprepi->proc~adjlr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~diprepi~~CalledByGraph proc~diprepi diprepi proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/diprepi.html"},{"title":"dlhin – odepack","text":"public subroutine dlhin(Neq, N, T0, Y0, Ydot, f, Tout, Uround, Ewt, Itol, Atol, Y, Temp, H0, Niter, Ier) Name dlhin(3f) - [M_odepack] compute step size H0 to be attempted on\n   the first step, when the user supplied value is absent Synopsis subroutine dlhin(Neq,N,T0,Y0,Ydot,f,Tout,Uround,Ewt,Itol,Atol,Y,Temp,H0,Niter,Ier)\n\n    integer                     :: Neq(*)\n    integer                     :: N\n    real(kind=dp),intent(in)    :: T0\n    real(kind=dp)               :: Y0(*)\n    real(kind=dp),intent(in)    :: Ydot(*)\n    external                    :: f\n    real(kind=dp),intent(in)    :: Tout\n    real(kind=dp),intent(in)    :: Uround\n    real(kind=dp)               :: Ewt(*)\n    integer,intent(in)          :: Itol\n    real(kind=dp),intent(in)    :: Atol(*)\n    real(kind=dp)               :: Y(*)\n    real(kind=dp)               :: Temp(*)\n    real(kind=dp),intent(inout) :: H0\n    integer, intent(out)        :: Niter\n    integer, intent(out)        :: Ier Description This routine computes the step size, H0, to be attempted on the\n first step, when the user has not supplied a value for this. First we check that TOUT - T0 differs significantly from zero.  Then\n an iteration is done to approximate the initial second derivative\n and this is used to define H from WRMS-norm(H**2 * yddot / 2) = 1.\n A bias factor of 1/2 is applied to the resulting h.\n The sign of H0 is inferred from the initial values of TOUT and T0. Communication with DLHIN is done with the following variables: Call DLHIN(NEQ,N,T0,Y0,YDOT,F,TOUT,UROUND,EWT,ITOL,ATOL,Y,TEMP &\n & H0,NITER,IER Subroutines called by DLHIN: F \n Function routines called by DLHIN: DVNORM INPUT OPTIONS NEQ NEQ array of solver, passed to F. N size of ODE system, input. T0 initial value of independent variable, input. Y0 vector of initial conditions, input. YDOT vector of initial first derivatives, input. F name of subroutine for right-hand side f(t,y), input. TOUT first output value of independent variable UROUND machine unit roundoff EWT, ITOL, ATOL error weights and tolerance parameters\n as described in the driver routine, input. Y, TEMP work arrays of length N. RETURNS H0 step size to be attempted, output. NITER number of iterations (and of f evaluations) to compute H0,\n output. IER the error flag, returned with the value\n   IER = 0  if no trouble occurred, or\n   IER = -1 if TOUT and t0 are considered too close to proceed. Arguments Type Intent Optional Attributes Name integer :: Neq (*) integer :: N real(kind=dp), intent(in) :: T0 real(kind=dp) :: Y0 (*) real(kind=dp), intent(in) :: Ydot (*) real :: f real(kind=dp), intent(in) :: Tout real(kind=dp), intent(in) :: Uround real(kind=dp) :: Ewt (*) integer, intent(in) :: Itol real(kind=dp), intent(in) :: Atol (*) real(kind=dp) :: Y (*) real(kind=dp) :: Temp (*) real(kind=dp), intent(inout) :: H0 integer, intent(out) :: Niter integer, intent(out) :: Ier Calls proc~~dlhin~~CallsGraph proc~dlhin dlhin proc~dvnorm dvnorm proc~dlhin->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dlhin~~CalledByGraph proc~dlhin dlhin proc~dlsodkr dlsodkr proc~dlsodkr->proc~dlhin Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlhin.html"},{"title":"dlsoda – odepack","text":"public subroutine dlsoda(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt) Synopsis DLSODA solves the initial value problem for stiff or nonstiff\n systems of first order ODEs of the form dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). with automatic method switching for stiff and nonstiff problems. This a variant version of the DLSODE package.\n It switches automatically between stiff and nonstiff methods.\n This means that the user does not have to determine whether the\n problem is stiff or not, and the solver will automatically choose the\n appropriate method.  It always starts with the nonstiff method. Summary of Usage Communication between the user and the DLSODA package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including alternative treatment of the Jacobian matrix,\n optional inputs and outputs, nonstandard options, and\n instructions for special situations.  See also the example\n problem (with program and output) following this summary. Section A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). Section B. Write a main program which calls Subroutine DLSODA once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODA .  On the first call to DLSODA , supply arguments as follows: F name of subroutine for right-hand side vector f.\n   This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a single or multi-value array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (array).\n   the estimated local error in y(i) will be controlled so as\n   to be less than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n        EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n   either the absolute error is less than ATOL (or ATOL(i)),\n   or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n   control.  Caution: actual (global) errors may exceed these\n   local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 + NEQ * MAX(16, NEQ + 9). See also Section E below. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least  20 + NEQ. LIW declared length of IWORK (in user’s dimension). JAC name of subroutine for Jacobian matrix.\n   Use a dummy name.  See also Section E below. JT Jacobian type indicator.  Set JT = 2.\n   See also Section E below.\n   Note that the main program must declare arrays Y, RWORK, IWORK,\n   and possibly ATOL. Section C. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE Status values are returned in ISTATE: values descriptions 2 if DLSODA was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong JT). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of JT or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means work space insufficient to finish (see messages). Section D. To continue the integration after a successful return, simply\n reset TOUT and call DLSODA again.  No other parameters need be reset. Section E. Note : If and when DLSODA regards the problem as stiff, and\n switches methods accordingly, it must make use of the NEQ by NEQ\n Jacobian matrix, J = df/dy.  For the sake of simplicity, the\n inputs to DLSODA recommended in Section B above cause DLSODA to\n treat J as a full matrix, and to approximate it internally by\n difference quotients.  Alternatively, J can be treated as a band\n matrix (with great potential reduction in the size of the RWORK\n array).  Also, in either the full or banded case, the user can supply\n J in closed form, with a routine whose name is passed as the JAC\n argument.  These alternatives are described in the paragraphs on\n RWORK, JAC, and JT in the full description of the call sequence below. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODA .  The problem is from chemical\n kinetics, and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n     dy3/dt = 3.e7*y2**2 on the interval from t = 0.0 to t = 4.e10, with initial conditions y1 = 1.0, y2 = y3 = 0.  The problem is stiff. The following coding solves this problem with DLSODA ,\n printing results at t = .4, 4., …, 4.e10.  It uses\n ITOL = 2, and ATOL much smaller for y2 than y1 or y3 because\n y2 has much smaller values.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsoda_ex use m_odepack implicit none external fex external jdum integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask integer :: itol , jt , liw , lrw , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 70 ) :: rwork neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 70 liw = 23 jt = 2 do iout = 1 , 12 call dlsoda ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , iopt ,& & rwork , lrw , iwork , liw , jdum , jt ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0. endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ), iwork ( 19 ), & & rwork ( 15 ) 99030 format ( / ' No. steps =' , i4 , '  No. f-s =' , i4 , '  No. J-s =' , & & i4 / ' Method last used =' , i2 , '   Last switch was at t =' ,& & d12 . 4 ) end program dlsoda_ex subroutine jdum () implicit none end subroutine jdum subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  4.0000e-01   y =  9.851712e-01  3.386380e-05  1.479493e-02\n   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02\n   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01\n   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01\n   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01\n   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01\n   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01\n   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01\n   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01\n   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01\n   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01\n   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00\n\n   No. steps = 361  No. f-s = 693  No. J-s =  64\n   Method last used = 2   Last switch was at t =  6.0092e-03 Full description of user interface to DLSODA . The user interface to DLSODA consists of the following parts. The call sequence to Subroutine DLSODA , which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODA package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of a subroutine in the DLSODA package,\n      which the user may replace with his/her own version, if desired.\n      this relates to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, JT, and those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODA to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows: F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODA , an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a single value, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ must be an array, with NEQ(1) set to the system size.\n (The DLSODA package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F and JAC.  Hence, if it is an multi-value array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F and/or JAC.  Subroutines F and/or JAC must include\n NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to\n F and JAC.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F and/or JAC.  (The DLSODA package accesses only\n Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n on output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n on an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial t, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter,\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter,\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form max-norm of ( E(i)/EWT(i) )   .le.   1, where EWT = (EWT(i)) is a vector of positive error weights.\n The values of RTOL and ATOL should all be non-negative.\n The following table gives the types (single/mult-value array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 single single RTOL*ABS(Y(i)) + ATOL 2 single array RTOL*ABS(Y(i)) + ATOL(i) 3 array single RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) Even when these parameters are a single value, it needs to be an array\n in the user’s calling program, or passed as a temporary array (ie. use\n “[NEQ]” on the call if NEQ is a scalar). If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting a\n user-supplied routine for the setting of EWT.\n See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value descriptions 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows: value descriptions 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, and any optional inputs except H0, MXORDN, and MXORDS. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value. descriptions 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the length of RWORK and/or IWORK was too small to proceed, but the integration was successful as far as T. This happens when DLSODA chooses to switch methods but LRW and/or LIW is too small for the new method. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK a real array (double precision) for work space, and (in the\n first 20 words) for conditional and optional inputs and\n optional outputs. As DLSODA switches automatically between stiff and nonstiff\n methods, the required length of RWORK can change during the\n problem.  Thus the RWORK array passed to DLSODA can either\n have a static (fixed) length large enough for both methods,\n or have a dynamic (changing) length altered by the calling\n program in response to output from DLSODA . Fixed Length Case If the RWORK length is to be fixed, it should be at least\n        MAX (LRN, LRS),\n   where LRN and LRS are the RWORK lengths required when the\n   current method is nonstiff or stiff, respectively.\n\n   The separate RWORK length requirements LRN and LRS are\n   as follows:\n   IF NEQ is constant and the maximum method orders have\n   their default values, then\n      LRN = 20 + 16*NEQ,\n      LRS = 22 + 9*NEQ + NEQ**2           if JT = 1 or 2,\n      LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ   if JT = 4 or 5.\n   Under any other conditions, LRN and LRS are given by:\n      LRN = 20 + NYH*(MXORDN+1) + 3*NEQ,\n      LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT,\n   where\n      NYH    = the initial value of NEQ,\n      MXORDN = 12, unless a smaller value is given as an\n               optional input,\n      MXORDS = 5, unless a smaller value is given as an\n               optional input,\n      LMAT   = length of matrix work space:\n      LMAT   = NEQ**2 + 2              if JT = 1 or 2,\n      LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. Dynamic Length Case If the length of RWORK is to be dynamic, then it should\n be at least LRN or LRS, as defined above, depending on the\n current method. Initially, it must be at least LRN (since DLSODA starts with the nonstiff method). On any return from DLSODA , the optional output MCUR indicates the\n current method.  If MCUR differs from the value it had on the previous\n return, or if there has only been one call to DLSODA and MCUR is now 2,\n then DLSODA has switched methods during the last call, and the length\n of RWORK should be reset (to LRN if MCUR = 1, or to LRS if MCUR = 2).\n (An increase in the RWORK length is required if DLSODA returned\n ISTATE = -7, but not otherwise.) After resetting the length, call DLSODA with ISTATE = 3\n to signal that change. LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer array for work space.\n As DLSODA switches automatically between stiff and nonstiff\n methods, the required length of IWORK can change during\n problem, between\n             LIS = 20 + NEQ   and   LIN = 20,\n respectively.  Thus the IWORK array passed to DLSODA can\n either have a fixed length of at least 20 + NEQ, or have a\n dynamic length of at least LIN or LIS, depending on the\n current method.  The comments on dynamic length under\n RWORK above apply here.  Initially, this length need\n only be at least LIN = 20 . The first few words of IWORK are used for conditional and\n optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs: IWORK(1) = ML\n   IWORK(2) = MU These are the lower and upper half-bandwidths, respectively, of the\n banded Jacobian, excluding the main diagonal.  The band is defined by\n the matrix locations (i,j) with i-ML .le. j .le. i+MU.  ML and MU must\n satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are required if JT is 4 or 5,\n and ignored otherwise.  ML and MU may in fact be the band parameters\n for a matrix to which df/dy is only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note: The base addresses of the work arrays must not be\n altered between calls to DLSODA for the same problem.\n The contents of the work arrays must not be altered\n between calls, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODA between calls, if\n desired (but not for use by F or JAC). JAC the name of the user-supplied routine to compute the\n Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine\n is optional, but if the problem is expected to be stiff much\n of the time, you are encouraged to supply JAC, for the sake\n of efficiency.  (Alternatively, set JT = 2 or 5 to have DLSODA compute df/dy internally by difference quotients.)\n If and when DLSODA uses df/dy, it treats this NEQ by NEQ\n matrix either as full (JT = 1 or 2), or as banded (JT =\n 4 or 5) with half-bandwidths ML and MU (discussed under\n IWORK above).  In either case, if JT = 1 or 4, the JAC\n routine must compute df/dy as a function of the scalar t\n and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the array\n PD is to be loaded with partial derivatives (elements of\n the Jacobian matrix) on output.  PD must be given a first\n dimension of NROWPD.  T and Y have the same meaning as in\n Subroutine F. In the full matrix case (JT = 1), ML and MU are\n ignored, and the Jacobian is to be loaded into PD in\n columnwise manner, with df(i)/dy(j) loaded into PD(i,j). In the band matrix case (JT = 4), the elements\n within the band are to be loaded into PD in columnwise\n manner, with diagonal lines of df/dy loaded into the rows\n of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).\n ML and MU are the half-bandwidth parameters (see IWORK).\n The locations in PD in the two triangular areas which\n correspond to nonexistent matrix elements can be ignored\n or loaded arbitrarily, as they are overwritten by DLSODA . JAC need not provide df/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to F with the same\n arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  Also, JAC may alter the Y array, if desired.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. JT Jacobian type indicator.  Used only for input.\n JT specifies how the Jacobian matrix df/dy will be\n treated, if and when DLSODA requires this matrix.\n JT has the following values and meanings: value description 1 means a user-supplied full (NEQ by NEQ) Jacobian. 2 means an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 4 means a user-supplied banded Jacobian. 5 means an internally generated banded Jacobian (using ML+MU+1 extra calls to F per df/dy evaluation). If JT = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n If JT = 2 or 5, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) IXPR IWORK(5) flag to generate extra printing at method switches. IXPR = 0 means no extra printing (the default). IXPR = 1 means print data on each switch. T, H, and NST will be printed on the same logical unit as used for error messages. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MXORDN IWORK(8) the maximum order to be allowed for the nonstiff (Adams) method.  the default value is 12. if MXORDN exceeds the default value, it will be reduced to the default value. MXORDN is held constant during the problem. MXORDS IWORK(9) the maximum order to be allowed for the stiff (BDF) method.  The default value is 5. If MXORDS exceeds the default value, it will be reduced to the default value. MXORDS is held constant during the problem. Optional Outputs. As optional additional output from DLSODA , the variables listed\n below are quantities related to the performance of DLSODA which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODA , and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) TSW RWORK(15) the value of t at the time of the last method switch, if any. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required, assuming that the length of RWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required, assuming that the length of IWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. MUSED IWORK(19) the method indicator for the last successful step: 1 means Adams (nonstiff), 2 means BDF (stiff). MCUR IWORK(20) the current method indicator: 1 means Adams (nonstiff), 2 means BDF (stiff). This is the method to be attempted on the next step.  Thus it differs from MUSED only if a method switch has just been made. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at T = TCUR. ACOR LACOR array of size NEQ used for the accumulated (from Common corrections on each step, scaled on output as noted) to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODA .  The base address LACOR is obtained by including in the user’s program the following 2 lines: COMMON /DLS001/ RLS(218), ILS(37) LACOR = ILS(22) Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODA .\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) set the logical unit number, LUN, for output of messages from DLSODA , if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) set a flag to control the printing of messages by DLSODA . MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCMA(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODA (see Part 3 below). RSAV must be a real array of length 240 or more, and ISAV must be an integer array of length 46 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCMA is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODA . CALL DINTDY(,,,,,) provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODA . The detailed instructions for using DINTDY are as follows: The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODA ).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODA directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Interrupting and Continuing If the solution of a given problem by DLSODA is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODA call prior to the\n interruption, the contents of the call sequence variables and state\n and later restore these values before the\n next DLSODA call for that problem.  To save and restore the current\n state, use Subroutine DSRCMA (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below is a description of a routine in the DLSODA package which\n relates to the measurement of errors, and can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) DEWSET The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: Subroutine DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODA call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the\n DMNORM routine, and also used by DLSODA in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). Pedigree: DLSODA is derived from the Livermore Solver for Ordinary\n Differential Equations package ODEPACK, and is\n based on the 12 November 2003 version in double precision. Authors: Alan C. Hindmarsh\n    Center for Applied Scientific Computing, L-561\n    Lawrence Livermore National Laboratory\n    Livermore, CA 94551 and Linda R. Petzold\n    Univ. of California at Santa Barbara\n    Dept. of Computer Science\n    Santa Barbara, CA 93106 References: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Linda R. Petzold, Automatic Selection of Methods for Solving\n     Stiff and Nonstiff Systems of Ordinary Differential Equations,\n     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Other routines in the DLSODA package. In addition to Subroutine DLSODA , the DLSODA package includes the\n following subroutines and function routines: DINTDY computes an interpolated value of the y vector at t = TOUT. DSTODA is the core integrator, which does one step of the\n  integration and the associated error control. DCFODE sets all method coefficients and test constants. DPRJA computes and preprocesses the Jacobian matrix J = df/dy\n  and the Newton iteration matrix P = I - h*l0*J. DSOLSY manages solution of linear system in chord iteration. DEWSET sets the error weight vector EWT before each step. DMNORM computes the weighted max-norm of a vector. DFNORM computes the norm of a full matrix consistent with the\n  weighted max-norm on vectors. DBNORM computes the norm of a band matrix consistent with the\n  weighted max-norm on vectors. DSRCMA is a user-callable routine to save and restore\n  the contents of the internal Common blocks. DGEFA and DGESL are routines from LINPACK for solving full\n  systems of linear algebraic equations. DGBFA and DGBSL are routines from LINPACK for solving banded\n  linear systems. DUMACH computes the unit roundoff in a machine-independent manner. XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n   error messages and warnings.  XERRWD is machine-dependent. Note : DMNORM , DFNORM , DBNORM , DUMACH , and IXSAV are\n function routines.  All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: jac integer :: Jt Calls proc~~dlsoda~~CallsGraph proc~dlsoda dlsoda proc~dewset dewset proc~dlsoda->proc~dewset proc~dmnorm dmnorm proc~dlsoda->proc~dmnorm proc~dstoda dstoda proc~dlsoda->proc~dstoda proc~dintdy dintdy proc~dlsoda->proc~dintdy proc~xerrwd xerrwd proc~dlsoda->proc~xerrwd proc~dumach dumach proc~dlsoda->proc~dumach proc~dstoda->proc~dmnorm proc~dcfode dcfode proc~dstoda->proc~dcfode proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsoda.html"},{"title":"dlsodar – odepack","text":"public subroutine dlsodar(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt, g, Ng, Jroot) Synopsis DLSODAR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs of the form dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). with Automatic method switching for stiff and nonstiff problems,\n and with Root-finding. At the same time, it locates the roots of any of a set of functions g(i) = g(i,t,y(1),...,y(NEQ))  (i = 1,...,ng). This a variant version of the DLSODE package.  It differs from it\n in two ways: (a) It switches automatically between stiff and nonstiff methods.\n This means that the user does not have to determine whether the\n problem is stiff or not, and the solver will automatically choose the\n appropriate method.  It always starts with the nonstiff method. (b) It finds the root of at least one of a set of constraint\n functions g(i) of the independent and dependent variables.\n It finds only those roots for which some g(i), as a function\n of t, changes sign in the interval of integration.\n It then returns the solution at the root, if that occurs\n sooner than the specified stop condition, and otherwise returns\n the solution according the specified stop condition. Summary of Usage. Communication between the user and the DLSODAR package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including alternative treatment of the Jacobian matrix,\n optional inputs and outputs, nonstandard options, and\n instructions for special situations.  See also the example\n problem (with program and output) following this summary. Step A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). Step B. Provide a subroutine of the form: SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) which supplies the vector function g by loading GOUT(i) with\n g(i), the i-th constraint function whose root is sought. Step C. Write a main program which calls Subroutine DLSODAR once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODAR. On the first call to DLSODAR, supply arguments as follows: F name of subroutine for right-hand side vector f.\n This name must be declared External in calling program.\n NEQ number of first order ODEs.\n Y array of initial values, of length NEQ.\n T the initial value of the independent variable.\n TOUT first point where output is desired (.ne. T).\n ITOL 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL relative tolerance parameter (scalar).\n ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be less than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control. Caution : actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 + NEQ * MAX(16, NEQ + 9) + 3*NG. See also Paragraph F below. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least  20 + NEQ. LIW declared length of IWORK (in user’s dimension). JAC name of subroutine for Jacobian matrix.\n Use a dummy name to a noop function.  See also Paragraph F below. JT Jacobian type indicator.  Set JT = 2.\n See also Paragraph F below. G name of subroutine for constraint functions, whose\n roots are desired during the integration.\n This name must be declared External in calling program. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG for output of root information.\n See next paragraph.\n Note that the main program must declare arrays Y, RWORK, IWORK,\n JROOT, and possibly ATOL. Step D. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable.  This is\n TOUT if ISTATE = 2, or the root location if ISTATE = 3,\n or the farthest point reached if DLSODAR was unsuccessful.\n ISTATE = 2 or 3  if DLSODAR was successful, negative otherwise. ISTATE Description 2 means no root was found, and TOUT was reached as desired. 3 means a root was found prior to reaching TOUT. -1 means excess work done on this call (perhaps wrong JT). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of JT or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means work space insufficient to finish (see messages). JROOT array showing roots found if ISTATE = 3 on return.\n JROOT(i) = 1 if g(i) has a root at t, or 0 otherwise. Step E. To continue the integration after a successful return, proceed as follows: (a)  If ISTATE = 2 on return, reset TOUT and call DLSODAR again.\n (b)  If ISTATE = 3 on return, reset ISTATE to 2, call DLSODAR again. In either case, no other parameters need be reset. Step F. Notes: If and when DLSODAR regards the problem as stiff, and\n switches methods accordingly, it must make use of the NEQ by NEQ\n Jacobian matrix, J = df/dy.  For the sake of simplicity, the\n inputs to DLSODAR recommended in Paragraph C above cause DLSODAR to\n treat J as a full matrix, and to approximate it internally by\n difference quotients. Alternatively, J can be treated as a band\n matrix (with great potential reduction in the size of the RWORK\n array). Also, in either the full or banded case, the user can supply\n J in closed form, with a routine whose name is passed as the JAC\n argument.  These alternatives are described in the paragraphs on\n RWORK, JAC, and JT in the full description of the call sequence below. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODAR.  The problem is from chemical\n kinetics, and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n     dy3/dt = 3.e7*y2**2 on the interval from t = 0.0 to t = 4.e10, with initial conditions\n y1 = 1.0, y2 = y3 = 0.  The problem is stiff. In addition, we want to find the values of t, y1, y2, and y3 at which y1 reaches the value 1.e-4, and y3 reaches the value 1.e-2. The following coding solves this problem with DLSODAR,\n printing results at t = .4, 4., …, 4.e10, and at the computed\n roots.  It uses ITOL = 2 and ATOL much smaller for y2 than y1 or y3\n because y2 has much smaller values. At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsodar_ex use m_odepack implicit none external fex external gex external jdum integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask , itol , jt , liw , lrw , neq , ng integer , dimension ( 23 ) :: iwork integer , dimension ( 2 ) :: jroot real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 76 ) :: rwork neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 76 liw = 23 jt = 2 ng = 2 do iout = 1 , 12 do call dlsodar ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , & & iopt , rwork , lrw , iwork , liw , jdum , jt , gex , ng , jroot ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 elseif ( istate == 2 ) then tout = tout * 1 0. exit else write ( 6 , 99030 ) jroot ( 1 ), jroot ( 2 ) 99030 format ( 5 x , ' The above line is a root,  JROOT =' , 2 I5 ) istate = 2 endif enddo enddo write ( 6 , 99040 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ), iwork ( 10 ), & & iwork ( 19 ), rwork ( 15 ) 99040 format ( / ' No. steps =' , i4 , '  No. f-s =' , i4 , '  No. J-s =' , i4 , & & '  No. g-s =' , i4 / ' Method last used =' , i2 , & & '   Last switch was at t =' , d12 . 4 ) end program dlsodar_ex subroutine jdum () implicit none end subroutine jdum subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex subroutine gex ( Neq , T , Y , Ng , Gout ) implicit none integer :: Neq integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y integer :: Ng real ( kind = dp ), intent ( out ), dimension ( 2 ) :: Gout Gout ( 1 ) = Y ( 1 ) - 1.D-4 Gout ( 2 ) = Y ( 3 ) - 1.D-2 end subroutine gex The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  2.6400e-01   y =  9.899653e-01  3.470563e-05  1.000000e-02\n        The above line is a root,  JROOT =    0    1\n   At t =  4.0000e-01   Y =  9.851712e-01  3.386380e-05  1.479493e-02\n   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02\n   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01\n   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01\n   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01\n   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01\n   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01\n   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01\n   At t =  2.0745e+07   Y =  1.000000e-04  4.000395e-10  9.999000e-01\n        The above line is a root,  JROOT =    1    0\n   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01\n   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01\n   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01\n   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00\n\n   No. steps = 361  No. f-s = 693  No. J-s =  64  No. g-s = 390\n   Method last used = 2   Last switch was at t =  6.0092e-03 Full Description of User Interface to DLSODAR. The user interface to DLSODAR consists of the following parts. The call sequence to Subroutine DLSODAR, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODAR package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of a subroutine in the DLSODAR package,\n      which the user may replace with his/her own version, if desired.\n      this relates to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC,\n JT, G, and NG. Used only for output is JROOT, Those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODAR to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. Arguments The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODAR, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODAR package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F, JAC, and G.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F, JAC, and G.  Each such subroutine must include\n NEQ in a Dimension statement in that case. Y = a real array for the vector of dependent variables, of\n NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F,\n JAC, and G.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F, JAC, and G.  (The DLSODAR package accesses only\n Y(1),…,Y(NEQ).) T = the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n If a root was found, T is the computed location of the\n root reached first, on output. On an error return, T is the farthest point reached. TOUT = the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form\n      max-norm of ( E(i)/EWT(i) )   .le.   1,\n where EWT = (EWT(i)) is a vector of positive error weights.\n The values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting a\n user-supplied routine for the setting of EWT.\n See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT (within roundoff), it will return T = TCRIT (exactly) to indicate this (unless ITASK = 4 and TOUT comes before TCRIT, in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, and any optional inputs except H0, MXORDN, and MXORDS. (See IWORK description for ML and MU.) In addition, immediately following a return with ISTATE = 3 (root found), NG and G may be changed. (But changing NG from 0 to .gt. 0 is not allowed.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = t and ISTATE = 1 on input. 2 means the integration was performed successfully, and no roots were found. 3 means the integration was successful, and one or more roots were found before satisfying the stop condition specified by ITASK.  See JROOT. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the length of RWORK and/or IWORK was too small to proceed, but the integration was successful as far as T. This happens when DLSODAR chooses to switch methods but LRW and/or LIW is too small for the new method. Note:  Since the normal output value of ISTATE is 2,\n   it does not need to be reset for normal continuation.\n   Also, since a negative input value of ISTATE will be\n   regarded as illegal, a negative output value requires the\n   user to change it, and possibly other inputs, before\n   calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a real array (double precision) for work space, and (in the\n first 20 words) for conditional and optional inputs and\n optional outputs. As DLSODAR switches automatically between stiff and nonstiff\n methods, the required length of RWORK can change during the\n problem.  Thus the RWORK array passed to DLSODAR can either\n have a static (fixed) length large enough for both methods,\n or have a dynamic (changing) length altered by the calling\n program in response to output from DLSODAR. Fixed Length Case If the RWORK length is to be fixed, it should be at least\n   max (LRN, LRS),\n   where LRN and LRS are the RWORK lengths required when the\n   current method is nonstiff or stiff, respectively. The separate RWORK length requirements LRN and LRS are\n   as follows: If NEQ is constant and the maximum method orders have\n   their default values, then LRN = 20 + 16*NEQ + 3*NG,\n             LRS = 22 + 9*NEQ + NEQ**2 + 3*NG           (JT = 1 or 2),\n             LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ + 3*NG   (JT = 4 or 5).\n          Under any other conditions, LRN and LRS are given by:\n             LRN = 20 + NYH*(MXORDN+1) + 3*NEQ + 3*NG,\n             LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT + 3*NG,\n          where\n             NYH    = the initial value of NEQ,\n             MXORDN = 12, unless a smaller value is given as an\n                      optional input,\n             MXORDS = 5, unless a smaller value is given as an\n                      optional input,\n             LMAT   = length of matrix work space:\n             LMAT   = NEQ**2 + 2              if JT = 1 or 2,\n             LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. Dynamic Length Case If the length of RWORK is to be dynamic, then it should\n be at least LRN or LRS, as defined above, depending on the\n current method.  Initially, it must be at least LRN (since\n DLSODAR starts with the nonstiff method).  On any return\n from DLSODAR, the optional output MCUR indicates the current\n method.  If MCUR differs from the value it had on the\n previous return, or if there has only been one call to\n DLSODAR and MCUR is now 2, then DLSODAR has switched\n methods during the last call, and the length of RWORK\n should be reset (to LRN if MCUR = 1, or to LRS if\n MCUR = 2).  (An increase in the RWORK length is required\n if DLSODAR returned ISTATE = -7, but not otherwise.)\n After resetting the length, call DLSODAR with ISTATE = 3\n to signal that change. LRW the length of the array RWORK, as declared by the user.\n      (This will be checked by the solver.) IWORK an integer array for work space.\n As DLSODAR switches automatically between stiff and nonstiff\n methods, the required length of IWORK can change during\n problem, between\n             LIS = 20 + NEQ   and   LIN = 20,\n respectively.  Thus the IWORK array passed to DLSODAR can\n either have a fixed length of at least 20 + NEQ, or have a\n dynamic length of at least LIN or LIS, depending on the\n current method.  The comments on dynamic length under\n RWORK above apply here.  Initially, this length need\n only be at least LIN = 20. The first few words of IWORK are used for conditional and\n optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs: IWORK(1) = ML\n            IWORK(2) = MU These are the lower and upper half-bandwidths, respectively, of the\n banded Jacobian, excluding the main diagonal.  The band is defined by\n the matrix locations (i,j) with i-ML .le. j .le. i+MU.  ML and MU must\n satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are required if JT is 4 or 5,\n and ignored otherwise.  ML and MU may in fact be the band parameters\n for a matrix to which df/dy is only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note : The base addresses of the work arrays must not be\n altered between calls to DLSODAR for the same problem.\n The contents of the work arrays must not be altered\n between calls, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODAR between calls, if\n desired (but not for use by F, JAC, or G). JAC the name of the user-supplied routine to compute the\n Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine\n is optional, but if the problem is expected to be stiff much\n of the time, you are encouraged to supply JAC, for the sake\n of efficiency.  (Alternatively, set JT = 2 or 5 to have\n DLSODAR compute df/dy internally by difference quotients.)\n If and when DLSODAR uses df/dy, it treats this NEQ by NEQ\n matrix either as full (JT = 1 or 2), or as banded (JT =\n 4 or 5) with half-bandwidths ML and MU (discussed under\n IWORK above).  In either case, if JT = 1 or 4, the JAC\n routine must compute df/dy as a function of the scalar t\n and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the array\n PD is to be loaded with partial derivatives (elements of\n the Jacobian matrix) on output.  PD must be given a first\n dimension of NROWPD.  T and Y have the same meaning as in\n Subroutine F. In the full matrix case (JT = 1), ML and MU are\n ignored, and the Jacobian is to be loaded into PD in\n columnwise manner, with df(i)/dy(j) loaded into pd(i,j). In the band matrix case (JT = 4), the elements\n within the band are to be loaded into PD in columnwise\n manner, with diagonal lines of df/dy loaded into the rows\n of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).\n ML and MU are the half-bandwidth parameters (see IWORK).\n The locations in PD in the two triangular areas which\n correspond to nonexistent matrix elements can be ignored\n or loaded arbitrarily, as they are overwritten by DLSODAR. JAC need not provide df/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to F with the same\n arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  Also, JAC may alter the Y array, if desired.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. JT Jacobian type indicator.  Used only for input. JT specifies how the Jacobian matrix df/dy will be\n treated, if and when DLSODAR requires this matrix.\n JT has the following values and meanings: value description 1 means a user-supplied full (NEQ by NEQ) Jacobian. 2 means an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 4 means a user-supplied banded Jacobian. 5 means an internally generated banded Jacobian (using ML+MU+1 extra calls to F per df/dy evaluation). If JT = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n If JT = 2 or 5, a dummy argument can be used. G the name of subroutine for constraint functions, whose\n roots are desired during the integration.  It is to have\n the form SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) where NEQ, T, Y, and NG are input, and the array GOUT\n is output.  NEQ, T, and Y have the same meaning as in\n the F routine, and GOUT is an array of length NG.\n For i = 1,…,NG, this routine is to load into GOUT(i)\n the value at (T,Y) of the i-th constraint function g(i).\n DLSODAR will find roots of the g(i) of odd multiplicity\n (i.e. sign changes) as they occur during the integration.\n G must be declared External in the calling program. Caution:  Because of numerical errors in the functions\n g(i) due to roundoff and integration error, DLSODAR may\n return false roots, or return the same root at two or more\n nearly equal values of t.  If such false roots are\n suspected, the user should consider smaller error tolerances\n and/or higher precision in the evaluation of the g(i). If a root of some g(i) defines the end of the problem,\n the input to DLSODAR should nevertheless allow integration\n to a point slightly past that root, so that DLSODAR can\n locate the root by interpolation. Subroutine G may access user-defined quantities in\n NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in G) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG.  Used only for output.\n On a return with ISTATE = 3 (one or more roots found),\n JROOT(i) = 1 if g(i) has a root at T, or JROOT(i) = 0 if not. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) IXPR IWORK(5) flag to generate extra printing at method switches. IXPR = 0 means no extra printing (the default). IXPR = 1 means print data on each switch. T, H, and NST will be printed on the same logical unit as used for error messages. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MXORDN IWORK(8) the maximum order to be allowed for the nonstiff (Adams) method.  The default value is 12. If MXORDN exceeds the default value, it will be reduced to the default value. MXORDN is held constant during the problem. MXORDS IWORK(9) the maximum order to be allowed for the stiff (BDF) method.  The default value is 5. If MXORDS exceeds the default value, it will be reduced to the default value. MXORDS is held constant during the problem. Optional Outputs. As optional additional output from DLSODAR, the variables listed\n below are quantities related to the performance of DLSODAR\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown. Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODAR, and on any return with\n ISTATE = -1, -2, -4, -5, or -6. On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW. On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) TSW RWORK(15) the value of t at the time of the last method switch, if any. NGE IWORK(10) the number of g evaluations for the problem so far. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required, assuming that the length of RWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required, assuming that the length of IWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. MUSED IWORK(19) the method indicator for the last successful step: 1 means Adams (nonstiff), 2 means BDF (stiff). MCUR IWORK(20) the current method indicator: 1 means Adams (nonstiff), 2 means BDF (stiff). This is the method to be attempted on the next step.  Thus it differs from MUSED only if a method switch has just been made. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 + 3*NG the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LACOR array of size NEQ used for the accumulated (from Common corrections on each step, scaled on output as noted) to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODAR.  The base address LACOR is obtained by including in the user’s program the following 2 lines: COMMON /DLS001/ RLS(218), ILS(37) LACOR = ILS(22) Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODAR.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODAR, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODAR. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCAR(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODAR (see Part 3 below). RSAV must be a real array of length 245 or more, and ISAV must be an integer array of length 55 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCAR is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODAR. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODAR. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = 21 + 3 * NG CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODAR).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(t), is already provided\n by DLSODAR directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. LYH 21 + 3*NG = base address in RWORK of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODAR is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODAR call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSODAR call for that problem.  To save and restore,\n use Subroutine DSRCAR (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below is a description of a routine in the DLSODAR package which\n relates to the measurement of errors, and can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODAR call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the\n DMNORM routine, and also used by DLSODAR in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). Pedigree: DLSODAR is derived from the Livermore Solver for Ordinary\n Differential Equations package ODEPACK, and is in double precision. Authors Alan C . Hindmarsh , Center for Applied Scientific Computing , L - 561 Lawrence Livermore National Laboratory Livermore , CA 94551 and\n                Linda R. Petzold\n                Univ. of California at Santa Barbara\n                Dept. of Computer Science\n                Santa Barbara, CA 93106 References Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Linda R. Petzold, Automatic Selection of Methods for Solving\n     Stiff and Nonstiff Systems of Ordinary Differential Equations,\n     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Kathie L. Hiebert and Lawrence F. Shampine, Implicitly Defined\n     Output Points for Solutions of ODEs, Sandia Report SAND80-0180,\n     February 1980. Other routines in the DLSODAR package. In addition to Subroutine DLSODAR, the DLSODAR package includes the\n following subroutines and function routines: DRCHEK does preliminary checking for roots, and serves as an\n  interface between Subroutine DLSODAR and Subroutine DROOTS. DROOTS finds the leftmost root of a set of functions. DINTDY computes an interpolated value of the y vector at t = TOUT. DSTODA is the core integrator, which does one step of the\n  integration and the associated error control. DCFODE sets all method coefficients and test constants. DPRJA computes and preprocesses the Jacobian matrix J = df/dy\n  and the Newton iteration matrix P = I - h*l0*J. DSOLSY manages solution of linear system in chord iteration. DEWSET sets the error weight vector EWT before each step. DMNORM computes the weighted max-norm of a vector. DFNORM computes the norm of a full matrix consistent with the\n  weighted max-norm on vectors. DBNORM computes the norm of a band matrix consistent with the\n  weighted max-norm on vectors. DSRCAR is a user-callable routine to save and restore\n  the contents of the internal Common blocks. DGEFA and DGESL are routines from LINPACK for solving full\n  systems of linear algebraic equations. DGBFA and DGBSL are routines from LINPACK for solving banded\n  linear systems.\n  DCOPY is one of the basic linear algebra modules (BLAS). DUMACH computes the unit roundoff in a machine-independent manner. XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n  error messages and warnings.  XERRWD is machine-dependent. Note:  DMNORM, DFNORM, DBNORM, DUMACH, and IXSAV are\n function routines.  All the others are subroutines. ----------------------------------------------------------------------- Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Jt real :: g integer :: Ng integer, dimension(Ng) :: Jroot Calls proc~~dlsodar~~CallsGraph proc~dlsodar dlsodar proc~dewset dewset proc~dlsodar->proc~dewset proc~drchek drchek proc~dlsodar->proc~drchek proc~dmnorm dmnorm proc~dlsodar->proc~dmnorm proc~dstoda dstoda proc~dlsodar->proc~dstoda proc~xerrwd xerrwd proc~dlsodar->proc~xerrwd proc~dcopy dcopy proc~dlsodar->proc~dcopy proc~dumach dumach proc~dlsodar->proc~dumach proc~dintdy dintdy proc~dlsodar->proc~dintdy proc~drchek->proc~dintdy proc~dstoda->proc~dmnorm proc~dcfode dcfode proc~dstoda->proc~dcfode proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodar.html"},{"title":"dlsode – odepack","text":"public subroutine dlsode(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) Synopsis DLSODE solves the initial-value problem for stiff or\n  nonstiff systems of first-order ODE’s, dy/dt = f(t,y),   or, in component form,\n   dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(N)),  i=1,...,N. NOTE : The “Usage” and “Arguments” sections treat only a subset of\n  available options, in condensed fashion.  The options\n  covered and the information supplied will support most\n  standard uses of DLSODE. For more sophisticated uses, full details on all options are\n  given in the concluding section, headed “Long Description.”\n  A synopsis of the DLSODE Long Description is provided at the\n  beginning of that section; general topics covered are: Elements of the call sequence; optional input and output Optional supplemental routines in the DLSODE package internal COMMON block Usage Communication between the user and the DLSODE package, for normal\n  situations, is summarized here.  This summary describes a subset\n  of the available options.  See “Long Description” for complete\n  details, including optional communication, nonstandard options,\n  and instructions for special situations. A sample program is given in the “Examples” section. Refer to the argument descriptions for the definitions of the\n  quantities that appear in the following sample declarations. For MF = 10, PARAMETER ( LRW = 20 + 16 * NEQ , LIW = 20 ) For MF = 21 or 22, PARAMETER ( LRW = 22 + 9 * NEQ + NEQ ** 2 , LIW = 20 + NEQ ) For MF = 24 or 25, PARAMETER ( LRW = 22 + 10 * NEQ + ( 2 * ML + MU ) * NEQ , & LIW = 20 + NEQ ) EXTERNAL F , JAC INTEGER NEQ , ITOL , ITASK , ISTATE , IOPT , LRW , IWORK ( LIW ), & LIW , MF DOUBLE PRECISION Y ( NEQ ), T , TOUT , RTOL , ATOL ( ntol ), RWORK ( LRW ) CALL DLSODE ( F , NEQ , Y , T , TOUT , ITOL , RTOL , ATOL , ITASK , & ISTATE , IOPT , RWORK , LRW , IWORK , LIW , JAC , MF ) Arguments F (external) ; Name of subroutine for right-hand-side vector f.\n This name must be declared EXTERNAL in calling\n program.  The form of F must be: SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) The inputs are NEQ, T, Y.  F is to set YDOT(i) = f(i,T,Y(1),Y(2),...,Y(NEQ)), i = 1, ..., NEQ . NEQ (intent IN) Number of first-order ODE’s. Y (intent INOUT) Array of values of the y(t) vector, of length NEQ. Input:  For the first call, Y should contain the\n         values of y(t) at t = T. (Y is an input\n         variable only if ISTATE = 1.) Output: On return, Y will contain the values at the\n         new t-value. T (intent INOUT) Value of the independent variable.  On return it\n will be the current value of t (normally TOUT). TOUT  (intent IN) Next point where output is desired (.NE. T). ITOL  (intent IN) 1 or 2 according as ATOL (below) is a scalar or\n an array. RTOL  (intent IN) Relative tolerance parameter (scalar). ATOL  (intent IN) Absolute tolerance parameter (scalar or array). If ITOL = 1, ATOL need not be dimensioned.\n    If ITOL = 2, ATOL must be dimensioned at least NEQ. The estimated local error in Y(i) will be controlled\n so as to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n    EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each\n component, either the absolute error is less than\n ATOL (or ATOL(i)), or the relative error is less\n than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative\n error control.  Caution:  Actual (global) errors may\n exceed these local tolerances, so choose them\n conservatively. ITASK (intent IN) Flag indicating the task DLSODE is to perform.\n Use ITASK = 1 for normal computation of output\n values of y at t = TOUT. ISTATE (intent INOUT) Index used for input and output to specify the state\n of the calculation. Input: value description 1 This is the first call for a problem. 2 This is a subsequent call. Output: value description 1 Nothing was done, because TOUT was equal to T. 2 DLSODE was successful (otherwise, negative). Note that ISTATE need not be modified after a successful return. -1 Excess work done on this call (perhaps wrong MF). -2 Excess accuracy requested (tolerances too small). -3 Illegal input detected (see printed message). -4 Repeated error test failures (check all inputs). -5 Repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of MF or tolerances). -6 Error weight became zero during problem (solution component i vanished, and ATOL or ATOL(i) = 0.). IOPT (intent IN) Flag indicating whether optional inputs are used: value description 0 No. 1 Yes.  (See “Optional inputs” under “Long Description,” Part 1.) RWORK (WORK) Real work array of length at least: 20 + 16*NEQ                    for MF = 10,\n       22 +  9*NEQ + NEQ**2           for MF = 21 or 22,\n       22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. LRW (intent IN) Declared length of RWORK (in user’s DIMENSION\n statement). IWORK (WORK) Integer work array of length at least: 20        for MF = 10,\n       20 + NEQ  for MF = 21, 22, 24, or 25. If MF = 24 or 25, input in IWORK(1),IWORK(2) the\n lower and upper Jacobian half-bandwidths ML,MU. On return, IWORK contains information that may be\n of interest to the user: Name Location Meaning NST IWORK(11) Number of steps taken for the problem so far. NFE IWORK(12) Number of f evaluations for the problem so far. NJE IWORK(13) Number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) Method order last used (successfully). LENRW IWORK(17) Length of RWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) Length of IWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. LIW (intent IN) Declared length of IWORK (in user’s DIMENSION\n statement). JAC (external) Name of subroutine for Jacobian matrix (MF =\n 21 or 24).  If used, this name must be declared\n EXTERNAL in calling program.  If not used, pass a\n dummy name.  The form of JAC must be: SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) INTEGER NEQ , ML , MU , NROWPD DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) See item c, under “Description” below for more\n information about JAC. MF (intent IN) Method flag.  Standard values are: value definition 10 Nonstiff (Adams) method, no Jacobian used. 21 Stiff (BDF) method, user-supplied full Jacobian. 22 Stiff method, internally generated full Jacobian. 24 Stiff method, user-supplied banded Jacobian. 25 Stiff method, internally generated banded Jacobian. Long Description DLSODE solves the initial value problem for stiff or nonstiff\n   systems of first-order ODE’s, dy/dt = f(t,y) , or, in component form, dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ))\n                                                  (i = 1, ..., NEQ) . DLSODE is a package based on the GEAR and GEARB packages, and on\n   the October 23, 1978, version of the tentative ODEPACK user\n   interface standard, with minor modifications. The steps in solving such a problem are as follows. (a) First write a subroutine of the form SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with\n   f(i). (b) Next determine (or guess) whether or not the problem is stiff.\n   Stiffness occurs when the Jacobian matrix df/dy has an\n   eigenvalue whose real part is negative and large in magnitude\n   compared to the reciprocal of the t span of interest.  If the\n   problem is nonstiff, use method flag MF = 10.  If it is stiff,\n   there are four standard choices for MF, and DLSODE requires the\n   Jacobian matrix in some form.  This matrix is regarded either\n   as full (MF = 21 or 22), or banded (MF = 24 or 25).  In the\n   banded case, DLSODE requires two half-bandwidth parameters ML\n   and MU. These are, respectively, the widths of the lower and\n   upper parts of the band, excluding the main diagonal.  Thus the\n   band consists of the locations (i,j) with i - ML <= j <= i + MU , and the full bandwidth is ML + MU + 1 . (c) If the problem is stiff, you are encouraged to supply the\n   Jacobian directly (MF = 21 or 24), but if this is not feasible,\n   DLSODE will compute it internally by difference quotients (MF =\n   22 or 25).  If you are supplying the Jacobian, write a\n   subroutine of the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) INTEGER NEQ , ML , MU , NRWOPD DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) which provides df/dy by loading PD as follows:\n     - For a full Jacobian (MF = 21), load PD(i,j) with df(i)/dy(j),\n       the partial derivative of f(i) with respect to y(j).  (Ignore\n       the ML and MU arguments in this case.)\n     - For a banded Jacobian (MF = 24), load PD(i-j+MU+1,j) with\n          df(i)/dy(j); i.e., load the diagonal lines of df/dy into the\n       rows of PD from the top down.\n     - In either case, only nonzero elements need be loaded. (d) Write a main program that calls subroutine DLSODE once for each\n   point at which answers are desired.  This should also provide\n   for possible use of logical unit 6 for output of error messages\n   by DLSODE. Before the first call to DLSODE, set ISTATE = 1, set Y and T to\n   the initial values, and set TOUT to the first output point.  To\n   continue the integration after a successful return, simply\n   reset TOUT and call DLSODE again.  No other parameters need be\n   reset. Examples The following is a simple example problem, with the coding needed\n   for its solution by DLSODE. The problem is from chemical kinetics,\n   and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.E4*y2*y3\n        dy2/dt = .04*y1 - 1.E4*y2*y3 - 3.E7*y2**2\n        dy3/dt = 3.E7*y2**2 on the interval from t = 0.0 to t = 4.E10, with initial conditions\n   y1 = 1.0, y2 = y3 = 0. The problem is stiff. The following coding solves this problem with DLSODE, using\n   MF = 21 and printing results at t = .4, 4., …, 4.E10.  It uses\n   ITOL = 2 and ATOL much smaller for y2 than for y1 or y3 because y2\n   has much smaller values.  At the end of the run, statistical\n   quantities of interest are printed. program dlsode_ex use m_odepack implicit none external fex external jex integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 58 ) :: rwork neq = 3 y ( 1 ) = 1.D0 y ( 2 ) = 0.D0 y ( 3 ) = 0.D0 t = 0.D0 tout = . 4 D0 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 58 liw = 23 mf = 21 do iout = 1 , 12 call dlsode ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , iopt , & & rwork , lrw , iwork , liw , jex , mf ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0.D0 endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99030 format ( / ' No. steps =' , i4 , ',  No. f-s =' , i4 , ',  No. J-s =' , i4 ) end program dlsode_ex subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 D0 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex subroutine jex ( Neq , T , Y , Ml , Mu , Pd , Nrpd ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y integer :: Ml integer :: Mu real ( kind = dp ), intent ( inout ), dimension ( Nrpd , 3 ) :: Pd integer , intent ( in ) :: Nrpd Pd ( 1 , 1 ) = - . 04 D0 Pd ( 1 , 2 ) = 1.D4 * Y ( 3 ) Pd ( 1 , 3 ) = 1.D4 * Y ( 2 ) Pd ( 2 , 1 ) = . 04 D0 Pd ( 2 , 3 ) = - Pd ( 1 , 3 ) Pd ( 3 , 2 ) = 6.D7 * Y ( 2 ) Pd ( 2 , 2 ) = - Pd ( 1 , 2 ) - Pd ( 3 , 2 ) end subroutine jex The output from this program (on a Cray-1 in single precision)\n   is as follows. At t =  4.0000e-01   y =  9.851726e-01  3.386406e-05  1.479357e-02\n     At t =  4.0000e+00   y =  9.055142e-01  2.240418e-05  9.446344e-02\n     At t =  4.0000e+01   y =  7.158050e-01  9.184616e-06  2.841858e-01\n     At t =  4.0000e+02   y =  4.504846e-01  3.222434e-06  5.495122e-01\n     At t =  4.0000e+03   y =  1.831701e-01  8.940379e-07  8.168290e-01\n     At t =  4.0000e+04   y =  3.897016e-02  1.621193e-07  9.610297e-01\n     At t =  4.0000e+05   y =  4.935213e-03  1.983756e-08  9.950648e-01\n     At t =  4.0000e+06   y =  5.159269e-04  2.064759e-09  9.994841e-01\n     At t =  4.0000e+07   y =  5.306413e-05  2.122677e-10  9.999469e-01\n     At t =  4.0000e+08   y =  5.494530e-06  2.197825e-11  9.999945e-01\n     At t =  4.0000e+09   y =  5.129458e-07  2.051784e-12  9.999995e-01\n     At t =  4.0000e+10   y = -7.170603e-08 -2.868241e-13  1.000000e+00\n\n     No. steps = 330,  No. f-s = 405,  No. J-s = 69 Accuracy: The accuracy of the solution depends on the choice of tolerances\n   RTOL and ATOL.  Actual (global) errors may exceed these local\n   tolerances, so choose them conservatively. Cautions: The work arrays should not be altered between calls to DLSODE for\n   the same problem, except possibly for the conditional and optional\n   inputs. Portability: Since NEQ is dimensioned inside DLSODE, some compilers may object\n   to a call to DLSODE with NEQ a scalar variable.  In this event,\n   use DIMENSION NEQ(1).  Similar remarks apply to RTOL and ATOL. Note to Cray users:\n   For maximum efficiency, use the CFT77 compiler.  Appropriate\n   compiler optimization directives have been inserted for CFT77. Reference: Alan C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE\n   Solvers,” in Scientific Computing, R. S. Stepleman, et al., Eds.\n   (North-Holland, Amsterdam, 1983), pp. 55-64. Long Description: The following complete description of the user interface to\n   DLSODE consists of four parts: The call sequence to subroutine DLSODE, which is a driver\n       routine for the solver.  This includes descriptions of both\n       the call sequence arguments and user-supplied routines.\n       Following these descriptions is a description of optional\n       inputs available through the call sequence, and then a\n       description of optional outputs in the work arrays. Descriptions of other routines in the DLSODE package that may\n       be (optionally) called by the user.  These provide the ability\n       to alter error message handling, save and restore the internal\n       COMMON, and obtain specified derivatives of the solution y(t). Descriptions of COMMON block to be declared in overlay or\n       similar environments, or to be saved when doing an interrupt\n       of the problem and continued solution later. Description of two routines in the DLSODE package, either of\n       which the user may replace with his own version, if desired.\n       These relate to the measurement of errors. Part 1.  Call Sequence Arguments The call sequence parameters used for input only are F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF, and those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n  optional inputs and optional outputs.  (The term output here\n  refers to the return from subroutine DLSODE to the user’s calling\n  program.) The legality of input parameters will be thoroughly checked on the\n  initial call for the problem, but not checked thereafter unless a\n  change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F name of the user-supplied subroutine defining the ODE\n  system.  The system must be put in the first-order form\n  dy/dt = f(t,y), where f is a vector-valued function of\n  the scalar t and the vector y. Subroutine F is to compute\n  the function f. It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT =\n  f(T,Y) is output.  Y and YDOT are arrays of length NEQ.\n  Subroutine F should not alter Y(1),…,Y(NEQ).  F must be\n  declared EXTERNAL in the calling program. Subroutine F may access user-defined quantities in\n  NEQ(2),… and/or in Y(NEQ(1)+1),…, if NEQ is an array\n  (dimensioned in F) and/or Y has length exceeding NEQ(1).\n  See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n  externally to DLSODE, an extra call to F should be made\n  for this purpose, for consistent and accurate results.\n  If only the derivative dy/dt is needed, use DINTDY\n  instead. NEQ size of the ODE system (number of first-order\n  ordinary differential equations).  Used only for input.\n  NEQ may be decreased, but not increased, during the\n  problem.  If NEQ is decreased (with ISTATE = 3 on input),\n  the remaining components of Y should be left undisturbed,\n  if these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred\n  to as a scalar in this user interface description.\n  However, NEQ may be an array, with NEQ(1) set to the\n  system size.  (The DLSODE package accesses only NEQ(1).)\n  In either case, this parameter is passed as the NEQ\n  argument in all calls to F and JAC.  Hence, if it is an\n  array, locations NEQ(2),… may be used to store other\n  integer data and pass it to F and/or JAC.  Subroutines\n  F and/or JAC must include NEQ in a DIMENSION statement\n  in that case. Y real array for the vector of dependent variables, of\n  length NEQ or more.  Used for both input and output on\n  the first call (ISTATE = 1), and only for output on\n  other calls.  On the first call, Y must contain the\n  vector of initial values.  On output, Y contains the\n  computed solution vector, evaluated at T. If desired,\n  the Y array may be used for other purposes between\n  calls to the solver. This array is passed as the Y argument in all calls to F\n  and JAC.  Hence its length may exceed NEQ, and locations\n  Y(NEQ+1),… may be used to store other real data and\n  pass it to F and/or JAC.  (The DLSODE package accesses\n  only Y(1),…,Y(NEQ).) T independent variable.  On input, T is used only on\n  the first call, as the initial point of the integration.\n  On output, after each call, T is the value at which a\n  computed solution Y is evaluated (usually the same as\n  TOUT).  On an error return, T is the farthest point\n  reached. TOUT next value of T at which a computed solution is\n  desired.  Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n  to T for one call, then should not equal T for the next\n  call.  For the initial T, an input value of TOUT .NE. T\n  is used in order to determine the direction of the\n  integration (i.e., the algebraic sign of the step sizes)\n  and the rough scale of the problem.  Integration in\n  either direction (forward or backward in T) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored\n  after the first call (i.e., the first call with\n  TOUT .NE. T).  Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n  monotone, but a value of TOUT which backs up is limited\n  to the current internal T interval, whose endpoints are\n  TCUR - HU and TCUR.  (See “Optional Outputs” below for\n  TCUR and HU.) ITOL indicator for the type of error control.  See\n  description below under ATOL.  Used only for input. RTOL relative error tolerance parameter, either a scalar or\n  an array of length NEQ.  See description below under\n  ATOL.  Input only. ATOL absolute error tolerance parameter, either a scalar or\n  an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine the\n  error control performed by the solver.  The solver will\n  control the vector e = (e(i)) of estimated local errors\n  in Y, according to an inequality of the form rms-norm of ( e(i)/EWT(i) ) <= 1, where EWT(i) = RTOL(i)\\*ABS(Y(i)) + ATOL(i), and the rms-norm (root-mean-square norm) here is rms-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ). Here EWT = (EWT(i)) is a vector of weights which must\n  always be positive, and the values of RTOL and ATOL\n  should all be nonnegative.  The following table gives the\n  types (scalar/array) of RTOL and ATOL, and the\n  corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n  be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n  fixed throughout the problem) is suitable, more general\n  error controls can be obtained by substituting\n  user-supplied routines for the setting of EWT and/or for\n  the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n  run on the same problem with smaller tolerances, then all\n  components of RTOL and ATOL (i.e., of EWT) should be\n  scaled down uniformly. ITASK index specifying the task to be performed.  Input\n  only.  ITASK has the following values and meanings: value description 1 Normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 Take one step only and return. 3 Stop at the first internal mesh point at or beyond t = TOUT and return. 4 Normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT.  TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 Take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n  (within roundoff), it will return T = TCRIT (exactly) to\n  indicate this (unless ITASK = 4 and TOUT comes before\n  TCRIT, in which case answers at T = TOUT are returned\n  first). ISTATE index used for input and output to specify the state\n  of the calculation. On input, the values of ISTATE are as follows: value description 1 This is the first call for the problem (initializations will be done).  See “Note” below. 2 This is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK.  (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 This is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, ML, MU, and any of the optional inputs except H0. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted as\n  a first call here, as no initialization or checking of\n  input is done.  (Such a call is sometimes useful for the\n  purpose of outputting the initial conditions.)  Thus the\n  first call for which TOUT .NE. T requires ISTATE = 1 on\n  input. On output, ISTATE has the following values and meanings: value description 1 Nothing was done, as TOUT was equal to T with ISTATE = 1 on input. 2 The integration was performed successfully. -1 An excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T. (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value >1 and call again (the excess work step counter will be reset to 0).  In addition, the user may increase MXSTEP to avoid this error return; see “Optional Inputs” below. -2 Too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T. To continue, the tolerance parameters must be reset, and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose.  (Note:  If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 Illegal input was detected, before taking any integration steps.  See written message for details. (Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop.) -4 There were repeated error-test failures on one attempted step, before completing the requested task, but the integration was successful as far as T.  The problem may have a singularity, or the input may be inappropriate. -5 There were repeated convergence-test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 EWT(i) became zero for some i during the integration. Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished.  The integration was successful as far as T. Note:  Since the normal output value of ISTATE is 2, it\n  does not need to be reset for normal continuation.  Also,\n  since a negative input value of ISTATE will be regarded\n  as illegal, a negative output value requires the user to\n  change it, and possibly other inputs, before calling the\n  solver again. IOPT integer flag to specify whether any optional inputs\n  are being used on this call.  Input only.  The optional\n  inputs are listed under a separate heading below.\n              0   No optional inputs are being used.  Default values\n                  will be used in all cases.\n              1   One or more optional inputs are being used. RWORK real working array (double precision).  The length of\n  RWORK must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LWM where NYH = the initial value of NEQ,\n       MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                smaller value is given as an optional input),\n          LWM = 0           if MITER = 0,\n          LWM = NEQ**2 + 2  if MITER = 1 or 2,\n          LWM = NEQ + 2     if MITER = 3, and\n          LWM = (2*ML + MU + 1)*NEQ + 2\n                                   if MITER = 4 or 5.\n          (See the MF description below for METH and MITER.) Thus if MAXORD has its default value and NEQ is constant,\n  this length is: 20 + 16*NEQ                    for MF = 10,\n              22 + 16*NEQ + NEQ**2           for MF = 11 or 12,\n              22 + 17*NEQ                    for MF = 13,\n              22 + 17*NEQ + (2*ML + MU)*NEQ  for MF = 14 or 15,\n              20 +  9*NEQ                    for MF = 20,\n              22 +  9*NEQ + NEQ**2           for MF = 21 or 22,\n              22 + 10*NEQ                    for MF = 23,\n              22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. The first 20 words of RWORK are reserved for conditional\n  and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT, the critical value of t which the\n  solver is not to overshoot.  Required if ITASK\n  is 4 or 5, and ignored otherwise.  See ITASK. LRW length of the array RWORK, as declared by the user.\n  (This will be checked by the solver.) IWORK integer work array.  Its length must be at least\n  20       if MITER = 0 or 3 (MF = 10, 13, 20, 23), or\n  20 + NEQ otherwise (MF = 11, 12, 14, 15, 21, 22, 24, 25).\n  (See the MF description below for MITER.)  The first few\n  words of IWORK are used for conditional and optional\n  inputs and optional outputs. The following two words in IWORK are conditional inputs:\n          IWORK(1) = ML   These are the lower and upper half-\n          IWORK(2) = MU   bandwidths, respectively, of the banded\n                          Jacobian, excluding the main diagonal. The band is defined by the matrix locations\n  (i,j) with i - ML <= j <= i + MU. ML and MU\n  must satisfy 0 <= ML,MU <= NEQ - 1. These are\n  required if MITER is 4 or 5, and ignored\n  otherwise.  ML and MU may in fact be the band\n  parameters for a matrix to which df/dy is only\n  approximately equal. LIW The length of the array IWORK, as declared by the user.\n  (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODE\n  for the same problem, except possibly for the conditional and\n  optional inputs, and except for the last 3*NEQ words of RWORK.\n  The latter space is used for internal scratch space, and so is\n  available for use by the user outside DLSODE between calls, if\n  desired (but not for use by F or JAC). JAC The name of the user-supplied routine (MITER = 1 or 4) to\n  compute the Jacobian matrix, df/dy, as a function of the\n  scalar t and the vector y.  (See the MF description below\n  for MITER.)  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the\n  array PD is to be loaded with partial derivatives\n  (elements of the Jacobian matrix) on output.  PD must be\n  given a first dimension of NROWPD.  T and Y have the same\n  meaning as in subroutine F. In the full matrix case (MITER = 1), ML and MU are\n  ignored, and the Jacobian is to be loaded into PD in\n  columnwise manner, with df(i)/dy(j) loaded into PD(i,j). In the band matrix case (MITER = 4), the elements within\n  the band are to be loaded into PD in columnwise manner,\n  with diagonal lines of df/dy loaded into the rows of PD.\n  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).  ML\n  and MU are the half-bandwidth parameters (see IWORK).\n  The locations in PD in the two triangular areas which\n  correspond to nonexistent matrix elements can be ignored\n  or loaded arbitrarily, as they are overwritten by DLSODE. JAC need not provide df/dy exactly. A crude approximation\n  (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver, so\n  that only the nonzero elements need be loaded by JAC.\n  Each call to JAC is preceded by a call to F with the same\n  arguments NEQ, T, and Y. Thus to gain some efficiency,\n  intermediate quantities shared by both calculations may\n  be saved in a user COMMON block by F and not recomputed\n  by JAC, if desired.  Also, JAC may alter the Y array, if\n  desired.  JAC must be declared EXTERNAL in the calling\n  program. Subroutine JAC may access user-defined quantities in\n  NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n  (dimensioned in JAC) and/or Y has length exceeding\n  NEQ(1).  See the descriptions of NEQ and Y above. MF The method flag.  Used only for input.  The legal values\n  of MF are 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24,\n  and 25.  MF has decimal digits METH and MITER: MF = 10*METH + MITER . METH indicates the basic linear multistep method: value description 1 Implicit Adams method. 2 Method based on backward differentiation formulas (BDF’s). MITER indicates the corrector iteration method: value description 0 Functional iteration (no Jacobian matrix is involved). 1 Chord iteration with a user-supplied full (NEQ by NEQ) Jacobian. 2 Chord iteration with an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 3 Chord iteration with an internally generated diagonal Jacobian approximation (using one extra call to F per df/dy evaluation). 4 Chord iteration with a user-supplied banded Jacobian. 5 Chord iteration with an internally generated banded Jacobian (using ML + MU + 1 extra calls to F per df/dy evaluation). If MITER = 1 or 4, the user must supply a subroutine JAC\n  (the name is arbitrary) as described above under JAC.\n  For other values of MITER, a dummy argument can be used. Optional Inputs The following is a list of the optional inputs provided for in the\n  call sequence.  (See also Part 2.)  For each such input variable,\n  this table lists its name as used in this documentation, its\n  location in the call sequence, its meaning, and the default value.\n  The use of any of these inputs requires IOPT = 1, and in that case\n  all of these inputs are examined.  A value of zero for any of\n  these optional inputs will cause the default value to be used.\n  Thus to use a subset of the optional inputs, simply preload\n  locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively,\n  and then set those of interest to nonzero values. Name Location Meaning and default value H0 RWORK(5) Step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) Maximum absolute step size allowed.  The default value is infinite. HMIN RWORK(7) Minimum absolute step size allowed.  The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) Maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. (See the MF description above for METH.)  If MAXORD exceeds the default value, it will be reduced to the default value.  If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) Maximum number of (internally defined) steps allowed during one call to the solver.  The default value is 500. MXHNIL IWORK(7) Maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size).  This must be positive to result in a nondefault value.  The default value is 10. Optional Outputs As optional additional output from DLSODE, the variables listed\n below are quantities related to the performance of DLSODE which\n are available to the user.  These are communicated by way of the\n work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined on\n any successful return from DLSODE, and on any return with ISTATE =\n -1, -2, -4, -5, or -6.  On an illegal input return (ISTATE = -3),\n they will be unchanged from their existing values (if any), except\n possibly for TOLSF, LENRW, and LENIW.  On any error return,\n outputs relevant to the error will be defined, as noted below. Name Location Meaning HU RWORK(11) Step size in t last used (successfully). HCUR RWORK(12) Step size to be attempted on the next step. TCUR RWORK(13) Current value of the independent variable which the solver has actually reached, i.e., the current internal mesh point in t. On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) Tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise). If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed.  (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) Number of steps taken for the problem so far. NFE IWORK(12) Number of F evaluations for the problem so far. NJE IWORK(13) Number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) Method order last used (successfully). NQCUR IWORK(15) Order to be attempted on the next step. IMXER IWORK(16) Index of the component of largest magnitude in the weighted local error vector ( e(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) Length of RWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) Length of IWORK actually required.  This is defined on normal returns and on an illegal input return for insufficient storage. The following two arrays are segments of the RWORK array which may\n  also be of interest to the user as optional outputs.  For each\n  array, the table below gives its internal name, its base address\n  in RWORK, and its description. Name Base address Description YH 21 The Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j + 1 of YH contains HCUR**j/factorial(j) times the jth derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 Array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in Y on the last step.  This is the vector e in the description of the error control.  It is defined only on successful return from DLSODE. Part 2.  Other Callable Routines The following are optional calls which the user may make to gain\n  additional capabilities in conjunction with DLSODE. Form of call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODE, if the default is not desired.  The default value of LUN is 6. This call may be made at any time and will take effect immediately. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODE.  MFLAG = 0 means do not print.  (Danger:  this risks losing valuable information.)  MFLAG = 1 means print (the default).  This call may be made at any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) Saves and restores the contents of the internal COMMON blocks used by DLSODE (see Part 3 below).  RSAV must be a real array of length 218 or more, and ISAV must be an integer array of length 37 or more.  JOB = 1 means save COMMON into RSAV/ISAV.  JOB = 2 means restore COMMON from same.  DSRCOM is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODE. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODE.  Detailed instructions follow. Detailed instructions for using DINTDY The form of the CALL is: CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) The input parameters are: value description T Value of independent variable where answers are desired (normally the same as the T last returned by DLSODE).  For valid results, T must lie between TCUR - HU and TCUR.  (See “Optional Outputs” above for TCUR and HU.) K Integer order of the derivative desired.  K must satisfy 0 <= K <= NQCUR, where NQCUR is the current order (see “Optional Outputs”).  The capability corresponding to K = 0, i.e., computing y(t), is already provided by DLSODE directly.  Since NQCUR >= 1, the first derivative dy/dt is always available with DINTDY. RWORK(21) The base address of the history array YH. NYH Column length of YH, equal to the initial value of NEQ. The output parameters are: value description DKY Real array of length NEQ containing the computed value of the Kth derivative of y(t). IFLAG Integer flag, returned as 0 if K and T were legal, -1 if K was illegal, and -2 if T was illegal. On an error return, a message is also written. Part 3.  Save and Restore Current State If the solution of a given problem by DLSODE is to be interrupted\n  and then later continued, as when restarting an interrupted run or\n  alternating between two or more problems, the user should save,\n  following the return from the last DLSODE call prior to the\n  interruption, the contents of the call sequence variables and the\n  internal state values, and later restore these values before the\n  next DLSODE call for that problem.   In addition, if XSETUN and/or\n  XSETF was called for non-default handling of error messages, then\n  these calls must be repeated.  To save and restore the current state\n  use subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines Below are descriptions of two routines in the DLSODE package which\n  relate to the measurement of errors.  Either routine can be\n  replaced by a user-supplied version, if desired.  However, since\n  such a replacement may have a major impact on performance, it\n  should be done only when absolutely necessary, and only with great\n  caution.  (Note:  The means by which the package version of a\n  routine is superseded by the user’s version may be system-\n  dependent.) DEWSET() The following subroutine is called just before each internal\n  integration step, and sets the array of error weights, EWT, as\n  described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODE call\n  sequence, YCUR contains the current dependent variable vector,\n  and EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n  (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n  in Y(i) to.  The EWT array returned by DEWSET is passed to the\n  DVNORM routine (see below), and also used by DLSODE in the\n  computation of the optional output IMXER, the diagonal Jacobian\n  approximation, and the increments for difference quotient\n  Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n  the current values of derivatives of y. Derivatives up to order NQ\n  are available from the history array YH, described above under\n  optional outputs.  In DEWSET, YH is identical to the YCUR array,\n  extended to NQ + 1 columns with a column length of NYH and scale\n  factors of H**j/factorial(j).  On the first call for the problem,\n  given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n  NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n  can be obtained by including in SEWSET the statements: DOUBLE PRECISION RLS\n       COMMON /DLS001/ RLS(218),ILS(37)\n       NQ = ILS(33)\n       NST = ILS(34)\n       H = RLS(212) Thus, for example, the current value of dy/dt can be obtained as\n  YCUR(NYH+i)/H (i=1,…,NEQ) (and the division by H is unnecessary\n  when NST = 0). DVNORM() DVNORM is a real function routine which computes the weighted\n  root-mean-square norm of a vector v: d = DVNORM (n, v, w)\n\n     where:\n     n = the length of the vector,\n     v = real array of length n containing the vector,\n     w = real array of length n containing weights,\n     d = SQRT( (1/n) * sum(v(i)*w(i))**2 ). DVNORM is called with n = NEQ and with w(i) = 1.0/EWT(i), where\n  EWT is as set by subroutine DEWSET. If the user supplies this function, it should return a nonnegative\n  value of DVNORM suitable for use in the error control in DLSODE.\n  None of the arguments should be altered by DVNORM.  For example, a\n  user-supplied DVNORM routine might: Substitute a max-norm of (v(i)*w(i)) for the rms-norm, or Ignore some components of v in the norm, with the effect of\n     suppressing the error control on those components of Y. Pedigree: DLSODE is derived from the Livermore Solver for Ordinary\n  Differential Equations package ODEPACK, AUTHOR Hindmarsh , Alan C ., ( LLNL ) Center for Applied Scientific Computing , L - 561 Lawrence Livermore National Laboratory Livermore , CA 94551 . Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf Calls proc~~dlsode~~CallsGraph proc~dlsode dlsode proc~dewset dewset proc~dlsode->proc~dewset proc~dintdy dintdy proc~dlsode->proc~dintdy proc~dvnorm dvnorm proc~dlsode->proc~dvnorm proc~xerrwd xerrwd proc~dlsode->proc~xerrwd proc~dumach dumach proc~dlsode->proc~dumach proc~dstode dstode proc~dlsode->proc~dstode proc~dintdy->proc~xerrwd proc~dstode->proc~dvnorm proc~dcfode dcfode proc~dstode->proc~dcfode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsode.html"},{"title":"dlsodes – odepack","text":"public subroutine dlsodes(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) Synopsis DLSODES solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). DLSODES is a variant of the DLSODE package, and is intended for\n problems in which the Jacobian matrix df/dy has an arbitrary\n sparse structure (when the problem is stiff). Summary of Usage. Communication between the user and the DLSODES package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). B. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, there are two standard\n choices for the method flag, MF = 121 and MF = 222.  In both cases,\n DLSODES requires the Jacobian matrix in some form, and it treats this\n matrix in general sparse form, with sparsity structure determined\n internally.  (For options where the user supplies the sparsity\n structure, see the full description of MF below.) C. If the problem is stiff, you are encouraged to supply the Jacobian\n directly (MF = 121), but if this is not feasible, DLSODES will\n compute it internally by difference quotients (MF = 222).\n If you are supplying the Jacobian, provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), IAN ( * ), JAN ( * ), PDJ ( * ) Here NEQ, T, Y, and J are input arguments, and the JAC routine is to\n load the array PDJ (of length NEQ) with the J-th column of df/dy.\n I.e., load PDJ(i) with df(i)/dy(J) for all relevant values of i.\n The arguments IAN and JAN should be ignored for normal situations.\n DLSODES will call the JAC routine with J = 1,2,…,NEQ.\n Only nonzero elements need be loaded.  Usually, a crude approximation\n to df/dy, possibly with fewer nonzero elements, will suffice. D. Write a main program which calls Subroutine DLSODES once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODES.  On the first call to DLSODES, supply arguments as follows: F name of subroutine for right-hand side vector f.\n This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable t. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n The estimated local error in Y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of Y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + 16*NEQ            for MF = 10,\n     20 + (2 + 1./LENRAT)*NNZ + (11 + 9./LENRAT)*NEQ\n                            for MF = 121 or 222, where: argument description NNZ the number of nonzero elements in the sparse Jacobian (if this is unknown, use an estimate), and LENRAT the real to integer wordlength ratio (usually 1 in single precision and 2 in double precision). In any case, the required size of RWORK cannot generally\n  be predicted in advance if MF = 121 or 222, and the value\n  above is a rough estimate of a crude lower bound.  Some\n  experimentation with this size may be necessary.\n  (When known, the correct required length is an optional\n  output, available in IWORK(17).) LRW declared length of RWORK (in user dimension). IWORK integer work array of length at least 30. LIW declared length of IWORK (in user dimension). JAC name of subroutine for Jacobian matrix (MF = 121).\n If used, this name must be declared External in calling\n program.  If not used, pass a dummy name. MF method flag.  Standard values are: value description 10 for nonstiff (Adams) method, no Jacobian used 121 for stiff (BDF) method, user-supplied sparse Jacobian 222 for stiff method, internally generated sparse Jacobian Note that the main program must declare arrays Y, RWORK, IWORK,\n and possibly ATOL. E. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE the meaning of ISTATE values are as follows: value description 2 if DLSODES was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong MF). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of MF or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means a fatal error return flag came from sparse solver CDRV by way of DPRJS or DSOLSS.  Should never happen. A return with ISTATE = -1, -4, or -5 may result from using\n an inappropriate sparsity structure, one that is quite\n different from the initial structure.  Consider calling\n DLSODES again with ISTATE = 3 to force the structure to be\n reevaluated.  See the full description of ISTATE below. F. To continue the integration after a successful return, simply\n reset TOUT and call DLSODES again.  No other parameters need be reset. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODES.  The problem is from chemical\n kinetics, and consists of the following 12 rate equations: dy1/dt  = -rk1*y1\n    dy2/dt  = rk1*y1 + rk11*rk14*y4 + rk19*rk14*y5\n                - rk3*y2*y3 - rk15*y2*y12 - rk2*y2\n    dy3/dt  = rk2*y2 - rk5*y3 - rk3*y2*y3 - rk7*y10*y3\n                + rk11*rk14*y4 + rk12*rk14*y6\n    dy4/dt  = rk3*y2*y3 - rk11*rk14*y4 - rk4*y4\n    dy5/dt  = rk15*y2*y12 - rk19*rk14*y5 - rk16*y5\n    dy6/dt  = rk7*y10*y3 - rk12*rk14*y6 - rk8*y6\n    dy7/dt  = rk17*y10*y12 - rk20*rk14*y7 - rk18*y7\n    dy8/dt  = rk9*y10 - rk13*rk14*y8 - rk10*y8\n    dy9/dt  = rk4*y4 + rk16*y5 + rk8*y6 + rk18*y7\n    dy10/dt = rk5*y3 + rk12*rk14*y6 + rk20*rk14*y7\n                + rk13*rk14*y8 - rk7*y10*y3 - rk17*y10*y12\n                - rk6*y10 - rk9*y10\n    dy11/dt = rk10*y8\n    dy12/dt = rk6*y10 + rk19*rk14*y5 + rk20*rk14*y7\n                - rk15*y2*y12 - rk17*y10*y12\n\n with rk1 = rk5 = 0.1,  rk4 = rk8 = rk16 = rk18 = 2.5,\n      rk10 = 5.0,  rk2 = rk6 = 10.0,  rk14 = 30.0,\n      rk3 = rk7 = rk9 = rk11 = rk12 = rk13 = rk19 = rk20 = 50.0,\n      rk15 = rk17 = 100.0. The t interval is from 0 to 1000, and the initial conditions\n are y1 = 1, y2 = y3 = … = y12 = 0.  The problem is stiff. The following coding solves this problem with DLSODES, using MF = 121\n and printing results at t = .1, 1., 10., 100., 1000.  It uses\n ITOL = 1 and mixed relative/absolute tolerance controls.\n During the run and at the end, statistical quantities of interest\n are printed (see optional outputs in the full description below). program dlsodes_ex use m_odepack implicit none external fex external jex integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: atol , rtol , t , tout integer :: i , iopt , iout , istate , itask , itol , leniw , lenrw , & & mf , neq , nfe , nje , nlu , nnz , nnzlu , nst integer , dimension ( 30 ) :: iwork integer , save :: liw , lrw real ( kind = dp ), dimension ( 500 ) :: rwork real ( kind = dp ), dimension ( 12 ) :: y data lrw / 500 / , liw / 30 / neq = 12 do i = 1 , neq y ( i ) = 0.0D0 enddo y ( 1 ) = 1.0D0 t = 0.0D0 tout = 0.1D0 itol = 1 rtol = 1.0D-4 atol = 1.0D-6 itask = 1 istate = 1 iopt = 0 mf = 121 do iout = 1 , 5 call dlsodes ( fex ,[ neq ], y , t , tout , itol ,[ rtol ],[ atol ], itask , istate , iopt ,& & rwork , lrw , iwork , liw , jex , mf ) write ( 6 , 99010 ) t , iwork ( 11 ), rwork ( 11 ),( y ( i ), i = 1 , neq ) 99010 format ( // ' At t =' , d11 . 3 , 4 x , ' No. steps =' , i5 , 4 x , ' Last step =' , & & d11 . 3 / '  Y array =  ' , 4 D14 . 5 / 13 x , 4 D14 . 5 / 13 x , 4 D14 . 5 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0.0D0 endif enddo lenrw = iwork ( 17 ) leniw = iwork ( 18 ) nst = iwork ( 11 ) nfe = iwork ( 12 ) nje = iwork ( 13 ) nlu = iwork ( 21 ) nnz = iwork ( 19 ) nnzlu = iwork ( 25 ) + iwork ( 26 ) + neq write ( 6 , 99030 ) lenrw , leniw , nst , nfe , nje , nlu , nnz , nnzlu 99030 format ( // ' Required RWORK size =' , i4 , '   IWORK size =' , & & i4 / ' No. steps =' , i4 , '   No. f-s =' , i4 , '   No. J-s =' , i4 , & & '   No. LU-s =' , i4 / ' No. of nonzeros in J =' , i5 , & & '   No. of nonzeros in LU =' , i5 ) end program dlsodes_ex subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 12 ) :: Y real ( kind = dp ), intent ( out ), dimension ( 12 ) :: Ydot real ( kind = dp ), save :: rk1 , rk10 , rk11 , rk12 , rk13 , rk14 , rk15 , & & rk16 , rk17 , rk2 , rk3 , rk4 , rk5 , rk6 , rk7 ,& & rk8 , rk9 real , save :: rk18 , rk19 , rk20 data rk1 / 0.1D0 / , rk2 / 1 0.0D0 / , rk3 / 5 0.0D0 / , rk4 / 2.5D0 / , rk5 / 0.1D0 / ,& & rk6 / 1 0.0D0 / , rk7 / 5 0.0D0 / , rk8 / 2.5D0 / , rk9 / 5 0.0D0 / , & & rk10 / 5.0D0 / , rk11 / 5 0.0D0 / , rk12 / 5 0.0D0 / , rk13 / 5 0.0D0 / , & & rk14 / 3 0.0D0 / , rk15 / 10 0.0D0 / , rk16 / 2.5D0 / , rk17 / 10 0.0D0 / , & & rk18 / 2.5D0 / , rk19 / 5 0.0D0 / , rk20 / 5 0.0D0 / Ydot ( 1 ) = - rk1 * Y ( 1 ) Ydot ( 2 ) = rk1 * Y ( 1 ) + rk11 * rk14 * Y ( 4 ) + rk19 * rk14 * Y ( 5 ) - rk3 * Y ( 2 ) * Y ( 3 ) & & - rk15 * Y ( 2 ) * Y ( 12 ) - rk2 * Y ( 2 ) Ydot ( 3 ) = rk2 * Y ( 2 ) - rk5 * Y ( 3 ) - rk3 * Y ( 2 ) * Y ( 3 ) - rk7 * Y ( 10 ) * Y ( 3 ) & & + rk11 * rk14 * Y ( 4 ) + rk12 * rk14 * Y ( 6 ) Ydot ( 4 ) = rk3 * Y ( 2 ) * Y ( 3 ) - rk11 * rk14 * Y ( 4 ) - rk4 * Y ( 4 ) Ydot ( 5 ) = rk15 * Y ( 2 ) * Y ( 12 ) - rk19 * rk14 * Y ( 5 ) - rk16 * Y ( 5 ) Ydot ( 6 ) = rk7 * Y ( 10 ) * Y ( 3 ) - rk12 * rk14 * Y ( 6 ) - rk8 * Y ( 6 ) Ydot ( 7 ) = rk17 * Y ( 10 ) * Y ( 12 ) - rk20 * rk14 * Y ( 7 ) - rk18 * Y ( 7 ) Ydot ( 8 ) = rk9 * Y ( 10 ) - rk13 * rk14 * Y ( 8 ) - rk10 * Y ( 8 ) Ydot ( 9 ) = rk4 * Y ( 4 ) + rk16 * Y ( 5 ) + rk8 * Y ( 6 ) + rk18 * Y ( 7 ) Ydot ( 10 ) = rk5 * Y ( 3 ) + rk12 * rk14 * Y ( 6 ) + rk20 * rk14 * Y ( 7 ) + rk13 * rk14 * Y ( 8 ) & & - rk7 * Y ( 10 ) * Y ( 3 ) - rk17 * Y ( 10 ) * Y ( 12 ) - rk6 * Y ( 10 ) - rk9 * Y ( 10 ) Ydot ( 11 ) = rk10 * Y ( 8 ) Ydot ( 12 ) = rk6 * Y ( 10 ) + rk19 * rk14 * Y ( 5 ) + rk20 * rk14 * Y ( 7 ) - rk15 * Y ( 2 ) * Y ( 12 )& & - rk17 * Y ( 10 ) * Y ( 12 ) end subroutine fex subroutine jex ( Neq , T , Y , J , Ia , Ja , Pdj ) implicit none ! integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 12 ) :: Y integer , intent ( in ) :: J integer , dimension ( * ) :: Ia integer , dimension ( * ) :: Ja real ( kind = dp ), intent ( out ), dimension ( 12 ) :: Pdj ! real ( kind = dp ), save :: rk1 , rk10 , rk11 , rk12 , rk13 , rk14 , rk15 , & & rk16 , rk17 , rk2 , rk3 , rk4 , rk5 , rk6 , rk7 ,& & rk8 , rk9 real , save :: rk18 , rk19 , rk20 ! data rk1 / 0.1D0 / , rk2 / 1 0.0D0 / , rk3 / 5 0.0D0 / , rk4 / 2.5D0 / , rk5 / 0.1D0 / ,& & rk6 / 1 0.0D0 / , rk7 / 5 0.0D0 / , rk8 / 2.5D0 / , rk9 / 5 0.0D0 / , & & rk10 / 5.0D0 / , rk11 / 5 0.0D0 / , rk12 / 5 0.0D0 / , rk13 / 5 0.0D0 / , & & rk14 / 3 0.0D0 / , rk15 / 10 0.0D0 / , rk16 / 2.5D0 / , rk17 / 10 0.0D0 / , & & rk18 / 2.5D0 / , rk19 / 5 0.0D0 / , rk20 / 5 0.0D0 / select case ( J ) case ( 2 ) Pdj ( 2 ) = - rk3 * Y ( 3 ) - rk15 * Y ( 12 ) - rk2 Pdj ( 3 ) = rk2 - rk3 * Y ( 3 ) Pdj ( 4 ) = rk3 * Y ( 3 ) Pdj ( 5 ) = rk15 * Y ( 12 ) Pdj ( 12 ) = - rk15 * Y ( 12 ) case ( 3 ) Pdj ( 2 ) = - rk3 * Y ( 2 ) Pdj ( 3 ) = - rk5 - rk3 * Y ( 2 ) - rk7 * Y ( 10 ) Pdj ( 4 ) = rk3 * Y ( 2 ) Pdj ( 6 ) = rk7 * Y ( 10 ) Pdj ( 10 ) = rk5 - rk7 * Y ( 10 ) case ( 4 ) Pdj ( 2 ) = rk11 * rk14 Pdj ( 3 ) = rk11 * rk14 Pdj ( 4 ) = - rk11 * rk14 - rk4 Pdj ( 9 ) = rk4 case ( 5 ) Pdj ( 2 ) = rk19 * rk14 Pdj ( 5 ) = - rk19 * rk14 - rk16 Pdj ( 9 ) = rk16 Pdj ( 12 ) = rk19 * rk14 case ( 6 ) Pdj ( 3 ) = rk12 * rk14 Pdj ( 6 ) = - rk12 * rk14 - rk8 Pdj ( 9 ) = rk8 Pdj ( 10 ) = rk12 * rk14 case ( 7 ) Pdj ( 7 ) = - rk20 * rk14 - rk18 Pdj ( 9 ) = rk18 Pdj ( 10 ) = rk20 * rk14 Pdj ( 12 ) = rk20 * rk14 case ( 8 ) Pdj ( 8 ) = - rk13 * rk14 - rk10 Pdj ( 10 ) = rk13 * rk14 Pdj ( 11 ) = rk10 case ( 9 ) case ( 10 ) Pdj ( 3 ) = - rk7 * Y ( 3 ) Pdj ( 6 ) = rk7 * Y ( 3 ) Pdj ( 7 ) = rk17 * Y ( 12 ) Pdj ( 8 ) = rk9 Pdj ( 10 ) = - rk7 * Y ( 3 ) - rk17 * Y ( 12 ) - rk6 - rk9 Pdj ( 12 ) = rk6 - rk17 * Y ( 12 ) case ( 11 ) case ( 12 ) Pdj ( 2 ) = - rk15 * Y ( 2 ) Pdj ( 5 ) = rk15 * Y ( 2 ) Pdj ( 7 ) = rk17 * Y ( 10 ) Pdj ( 10 ) = - rk17 * Y ( 10 ) Pdj ( 12 ) = - rk15 * Y ( 2 ) - rk17 * Y ( 10 ) case default Pdj ( 1 ) = - rk1 Pdj ( 2 ) = rk1 endselect end subroutine jex The output of this program (on a Cray-1 in single precision)\n is as follows: At t =  1.000e-01     No. steps =   12     Last step =  1.515e-02\n  Y array =     9.90050e-01   6.28228e-03   3.65313e-03   7.51934e-07\n                1.12167e-09   1.18458e-09   1.77291e-12   3.26476e-07\n                5.46720e-08   9.99500e-06   4.48483e-08   2.76398e-06\n\n\n At t =  1.000e+00     No. steps =   33     Last step =  7.880e-02\n  Y array =     9.04837e-01   9.13105e-03   8.20622e-02   2.49177e-05\n                1.85055e-06   1.96797e-06   1.46157e-07   2.39557e-05\n                3.26306e-05   7.21621e-04   5.06433e-05   3.05010e-03\n\n\n At t =  1.000e+01     No. steps =   48     Last step =  1.239e+00\n  Y array =     3.67876e-01   3.68958e-03   3.65133e-01   4.48325e-05\n                6.10798e-05   4.33148e-05   5.90211e-05   1.18449e-04\n                3.15235e-03   3.56531e-03   4.15520e-03   2.48741e-01\n\n\n At t =  1.000e+02     No. steps =   91     Last step =  3.764e+00\n  Y array =     4.44981e-05   4.42666e-07   4.47273e-04  -3.53257e-11\n                2.81577e-08  -9.67741e-11   2.77615e-07   1.45322e-07\n                1.56230e-02   4.37394e-06   1.60104e-02   9.52246e-01\n\n\n At t =  1.000e+03     No. steps =  111     Last step =  4.156e+02\n  Y array =    -2.65492e-13   2.60539e-14  -8.59563e-12   6.29355e-14\n               -1.78066e-13   5.71471e-13  -1.47561e-12   4.58078e-15\n                1.56314e-02   1.37878e-13   1.60184e-02   9.52719e-01\n\n\n Required RWORK size = 442   IWORK size =  30\n No. steps = 111   No. f-s = 142   No. J-s =   2   No. LU-s =  20\n No. of nonzeros in J =   44   No. of nonzeros in LU =   50 Full Description of User Interface to DLSODES. The user interface to DLSODES consists of the following parts. The call sequence to Subroutine DLSODES, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODES package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODES package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n      F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF,\n and those used for both input and output are\n      Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODES to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter y(1),…,y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODES, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODES package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F and JAC.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F and/or JAC.  Subroutines F and/or JAC must include\n NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n on the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to\n F and JAC.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F and/or JAC.  (The DLSODES package accesses only\n Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n on output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, the conditional inputs IA and JA, and any of the optional inputs except H0. In particular, if MITER = 1 or 2, a call with ISTATE = 3 will cause the sparsity structure of the problem to be recomputed (or reread from IA and JA if MOSS = 0). Note:  a preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means a fatal error return flag came from the sparse solver CDRV by way of DPRJS or DSOLSS (numerical factorization or backsolve).  This should never happen. The integration was successful as far as T. Note: an error return with ISTATE = -1, -4, or -5 and with\n MITER = 1 or 2 may mean that the sparsity structure of the\n problem has changed significantly since it was last\n determined (or input).  In that case, one can attempt to\n complete the integration by setting ISTATE = 3 on the next\n call, so that a new structure determination is done. Note:  since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK a work array used for a mixture of real (double precision)\n and integer work space.\n The length of RWORK (in real words) must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LWM = 0                                    if MITER = 0,\n          LWM = 2*NNZ + 2*NEQ + (NNZ+9*NEQ)/LENRAT   if MITER = 1,\n          LWM = 2*NNZ + 2*NEQ + (NNZ+10*NEQ)/LENRAT  if MITER = 2,\n          LWM = NEQ + 2                              if MITER = 3. In the above formulas, NNZ    = number of nonzero elements in the Jacobian matrix.\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          (See the MF description for METH and MITER.) Thus if MAXORD has its default value and NEQ is constant,\n the minimum length of RWORK is: 20 + 16*NEQ        for MF = 10,\n             20 + 16*NEQ + LWM  for MF = 11, 111, 211, 12, 112, 212,\n             22 + 17*NEQ        for MF = 13,\n             20 +  9*NEQ        for MF = 20,\n             20 +  9*NEQ + LWM  for MF = 21, 121, 221, 22, 122, 222,\n             22 + 10*NEQ        for MF = 23. If MITER = 1 or 2, the above formula for LWM is only a\n crude lower bound.  The required length of RWORK cannot\n be readily predicted in general, as it depends on the\n sparsity structure of the problem.  Some experimentation\n may be necessary. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT = critical value of t which the solver\n                       is not to overshoot.  Required if ITASK is\n                       4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n      (This will be checked by the solver.) IWORK  = integer work array.  The length of IWORK must be at least 31 + NEQ + NNZ   if MOSS = 0 and MITER = 1 or 2, or\n   30               otherwise. (NNZ is the number of nonzero elements in df/dy.) In DLSODES, IWORK is used only for conditional and\n optional inputs and optional outputs. The following two blocks of words in IWORK are conditional\n inputs, required if MOSS = 0 and MITER = 1 or 2, but not\n otherwise (see the description of MF for MOSS). IWORK(30+j) = IA(j)     (j=1,...,NEQ+1)\n   IWORK(31+NEQ+k) = JA(k) (k=1,...,NNZ) The two arrays IA and JA describe the sparsity structure\n to be assumed for the Jacobian matrix.  JA contains the row\n indices where nonzero elements occur, reading in columnwise\n order, and IA contains the starting locations in JA of the\n descriptions of columns 1,…,NEQ, in that order, with\n IA(1) = 1.  Thus, for each column index j = 1,…,NEQ, the\n values of the row index i in column j where a nonzero\n element may occur are given by i = JA(k),  where   IA(j) .le. k .lt. IA(j+1). If NNZ is the total number of nonzero locations assumed,\n then the length of the JA array is NNZ, and IA(NEQ+1) must\n be NNZ + 1.  Duplicate entries are not allowed. LIW the length of the array IWORK, as declared by the user.\n   (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODES\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODES between calls, if\n desired (but not for use by F or JAC). JAC name of user-supplied routine (MITER = 1 or MOSS = 1) to\n compute the Jacobian matrix, df/dy, as a function of\n the scalar t and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), IAN ( * ), JAN ( * ), PDJ ( * ) where NEQ, T, Y, J, IAN, and JAN are input, and the array\n PDJ, of length NEQ, is to be loaded with column J\n of the Jacobian on output.  Thus df(i)/dy(J) is to be\n loaded into PDJ(i) for all relevant values of i.\n Here T and Y have the same meaning as in Subroutine F,\n and J is a column index (1 to NEQ).  IAN and JAN are\n undefined in calls to JAC for structure determination\n (MOSS = 1).  otherwise, IAN and JAN are structure\n descriptors, as defined under optional outputs below, and\n so can be used to determine the relevant row indices i, if\n desired. JAC need not provide df/dy exactly.  A crude\n approximation (possibly with greater sparsity) will do. In any case, PDJ is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Calls to JAC are made with J = 1,…,NEQ, in that order, and\n each such set of calls is preceded by a call to F with the\n same arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  JAC must not alter its input arguments.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. MF the method flag.  Used only for input.\n MF has three decimal digits– MOSS, METH, MITER– MF = 100*MOSS + 10*METH + MITER. MOSS indicates the method to be used to obtain the sparsity\n structure of the Jacobian matrix if MITER = 1 or 2:\n            MOSS = 0 | means the user has supplied IA and JA\n                     | (see descriptions under IWORK above).\n            MOSS = 1 | means the user has supplied JAC (see below)\n                     | and the structure will be obtained from NEQ\n                     | initial calls to JAC.\n            MOSS = 2 | means the structure will be obtained from NEQ+1\n                     | initial calls to F.\n METH indicates the basic linear multistep method:\n            METH = 1 | means the implicit Adams method.\n            METH = 2 | means the method based on Backward\n                     | Differentiation Formulas (BDFs).\n MITER indicates the corrector iteration method: value description MITER = 0 means functional iteration (no Jacobian matrix is involved). MITER = 1 means chord iteration with a user-supplied sparse Jacobian, given by Subroutine JAC. MITER = 2 means chord iteration with an internally generated (difference quotient) sparse Jacobian (using NGP extra calls to F per df/dy value, where NGP is an optional output described below.) MITER = 3 means chord iteration with an internally generated diagonal Jacobian approximation (using 1 extra call to F per df/dy evaluation). If MITER = 1 or MOSS = 1, the user must supply a Subroutine\n JAC (the name is arbitrary) as described above under JAC.\n Otherwise, a dummy argument can be used. The standard choices for MF are: value description MF = 10 for a nonstiff problem, MF = 21 or 22 for a stiff problem with IA/JA supplied (21 if JAC is supplied, 22 if not), MF = 121 for a stiff problem with JAC supplied, but not IA/JA, MF = 222 for a stiff problem with neither IA/JA nor JAC supplied. The sparseness structure can be changed during the\n problem by making a call to DLSODES with ISTATE = 3. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) SETH RWORK(8) the element threshhold for sparsity determination when MOSS = 1 or 2.  If the absolute value of an estimated Jacobian element is .le. SETH, it will be assumed to be absent in the structure. The default value of SETH is 0. MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSODES, the variables listed\n below are quantities related to the performance of DLSODES\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODES, and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far, excluding those for structure determination (MOSS = 2). NJE IWORK(13) the number of Jacobian evaluations for the problem so far, excluding those for structure determination (MOSS = 1). NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNZ IWORK(19) the number of nonzero elements in the Jacobian matrix, including the diagonal (MITER = 1 or 2). (This may differ from that given by IA(NEQ+1)-1 if MOSS = 0, because of added diagonal entries.) NGP IWORK(20) the number of groups of column indices, used in difference quotient Jacobian aproximations if MITER = 2.  This is also the number of extra f evaluations needed for each Jacobian evaluation. NLU IWORK(21) the number of sparse LU decompositions for the problem so far. LYH IWORK(22) the base address in RWORK of the history array YH, described below in this list. IPIAN IWORK(23) the base address of the structure descriptor array IAN, described below in this list. IPJAN IWORK(24) the base address of the structure descriptor array JAN, described below in this list. NZL IWORK(25) the number of nonzero elements in the strict lower triangle of the LU factorization used in the chord iteration (MITER = 1 or 2). NZU IWORK(26) the number of nonzero elements in the strict upper triangle of the LU factorization used in the chord iteration (MITER = 1 or 2). The total number of nonzeros in the factorization is therefore NZL + NZU + NEQ. The following four arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address, and its description.\n For YH and ACOR, the base addresses are in RWORK (a real array).\n The integer arrays IAN and JAN are to be obtained by declaring an\n integer array IWK and identifying IWK(1) with RWORK(21), using either\n an equivalence statement or a subroutine call.  Then the base\n addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained\n as optional outputs IWORK(23) and IWORK(24), respectively.\n Thus IAN(1) is IWK(IPIAN), etc. Name Base Address Description IAN IPIAN (in IWK) structure descriptor array of size NEQ + 1. JAN IPJAN (in IWK) structure descriptor array of size NNZ. (see above) IAN and JAN together describe the sparsity structure of the Jacobian matrix, as used by DLSODES when MITER = 1 or 2. JAN contains the row indices of the nonzero locations, reading in columnwise order, and IAN contains the starting locations in JAN of the descriptions of columns 1,…,NEQ, in that order, with IAN(1) = 1.  Thus for each j = 1,…,NEQ, the row indices i of the nonzero locations in column j are i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1). Note that IAN(NEQ+1) = NNZ + 1. (If MOSS = 0, IAN/JAN may differ from the input IA/JA because of a different ordering in each column, and added diagonal entries.) YH LYH the Nordsieck history array, of size NYH by (optional (NQCUR + 1), where NYH is the initial value output) of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR.  The base address LYH is another optional output, listed above. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E  in the description of the error control.  It is defined only on a successful return from DLSODES. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODES.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODES, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODES. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCMS(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODES (see Part 3 below). RSAV must be a real array of length 224 or more, and ISAV must be an integer array of length 71 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCMS is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODES. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODES. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = IWORK ( 22 ) CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODES).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (See optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODES directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. LYH the base address of the history array YH, obtained\n as an optional output as shown above.\n NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Problem State If the solution of a given problem by DLSODES is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODES call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSODES call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCMS (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODES package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET. The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: Subroutine DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODES call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODES in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM. The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W)\n where\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODES.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might: substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. References: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: I. The Symmetric Codes,\n     Int. J. Num. Meth. Eng., 18 (1982), pp. 1145-1151. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: II. The Nonsymmetric Codes,\n     Research Report No. 114, Dept. of Computer Sciences, Yale\n     University, 1977. Authors:    Alan C. Hindmarsh\n             Center for Applied Scientific Computing, L-561\n             Lawrence Livermore National Laboratory\n             Livermore, CA 94551\n\n             Andrew H. Sherman\n             J. S. Nolen and Associates\n             Houston, TX 77084 Pedigree: This version of DLSODES is derived from the the 12 November 2003 version of\n “DLSODES: Livermore Solver for Ordinary Differential Equations\n          with general Sparse Jacobian matrix.” This version is in double precision. Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf Calls proc~~dlsodes~~CallsGraph proc~dlsodes dlsodes proc~diprep diprep proc~dlsodes->proc~diprep proc~dewset dewset proc~dlsodes->proc~dewset proc~xerrwd xerrwd proc~dlsodes->proc~xerrwd proc~dumach dumach proc~dlsodes->proc~dumach proc~dvnorm dvnorm proc~dlsodes->proc~dvnorm proc~dintdy dintdy proc~dlsodes->proc~dintdy proc~dstode dstode proc~dlsodes->proc~dstode proc~dprep dprep proc~diprep->proc~dprep proc~dintdy->proc~xerrwd proc~dstode->proc~dvnorm proc~dcfode dcfode proc~dstode->proc~dcfode none~wrapup500 wrapup500 proc~dprep->none~wrapup500 proc~odrv odrv proc~dprep->proc~odrv proc~jgroup jgroup proc~dprep->proc~jgroup proc~cdrv cdrv proc~dprep->proc~cdrv none~wrapup400 wrapup400 proc~dprep->none~wrapup400 none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~adjlr adjlr proc~dprep->proc~adjlr iwk iwk none~wrapup600->iwk proc~cntnzu cntnzu none~wrapup600->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodes.html"},{"title":"dlsodi – odepack","text":"public subroutine dlsodi(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) Synopsis DLSODI solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ\n\n      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n           i      1   2       NEQ If A is singular, this is a differential-algebraic system.\n This version is in double precision. Summary of Usage Communication between the user and the DLSODI package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form: SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) which computes the residual function r = g(t,y)  -  A(t,y) * s , as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSODI.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. Next, decide whether full or banded form is more economical\n for the storage of matrices.  DLSODI must deal internally with the\n matrices A and dr/dy, where r is the residual function defined above.\n DLSODI generates a linear combination of these two matrices, and\n this is treated in either full or banded form. The matrix structure is communicated by a method flag MF,\n which is 21 or 22 for the full case, and 24 or 25 in the band case. In the banded case, DLSODI requires two half-bandwidth\n parameters ML and MU.  These are, respectively, the widths of the\n lower and upper parts of the band, excluding the main diagonal.\n Thus the band consists of the locations (i,j) with\n i-ML .le. j .le. i+MU, and the full bandwidth is ML+MU+1.\n Note that the band must accommodate the nonzero elements of\n A(t,y), dg/dy, and d(A*s)/dy (s fixed).  Alternatively, one\n can define a band that encloses only the elements that are relatively\n large in magnitude, and gain some economy in storage and possibly\n also efficiency, although the appropriate threshhold for\n retaining matrix elements is highly problem-dependent. C. You must also provide a subroutine of the form: SUBROUTINE ADDA ( NEQ , T , Y , ML , MU , P , NROWP ) DOUBLE PRECISION T , Y ( * ), P ( NROWP , * ) which adds the matrix A = A(t,y) to the contents of the array P.\n T and the Y array are input and should not be altered. In the full matrix case, this routine should add elements of\n to P in the usual order.  I.e., add A(i,j) to P(i,j).  (Ignore the\n ML and MU arguments in this case.) In the band matrix case, this routine should add element A(i,j)\n to P(i-j+MU+1,j).  I.e., add the diagonal lines of A to the rows of\n P from the top down (the top line of A added to the first row of P). D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)*s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21 or 24, and provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , S , ML , MU , P , NROWP ) DOUBLE PRECISION T , Y ( * ), S ( * ), P ( NROWP , * ) which computes dr/dy as a function of t, y, and s.  Here T, Y, and\n S are inputs, and the routine is to load dr/dy into P as follows: In the full matrix case (MF = 21), load P(i,j) with dr(i)/dy(j),\n the partial derivative of r(i) with respect to y(j).  (Ignore the\n ML and MU arguments in this case.) In the band matrix case (MF = 24), load P(i-j+mu+1,j) with\n dr(i)/dy(j), i.e. load the diagonal lines of dr/dy into the rows of\n P from the top down. In either case, only nonzero elements need be loaded, and the\n indexing of P is the same as in the ADDA routine. Note that if A is independent of y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy. If it is not feasible to provide a JAC routine, use\n MF = 22 or 25, and DLSODI will compute an approximate Jacobian\n internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSODI compute\n this vector (ISTATE = 0).  (DLSODI will solve the system A * s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI. The input array YDOTI and the initial Y array must be consistent with\n the equations A * dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y) * YDOTI  must be approximately zero. F. Write a main program which calls Subroutine DLSODI once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODI.  On the first call to DLSODI, supply arguments as follows: RES name of user subroutine for residual function r. ADDA name of user subroutine for computing and adding A(t,y). JAC name of user subroutine for Jacobian matrix dr/dy\n (MF = 21 or 24).  If not used, pass a dummy name. Note: the names for the RES and ADDA routines and (if used) the\n JAC routine must be declared External in the calling program. NEQ number of scalar equations in the system. Y array of initial values, of length NEQ. YDOTI array of length NEQ (containing initial dy/dt if ISTATE = 1). T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control. Caution : Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1 if the\n initial dy/dt is supplied, and 0 otherwise. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 +  9*NEQ + NEQ**2           for MF = 21 or 22,\n       22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least 20 + NEQ.\n If MF = 24 or 25, input in IWORK(1),IWORK(2) the lower\n and upper half-bandwidths ML,MU. LIW declared length of IWORK (in user’s dimension). MF method flag.  Standard values are: value description 21 for a user-supplied full Jacobian. 22 for an internally generated full Jacobian. 24 for a user-supplied banded Jacobian. 25 for an internally generated banded Jacobian. for other choices of MF, see the paragraph on MF in\n the full description below. Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE allowed values and their descripitions: values description 2 if DLSODI was successful, negative otherwise. -1 means excess work done on this call (check all inputs). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 cannot occur in casual use. -8 means DLSODI was unable to compute the initial dy/dt. In casual use, this means A(t,y) is initially singular. Supply YDOTI and use ISTATE = 1 on the first call. If DLSODI returns ISTATE = -1, -4, or -5, then the output of\n  DLSODI also includes YDOTI = array containing residual vector\n  r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSODI again.  No other parameters need be reset. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODI.  The problem is from chemical\n kinetics, and consists of the following three equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n       0.   = y1 + y2 + y3 - 1. on the interval from t = 0.0 to t = 4.e10, with initial conditions y1 = 1.0, y2 = y3 = 0. The following coding solves this problem with DLSODI, using MF = 21\n and printing results at t = .4, 4., …, 4.e10.  It uses\n ITOL = 2 and ATOL much smaller for y2 than y1 or y3 because\n y2 has much smaller values.  dy/dt is supplied in YDOTI. We had\n obtained the initial value of dy3/dt by differentiating the\n third equation and evaluating the first two at t = 0.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsodi_ex use m_odepack implicit none external aplusp external dgbydy external resid integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y , ydoti integer :: iopt , iout , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 58 ) :: rwork call reference () neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. ydoti ( 1 ) = - . 04 ydoti ( 2 ) = . 04 ydoti ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 58 liw = 23 mf = 21 do iout = 1 , 12 call dlsodi ( resid , aplusp , dgbydy ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & atol , itask , istate , iopt , rwork , lrw , iwork , liw , mf ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0. endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99030 format ( / ' No. steps =' , i4 , '  No. r-s =' , i4 , '  No. J-s =' , i4 ) end program dlsodi_ex subroutine resid ( Neq , T , Y , S , R , Ires ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( in ), dimension ( 3 ) :: S real ( kind = dp ), intent ( out ), dimension ( 3 ) :: R integer :: Ires R ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) - S ( 1 ) R ( 2 ) = . 04 * Y ( 1 ) - 1.D4 * Y ( 2 ) * Y ( 3 ) - 3.D7 * Y ( 2 ) * Y ( 2 ) - S ( 2 ) R ( 3 ) = Y ( 1 ) + Y ( 2 ) + Y ( 3 ) - 1. end subroutine resid subroutine aplusp ( Neq , T , Y , Ml , Mu , P , Nrowp ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), dimension ( 3 ) :: Y integer :: Ml integer :: Mu real ( kind = dp ), intent ( inout ), dimension ( Nrowp , 3 ) :: P integer , intent ( in ) :: Nrowp P ( 1 , 1 ) = P ( 1 , 1 ) + 1. P ( 2 , 2 ) = P ( 2 , 2 ) + 1. end subroutine aplusp subroutine dgbydy ( Neq , T , Y , S , Ml , Mu , P , Nrowp ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), dimension ( 3 ) :: S integer :: Ml integer :: Mu real ( kind = dp ), intent ( out ), dimension ( Nrowp , 3 ) :: P integer , intent ( in ) :: Nrowp P ( 1 , 1 ) = - . 04 P ( 1 , 2 ) = 1.D4 * Y ( 3 ) P ( 1 , 3 ) = 1.D4 * Y ( 2 ) P ( 2 , 1 ) = . 04 P ( 2 , 2 ) = - 1.D4 * Y ( 3 ) - 6.D7 * Y ( 2 ) P ( 2 , 3 ) = - 1.D4 * Y ( 2 ) P ( 3 , 1 ) = 1. P ( 3 , 2 ) = 1. P ( 3 , 3 ) = 1. end subroutine dgbydy The output of this program (on a CDC-7600 in single precision)\n is as follows:\n\n   At t =  4.0000e-01   Y =  9.851726e-01  3.386406e-05  1.479357e-02\n   At t =  4.0000e+00   Y =  9.055142e-01  2.240418e-05  9.446344e-02\n   At t =  4.0000e+01   Y =  7.158050e-01  9.184616e-06  2.841858e-01\n   At t =  4.0000e+02   Y =  4.504846e-01  3.222434e-06  5.495122e-01\n   At t =  4.0000e+03   Y =  1.831701e-01  8.940379e-07  8.168290e-01\n   At t =  4.0000e+04   Y =  3.897016e-02  1.621193e-07  9.610297e-01\n   At t =  4.0000e+05   Y =  4.935213e-03  1.983756e-08  9.950648e-01\n   At t =  4.0000e+06   Y =  5.159269e-04  2.064759e-09  9.994841e-01\n   At t =  4.0000e+07   Y =  5.306413e-05  2.122677e-10  9.999469e-01\n   At t =  4.0000e+08   Y =  5.494532e-06  2.197826e-11  9.999945e-01\n   At t =  4.0000e+09   Y =  5.129457e-07  2.051784e-12  9.999995e-01\n   At t =  4.0000e+10   Y = -7.170472e-08 -2.868188e-13  1.000000e+00\n\n   No. steps = 330  No. r-s = 404  No. J-s =  69 Full Description of User Interface to DLSODI. The user interface to DLSODI consists of the following parts. The call sequence to Subroutine DLSODI, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODI package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODI package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF, and those used for both input and output are\n     Y, T, ISTATE, YDOTI. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODI to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES the name of the user-supplied subroutine which supplies\n the residual vector for the ODE system, defined by r = g(t,y) - A(t,y) * s as a function of the scalar t and the vectors\n s and y (s approximates dy/dt).  This subroutine\n is to have the form SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) where NEQ, T, Y, S, and IRES are input, and R and\n IRES are output.  Y, S, and R are arrays of length NEQ. On input, IRES indicates how DLSODI will use the\n returned array R, as follows: IRES description 1 means that DLSODI needs the full residual, r = g - A*s, exactly. -1 means that DLSODI is using R only to compute the Jacobian dr/dy by difference quotients. The RES routine can ignore IRES, or it can omit some terms\n if IRES = -1.  If A does not depend on y, then RES can\n just return R = g when IRES = -1.  If g - A*s contains other\n additive terms that are independent of y, these can also be\n dropped, if done consistently, when IRES = -1. The subroutine should set the flag IRES if it\n encounters a halt condition or illegal input.\n Otherwise, it should not reset IRES.  On output, IRES = 1 or -1 represents a normal return, and\n DLSODI continues integrating the ODE.  Leave IRES\n unchanged from its input value. IRES = 2 tells DLSODI to immediately return control\n to the calling program, with ISTATE = 3.  This lets\n the calling program change parameters of the problem,\n if necessary. IRES = 3 represents an error condition (for example, an\n illegal value of y).  DLSODI tries to integrate the system\n without getting IRES = 3 from RES.  If it cannot, DLSODI\n returns with ISTATE = -7 or -1. On an DLSODI return with ISTATE = 3, -1, or -7, the values\n of T and Y returned correspond to the last point reached\n successfully without getting the flag IRES = 2 or 3. The flag values IRES = 2 and 3 should not be used to\n handle switches or root-stop conditions.  This is better\n done by calling DLSODI in a one-step mode and checking the\n stopping function for a sign change at each step. If quantities computed in the RES routine are needed\n externally to DLSODI, an extra call to RES should be made\n for this purpose, for consistent and accurate results.\n To get the current dy/dt for the S argument, use DINTDY. RES must be declared External in the calling\n program.  See note below for more about RES. ADDA the name of the user-supplied subroutine which adds the\n matrix A = A(t,y) to another matrix stored in the same form\n as A.  The storage form is determined by MITER (see MF).\n This subroutine is to have the form SUBROUTINE ADDA (NEQ, T, Y, ML, MU, P, NROWP)\n               DOUBLE PRECISION T, Y(*), P(NROWP,*) where NEQ, T, Y, ML, MU, and NROWP are input and P is\n output.  Y is an array of length NEQ, and the matrix P is\n stored in an NROWP by NEQ array. In the full matrix case ( MITER = 1 or 2) ADDA should\n add  A    to P(i,j).  ML and MU are ignored.\n       i,j\n\n In the band matrix case ( MITER = 4 or 5) ADDA should\n add  A    to  P(i-j+MU+1,j).\n       i,j See JAC for details on this band storage form. ADDA must be declared External in the calling program.\n See note below for more information about ADDA. JAC the name of the user-supplied subroutine which supplies the\n Jacobian matrix, dr/dy, where r = g - A*s.  The form of the\n Jacobian matrix is determined by MITER.  JAC is required\n if MITER = 1 or 4 – otherwise a dummy name can be\n passed.  This subroutine is to have the form SUBROUTINE JAC ( NEQ , T , Y , S , ML , MU , P , NROWP ) DOUBLE PRECISION T , Y ( * ), S ( * ), P ( NROWP , * ) where NEQ, T, Y, S, ML, MU, and NROWP are input and P\n is output.  Y and S are arrays of length NEQ, and the\n matrix P is stored in an NROWP by NEQ array.\n P is to be loaded with partial derivatives (elements\n of the Jacobian matrix) on output. In the full matrix case (MITER = 1), ML and MU\n are ignored and the Jacobian is to be loaded into P\n by columns– i.e., dr(i)/dy(j) is loaded into P(i,j). In the band matrix case (MITER = 4), the elements\n within the band are to be loaded into P by columns,\n with diagonal lines of dr/dy loaded into the\n rows of P.  Thus dr(i)/dy(j) is to be loaded\n into P(i-j+MU+1,j).  The locations in P in the two\n triangular areas which correspond to nonexistent matrix\n elements can be ignored or loaded arbitrarily, as they\n they are overwritten by DLSODI.  ML and MU are the\n half-bandwidth parameters (see IWORK). In either case, P is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to RES with the same\n arguments NEQ, T, Y, and S.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by RES and not recomputed by JAC\n if desired.  Also, JAC may alter the Y array, if desired. JAC need not provide dr/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. JAC must be declared External in the calling program.\n See note below for more about JAC. Notes on RES, ADDA, and JAC: These subroutines may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in the subroutines) and/or Y has length\n exceeding NEQ(1).  However, these routines should not alter\n NEQ(1), Y(1),…,Y(NEQ) or any other input variables.\n See the descriptions of NEQ and Y below. NEQ the size of the system (number of first order ordinary\n differential equations or scalar algebraic equations).\n Used only for input. NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in RES, ADDA, or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODI package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to RES, ADDA, and JAC.  Hence, if it is an array,\n locations NEQ(2),… may be used to store other integer data\n and pass it to RES, ADDA, or JAC.  Each such subroutine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 0 or 1), and only for output on other\n calls.  On the first call, Y must contain the vector of\n initial values.  On output, Y contains the computed solution\n vector, evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n ADDA, and JAC.  Hence its length may exceed NEQ,\n and locations Y(NEQ+1),… may be used to store other real\n data and pass it to RES, ADDA, or JAC.  (The DLSODI\n package accesses only Y(1),…,Y(NEQ). ) YDOTI a real array for the initial value of the vector\n dy/dt and for work space, of dimension at least NEQ. On input: If ISTATE = 0, then DLSODI will compute the initial value\n of dy/dt, if A is nonsingular.  Thus YDOTI will\n serve only as work space and may have any value. If ISTATE = 1, then YDOTI must contain the initial value\n of dy/dt. If ISTATE = 2 or 3 (continuation calls), then YDOTI\n may have any value. Note: If the initial value of A is singular, then\n DLSODI cannot compute the initial value of dy/dt, so\n it must be provided in YDOTI, with ISTATE = 1. On output, when DLSODI terminates abnormally with ISTATE =\n -1, -4, or -5, YDOTI will contain the residual\n r = g(t,y) - A(t,y)*(dy/dt).  If r is large, t is near\n its initial value, and YDOTI is supplied with ISTATE = 1,\n then there may have been an incorrect input value of\n YDOTI = dy/dt, or the problem (as given to DLSODI)\n may not have a solution. If desired, the YDOTI array may be used for other\n purposes between calls to the solver. T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n on an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 0 or 1), TOUT may be\n equal to T for one call, then should .ne. T for the next\n call.  For the initial T, an input value of TOUT .ne. T is\n used in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is RMS-norm(v) = SQRT(sum v(i)**2 / NEQ) Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array scalar RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n state of the calculation. On input, the values of ISTATE are as follows. value description 0 means this is the first call for the problem, and DLSODI is to compute the initial value of dy/dt (while doing other initializations).  See note below. 1 means this is the first call for the problem, and the initial value of dy/dt has been supplied in YDOTI (DLSODI will do other initializations).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, ML, MU, and any of the optional inputs except H0. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 0 or 1 on input. On output, ISTATE has the following values and meanings. value description 0 or 1  means nothing was done; TOUT = t and ISTATE = 0 or 1 on input. 2 means that the integration was performed successfully. 3 means that the user-supplied Subroutine RES signalled DLSODI to halt the integration and return (IRES = 2). Integration as far as T was achieved with no occurrence of IRES = 2, but this flag was set on attempting the next step. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix. -6 means EWT(i) became zero for some i during the integration.  pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. the integration was successful as far as T. -7 means that the user-supplied Subroutine RES set its error flag (IRES = 3) despite repeated tries by DLSODI to avoid that condition. -8 means that ISTATE was 0 on input but DLSODI was unable to compute the initial value of dy/dt.  See the printed message for details. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Similarly, ISTATE (= 3) need not be reset if RES told\n DLSODI to return because the calling program must change\n the parameters of the problem.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT description 0 means no optional inputs are being used. Default values will be used in all cases. 1 means one or more optional inputs are being used. RWORK a real working array (double precision).\n The length of RWORK must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LENWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENWM   = NEQ**2 + 2    if MITER is 1 or 2, and\n          LENWM   = (2*ML+MU+1)*NEQ + 2 if MITER is 4 or 5. (See MF description for the definition of METH and MITER.)\n Thus if MAXORD has its default value and NEQ is constant,\n this length is 22 + 16*NEQ + NEQ**2         for MF = 11 or 12,\n             22 + 17*NEQ + (2*ML+MU)*NEQ  for MF = 14 or 15,\n             22 +  9*NEQ + NEQ**2         for MF = 21 or 22,\n             22 + 10*NEQ + (2*ML+MU)*NEQ  for MF = 24 or 25. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least\n 20 + NEQ .  The first few words of IWORK are used for\n conditional and optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs: IWORK(1) = ML\n      IWORK(2) = MU These are the lower and upper half-bandwidths, respectively, of the\n matrices in the problem– the Jacobian dr/dy and the left-hand side\n matrix A. These half-bandwidths exclude the main diagonal, so the total\n bandwidth is ML + MU + 1 . The band is defined by the matrix locations (i,j) with i-ML .le. j\n .le. i+MU.  ML and MU must satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are\n required if MITER is 4 or 5, and ignored otherwise. ML and MU may in fact be the band parameters for matrices to which\n dr/dy and A are only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODI\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODI between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF the method flag.  Used only for input.  The legal values of\n MF are 11, 12, 14, 15, 21, 22, 24, and 25. MF has decimal digits METH and MITER: MF = 10*METH + MITER. METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). The BDF method is strongly preferred for stiff\n problems, while the Adams method is preferred when\n the problem is not stiff.  If the matrix A(t,y) is\n nonsingular, stiffness here can be taken to mean that of\n the explicit ODE system dy/dt = A-inverse * g.  If A is\n singular, the concept of stiffness is not well defined. If you do not know whether the problem is stiff, we\n recommend using METH = 2.  If it is stiff, the advantage\n of METH = 2 over METH = 1 will be great, while if it is\n not stiff, the advantage of METH = 1 will be slight.\n If maximum efficiency is important, some experimentation\n with METH may be necessary. MITER indicates the corrector iteration method: MITER description 1 means chord iteration with a user-supplied full (NEQ by NEQ) Jacobian. 2 means chord iteration with an internally generated (difference quotient) full Jacobian. This uses NEQ+1 extra calls to RES per dr/dy evaluation. 4 means chord iteration with a user-supplied banded Jacobian. 5 means chord iteration with an internally generated banded Jacobian (using ML+MU+2 extra calls to RES per dr/dy evaluation). If MITER = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n For other values of MITER, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n the use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSODI, the variables listed\n below are quantities related to the performance of DLSODI\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODI, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NRE IWORK(12) the number of residual evaluations (RES calls) for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (each involving an evaluation of A and dr/dy) for the problem so far.  This equals the number of calls to ADDA and (if MITER = 1 or 4) JAC, and the number of matrix LU decompositions. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step. This is the vector E in the descrip- tion of the error control.  It is defined only on a return from DLSODI with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODI.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODI, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODI. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODI (see Part 3 below). RSAV must be a real array of length 218 or more, and ISAV must be an integer array of length 37 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCOM is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODI. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODI. The detailed instructions for using DINTDY are as follows. The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODI).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODI directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODI is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODI call prior to the\n interruption, the contents of the call sequence variables and the\n internal state values, and later restore these values before the\n next DLSODI call for that problem.  To save and restore the values\n use Subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODI package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODI call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODI in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODI.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might: substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. Pedigree: DLSODI is a derived from the 18 November 2003 version of\n “DLSODI: Livermore Solver for Ordinary Differential Equations\n (implicit form)”. Reference: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n North-Holland, Amsterdam, 1983, pp. 55-64. Authors: Alan C. Hindmarsh and Jeffrey F. Painter\n      Center for Applied Scientific Computing, L-561\n      Lawrence Livermore National Laboratory\n      Livermore, CA 94551 Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf Calls proc~~dlsodi~~CallsGraph proc~dlsodi dlsodi proc~dewset dewset proc~dlsodi->proc~dewset proc~dstodi dstodi proc~dlsodi->proc~dstodi proc~dainvg dainvg proc~dlsodi->proc~dainvg proc~dvnorm dvnorm proc~dlsodi->proc~dvnorm proc~xerrwd xerrwd proc~dlsodi->proc~xerrwd proc~dumach dumach proc~dlsodi->proc~dumach proc~dintdy dintdy proc~dlsodi->proc~dintdy proc~dstodi->proc~dvnorm proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dgefa dgefa proc~dainvg->proc~dgefa proc~dgesl dgesl proc~dainvg->proc~dgesl proc~dintdy->proc~xerrwd proc~dscal dscal proc~dgefa->proc~dscal proc~daxpy daxpy proc~dgefa->proc~daxpy proc~dgesl->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodi.html"},{"title":"dlsodis – odepack","text":"public subroutine dlsodis(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) Synopsis DLSODIS solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ\n\n      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n           i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSODIS is a variant version of the DLSODI package, and is intended\n for stiff problems in which the matrix A and the Jacobian matrix\n d(g - A*s)/dy have arbitrary sparse structures. This version is in double precision. Summary of Usage. Communication between the user and the DLSODIS package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form: SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) which computes the residual function r = g(t,y)  -  A(t,y) * s , as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSODIS.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. DLSODIS must deal internally with the matrices A and dr/dy, where\n r is the residual function defined above.  DLSODIS generates a linear\n combination of these two matrices in sparse form.\n      The matrix structure is communicated by a method flag, MF:\n         MF =  21 or  22     when the user provides the structures of\n                             matrix A and dr/dy,\n         MF = 121 or 222     when the user does not provide structure\n                             information, and\n         MF = 321 or 422     when the user provides the structure\n                             of matrix A. C. You must also provide a subroutine of the form: SUBROUTINE ADDA ( NEQ , T , Y , J , IAN , JAN , P ) DOUBLE PRECISION T , Y ( * ), P ( * ) INTEGER IAN ( * ), JAN ( * ) which adds the matrix A = A(t,y) to the contents of the array P.\n NEQ, T, Y, and J are input arguments and should not be altered.\n This routine should add the J-th column of matrix A to the array\n P (of length NEQ).  I.e. add A(i,J) to P(i) for all relevant\n values of i.  The arguments IAN and JAN should be ignored for normal\n situations.  DLSODIS will call the ADDA routine with J = 1,2,…,NEQ. D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)*s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21, 121, or 321, and provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , S , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), S ( * ), PDJ ( * ) INTEGER IAN ( * ), JAN ( * ) which computes dr/dy as a function of t, y, and s.  Here NEQ, T, Y, S,\n and J are input arguments, and the JAC routine is to load the array\n PDJ (of length NEQ) with the J-th column of dr/dy.  I.e. load PDJ(i)\n with dr(i)/dy(J) for all relevant values of i.  The arguments IAN and\n JAN should be ignored for normal situations.  DLSODIS will call the\n JAC routine with J = 1,2,…,NEQ. Only nonzero elements need be loaded.  A crude approximation\n to dr/dy, possibly with fewer nonzero elememts, will suffice.\n Note that if A is independent of y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy. If it is not feasible to provide a JAC routine, use\n MF = 22, 222, or 422 and DLSODIS will compute an approximate\n Jacobian internally by difference quotients. E . Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSODIS compute\n this vector (ISTATE = 0).  (DLSODIS will solve the system A*s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI. The input array YDOTI and the initial Y array must be consistent with\n the equations A*dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI   must be approximately zero. F. Write a main program which calls Subroutine DLSODIS once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODIS.  On the first call to DLSODIS, supply arguments as follows: RES name of user subroutine for residual function r. ADDA name of user subroutine for computing and adding A(t,y). JAC name of user subroutine for Jacobian matrix dr/dy\n (MF = 121).  If not used, pass a dummy name.\n Note: The names for the RES and ADDA routines and (if used) the JAC routine must be declared External in the calling program. NEQ number of scalar equations in the system. Y array of initial values, of length NEQ. YDOTI array of length NEQ (containing initial dy/dt if ISTATE = 1). T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n The estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n        EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1 if the\n initial dy/dt is supplied, and 0 otherwise. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + (2 + 1./LENRAT)*NNZ + (11 + 9./LENRAT)*NEQ where: NNZ    = the number of nonzero elements in the sparse\n                   iteration matrix  P = A - con\\*dr/dy (con = scalar)\n                   (If NNZ is unknown, use an estimate of it.)\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision). In any case, the required size of RWORK cannot generally\n be predicted in advance for any value of MF, and the\n value above is a rough estimate of a crude lower bound.\n Some experimentation with this size may be necessary.\n (When known, the correct required length is an optional\n output, available in IWORK(17).) LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least 30. LIW declared length of IWORK (in user’s dimension). MF method flag.  Standard values are: 121 for a user-supplied sparse Jacobian.\n      222 for an internally generated sparse Jacobian. For other choices of MF, see the paragraph on MF in\n the full description below. Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call, or any call, is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE value and their meanings: value descriptions 2 if DLSODIS was successful, negative otherwise. -1 means excess work done on this call (check all inputs). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 cannot occur in casual use. -8 means DLSODIS was unable to compute the initial dy/dt. in casual use, this means A(t,y) is initially singular. Supply YDOTI and use ISTATE = 1 on the first call. -9 means a fatal error return flag came from sparse solver CDRV by way of DPRJIS or DSOLSS.  Should never happen. A return with ISTATE = -1, -4, or -5, may result from using\n an inappropriate sparsity structure, one that is quite\n different from the initial structure.  Consider calling\n DLSODIS again with ISTATE = 3 to force the structure to be\n reevaluated.  See the full description of ISTATE below. If DLSODIS returns ISTATE = -1, -4  or -5, then the output of\n DLSODIS also includes YDOTI = array containing residual vector\n r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSODIS again.  No other parameters need be reset. Example Problem. The following is an example problem, with the coding needed\n for its solution by DLSODIS.  The problem comes from the partial\n differential equation (the Burgers equation) du/dt  =  - u * du/dx  +  eta * d**2 u/dx**2,   eta = .05,\n on -1 .le. x .le. 1.  The boundary conditions are periodic:\n   u(-1,t) = u(1,t)  and  du/dx(-1,t) = du/dx(1,t)\n The initial profile is a square wave,\n   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere.\n The PDE is discretized in x by a simplified Galerkin method,\n using piecewise linear basis functions, on a grid of 40 intervals.\n The result is a system A * dy/dt = g(y), of size NEQ = 40,\n where y(i) is the approximation to u at x = x(i), with\n x(i) = -1 + (i-1)*delx, delx = 2/NEQ = .05.\n The individual equations in the system are (in order):\n  (1/6)dy(NEQ)/dt+(4/6)dy(1)/dt+(1/6)dy(2)/dt\n       = r4d*(y(NEQ)**2-y(2)**2)+eodsq*(y(2)-2*y(1)+y(NEQ))\n for i = 2,3,...,nm1,\n  (1/6)dy(i-1)/dt+(4/6)dy(i)/dt+(1/6)dy(i+1)/dt\n       = r4d*(y(i-1)**2-y(i+1)**2)+eodsq*(y(i+1)-2*y(i)+y(i-1))\n and finally\n  (1/6)dy(nm1)/dt+(4/6)dy(NEQ)/dt+(1/6)dy(1)/dt\n       = r4d*(y(nm1)**2-y(1)**2)+eodsq*(y(1)-2*y(NEQ)+y(nm1))\n where r4d = 1/(4*delx), eodsq = eta/delx**2 and nm1 = NEQ-1. The following coding solves the problem with MF = 121, with output\n of solution statistics at t = .1, .2, .3, and .4, and of the\n solution vector at t = .4.  Optional outputs (run statistics) are\n also printed. module c_test1 implicit none integer , parameter , private :: dp = kind ( 0.0d0 ) real ( kind = dp ), public :: EODsq , R4D integer , public :: NM1 end module c_test1 program dlsodis_ex use m_odepack use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) external :: addasp external :: jacsp external :: resid real ( kind = dp ), save :: atol , rtol real ( kind = dp ) :: delx , t , tout integer :: i , io , istate , nnzlu integer , save :: iopt , itask , itol , liw , lrw , mf , neq integer , dimension ( 30 ) :: iw real ( kind = dp ), dimension ( 1409 ) :: rw real ( kind = dp ), dimension ( 40 ) :: y , ydoti data itol / 1 / , rtol / 1.0D-3 / , atol / 1.0D-3 / , itask / 1 / , iopt / 0 / data neq / 40 / , lrw / 1409 / , liw / 30 / , mf / 121 / delx = 2.0 / neq R4D = 0.25 / delx EODsq = 0.05 / delx ** 2 NM1 = neq - 1 do i = 1 , neq y ( i ) = 0.0 enddo y ( 11 ) = 0.5 do i = 12 , 30 y ( i ) = 1.0 enddo y ( 31 ) = 0.5 t = 0.0 tout = 0.1 istate = 0 do io = 1 , 4 call dlsodis ( resid , addasp , jacsp ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & [ atol ], itask , istate , iopt , rw , lrw , iw , liw , mf ) write ( 6 , 99010 ) t , iw ( 11 ), rw ( 11 ) 99010 format ( ' At t =' , f5 . 2 , '   No. steps =' , i4 , '    Last step =' , & & d12 . 4 ) if ( istate /= 2 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout + 0.1 endif enddo write ( 6 , 99030 ) ( y ( i ), i = 1 , neq ) 99030 format ( / ' Final solution values..' / 8 ( 5 D12 . 4 / )) write ( 6 , 99040 ) iw ( 17 ), iw ( 18 ), iw ( 11 ), iw ( 12 ), iw ( 13 ) 99040 format ( / ' Required RW size =' , i5 , '   IW size =' , & & i4 / ' No. steps =' , i4 , '   No. r-s =' , i4 , '   No. J-s =' , i4 ) nnzlu = iw ( 25 ) + iw ( 26 ) + neq write ( 6 , 99050 ) iw ( 19 ), nnzlu 99050 format ( ' No. of nonzeros in P matrix =' , i4 , & & '   No. of nonzeros in LU =' , i4 ) end program dlsodis_ex subroutine gfun ( N , T , Y , G ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), intent ( out ), dimension ( N ) :: G integer :: i G ( 1 ) = R4D * ( Y ( N ) ** 2 - Y ( 2 ) ** 2 ) + EODsq * ( Y ( 2 ) - 2.0 * Y ( 1 ) + Y ( N )) do i = 2 , NM1 G ( i ) = R4D * ( Y ( i - 1 ) ** 2 - Y ( i + 1 ) ** 2 ) + EODsq * ( Y ( i + 1 ) - 2.0 * Y ( i ) + Y ( i - 1 )) enddo G ( N ) = R4D * ( Y ( NM1 ) ** 2 - Y ( 1 ) ** 2 ) + EODsq * ( Y ( 1 ) - 2.0 * Y ( N ) + Y ( NM1 )) end subroutine gfun subroutine resid ( N , T , Y , S , R , Ires ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) external :: gfun integer :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y real ( kind = dp ), intent ( in ), dimension ( N ) :: S real ( kind = dp ), intent ( inout ), dimension ( N ) :: R integer :: Ires integer :: i call gfun ( N , T , Y , R ) R ( 1 ) = R ( 1 ) - ( S ( N ) + 4.0 * S ( 1 ) + S ( 2 )) / 6.0 do i = 2 , NM1 R ( i ) = R ( i ) - ( S ( i - 1 ) + 4.0 * S ( i ) + S ( i + 1 )) / 6.0 enddo R ( N ) = R ( N ) - ( S ( NM1 ) + 4.0 * S ( N ) + S ( 1 )) / 6.0 end subroutine resid subroutine addasp ( N , T , Y , J , Ip , Jp , P ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y integer , intent ( in ) :: J integer , dimension ( * ) :: Ip integer , dimension ( * ) :: Jp real ( kind = dp ), intent ( inout ), dimension ( N ) :: P integer :: jm1 , jp1 jm1 = J - 1 jp1 = J + 1 if ( J == N ) jp1 = 1 if ( J == 1 ) jm1 = N P ( J ) = P ( J ) + ( 2.0 / 3.0 ) P ( jp1 ) = P ( jp1 ) + ( 1.0 / 6.0 ) P ( jm1 ) = P ( jm1 ) + ( 1.0 / 6.0 ) end subroutine addasp subroutine jacsp ( N , T , Y , S , J , Ip , Jp , Pdj ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), dimension ( N ) :: S integer , intent ( in ) :: J integer , dimension ( * ) :: Ip integer , dimension ( * ) :: Jp real ( kind = dp ), intent ( out ), dimension ( N ) :: Pdj integer :: jm1 , jp1 jm1 = J - 1 jp1 = J + 1 if ( J == 1 ) jm1 = N if ( J == N ) jp1 = 1 Pdj ( jm1 ) = - 2.0 * R4D * Y ( J ) + EODsq Pdj ( J ) = - 2.0 * EODsq Pdj ( jp1 ) = 2.0 * R4D * Y ( J ) + EODsq end subroutine jacsp The output of this program (on a CDC-7600 in single precision)\n is as follows: At t = 0.10   No. steps =  15    Last step =  1.6863e-02\n At t = 0.20   No. steps =  19    Last step =  2.4101e-02\n At t = 0.30   No. steps =  22    Last step =  4.3143e-02\n At t = 0.40   No. steps =  24    Last step =  5.7819e-02\n\n Final solution values..\n  1.8371e-02  1.3578e-02  1.5864e-02  2.3805e-02  3.7245e-02\n  5.6630e-02  8.2538e-02  1.1538e-01  1.5522e-01  2.0172e-01\n  2.5414e-01  3.1150e-01  3.7259e-01  4.3608e-01  5.0060e-01\n  5.6482e-01  6.2751e-01  6.8758e-01  7.4415e-01  7.9646e-01\n  8.4363e-01  8.8462e-01  9.1853e-01  9.4500e-01  9.6433e-01\n  9.7730e-01  9.8464e-01  9.8645e-01  9.8138e-01  9.6584e-01\n  9.3336e-01  8.7497e-01  7.8213e-01  6.5315e-01  4.9997e-01\n  3.4672e-01  2.1758e-01  1.2461e-01  6.6208e-02  3.3784e-02\n\n Required RW size = 1409   IW size =  30\n No. steps =  24   No. r-s =  33   No. J-s =   8\n No. of nonzeros in P matrix = 120   No. of nonzeros in LU = 194 Full Description of User Interface to DLSODIS. The user interface to DLSODIS consists of the following parts. The call sequence to Subroutine DLSODIS, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODIS package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODIS package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF, and those used for both input and output are\n     Y, T, ISTATE, YDOTI. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODIS to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES the name of the user-supplied subroutine which supplies\n the residual vector for the ODE system, defined by r = g(t,y) - A(t,y) * s as a function of the scalar t and the vectors\n s and y (s approximates dy/dt).  This subroutine\n is to have the form SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) where NEQ, T, Y, S, and IRES are input, and R and\n IRES are output.  Y, S, and R are arrays of length NEQ. On input, IRES indicates how DLSODIS will use the\n returned array R, as follows: IRES = 1  means that DLSODIS needs the full residual,\n                       r = g - A\\*s, exactly.\n             IRES = -1 means that DLSODIS is using R only to compute\n                       the Jacobian dr/dy by difference quotients. The RES routine can ignore IRES, or it can omit some terms\n if IRES = -1.  If A does not depend on y, then RES can\n just return R = g when IRES = -1.  If g - A*s contains other\n additive terms that are independent of y, these can also be\n dropped, if done consistently, when IRES = -1. The subroutine should set the flag IRES if it\n encounters a halt condition or illegal input.\n Otherwise, it should not reset IRES.  On output, IRES = 1 or -1 represents a normal return, and\n DLSODIS continues integrating the ODE.  Leave IRES\n unchanged from its input value. IRES = 2 tells DLSODIS to immediately return control\n to the calling program, with ISTATE = 3.  This lets\n the calling program change parameters of the problem\n if necessary. IRES = 3 represents an error condition (for example, an\n illegal value of y).  DLSODIS tries to integrate the system\n without getting IRES = 3 from RES.  If it cannot, DLSODIS\n returns with ISTATE = -7 or -1. On a return with ISTATE = 3, -1, or -7, the values\n of T and Y returned correspond to the last point reached\n successfully without getting the flag IRES = 2 or 3. The flag values IRES = 2 and 3 should not be used to\n handle switches or root-stop conditions.  This is better\n done by calling DLSODIS in a one-step mode and checking the\n stopping function for a sign change at each step. If quantities computed in the RES routine are needed\n externally to DLSODIS, an extra call to RES should be made\n for this purpose, for consistent and accurate results.\n To get the current dy/dt for the S argument, use DINTDY. RES must be declared External in the calling\n program.  See note below for more about RES. ADDA the name of the user-supplied subroutine which adds the\n matrix A = A(t,y) to another matrix stored in sparse form.\n This subroutine is to have the form SUBROUTINE ADDA ( NEQ , T , Y , J , IAN , JAN , P ) DOUBLE PRECISION T , Y ( * ), P ( * ) INTEGER IAN ( * ), JAN ( * ) where NEQ, T, Y, J, IAN, JAN, and P  are input.  This routine\n should add the J-th column of matrix A to the array P, of\n length NEQ.  Thus a(i,J) is to be added to P(i) for all\n relevant values of i.  Here T and Y have the same meaning as\n in Subroutine RES, and J is a column index (1 to NEQ).\n IAN and JAN are undefined in calls to ADDA for structure\n determination (MOSS .ne. 0).  Otherwise, IAN and JAN are\n structure descriptors, as defined under optional outputs\n below, and so can be used to determine the relevant row\n indices i, if desired. Calls to ADDA are made with J = 1,…,NEQ, in that\n order.  ADDA must not alter its input arguments. ADDA must be declared External in the calling program.\n See note below for more information about ADDA. JAC the name of the user-supplied subroutine which supplies\n the Jacobian matrix, dr/dy, where r = g - A*s.  JAC is\n required if MITER = 1, or MOSS = 1 or 3.  Otherwise a dummy\n name can be passed.  This subroutine is to have the form SUBROUTINE JAC ( NEQ , T , Y , S , J , IAN , JAN , PDJ ) DOUBLE PRECISION T , Y ( * ), S ( * ), PDJ ( * ) INTEGER IAN ( * ), JAN ( * ) where NEQ, T, Y, S, J, IAN, and JAN are input.  The\n array PDJ, of length NEQ, is to be loaded with column J\n of the Jacobian on output.  Thus dr(i)/dy(J) is to be\n loaded into PDJ(i) for all relevant values of i. Here T, Y, and S have the same meaning as in Subroutine RES,\n and J is a column index (1 to NEQ).  IAN and JAN\n are undefined in calls to JAC for structure determination\n (MOSS .ne. 0).  Otherwise, IAN and JAN are structure\n descriptors, as defined under optional outputs below, and\n so can be used to determine the relevant row indices i, if\n desired. JAC need not provide dr/dy exactly.  A crude\n approximation (possibly with greater sparsity) will do. In any case, PDJ is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Calls to JAC are made with J = 1,…,NEQ, in that order, and\n each such set of calls is preceded by a call to RES with the\n same arguments NEQ, T, Y, S, and IRES.  Thus to gain some\n efficiency intermediate quantities shared by both calculations\n may be saved in a user Common block by RES and not recomputed\n by JAC, if desired.  JAC must not alter its input arguments. JAC must be declared External in the calling program. See note below for more about JAC. Note on RES, ADDA, and JAC: These subroutines may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in the subroutines) and/or Y has length\n exceeding NEQ(1).  However, these subroutines should not\n alter NEQ(1), Y(1),…,Y(NEQ) or any other input variables.\n See the descriptions of NEQ and Y below. NEQ the size of the system (number of first order ordinary\n differential equations or scalar algebraic equations).\n Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in RES, ADDA, or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODIS package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to RES, ADDA, and JAC.  Hence, if it is an array,\n locations NEQ(2),… may be used to store other integer data\n and pass it to RES, ADDA, or JAC.  Each such subroutine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 0 or 1), and only for output on other\n calls.  On the first call, Y must contain the vector of\n initial values.  On output, Y contains the computed solution\n vector, evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n ADDA, and JAC.  Hence its length may exceed NEQ,\n and locations Y(NEQ+1),… may be used to store other real\n data and pass it to RES, ADDA, or JAC.  (The DLSODIS\n package accesses only Y(1),…,Y(NEQ). ) YDOTI a real array for the initial value of the vector\n dy/dt and for work space, of dimension at least NEQ. On input: If ISTATE = 0 then DLSODIS will compute the initial value\n of dy/dt, if A is nonsingular.  Thus YDOTI will\n serve only as work space and may have any value. If ISTATE = 1 then YDOTI must contain the initial value\n of dy/dt. If ISTATE = 2 or 3 (continuation calls) then YDOTI\n may have any value. Note: If the initial value of A is singular, then\n DLSODIS cannot compute the initial value of dy/dt, so\n it must be provided in YDOTI, with ISTATE = 1. On output, when DLSODIS terminates abnormally with ISTATE =\n -1, -4, or -5, YDOTI will contain the residual\n r = g(t,y) - A(t,y)*(dy/dt).  If r is large, t is near\n its initial value, and YDOTI is supplied with ISTATE = 1,\n there may have been an incorrect input value of\n YDOTI = dy/dt, or the problem (as given to DLSODIS)\n may not have a solution. If desired, the YDOTI array may be used for other\n purposes between calls to the solver. T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 0 or 1), TOUT may be\n equal to T for one call, then should .ne. T for the next\n call.  For the initial T, an input value of TOUT .ne. T is\n used in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array scalar RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n state of the calculation. On input, the values of ISTATE are as follows. value description 0 means this is the first call for the problem, and DLSODIS is to compute the initial value of dy/dt (while doing other initializations).  See note below. 1 means this is the first call for the problem, and the initial value of dy/dt has been supplied in YDOTI (DLSODIS will do other initializations). See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, the conditional inputs IA, JA, IC, and JC, and any of the optional inputs except H0. A call with ISTATE = 3 will cause the sparsity structure of the problem to be recomputed. (Structure information is reread from IA and JA if MOSS = 0, 3, or 4 and from IC and JC if MOSS = 0). Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 0 or 1 on input. On output, ISTATE has the following values and meanings. value description 0 or 1 means nothing was done; TOUT = T and ISTATE = 0 or 1 on input. 2 means that the integration was performed successfully. 3 means that the user-supplied Subroutine RES signalled DLSODIS to halt the integration and return (IRES = 2). Integration as far as T was achieved with no occurrence of IRES = 2, but this flag was set on attempting the next step. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i) = 0.0) was requested on a variable which has now vanished. the integration was successful as far as T. -7 means that the user-supplied Subroutine RES set its error flag (IRES = 3) despite repeated tries by DLSODIS to avoid that condition. -8 means that ISTATE was 0 on input but DLSODIS was unable to compute the initial value of dy/dt.  See the printed message for details. -9 means a fatal error return flag came from the sparse solver CDRV by way of DPRJIS or DSOLSS (numerical factorization or backsolve).  This should never happen. The integration was successful as far as T. Note: An error return with ISTATE = -1, -4, or -5\n may mean that the sparsity structure of the\n problem has changed significantly since it was last\n determined (or input).  In that case, one can attempt to\n complete the integration by setting ISTATE = 3 on the next\n call, so that a new structure determination is done. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n similarly, ISTATE (= 3) need not be reset if RES told\n DLSODIS to return because the calling program must change\n the parameters of the problem.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a work array used for a mixture of real (double precision)\n and integer work space. The length of RWORK (in real words) must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LWM where NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LWM = 2*NNZ + 2*NEQ + (NNZ+9*NEQ)/LENRAT   if MITER = 1,\n          LWM = 2*NNZ + 2*NEQ + (NNZ+10*NEQ)/LENRAT  if MITER = 2. in the above formulas, NNZ    = number of nonzero elements in the iteration matrix\n                   P = A - con*J  (con is a constant and J is the\n                   Jacobian matrix dr/dy).\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          (See the MF description for METH and MITER.) Thus if MAXORD has its default value and NEQ is constant,\n the minimum length of RWORK is: 20 + 16*NEQ + LWM  for MF = 11, 111, 311, 12, 212, 412,\n             20 +  9*NEQ + LWM  for MF = 21, 121, 321, 22, 222, 422. The above formula for LWM is only a crude lower bound.\n The required length of RWORK cannot be readily predicted\n in general, as it depends on the sparsity structure\n of the problem.  Some experimentation may be necessary. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least 32 + 2*NEQ + NZA + NZC   for MOSS = 0,\n      30                       for MOSS = 1 or 2,\n      31 + NEQ + NZA           for MOSS = 3 or 4. (NZA is the number of nonzero elements in matrix A, and\n NZC is the number of nonzero elements in dr/dy.) In DLSODIS, IWORK is used for conditional and\n optional inputs and optional outputs. The following two blocks of words in IWORK are conditional\n inputs, required if MOSS = 0, 3, or 4, but not otherwise\n (see the description of MF for MOSS). IWORK(30+j) = IA(j)     (j=1,...,NEQ+1)\n  IWORK(31+NEQ+k) = JA(k) (k=1,...,NZA) The two arrays IA and JA describe the sparsity structure\n to be assumed for the matrix A.  JA contains the row\n indices where nonzero elements occur, reading in columnwise\n order, and IA contains the starting locations in JA of the\n descriptions of columns 1,…,NEQ, in that order, with\n IA(1) = 1.  Thus, for each column index j = 1,…,NEQ, the\n values of the row index i in column j where a nonzero\n element may occur are given by i = JA(k),  where   IA(j) .le. k .lt. IA(j+1). If NZA is the total number of nonzero locations assumed,\n then the length of the JA array is NZA, and IA(NEQ+1) must\n be NZA + 1.  Duplicate entries are not allowed.\n The following additional blocks of words are required\n if MOSS = 0, but not otherwise.  If LC = 31 + NEQ + NZA, then IWORK(LC+j) = IC(j)       (j=1,...,NEQ+1), and\n      IWORK(LC+NEQ+1+k) = JC(k) (k=1,...,NZC) The two arrays IC and JC describe the sparsity\n structure to be assumed for the Jacobian matrix dr/dy.\n They are used in the same manner as the above IA and JA\n arrays.  If NZC is the number of nonzero locations\n assumed, then the length of the JC array is NZC, and\n IC(NEQ+1) must be NZC + 1.  Duplicate entries are not\n allowed. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODIS\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODIS between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF the method flag.  Used only for input.\n MF has three decimal digits– MOSS, METH, and MITER.\n For standard options: MF = 100*MOSS + 10*METH + MITER. MOSS indicates the method to be used to obtain the sparsity\n structure of the Jacobian matrix: MOSS Description 0 means the user has supplied IA, JA, IC, and JC (see descriptions under IWORK above). 1 means the user has supplied JAC (see below) and the structure will be obtained from NEQ initial calls to JAC and NEQ initial calls to ADDA. 2 means the structure will be obtained from NEQ+1 initial calls to RES and NEQ initial calls to ADDA 3 like MOSS = 1, except user has supplied IA and JA. 4 like MOSS = 2, except user has supplied IA and JA. METH indicates the basic linear multistep method: METH Description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). The BDF method is strongly preferred for stiff problems,\n  while the Adams method is preferred when the problem is\n  not stiff.  If the matrix A(t,y) is nonsingular,\n  stiffness here can be taken to mean that of the explicit\n  ODE system dy/dt = A-inverse * g.  If A is singular,\n  the concept of stiffness is not well defined. If you do not know whether the problem is stiff, we\n  recommend using METH = 2.  If it is stiff, the advantage\n  of METH = 2 over METH = 1 will be great, while if it is\n  not stiff, the advantage of METH = 1 will be slight.\n  If maximum efficiency is important, some experimentation\n  with METH may be necessary. MITER indicates the corrector iteration method: METH Description 1 means chord iteration with a user-supplied sparse Jacobian, given by Subroutine JAC. 2 means chord iteration with an internally generated (difference quotient) sparse Jacobian (using NGP extra calls to RES per dr/dy value, where NGP is an optional output described below.) If MITER = 1 or MOSS = 1 or 3 the user must supply a\n Subroutine JAC (the name is arbitrary) as described above\n under JAC.  Otherwise, a dummy argument can be used. The standard choices for MF are: MF Description 21 or 22 for a stiff problem with IA/JA and IC/JC supplied, 121 for a stiff problem with JAC supplied, but not IA/JA or IC/JC, 222 for a stiff problem with neither IA/JA, IC/JC/, nor JAC supplied, 321 for a stiff problem with IA/JA and JAC supplied, but not IC/JC, 422 for a stiff problem with IA/JA supplied, but not IC/JC or JAC. The sparseness structure can be changed during the problem\n  by making a call to DLSODIS with ISTATE = 3. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSODIS, the variables listed\n below are quantities related to the performance of DLSODIS\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown. Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODIS, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW. On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NRE IWORK(12) the number of residual evaluations (RES calls) for the problem so far, excluding those for structure determination (MOSS = 2 or 4). NJE IWORK(13) the number of Jacobian evaluations (each involving an evaluation of A and dr/dy) for the problem so far, excluding those for structure determination (MOSS = 1 or 3).  This equals the number of calls to ADDA and (if MITER = 1) JAC. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNZ IWORK(19) the number of nonzero elements in the iteration matrix  P = A - con*J  (con is a constant and J is the Jacobian matrix dr/dy). NGP IWORK(20) the number of groups of column indices, used in difference quotient Jacobian aproximations if MITER = 2.  This is also the number of extra RES evaluations needed for each Jacobian evaluation. NLU IWORK(21) the number of sparse LU decompositions for the problem so far. (Excludes the LU decomposition necessary when ISTATE = 0.) LYH IWORK(22) the base address in RWORK of the history array YH, described below in this list. IPIAN IWORK(23) the base address of the structure descriptor array IAN, described below in this list. IPJAN IWORK(24) the base address of the structure descriptor array JAN, described below in this list. NZL IWORK(25) the number of nonzero elements in the strict lower triangle of the LU factorization used in the chord iteration. NZU IWORK(26) the number of nonzero elements in the strict upper triangle of the LU factorization used in the chord iteration.  The total number of nonzeros in the factorization is therefore NZL + NZU + NEQ. The following four arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address, and its description. For YH and ACOR, the base addresses are in RWORK (a real array).\n The integer arrays IAN and JAN are to be obtained by declaring an\n integer array IWK and identifying IWK(1) with RWORK(21), using either\n an equivalence statement or a subroutine call.  Then the base\n addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained\n as optional outputs IWORK(23) and IWORK(24), respectively. Thus IAN(1) is IWK(ipian), etc. Name Base Address Description IAN IPIAN (in IWK) structure descriptor array of size NEQ + 1. JAN IPJAN (in IWK) structure descriptor array of size NNZ. (see above) IAN and JAN together describe the sparsity structure of the iteration matrix P = A - con*J,  as used by DLSODIS. JAN contains the row indices of the nonzero locations, reading in columnwise order, and IAN contains the starting locations in JAN of the descriptions of columns 1,…,NEQ, in that order, with IAN(1) = 1.  Thus for each j = 1,…,NEQ, the row indices i of the nonzero locations in column j are i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1). Note that IAN(NEQ+1) = NNZ + 1. YH LYH the Nordsieck history array, of size NYH by (optional (NQCUR + 1), where NYH is the initial value output) of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR.  The base address LYH is another optional output, listed above. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control. It is defined only on a return from DLSODIS with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODIS.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODIS, if The default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODIS. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCMS(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODIS (see Part 3 below). RSAV must be a real array of length 224 or more, and ISAV must be an integer array of length 71 or more. JOB=1 means save into RSAV/ISAV. JOB=2 means restore from RSAV/ISAV. DSRCMS is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODIS. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODIS. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = IWORK ( 22 ) CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODIS).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(t), is already provided\n by DLSODIS directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. LYH the base address of the history array YH, obtained\n as an optional output as shown above. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODIS is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODIS call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSODIS call for that problem.  To save and restore the program\n state, use Subroutines DSRCMS (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODIS package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODIS call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODIS in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W) where: N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODIS.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n  - substitute a max-norm of (V(i)*w(I)) for the RMS-norm, or\n  - ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. References:\n 1.  M. K. Seager and S. Balsdon,  LSODIS, A Sparse Implicit\n     ODE Solver, in Proceedings of the IMACS 10th World Congress,\n     Montreal, August 8-13, 1982. Alan C. Hindmarsh,  LSODE and LSODI, Two New Initial Value\n     Ordinary Differential Equation Solvers,\n     ACM-SIGNUM Newsletter, vol. 15, no. 4 (1980), pp. 10-11. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: I. The Symmetric Codes,\n     Int. J. Num. Meth. Eng., vol. 18 (1982), pp. 1145-1151. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: II. The Nonsymmetric Codes,\n     Research Report No. 114, Dept. of Computer Sciences, Yale\n     University, 1977. Pedigree: DLSODIS is derived from the 18 November 2003 version of\n Livermore Solver for Ordinary Differential Equations package ODEPACK,\n (Implicit form) with general Sparse Jacobian matrices. Authors:       Alan C. Hindmarsh\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Sheila Balsdon\n                Zycor, Inc.\n                Austin, TX 78741 Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf Calls proc~~dlsodis~~CallsGraph proc~dlsodis dlsodis proc~diprepi diprepi proc~dlsodis->proc~diprepi proc~dainvgs dainvgs proc~dlsodis->proc~dainvgs proc~dewset dewset proc~dlsodis->proc~dewset proc~dstodi dstodi proc~dlsodis->proc~dstodi proc~xerrwd xerrwd proc~dlsodis->proc~xerrwd proc~dumach dumach proc~dlsodis->proc~dumach proc~dvnorm dvnorm proc~dlsodis->proc~dvnorm proc~dintdy dintdy proc~dlsodis->proc~dintdy proc~dprepi dprepi proc~diprepi->proc~dprepi proc~cdrv cdrv proc~dainvgs->proc~cdrv proc~dstodi->proc~dvnorm proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dintdy->proc~xerrwd proc~dprepi->proc~cdrv proc~jgroup jgroup proc~dprepi->proc~jgroup proc~adjlr adjlr proc~dprepi->proc~adjlr proc~odrv odrv proc~dprepi->proc~odrv proc~cntnzu cntnzu proc~dprepi->proc~cntnzu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodis.html"},{"title":"dlsodkr – odepack","text":"public subroutine dlsodkr(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf, g, Ng, Jroot) Synopsis DLSODKR: Livermore Solver for Ordinary Differential equations,\n          with preconditioned Krylov iteration methods for the\n          Newton correction linear systems, and with Rootfinding. DLSODKR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). At the same time, it locates the roots of any of a set of functions g(i) = g(i,t,y(1),...,y(NEQ))  (i = 1,...,ng). This version is in double precision. Introduction. This is a modification of the DLSODE package, and differs from it\n in five ways:\n 1.  It uses various preconditioned Krylov subspace iteration methods\n     for the linear algebraic systems that arise in the case of stiff\n     systems.  See the introductory notes below.\n 2.  It does automatic switching between functional (fixpoint)\n     iteration and Newton iteration in the corrector iteration.\n 3.  It finds the root of at least one of a set of constraint\n     functions g(i) of the independent and dependent variables.\n     It finds only those roots for which some g(i), as a function\n     of t, changes sign in the interval of integration.\n     It then returns the solution at the root, if that occurs\n     sooner than the specified stop condition, and otherwise returns\n     the solution according the specified stop condition.\n 4.  It supplies to JAC an input flag, JOK, which indicates whether\n     JAC may (optionally) bypass the evaluation of Jacobian matrix data\n     and instead process saved data (with the current value of scalar hl0).\n 5.  It contains a new subroutine that calculates the initial step\n     size to be attempted. Introduction to the Krylov methods in DLSODKR: The linear systems that must be solved have the form A * x  = b,  where  A = identity - hl0 * (df/dy) . Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial\n derivatives of f (NEQ by NEQ). The particular Krylov method is chosen by setting the second digit,\n MITER, in the method flag MF.\n Currently, the values of MITER have the following meanings: MITER description 1 means the Scaled Preconditioned Incomplete Orthogonalization Method (SPIOM). 2 means an incomplete version of the preconditioned scaled Generalized Minimal Residual method (SPIGMR). This is the best choice in general. 3 means the Preconditioned Conjugate Gradient method (PCG). Recommended only when df/dy is symmetric or nearly so. 4 means the scaled Preconditioned Conjugate Gradient method (PCGS).  Recommended only when D-inverse * df/dy * D is symmetric or nearly so, where D is the diagonal scaling matrix with elements 1/EWT(i) (see RTOL/ATOL description). 9 means that only a user-supplied matrix P (approximating A) will be used, with no Krylov iteration done.  This option allows the user to provide the complete linear system solution algorithm, if desired. The user can apply preconditioning to the linear system A*x = b,\n by means of arbitrary matrices (the preconditioners). In the case of SPIOM and SPIGMR, one can apply left and right\n preconditioners P1 and P2, and the basic iterative method is then\n applied to the matrix (P1-inverse)*A*(P2-inverse) instead of to the\n matrix A.  The product P1*P2 should be an approximation to matrix A\n such that linear systems with P1 or P2 are easier to solve than with\n A.  Preconditioning from the left only or right only means using\n P2 = identity or P1 = identity, respectively. In the case of the PCG and PCGS methods, there is only one\n preconditioner matrix P (but it can be the product of more than one).\n It should approximate the matrix A but allow for relatively\n easy solution of linear systems with coefficient matrix P.\n For PCG, P should be positive definite symmetric, or nearly so,\n and for PCGS, the scaled preconditioner D-inverse * P * D\n should be symmetric or nearly so. If the Jacobian J = df/dy splits in a natural way into a sum\n J = J1 + J2, then one possible choice of preconditioners is\n P1 = identity - hl0 * J1  and  P2 = identity - hl0 * J2\n provided each of these is easy to solve (or approximately solve). Summary of Usage. Communication between the user and the DLSODKR package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the demonstration\n program distributed with this solver. A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). B. Provide a subroutine of the form: SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) which supplies the vector function g by loading GOUT(i) with\n g(i), the i-th constraint function whose root is sought. C. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, MF should be between 21\n and 24, or possibly 29.  MF = 22 is generally the best choice.\n Use 23 or 24 only if symmetry is present.  Use MF = 29 if the\n complete linear system solution is to be provided by the user.\n The following four parameters must also be set. IWORK(1) = LWP  = length of real array WP for preconditioning.\n  IWORK(2) = LIWP = length of integer array IWP for preconditioning.\n  IWORK(3) = JPRE = preconditioner type flag:\n                  = 0 for no preconditioning (P1 = P2 = P = identity)\n                  = 1 for left-only preconditioning (P2 = identity)\n                  = 2 for right-only preconditioning (P1 = identity)\n                  = 3 for two-sided preconditioning (and PCG or PCGS)\n  IWORK(4) = JACFLG = flag for whether JAC is called.\n                    = 0 if JAC is not to be called,\n                    = 1 if JAC is to be called. Use JACFLG = 1 if JAC computes any nonconstant data for use in\n preconditioning, such as Jacobian elements.\n The arrays WP and IWP are work arrays under the user’s control,\n for use in the routines that perform preconditioning operations. D. If the problem is stiff, you must supply two routines that deal\n with the preconditioning of the linear systems to be solved. These are as follows: SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , HL0 , JOK , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy involved in the preconditioners P1, P2, P.\n The Y and FTY arrays contain the current values of y and f(t,y),\n respectively, and YSV also contains the current value of y.\n The array V is work space of length NEQ. JAC must multiply all computed Jacobian elements by the scalar\n -HL0, add the identity matrix, and do any factorization\n operations called for, in preparation for solving linear systems\n with a coefficient matrix of P1, P2, or P.  The matrix P1*P2 or P\n should be an approximation to  identity - hl0 * (df/dy).\n JAC should return IER = 0 if successful, and IER .ne. 0 if not.\n (If IER .ne. 0, a smaller time step will be tried.) JAC may alter Y and V, but not YSV, REWT, FTY, or HL0. The JOK argument can be ignored (or see full description below). SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P, as\n coefficient matrix, and return the solution vector in B. LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner matrix P. In the case MF = 29 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - hl0 * (df/dy). PSOL can use data generated in the JAC routine and stored in\n WP and IWP.  WK is a work array of length NEQ. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, at the time of the last\n JAC call, is needed, it must have been saved by JAC in WP. on return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful,\n       IER .gt. 0 if a recoverable error occurred, meaning that the\n              time step will be retried,\n       IER .lt. 0 if an unrecoverable error occurred, meaning that the\n              solver is to stop immediately. E. Write a main program which calls Subroutine DLSODKR once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODKR.  On the first call to DLSODKR, supply arguments as\n follows: F name of subroutine for right-hand side vector f.\n   This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n   The estimated local error in y(i) will be controlled so as\n   to be roughly less (in magnitude) than\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n   Thus the local error test passes if, in each component,\n   either the absolute error is less than ATOL (or ATOL(i)),\n   or the relative error is less than RTOL.\n   Use RTOL = 0.0 for pure absolute error control, and\n   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n   control.  Caution: Actual (global) errors may exceed these\n   local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + 16*NEQ + 3*NG           for MF = 10,\n        45 + 17*NEQ + 3*NG + LWP     for MF = 21,\n        61 + 17*NEQ + 3*NG + LWP     for MF = 22,\n        20 + 15*NEQ + 3*NG + LWP     for MF = 23 or 24,\n        20 + 12*NEQ + 3*NG + LWP     for MF = 29. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least: 30            for MF = 10,\n        35 + LIWP     for MF = 21,\n        30 + LIWP     for MF = 22, 23, 24, or 29. LIW declared length of IWORK (in user’s dimension). JAC,PSOL names of subroutines for preconditioning.\n These names must be declared External in the calling program. MF method flag.  Standard values are: value description 10 for nonstiff (Adams) method. 21 for stiff (BDF) method, with preconditioned SIOM. 22 for stiff method, with preconditioned GMRES method. 23 for stiff method, with preconditioned CG method. 24 for stiff method, with scaled preconditioned CG method. 29 for stiff method, with user’s PSOL routine only. G name of subroutine for constraint functions, whose\n roots are desired during the integration.\n This name must be declared External in calling program. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG for output of root information.\n See next paragraph. Note that the main program must declare arrays Y, RWORK, IWORK,\n JROOT, and possibly ATOL. F. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE values and meanings: value description 2 or 3 if DLSODKR was successful, negative otherwise. 2 means no root was found, and TOUT was reached as desired. 3 means a root was found prior to reaching TOUT. -1 means excess work done on this call (perhaps wrong MF). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad JAC or PSOL routine supplied or wrong choice of MF or tolerances, or this solver is inappropriate). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means an unrecoverable error occurred in PSOL. JROOT array showing roots found if ISTATE = 3 on return.\n   JROOT(i) = 1 if g(i) has a root at T, or 0 otherwise. G. To continue the integration after a successful return, proceed\n as follows: If ISTATE = 2 on return, reset TOUT and call DLSODKR again. If ISTATE = 3 on return, reset ISTATE to 2 and call DLSODKR again. In either case, no other parameters need be reset. Full Description of User Interface to DLSODKR. The user interface to DLSODKR consists of the following parts. The call sequence to Subroutine DLSODKR, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODKR package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODKR package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF,\n  G, and NG, that used only for output is  JROOT,\n and those used for both input and output are\n  Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODKR to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODKR, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in the user-supplied routines. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODKR package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to the user-supplied routines.  Hence, if it is an array,\n locations NEQ(2),… may be used to store other integer data\n and pass it to the user-supplied routines. Each such routine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F, G,\n JAC, and PSOL.  Hence its length may exceed NEQ, and\n locations Y(NEQ+1),… may be used to store other real data\n and pass it to the user-supplied routines.\n (The DLSODKR package accesses only Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n If a root was found, T is the computed location of the\n root reached first, on output.\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n        where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at T = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, and any of the optional inputs except H0. In addition, immediately following a return with ISTATE = 3 (root found), NG and G may be changed. (But changing NG from 0 to .gt. 0 is not allowed.) Note:  A preliminary call with TOUT = T is not counted as a first call here, as no initialization or checking of input is done.  (Such a call is sometimes useful for the purpose of outputting the initial conditions.) Thus the first call for which TOUT .ne. T requires ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. 3 means the integration was successful, and one or more roots were found before satisfying the stop condition specified by ITASK.  See JROOT. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the PSOL routine returned an unrecoverable error flag (IER .lt. 0).  The integration was successful as far as T. Note :  Since the normal output value of ISTATE is 2,\n  it does not need to be reset for normal continuation.\n  Also, since a negative input value of ISTATE will be\n  regarded as illegal, a negative output value requires the\n  user to change it, and possibly other inputs, before\n  calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a real working array (double precision). The length of RWORK must be at least\n         20 + NYH*(MAXORD+1) + 3*NEQ + 3*NG + LENLS + LWP    where\n      NYH    = the initial value of NEQ,\n      MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n               smaller value is given as an optional input),\n      LENLS = length of work space for linear system (Krylov)\n              method, excluding preconditioning:\n        LENLS = 0                               if MITER = 0,\n        LENLS = NEQ*(MAXL+3) + MAXL**2          if MITER = 1,\n        LENLS = NEQ*(MAXL+3+MIN(1,MAXL-KMP))\n             + (MAXL+3)*MAXL + 1                if MITER = 2,\n        LENLS = 6*NEQ                           if MITER = 3 or 4,\n        LENLS = 3*NEQ                           if MITER = 9.\n      (See the MF description for METH and MITER, and the\n      list of optional inputs for MAXL and KMP.)\n      LWP = length of real user work space for preconditioning\n      (see JAC/PSOL).\n      Thus if default values are used and NEQ is constant,\n      this length is:\n         20 + 16*NEQ + 3*NG           for MF = 10,\n         45 + 24*NEQ + 3*NG + LWP     for MF = 11,\n         61 + 24*NEQ + 3*NG + LWP     for MF = 12,\n         20 + 22*NEQ + 3*NG + LWP     for MF = 13 or 14,\n         20 + 19*NEQ + 3*NG + LWP     for MF = 19,\n         20 + 9*NEQ + 3*NG            for MF = 20,\n         45 + 17*NEQ + 3*NG + LWP     for MF = 21,\n         61 + 17*NEQ + 3*NG + LWP     for MF = 22,\n         20 + 15*NEQ + 3*NG + LWP     for MF = 23 or 24,\n         20 + 12*NEQ + 3*NG + LWP     for MF = 29. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT = critical value of t which the solver\n is not to overshoot.  Required if ITASK is\n 4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least\n         30                 if MITER = 0 (MF = 10 or 20),\n         30 + MAXL + LIWP   if MITER = 1 (MF = 11, 21),\n         30 + LIWP          if MITER = 2, 3, 4, or 9.\n      MAXL = 5 unless a different optional input value is given.\n      LIWP = length of integer user work space for preconditioning\n      (see conditional input list following).\n      The first few words of IWORK are used for conditional and\n      optional inputs and optional outputs. The following 4 words in IWORK are conditional inputs , required if MITER . ge . 1 : IWORK ( 1 ) = LWP = length of real array WP for use in preconditioning ( part of RWORK array ) . IWORK ( 2 ) = LIWP = length of integer array IWP for use in preconditioning ( part of IWORK array ) . The arrays WP and IWP are work arrays under the user 's control, for use in the routines that perform preconditioning operations ( JAC and PSOL ) . IWORK ( 3 ) = JPRE = preconditioner type flag : = 0 for no preconditioning ( P1 = P2 = P = identity ) = 1 for left - only preconditioning ( P2 = identity ) = 2 for right - only preconditioning ( P1 = identity ) = 3 for two - sided preconditioning ( and PCG or PCGS ) IWORK ( 4 ) = JACFLG = flag for whether JAC is called . = 0 if JAC is not to be called , = 1 if JAC is to be called . Use JACFLG = 1 if JAC computes any nonconstant data needed in preconditioning operations , such as some of the Jacobian elements . LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODKR\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODKR between calls, if\n desired (but not for use by any of the user-supplied routines). JAC the name of the user-supplied routine to compute any\n Jacobian elements (or approximations) involved in the\n matrix preconditioning operations (MITER .ge. 1).\n It is to have the form SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , & & HL0 , JOK , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), & & HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy used in the preconditioners P1, P2, P. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively, and the YSV array also contains\n the current y vector.  The array V is work space of length\n NEQ for use by JAC.  REWT is the array of reciprocal error\n weights (1/EWT).  JAC must multiply all computed Jacobian\n elements by the scalar -HL0, add the identity matrix, and do\n any factorization operations called for, in preparation\n for solving linear systems with a coefficient matrix of\n P1, P2, or P.  The matrix P1*P2 or P should be an &\n approximation to  identity - hl0 * (df/dy).  JAC should\n return IER = 0 if successful, and IER .ne. 0 if not. (If IER .ne. 0, a smaller time step will be tried.)\n The arrays WP (of length LWP) and IWP (of length LIWP)\n are for use by JAC and PSOL for work space and for storage\n of data needed for the solution of the preconditioner\n linear systems.  Their lengths and contents are under the\n user’s control. The argument JOK is an input flag for optional use\n by JAC in deciding whether to recompute Jacobian elements\n or use saved values.  If JOK = -1, then JAC must compute\n any relevant Jacobian elements (or approximations) used in\n the preconditioners.  Optionally, JAC may also save these\n elements for later reuse.  If JOK = 1, the integrator has\n made a judgement (based on the convergence history and the\n value of HL0) that JAC need not recompute Jacobian elements,\n but instead use saved values, and the current value of HL0,\n to reconstruct the preconditioner matrices, followed by\n any required factorizations.  This may be cost-effective if\n Jacobian elements are costly and storage is available. JAC may alter Y and V, but not YSV, REWT, FTY, or HL0.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. PSOL the name of the user-supplied routine for the\n solution of preconditioner linear systems.\n It is to have the form SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P,\n as coefficient matrix, and return the solution vector in B.\n LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2.\n In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner P.\n In the case MITER = 9 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - hl0 * (df/dy).\n PSOL can use data generated in the JAC routine and stored in\n WP and IWP. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively.  The array WK is work space of length\n NEQ for use by PSOL. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, as of the last\n JAC call, is needed, it must have been saved by JAC in WP. On return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful,\n        IER .gt. 0 on a recoverable error, meaning that the\n               time step will be retried,\n        IER .lt. 0 on an unrecoverable error, meaning that the\n               solver is to stop immediately.\n      PSOL may not alter Y, FTY, or HL0.\n      PSOL must be declared External in the calling program.\n           Subroutine PSOL may access user-defined quantities in\n      NEQ(2),... and Y(NEQ(1)+1),... if NEQ is an array\n      (dimensioned in PSOL) and/or Y has length exceeding NEQ(1).\n      See the descriptions of NEQ and Y above. MF the method flag.  Used only for input.  The legal values of\n MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29.\n MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). MITER indicates the corrector iteration method:\n  MITER | description\n  ----- | ----------------------------------------------------\n  0     | means functional iteration (no linear system\n        | is involved).\n  1     | means Newton iteration with Scaled Preconditioned\n        | Incomplete Orthogonalization Method (SPIOM)\n        | for the linear systems.\n  2     | means Newton iteration with Scaled Preconditioned\n        | Incomplete Generalized Minimal Residual method\n        | (SPIGMR) for the linear systems.\n  3     | means Newton iteration with Preconditioned\n        | Conjugate Gradient method (PCG)\n        | for the linear systems.\n  4     | means Newton iteration with scaled preconditioned\n        | Conjugate Gradient method (PCGS)\n        | for the linear systems.\n  9     | means Newton iteration with only the\n        | user-supplied PSOL routine called (no Krylov\n        | iteration) for the linear systems.\n        | JPRE is ignored, and PSOL is called with LR = 0. See comments in the introduction about the choice of MITER.\n If MITER .ge. 1, the user must supply routines JAC and PSOL\n (the names are arbitrary) as described above.\n For MITER = 0, a dummy argument can be used. G the name of subroutine for constraint functions, whose\n roots are desired during the integration.  It is to have\n the form SUBROUTINE G ( NEQ , T , Y , NG , GOUT ) DOUBLE PRECISION T , Y ( * ), GOUT ( NG ) where NEQ, T, Y, and NG are input, and the array GOUT\n is output.  NEQ, T, and Y have the same meaning as in\n the F routine, and GOUT is an array of length NG.\n For i = 1,…,NG, this routine is to load into GOUT(i)\n the value at (t,y) of the i-th constraint function g(i).\n DLSODKR will find roots of the g(i) of odd multiplicity\n (i.e. sign changes) as they occur during the integration.\n G must be declared External in the calling program. Caution: Because of numerical errors in the functions\n g(i) due to roundoff and integration error, DLSODKR may\n return false roots, or return the same root at two or more\n nearly equal values of t.  If such false roots are\n suspected, the user should consider smaller error tolerances\n and/or higher precision in the evaluation of the g(i). If a root of some g(i) defines the end of the problem,\n the input to DLSODKR should nevertheless allow integration\n to a point slightly past that root, so that DLSODKR can\n locate the root by interpolation. Subroutine G may access user-defined quantities in\n NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in G) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. NG number of constraint functions g(i).  If there are none,\n set NG = 0, and pass a dummy name for G. JROOT integer array of length NG.  Used only for output.\n On a return with ISTATE = 3 (one or more roots found),\n JROOT(i) = 1 if g(i) has a root at t, or JROOT(i) = 0 if not. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) DELT RWORK(8) convergence test constant in Krylov iteration algorithm.  The default is .05. MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MAXL IWORK(8) maximum number of iterations in the SPIOM, SPIGMR, PCG, or PCGS algorithm (.le. NEQ). The default is MAXL = MIN(5,NEQ). KMP IWORK(9) number of vectors on which orthogonalization is done in SPIOM or SPIGMR algorithm (.le. MAXL). The default is KMP = MAXL. Note:  When KMP .lt. MAXL and MF = 22, the length of RWORK must be defined accordingly.  See the definition of RWORK above. Optional Outputs. As optional additional output from DLSODKR, the variables listed\n below are quantities related to the performance of DLSODKR\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown. Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODKR, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW. On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NGE IWORK(10) the number of g evaluations for the problem so far. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NPE IWORK(13) the number of calls to JAC so far (for evaluation of preconditioners). NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNI IWORK(19) number of nonlinear iterations so far (each of which calls an iterative linear solver). NLI IWORK(20) number of linear iterations so far. Note: A measure of the success of algorithm is the average number of linear iterations per nonlinear iteration, given by NLI/NNI. If this is close to MAXL, MAXL may be too small. NPS IWORK(21) number of preconditioning solve operations (PSOL calls) so far. NCFN IWORK(22) number of convergence failures of the nonlinear (Newton) iteration so far. Note: A measure of success is the overall rate of nonlinear convergence failures, NCFN/NST. NCFL IWORK(23) number of convergence failures of the linear iteration so far. Note: A measure of success is the overall rate of linear convergence failures, NCFL/NNI. NSFI IWORK(24) number of functional iteration steps so far. Note: A measure of the extent to which the problem is nonstiff is the ratio NSFI/NST. NJEV IWORK(25) number of JAC calls with JOK = -1 so far (number of evaluations of Jacobian data). The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 + 3*NG the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODKR. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODKR.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODKR, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODKR. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCKR(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODKR (see Part 3 below). RSAV must be a real array of length 228 or more, and ISAV must be an integer array of length 63 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCKR is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODKR. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODKR. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = 21 + 3 * NG CALL DINTDY ( T , K , RWORK ( LYH ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODKR).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.)\n K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODKR directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY.\n LYH 21 + 3*NG = base address in RWORK of the history array YH.\n NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n         of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Common Blocks. If DLSODKR is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in: (1) the call sequence to DLSODKR, and\n   (2) the four internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         /DLS002/  of length   5  (1 double precision word\n                      followed by  4 integer words),\n         /DLPK01/  of length  17  (4 double precision words\n                      followed by 13 integer words),\n         /DLSR01/  of length  14     (5 double precision words\n                      followed by  9 integer words). If DLSODKR is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODKR is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODKR call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODKR call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCKR (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODKR package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODKR call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODKR in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM()\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODKR.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might: substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or ignore some components of V in the norm, with the effect of\n     suppressing the error control on those components of y. Pedigree: This is the 18 November 2003 version of\n   DLSODKR is derived from the Livermore Solver for Ordinary\n   Differential Equations package ODEPACK, References:\n 1.  Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix\n     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989),\n     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987.\n 2.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Peter N. Brown\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf real :: g integer :: Ng integer :: Jroot (*) Calls proc~~dlsodkr~~CallsGraph proc~dlsodkr dlsodkr proc~dewset dewset proc~dlsodkr->proc~dewset proc~drchek drchek proc~dlsodkr->proc~drchek proc~dstoka dstoka proc~dlsodkr->proc~dstoka proc~dlhin dlhin proc~dlsodkr->proc~dlhin proc~xerrwd xerrwd proc~dlsodkr->proc~xerrwd proc~dcopy dcopy proc~dlsodkr->proc~dcopy proc~dumach dumach proc~dlsodkr->proc~dumach proc~dintdy dintdy proc~dlsodkr->proc~dintdy proc~dvnorm dvnorm proc~dlsodkr->proc~dvnorm proc~drchek->proc~dintdy proc~dstoka->proc~dvnorm proc~dcfode dcfode proc~dstoka->proc~dcfode proc~dlhin->proc~dvnorm proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodkr.html"},{"title":"dlsodpk – odepack","text":"public subroutine dlsodpk(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf) Synopsis DLSODPK: Livermore Solver for Ordinary Differential equations,\n          with Preconditioned Krylov iteration methods for the\n          Newton correction linear systems. DLSODPK solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). This version is in double precision. Introduction. This is a modification of the DLSODE package which incorporates\n various preconditioned Krylov subspace iteration methods for the\n linear algebraic systems that arise in the case of stiff systems. The linear systems that must be solved have the form A * x  = b,  where  A = identity - hl0 * (df/dy) . Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial\n derivatives of f (NEQ by NEQ). The particular Krylov method is chosen by setting the second digit,\n MITER, in the method flag MF.\n Currently, the values of MITER have the following meanings: MITER description 1 means the preconditioned Scaled Incomplete Orthogonalization Method (SPIOM). 2 means an incomplete version of the Preconditioned Scaled Generalized Minimal Residual method (SPIGMR). This is the best choice in general. 3 means the Preconditioned Conjugate Gradient method (PCG). Recommended only when df/dy is symmetric or nearly so. 4 means the scaled Preconditioned Conjugate Gradient method (PCGS).  Recommended only when D-inverse * df/dy * D is symmetric or nearly so, where D is the diagonal scaling matrix with elements 1/EWT(i) (see RTOL/ATOL description). 9 means that only a user-supplied matrix P (approximating A) will be used, with no Krylov iteration done.  This option allows the user to provide the complete linear system solution algorithm, if desired. The user can apply preconditioning to the linear system A*x = b,\n by means of arbitrary matrices (the preconditioners). In the case of SPIOM and SPIGMR, one can apply left and right\n preconditioners P1 and P2, and the basic iterative method is then\n applied to the matrix (P1-inverse)*A*(P2-inverse) instead of to the\n matrix A.  The product P1*P2 should be an approximation to matrix A\n such that linear systems with P1 or P2 are easier to solve than with\n A.  Preconditioning from the left only or right only means using\n P2 = identity or P1 = identity, respectively. In the case of the PCG and PCGS methods, there is only one\n preconditioner matrix P (but it can be the product of more than one).\n It should approximate the matrix A but allow for relatively\n easy solution of linear systems with coefficient matrix P. For PCG, P should be positive definite symmetric, or nearly so,\n and for PCGS, the scaled preconditioner D-inverse * P * D\n should be symmetric or nearly so. If the Jacobian J = df/dy splits in a natural way into a sum\n J = J1 + J2, then one possible choice of preconditioners is\n P1 = identity - hl0 * J1  and  P2 = identity - hl0 * J2\n provided each of these is easy to solve (or approximately solve). Summary of Usage. Communication between the user and the DLSODPK package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the demonstration\n program distributed with this solver. A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). B. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, MF should be between 21\n and 24, or possibly 29.  MF = 22 is generally the best choice.\n Use 23 or 24 only if symmetry is present.  Use MF = 29 if the\n complete linear system solution is to be provided by the user.\n The following four parameters must also be set. IWORK(1) = LWP  = length of real array WP for preconditioning.\n  IWORK(2) = LIWP = length of integer array IWP for preconditioning.\n  IWORK(3) = JPRE = preconditioner type flag:\n                  = 0 for no preconditioning (P1 = P2 = P = identity)\n                  = 1 for left-only preconditioning (P2 = identity)\n                  = 2 for right-only preconditioning (P1 = identity)\n                  = 3 for two-sided preconditioning (and PCG or PCGS)\n  IWORK(4) = JACFLG = flag for whether JAC is called.\n                    = 0 if JAC is not to be called,\n                    = 1 if JAC is to be called. Use JACFLG = 1 if JAC computes any nonconstant data for use in\n  preconditioning, such as Jacobian elements.\n  The arrays WP and IWP are work arrays under the user’s control,\n  for use in the routines that perform preconditioning operations. C. If the problem is stiff, you must supply two routines that deal\n with the preconditioning of the linear systems to be solved.\n These are as follows: SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , HL0 , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy involved in the preconditioners P1, P2, P.\n The Y and FTY arrays contain the current values of y and f(t,y),\n respectively, and YSV also contains the current value of y.\n The array V is work space of length NEQ. JAC must multiply all computed Jacobian elements by the scalar\n -HL0, add the identity matrix, and do any factorization\n operations called for, in preparation for solving linear systems\n with a coefficient matrix of P1, P2, or P.  The matrix P1*P2 or P\n should be an approximation to  identity - HL0 * (df/dy).\n JAC should return IER = 0 if successful, and IER .ne. 0 if not.\n (If IER .ne. 0, a smaller time step will be tried.) SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P, as\n coefficient matrix, and return the solution vector in B. LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2.\n In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner matrix P.\n In the case MF = 29 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - HL0 * (df/dy). PSOL can use data generated in the JAC routine and stored in\n WP and IWP.  WK is a work array of length NEQ. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, at the time of the last\n JAC call, is needed, it must have been saved by JAC in WP.\n On return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful , IER . gt . 0 if a recoverable error occurred , meaning that the time step will be retried , IER . lt . 0 if an unrecoverable error occurred , meaning that the solver is to stop immediately . D. Write a main program which calls Subroutine DLSODPK once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODPK.  On the first call to DLSODPK, supply arguments as follows: F name of subroutine for right-hand side vector f.\n This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 20 + 16*NEQ           for MF = 10,\n        45 + 17*NEQ + LWP     for MF = 21,\n        61 + 17*NEQ + LWP     for MF = 22,\n        20 + 15*NEQ + LWP     for MF = 23 or 24,\n        20 + 12*NEQ + LWP     for MF = 29. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least: 30            for MF = 10,\n        35 + LIWP     for MF = 21,\n        30 + LIWP     for MF = 22, 23, 24, or 29. LIW declared length of IWORK (in user’s dimension). JAC,PSOL names of subroutines for preconditioning.\n These names must be declared External in the calling program. MF method flag.  Standard values are: value description 10 for nonstiff (Adams) method. 21 for stiff (BDF) method, with preconditioned SIOM. 22 for stiff method, with preconditioned GMRES method. 23 for stiff method, with preconditioned CG method. 24 for stiff method, with scaled preconditioned CG method. 29 for stiff method, with user’s PSOL routine only. Note that the main program must declare arrays Y, RWORK, IWORK,\n and possibly ATOL. E. The output from the first call (or any call) is: Y = array of computed values of y ( t ) vector . T = corresponding value of independent variable ( normally TOUT ) . ISTATE table of values: value description 2 if DLSODPK was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong MF). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad JAC or PSOL routine supplied or wrong choice of MF or tolerances, or this solver is inappropriate). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means an unrecoverable error occurred in PSOL. F. To continue the integration after a successful return, simply\n reset TOUT and call DLSODPK again.  No other parameters need be reset. Full Description of User Interface to DLSODPK. The user interface to DLSODPK consists of the following parts. The call sequence to Subroutine DLSODPK, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODPK package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODPK package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF, and those used for both input and output are\n  Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODPK to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODPK, an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in the user-supplied subroutines. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODPK package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F, JAC, and PSOL.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to the user-supplied subroutines.  Each such routine must\n include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F,\n JAC, and PSOL. Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to the user-supplied subroutines.  (The DLSODPK\n package accesses only Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial T, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n      where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n the following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK  = an index specifying the task to be performed. Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note :  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE = an index used for input and output to specify the\n          the state of the calculation. On input, the values of ISTATE are as follows: value description 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, and any of the optional inputs except H0. Note :  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value description 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the PSOL routine returned an unrecoverable error flag (IER .lt. 0).  The integration was successful as far as T. Note :  since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n           Default values will be used in all cases.\n  IOPT = 1 means one or more optional inputs are being used. RWORK a real working array (double precision). The length of RWORK must be at least\n          20 + NYH*(MAXORD + 1) + 3*NEQ + LENLS + LWP    where\n       NYH    = the initial value of NEQ,\n       MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                smaller value is given as an optional input),\n       LENLS = length of work space for linear system (Krylov)\n               method, excluding preconditioning:\n         LENLS = 0                               if MITER = 0,\n         LENLS = NEQ*(MAXL+3) + MAXL**2          if MITER = 1,\n         LENLS = NEQ*(MAXL+3+MIN(1,MAXL-KMP))\n              + (MAXL+3)*MAXL + 1                if MITER = 2,\n         LENLS = 6*NEQ                           if MITER = 3 or 4,\n         LENLS = 3*NEQ                           if MITER = 9. (See the MF description for METH and MITER, and the\n list of optional inputs for MAXL and KMP.) LWP length of real user work space for preconditioning\n (see JAC/PSOL).\n Thus if default values are used and NEQ is constant,\n this length is: 20 + 16*NEQ           for MF = 10,\n             45 + 24*NEQ + LWP     FOR MF = 11,\n             61 + 24*NEQ + LWP     FOR MF = 12,\n             20 + 22*NEQ + LWP     FOR MF = 13 OR 14,\n             20 + 19*NEQ + LWP     FOR MF = 19,\n             20 + 9*NEQ            FOR MF = 20,\n             45 + 17*NEQ + LWP     FOR MF = 21,\n             61 + 17*NEQ + LWP     FOR MF = 22,\n             20 + 15*NEQ + LWP     FOR MF = 23 OR 24,\n             20 + 12*NEQ + LWP     for MF = 29. The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs. The following word in RWORK is a conditional input: RWORK(1) = TCRIT = critical value of t which the solver\n                    is not to overshoot.  Required if ITASK is\n                    4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least 30 if MITER = 0 ( MF = 10 or 20 ) , 30 + MAXL + LIWP if MITER = 1 ( MF = 11 , 21 ) , 30 + LIWP if MITER = 2 , 3 , 4 , or 9 . MAXL = 5 unless a different optional input value is given . LIWP = length of integer user work space for preconditioning ( see conditional input list following ) . The first few words of IWORK are used for conditional and\n optional inputs and optional outputs. The following 4 words in IWORK are conditional inputs,\n required if MITER .ge. 1: IWORK(1) = LWP  = length of real array WP for use in\n                     preconditioning (part of RWORK array).\n          IWORK(2) = LIWP = length of integer array IWP for use in\n                     preconditioning (part of IWORK array).\n                     The arrays WP and IWP are work arrays under the\n                     user's control, for use in the routines that\n                     perform preconditioning operations (JAC and PSOL).\n          IWORK(3) = JPRE = preconditioner type flag:\n                   = 0 for no preconditioning (P1 = P2 = P = identity)\n                   = 1 for left-only preconditioning (P2 = identity)\n                   = 2 for right-only preconditioning (P1 = identity)\n                   = 3 for two-sided preconditioning (and PCG or PCGS)\n          IWORK(4) = JACFLG = flag for whether JAC is called.\n                   = 0 if JAC is not to be called,\n                   = 1 if JAC is to be called.\n                     Use JACFLG = 1 if JAC computes any nonconstant\n                     data needed in preconditioning operations,\n                     such as some of the Jacobian elements. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODPK\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODPK between calls, if\n desired (but not for use by any of the user-supplied subroutines). JAC the name of the user-supplied routine to compute any\n Jacobian elements (or approximations) involved in the\n matrix preconditioning operations (MITER .ge. 1).\n It is to have the form SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , & & HL0 , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ), YSV ( * ), REWT ( * ), FTY ( * ), V ( * ), & & HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the\n Jacobian matrix df/dy used in the preconditioners P1, P2, P. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively, and YSV also contains the current\n value of y.  The array V is work space of length\n NEQ for use by JAC.  REWT is the array of reciprocal error\n weights (1/EWT).  JAC must multiply all computed Jacobian\n elements by the scalar -HL0, add the identity matrix, and do\n any factorization operations called for, in preparation\n for solving linear systems with a coefficient matrix of\n P1, P2, or P.  The matrix P1*P2 or P should be an\n approximation to  identity - HL0 * (df/dy).  JAC should\n return IER = 0 if successful, and IER .ne. 0 if not.\n (If IER .ne. 0, a smaller time step will be tried.)\n The arrays WP (of length LWP) and IWP (of length LIWP)\n are for use by JAC and PSOL for work space and for storage\n of data needed for the solution of the preconditioner\n linear systems.  Their lengths and contents are under the\n user’s control. The JAC routine may save relevant Jacobian elements (or\n approximations) used in the preconditioners, along with the\n value of HL0, and use these to reconstruct preconditioner\n matrices later without reevaluationg those elements. This may be cost-effective if JAC is called with HL0\n considerably different from its earlier value, indicating\n that a corrector convergence failure has occurred because\n of the change in HL0, not because of changes in the\n value of the Jacobian.  In doing this, use the saved and\n current values of HL0 to decide whether to use saved\n or reevaluated elements. JAC may alter V, but may not alter Y, YSV, REWT, FTY, or HL0. JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. PSOL the name of the user-supplied routine for the\n solution of preconditioner linear systems.\n It is to have the form SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ), FTY ( * ), WK ( * ), HL0 , WP ( * ), B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right-hand\n side and one of the preconditioning matrices, P1, P2, or P,\n as coefficient matrix, and return the solution vector in B. LR is a flag concerning left vs right preconditioning, input\n to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. In the case of the PCG or PCGS method, LR will be 3, and PSOL\n should solve the system P*x = B with the preconditioner P. In the case MITER = 9 (no Krylov iteration), LR will be 0,\n and PSOL is to return in B the desired approximate solution\n to A * x = B, where A = identity - HL0 * (df/dy). PSOL can use data generated in the JAC routine and stored in\n WP and IWP. The Y and FTY arrays contain the current values of y and\n f(t,y), respectively.  The array WK is work space of length\n NEQ for use by PSOL. The argument HL0 is the current value of the scalar appearing\n in the linear system.  If the old value, as of the last\n JAC call, is needed, it must have been saved by JAC in WP.\n On return, PSOL should set the error flag IER as follows: IER = 0 if PSOL was successful , IER . gt . 0 on a recoverable error , meaning that the time step will be retried , IER . lt . 0 on an unrecoverable error , meaning that the solver is to stop immediately . PSOL may not alter Y, FTY, or HL0. PSOL must be declared External in the calling program. Subroutine PSOL may access user-defined quantities in\n NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in PSOL) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. MF the method flag.  Used only for input.  The legal values of\n MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29. MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFs). MITER indicates the corrector iteration method: MITER description 0 means functional iteration (no linear system is involved). 1 means Newton iteration with Scaled Preconditioned Incomplete Orthogonalization Method (SPIOM) for the linear systems. 2 means Newton iteration with Scaled Preconditioned Generalized Minimal Residual method (SPIGMR) for the linear systems. 3 means Newton iteration with Preconditioned Conjugate Gradient method (PCG) for the linear systems. 4 means Newton iteration with scaled Preconditioned Conjugate Gradient method (PCGS) for the linear systems. 9 means Newton iteration with only the user-supplied PSOL routine called (no Krylov iteration) for the linear systems. JPRE is ignored, and PSOL is called with LR = 0. See comments in the introduction about the choice of MITER.\n If MITER .ge. 1, the user must supply routines JAC and PSOL\n (the names are arbitrary) as described above.\n For MITER = 0, dummy arguments can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) DELT RWORK(8) convergence test constant in Krylov iteration algorithm.  The default is .05. MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MAXL IWORK(8) maximum number of iterations in the SPIOM, SPIGMR, PCG, or PCGS algorithm (.le. NEQ). The default is MAXL = MIN(5,NEQ). KMP IWORK(9) number of vectors on which orthogonalization is done in SPIOM or SPIGMR algorithm (.le. MAXL). The default is KMP = MAXL. Note:  When KMP .lt. MAXL and MF = 22, the length of RWORK must be defined accordingly.  See the definition of RWORK above. Optional Outputs. As optional additional output from DLSODPK, the variables listed\n below are quantities related to the performance of DLSODPK\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODPK, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NPE IWORK(13) the number of calls to JAC so far (for Jacobian evaluation associated with preconditioning). NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. NNI IWORK(19) number of nonlinear iterations so far (each of which calls an iterative linear solver). NLI IWORK(20) number of linear iterations so far. Note: A measure of the success of algorithm is the average number of linear iterations per nonlinear iteration, given by NLI/NNI. If this is close to MAXL, MAXL may be too small. NPS IWORK(21) number of preconditioning solve operations (PSOL calls) so far. NCFN IWORK(22) number of convergence failures of the nonlinear (Newton) iteration so far. Note: A measure of success is the overall rate of nonlinear convergence failures, NCFN/NST. NCFL IWORK(23) number of convergence failures of the linear iteration so far. Note: A measure of success is the overall rate of linear convergence failures, NCFL/NNI. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODPK. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODPK.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSODPK, if the default is not desired. The default value of lun is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSODPK. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCPK(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSODPK (see Part 3 below). RSAV must be a real array of length 222 or more, and ISAV must be an integer array of length 50 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCPK is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSODPK. CALL DINTDY(,,,,,) Provide derivatives of y, of various (See below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSODPK. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODPK).\n for valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.)\n K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODPK directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSODPK is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODPK call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variable, and later restore these values before the\n next DLSODPK call for that problem.  To save and restore the values\n , use Subroutine DSRCPK (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. below are descriptions of two routines in the DLSODPK package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODPK call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODPK in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W) where: N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODPK.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n  - substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n  - ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. Pedigree: DLSODE is derived from the 18 November 2003 version of\n Livermore Solver for Ordinary\n Differential Equations package ODEPACK, References: Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix\n     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989),\n     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987. Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Peter N. Brown\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf Calls proc~~dlsodpk~~CallsGraph proc~dlsodpk dlsodpk proc~dewset dewset proc~dlsodpk->proc~dewset proc~dintdy dintdy proc~dlsodpk->proc~dintdy proc~dvnorm dvnorm proc~dlsodpk->proc~dvnorm proc~xerrwd xerrwd proc~dlsodpk->proc~xerrwd proc~dumach dumach proc~dlsodpk->proc~dumach proc~dstodpk dstodpk proc~dlsodpk->proc~dstodpk proc~dintdy->proc~xerrwd proc~dstodpk->proc~dvnorm proc~dcfode dcfode proc~dstodpk->proc~dcfode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodpk.html"},{"title":"dlsoibt – odepack","text":"public subroutine dlsoibt(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) Synopsis DLSOIBT: Livermore Solver for Ordinary differential equations given\n          in Implicit form, with Block-Tridiagonal Jacobian treatment. DLSOIBT solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ\n\n      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n           i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSOIBT is a variant version of the DLSODI package, for the case where\n the matrices A, dg/dy, and d(A*s)/dy are all block-tridiagonal. This version is in double precision. Summary of Usage. Communication between the user and the DLSOIBT package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form: SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) which computes the residual function r = g(t,y)  -  A(t,y) * s as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSOIBT.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. Next, identify the block structure of the matrices A = A(t,y) and\n dr/dy.  DLSOIBT must deal internally with a linear combination, P, of\n these two matrices.  The matrix P (hence both A and dr/dy) must have\n a block-tridiagonal form with fixed structure parameters MB = block size, MB .ge. 1, and\n    NB = number of blocks in each direction, NB .ge. 4, with MB*NB = NEQ.  In each of the NB block-rows of the matrix P\n (each consisting of MB consecutive rows), the nonzero elements are\n to lie in three consecutive MB by MB blocks.  In block-rows\n 2 through NB - 1, these are centered about the main diagonal. in block-rows 1 and NB, they are the diagonal blocks and the two\n blocks adjacent to the diagonal block.  (Thus block positions (1,3)\n and (NB,NB-2) can be nonzero.) Alternatively, P (hence A and dr/dy) may be only approximately\n equal to matrices with this form, and DLSOIBT should still succeed.\n The block-tridiagonal matrix P is described by three arrays,\n each of size MB by MB by NB: PA = array of diagonal blocks,\n     PB = array of superdiagonal (and one subdiagonal) blocks, and\n     PC = array of subdiagonal (and one superdiagonal) blocks. Specifically, the three MB by MB blocks in the k-th block-row of P\n are stored in (reading across): PC(*,*,k) = block to the left of the diagonal block,\n     PA(*,*,k) = diagonal block, and\n     PB(*,*,k) = block to the right of the diagonal block, except for k = 1, where the three blocks (reading across) are PA(*,*,1) (= diagonal block), PB(*,*,1), and PC(*,*,1), and k = NB, where they are PB(*,*,NB), PC(*,*,NB), and PA(*,*,NB) (= diagonal block). (Each asterisk * stands for an index that ranges from 1 to MB.) C. You must also provide a subroutine of the form: SUBROUTINE ADDA ( NEQ , T , Y , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), PA ( MB , MB , NB ), PB ( MB , MB , NB ), PC ( MB , MB , NB ) which adds the nonzero blocks of the matrix A = A(t,y) to the\n contents of the arrays PA, PB, and PC, following the structure\n description in Paragraph B above.\n T and the Y array are input and should not be altered.\n Thus the affect of ADDA should be the following: DO K = 1 , NB DO J = 1 , MB DO I = 1 , MB PA ( I , J , K ) = PA ( I , J , K ) + ( ( I , J ) element of K - th diagonal block of A ) PB ( I , J , K ) = PB ( I , J , K ) + ( ( I , J ) element of block in block position ( K , K + 1 ) of A , or in block position ( NB , NB - 2 ) if K = NB ) PC ( I , J , K ) = PC ( I , J , K ) + ( ( I , J ) element of block in block position ( K , K - 1 ) of A , or in block position ( 1 , 3 ) if K = 1 ) ENDDO ENDDO ENDDO D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)*s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21, and provide a subroutine of the form: SUBROUTINE JAC ( NEQ , T , Y , S , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), S ( * ), PA ( MB , MB , NB ), PB ( MB , MB , NB ), & & PC ( MB , MB , NB ) which computes dr/dy as a function of t, y, and s.  Here T, Y, and\n S are inputs, and the routine is to load dr/dy into PA, PB, PC,\n according to the structure description in Paragraph B above. That is, load the diagonal blocks into PA, the superdiagonal blocks\n (and block (NB,NB-2) ) into PB, and the subdiagonal blocks (and\n block (1,3) ) into PC.  The blocks in block-row k of dr/dy are to\n be loaded into PA(*,*,k), PB(*,*,k), and PC(*,*,k). Only nonzero elements need be loaded, and the indexing\n of PA, PB, and PC is the same as in the ADDA routine. Note that if A is independent of Y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy. If it is not feasible to provide a JAC routine, use\n MF = 22, and DLSOIBT will compute an approximate Jacobian\n internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSOIBT compute\n this vector (ISTATE = 0).  (DLSOIBT will solve the system A*s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI. The input array YDOTI and the initial Y array must be consistent with\n the equations A*dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI  must be approximately zero. F. Write a main program which calls Subroutine DLSOIBT once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSOIBT.  on the first call to DLSOIBT, supply arguments as follows: RES name of user subroutine for residual function r. ADDA name of user subroutine for computing and adding A(t,y). JAC name of user subroutine for Jacobian matrix dr/dy\n (MF = 21).  If not used, pass a dummy name. Note: the names for the RES and ADDA routines and (if used) the\n JAC routine must be declared External in the calling program. NEQ number of scalar equations in the system. Y array of initial values, of length NEQ. YDOTI array of length NEQ (containing initial dy/dt if ISTATE = 1). T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n the estimated local error in y(i) will be controlled so as\n to be roughly less (in magnitude) than EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. Thus the local error test passes if, in each component,\n either the absolute error is less than ATOL (or ATOL(i)),\n or the relative error is less than RTOL.\n Use RTOL = 0.0 for pure absolute error control, and\n use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n control.  Caution: Actual (global) errors may exceed these\n local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1 if the\n initial dy/dt is supplied, and 0 otherwise. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least: 22 + 9 * NEQ + 3 * MB * MB * NB for MF = 21 or 22 . LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least 20 + NEQ.\n Input in IWORK(1) the block size MB and in IWORK(2) the\n number NB of blocks in each direction along the matrix A.\n These must satisfy  MB .ge. 1, NB .ge. 4, and MB*NB = NEQ. LIW declared length of IWORK (in user’s dimension). MF method flag.  Standard values are: 21 for a user - supplied Jacobian . 22 for an internally generated Jacobian . For other choices of MF, see the paragraph on MF in\n  the full description below. Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE ISTATE values: value description 2 if DLSOIBT was successful, negative otherwise. -1 means excess work done on this call (check all inputs). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 cannot occur in casual use. -8 means DLSOIBT was unable to compute the initial dy/dt. In casual use, this means A(t,y) is initially singular. Supply YDOTI and use ISTATE = 1 on the first call. If DLSOIBT returns ISTATE = -1, -4, or -5, then the output of\n DLSOIBT also includes YDOTI = array containing residual vector\n r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSOIBT again.  No other parameters need be reset. Example Problem. The following is an example problem, with the coding needed\n for its solution by DLSOIBT.  The problem comes from the partial\n differential equation (the Burgers equation) du/dt  =  - u * du/dx  +  eta * d**2 u/dx**2,   eta = .05,\n on -1 .le. x .le. 1.  The boundary conditions are\n   du/dx = 0  at x = -1 and at x = 1.\n The initial profile is a square wave,\n   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere.\n The PDE is discretized in x by a simplified Galerkin method,\n using piecewise linear basis functions, on a grid of 40 intervals.\n The equations at x = -1 and 1 use a 3-point difference approximation\n for the right-hand side.  The result is a system A * dy/dt = g(y),\n of size NEQ = 41, where y(i) is the approximation to u at x = x(i),\n with x(i) = -1 + (i-1)*delx, delx = 2/(NEQ-1) = .05.  The individual\n equations in the system are\n   dy(1)/dt = ( y(3) - 2*y(2) + y(1) ) * eta / delx**2,\n   dy(NEQ)/dt = ( y(NEQ-2) - 2*y(NEQ-1) + y(NEQ) ) * eta / delx**2,\n and for i = 2, 3, ..., NEQ-1,\n   (1/6) dy(i-1)/dt + (4/6) dy(i)/dt + (1/6) dy(i+1)/dt\n       = ( y(i-1)**2 - y(i+1)**2 ) / (4*delx)\n         + ( y(i+1) - 2*y(i) + y(i-1) ) * eta / delx**2. The following coding solves the problem with MF = 21, with output\n of solution statistics at t = .1, .2, .3, and .4, and of the\n solution vector at t = .4.  Here the block size is just MB = 1. program dlsoibt_ex use m_odepack implicit none external addabt external jacbt external resid integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: atol , rtol , t , tout integer :: i , io , iopt , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 61 ) :: iwork real ( kind = dp ), dimension ( 514 ) :: rwork real ( kind = dp ), dimension ( 41 ) :: y , ydoti neq = 41 do i = 1 , neq y ( i ) = 0.0 enddo y ( 11 ) = 0.5 do i = 12 , 30 y ( i ) = 1.0 enddo y ( 31 ) = 0.5 t = 0.0 tout = 0.1 itol = 1 rtol = 1.0D-4 atol = 1.0D-5 itask = 1 istate = 0 iopt = 0 lrw = 514 liw = 61 iwork ( 1 ) = 1 iwork ( 2 ) = neq mf = 21 do io = 1 , 4 call dlsoibt ( resid , addabt , jacbt ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & [ atol ], itask , istate , iopt , rwork , lrw , iwork , liw , mf ) write ( 6 , 99010 ) t , iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99010 format ( ' At t =' , f5 . 2 , '   No. steps =' , i4 , '  No. r-s =' , i4 , & & '  No. J-s =' , i3 ) if ( istate /= 2 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout + 0.1 endif enddo write ( 6 , 99030 ) ( y ( i ), i = 1 , neq ) 99030 format ( / ' Final solution values..' / 9 ( 5 D12 . 4 / )) end program dlsoibt_ex subroutine resid ( N , T , Y , S , R , Ires ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), intent ( in ), dimension ( N ) :: S real ( kind = dp ), intent ( out ), dimension ( N ) :: R integer :: Ires real ( kind = dp ), save :: delx , eta real ( kind = dp ) :: eodsq integer :: i , nm1 data eta / 0.05 / , delx / 0.05 / eodsq = eta / delx ** 2 R ( 1 ) = eodsq * ( Y ( 3 ) - 2.0 * Y ( 2 ) + Y ( 1 )) - S ( 1 ) nm1 = N - 1 do i = 2 , nm1 R ( i ) = ( Y ( i - 1 ) ** 2 - Y ( i + 1 ) ** 2 ) / ( 4.0 * delx ) & & + eodsq * ( Y ( i + 1 ) - 2.0 * Y ( i ) + Y ( i - 1 )) - ( S ( i - 1 ) + 4.0 * S ( i ) + S ( i + 1 )) & & / 6.0 enddo R ( N ) = eodsq * ( Y ( N - 2 ) - 2.0 * Y ( nm1 ) + Y ( N )) - S ( N ) end subroutine resid subroutine addabt ( N , T , Y , Mb , Nb , Pa , Pb , Pc ) implicit                                         none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y integer , intent ( in ) :: Mb integer , intent ( in ) :: Nb real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pa real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pb real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pc integer :: k , nm1 Pa ( 1 , 1 , 1 ) = Pa ( 1 , 1 , 1 ) + 1.0 nm1 = N - 1 do k = 2 , nm1 Pa ( 1 , 1 , k ) = Pa ( 1 , 1 , k ) + ( 4.0 / 6.0 ) Pb ( 1 , 1 , k ) = Pb ( 1 , 1 , k ) + ( 1.0 / 6.0 ) Pc ( 1 , 1 , k ) = Pc ( 1 , 1 , k ) + ( 1.0 / 6.0 ) enddo Pa ( 1 , 1 , N ) = Pa ( 1 , 1 , N ) + 1.0 end subroutine addabt subroutine jacbt ( N , T , Y , S , Mb , Nb , Pa , Pb , Pc ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), dimension ( N ) :: S integer , intent ( in ) :: Mb integer , intent ( in ) :: Nb real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pa real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pb real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pc real ( kind = dp ), save :: delx , eta real ( kind = dp ) :: eodsq integer :: k data eta / 0.05 / , delx / 0.05 / eodsq = eta / delx ** 2 Pa ( 1 , 1 , 1 ) = eodsq Pb ( 1 , 1 , 1 ) = - 2.0 * eodsq Pc ( 1 , 1 , 1 ) = eodsq do k = 2 , N Pa ( 1 , 1 , k ) = - 2.0 * eodsq Pb ( 1 , 1 , k ) = - Y ( k + 1 ) * ( 0.5 / delx ) + eodsq Pc ( 1 , 1 , k ) = Y ( k - 1 ) * ( 0.5 / delx ) + eodsq enddo Pb ( 1 , 1 , N ) = eodsq Pc ( 1 , 1 , N ) = - 2.0 * eodsq Pa ( 1 , 1 , N ) = eodsq end subroutine jacbt The output of this program (on a CDC-7600 in single precision)\n is as follows: At t = 0.10   No. steps =  35  No. r-s =  45  No. J-s =  9\n At t = 0.20   No. steps =  43  No. r-s =  54  No. J-s = 10\n At t = 0.30   No. steps =  48  No. r-s =  60  No. J-s = 11\n At t = 0.40   No. steps =  51  No. r-s =  64  No. J-s = 12\n\n Final solution values..\n  1.2747e-02  1.1997e-02  1.5560e-02  2.3767e-02  3.7224e-02\n  5.6646e-02  8.2645e-02  1.1557e-01  1.5541e-01  2.0177e-01\n  2.5397e-01  3.1104e-01  3.7189e-01  4.3530e-01  5.0000e-01\n  5.6472e-01  6.2816e-01  6.8903e-01  7.4612e-01  7.9829e-01\n  8.4460e-01  8.8438e-01  9.1727e-01  9.4330e-01  9.6281e-01\n  9.7632e-01  9.8426e-01  9.8648e-01  9.8162e-01  9.6617e-01\n  9.3374e-01  8.7535e-01  7.8236e-01  6.5321e-01  5.0003e-01\n  3.4709e-01  2.1876e-01  1.2771e-01  7.3671e-02  5.0642e-02\n  5.4496e-02 Full Description of User Interface to DLSOIBT. The user interface to DLSOIBT consists of the following parts. The call sequence to Subroutine DLSOIBT, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSOIBT package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSOIBT package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF, and those used for both input and output are\n     Y, T, ISTATE, YDOTI. The work arrays RWORK and IWORK are also used for additional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSOIBT to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES the name of the user-supplied subroutine which supplies\n the residual vector for the ODE system, defined by r = g(t,y) - A(t,y) * s as a function of the scalar t and the vectors\n s and y (s approximates dy/dt).  This subroutine\n is to have the form SUBROUTINE RES ( NEQ , T , Y , S , R , IRES ) DOUBLE PRECISION T , Y ( * ), S ( * ), R ( * ) where NEQ, T, Y, S, and IRES are input, and R and\n IRES are output. Y, S, and R are arrays of length NEQ. On input, IRES indicates how DLSOIBT will use the\n returned array R, as follows: IRES = 1  means that DLSOIBT needs the full residual,\n                   r = g - A\\*s, exactly.\n         IRES = -1 means that DLSOIBT is using R only to compute\n                   the Jacobian dr/dy by difference quotients. The RES routine can ignore IRES, or it can omit some terms\n if IRES = -1.  If A does not depend on y, then RES can\n just return R = g when IRES = -1.  If g - A*s contains other\n additive terms that are independent of y, these can also be\n dropped, if done consistently, when IRES = -1. The subroutine should set the flag IRES if it\n encounters a halt condition or illegal input.\n Otherwise, it should not reset IRES.  On output, IRES = 1 or -1 represents a normal return, and\n DLSOIBT continues integrating the ODE.  Leave IRES\n unchanged from its input value. IRES = 2 tells DLSOIBT to immediately return control\n to the calling program, with ISTATE = 3.  This lets\n the calling program change parameters of the problem\n if necessary. IRES = 3 represents an error condition (for example, an\n illegal value of y).  DLSOIBT tries to integrate the system\n without getting IRES = 3 from RES.  If it cannot, DLSOIBT\n returns with ISTATE = -7 or -1. On an DLSOIBT return with ISTATE = 3, -1, or -7, the\n values of T and Y returned correspond to the last point\n reached successfully without getting the flag IRES = 2 or 3. The flag values IRES = 2 and 3 should not be used to\n handle switches or root-stop conditions.  This is better\n done by calling DLSOIBT in a one-step mode and checking the\n stopping function for a sign change at each step. If quantities computed in the RES routine are needed\n externally to DLSOIBT, an extra call to RES should be made\n for this purpose, for consistent and accurate results.\n To get the current dy/dt for the S argument, use DINTDY. RES must be declared External in the calling\n program. See note below for more about RES. ADDA the name of the user-supplied subroutine which adds the\n matrix A = A(t,y) to another matrix, P, stored in\n block-tridiagonal form.  This routine is to have the form SUBROUTINE ADDA ( NEQ , T , Y , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), PA ( MB , MB , NB ), PB ( MB , MB , NB ), & & PC ( MB , MB , NB ) where NEQ, T, Y, MB, NB, and the arrays PA, PB, and PC\n are input, and the arrays PA, PB, and PC are output.\n Y is an array of length NEQ, and the arrays PA, PB, PC\n are all MB by MB by NB. Here a block-tridiagonal structure is assumed for A(t,y),\n and also for the matrix P to which A is added here,\n as described in Paragraph B of the Summary of Usage above.\n Thus the affect of ADDA should be the following: DO K = 1 , NB DO J = 1 , MB DO I = 1 , MB PA ( I , J , K ) = PA ( I , J , K ) + ( ( I , J ) element of K - th diagonal block of A ) PB ( I , J , K ) = PB ( I , J , K ) + ( ( I , J ) element of block ( K , K + 1 ) of A , or block ( NB , NB - 2 ) if K = NB ) PC ( I , J , K ) = PC ( I , J , K ) + ( ( I , J ) element of block ( K , K - 1 ) of A , or block ( 1 , 3 ) if K = 1 ) ENDDO ENDDO ENDDO ADDA must be declared External in the calling program.\n See note below for more information about ADDA. JAC the name of the user-supplied subroutine which supplies\n the Jacobian matrix, dr/dy, where r = g - A*s.  JAC is\n required if MITER = 1.  Otherwise a dummy name can be\n passed.  This subroutine is to have the form SUBROUTINE JAC ( NEQ , T , Y , S , MB , NB , PA , PB , PC ) DOUBLE PRECISION T , Y ( * ), S ( * ), PA ( MB , MB , NB ), & PB ( MB , MB , NB ), PC ( MB , MB , NB ) where NEQ, T, Y, S, MB, NB, and the arrays PA, PB, and PC\n are input, and the arrays PA, PB, and PC are output.\n Y and S are arrays of length NEQ, and the arrays PA, PB, PC\n are all MB by MB by NB. PA, PB, and PC are to be loaded with partial derivatives\n (elements of the Jacobian matrix) on output, in terms of the\n block-tridiagonal structure assumed, as described\n in Paragraph B of the Summary of Usage above. That is, load the diagonal blocks into PA, the\n superdiagonal blocks (and block (NB,NB-2) ) into PB, and\n the subdiagonal blocks (and block (1,3) ) into PC. The blocks in block-row k of dr/dy are to be loaded into\n PA(*,*,k), PB(*,*,k), and PC(*,*,k). Thus the affect of JAC should be the following: DO K = 1 , NB DO J = 1 , MB DO I = 1 , MB PA ( I , J , K ) = ( ( I , J ) element of K - th diagonal block of dr / dy ) PB ( I , J , K ) = ( ( I , J ) element of block ( K , K + 1 ) of dr / dy , or block ( NB , NB - 2 ) if K = NB ) PC ( I , J , K ) = ( ( I , J ) element of block ( K , K - 1 ) of dr / dy , or block ( 1 , 3 ) if K = 1 ) ENDDO ENDDO ENDDO PA, PB, and PC are preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to RES with the same\n arguments NEQ, T, Y, and S.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by RES and not recomputed by JAC\n if desired.  Also, JAC may alter the Y array, if desired. JAC need not provide dr/dy exactly.  A crude\n approximation will do, so that DLSOIBT may be used when\n A and dr/dy are not really block-tridiagonal, but are close\n to matrices that are. JAC must be declared External in the calling program.\n See note below for more about JAC. Note on RES, ADDA, and JAC: These subroutines may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in the subroutines) and/or Y has length\n exceeding NEQ(1).  However, these routines should not alter\n NEQ(1), Y(1),…,Y(NEQ) or any other input variables.\n See the descriptions of NEQ and Y below. NEQ the size of the system (number of first order ordinary\n differential equations or scalar algebraic equations).\n Used only for input. NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in RES, ADDA, or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size. (The DLSOIBT package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to RES, ADDA, and JAC.  Hence, if it is an array, locations NEQ(2),… may be used to store other integer data\n and pass it to RES, ADDA, or JAC.  Each such subroutine\n must include NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 0 or 1), and only for output on other\n calls.  On the first call, Y must contain the vector of\n initial values.  On output, Y contains the computed solution\n vector, evaluated at t.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n ADDA, and JAC.  Hence its length may exceed NEQ,\n and locations Y(NEQ+1),… may be used to store other real\n data and pass it to RES, ADDA, or JAC.  (The DLSOIBT\n package accesses only Y(1),…,Y(NEQ). ) YDOTI a real array for the initial value of the vector\n dy/dt and for work space, of dimension at least NEQ. On input: If ISTATE = 0 then DLSOIBT will compute the initial value\n of dy/dt, if A is nonsingular.  Thus YDOTI will\n serve only as work space and may have any value. If ISTATE = 1 then YDOTI must contain the initial value\n of dy/dt. If ISTATE = 2 or 3 (continuation calls) then YDOTI\n may have any value. Note: If the initial value of A is singular, then\n DLSOIBT cannot compute the initial value of dy/dt, so\n it must be provided in YDOTI, with ISTATE = 1. On output, when DLSOIBT terminates abnormally with ISTATE =\n -1, -4, or -5, YDOTI will contain the residual\n r = g(t,y) - A(t,y)*(dy/dt).  If r is large, t is near\n its initial value, and YDOTI is supplied with ISTATE = 1,\n there may have been an incorrect input value of\n YDOTI = dy/dt, or the problem (as given to DLSOIBT)\n may not have a solution. If desired, the YDOTI array may be used for other\n purposes between calls to the solver. T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration. On output, after each call, T is the value at which a\n computed solution y is evaluated (usually the same as TOUT).\n On an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 0 or 1), TOUT may be\n equal to T for one call, then should .ne. T for the next\n call.  For the initial T, an input value of TOUT .ne. T is\n used in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form RMS-norm of ( E(i)/EWT(i) )   .le.   1,\n          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), and the RMS-norm (root-mean-square norm) here is\n RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i))\n is a vector of weights which must always be positive, and\n the values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array scalar RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting\n user-supplied routines for the setting of EWT and/or for\n the norm calculation.  See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value description 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note :  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n state of the calculation. On input, the values of ISTATE are as follows. value description 0 means this is the first call for the problem, and DLSOIBT is to compute the initial value of dy/dt (while doing other initializations).  See note below. 1 means this is the first call for the problem, and the initial value of dy/dt has been supplied in YDOTI (DLSOIBT will do other initializations). See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, MB, NB, and any of the optional inputs except H0. (See IWORK description for MB and NB.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 0 or 1 on input. On output, ISTATE has the following values and meanings. value description 0 or 1  means nothing was done; TOUT = t and ISTATE = 0 or 1 on input. 2 means that the integration was performed successfully. 3 means that the user-supplied Subroutine RES signalled DLSOIBT to halt the integration and return (IRES = 2). Integration as far as T was achieved with no occurrence of IRES = 2, but this flag was set on attempting the next step. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i) = 0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means that the user-supplied Subroutine RES set its error flag (IRES = 3) despite repeated tries by DLSOIBT to avoid that condition. -8 means that ISTATE was 0 on input but DLSOIBT was unable to compute the initial value of dy/dt.  See the printed message for details. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Similarly, ISTATE (= 3) need not be reset if RES told\n DLSOIBT to return because the calling program must change\n the parameters of the problem. Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below. IOPT = 0 means no optional inputs are being used.\n            Default values will be used in all cases.\n   IOPT = 1 means one or more optional inputs are being used. RWORK a real working array (double precision).\n The length of RWORK must be at least 20 + NYH*(MAXORD + 1) + 3*NEQ + LENWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENWM  = 3*MB*MB*NB + 2.\n          (See MF description for the definition of METH.)\n Thus if MAXORD has its default value and NEQ is constant,\n this length is\n             22 + 16*NEQ + 3*MB*MB*NB     for MF = 11 or 12,\n             22 + 9*NEQ + 3*MB*MB*NB      for MF = 21 or 22.\n```text\n The first 20 words of RWORK are reserved for conditional\n and optional inputs and optional outputs.\n\n The following word in RWORK is a conditional input:\n```text\n            RWORK(1) = TCRIT = critical value of t which the solver\n                       is not to overshoot.  Required if ITASK is\n                       4 or 5, and ignored otherwise.  (See ITASK.) LRW the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.) IWORK an integer work array.  The length of IWORK must be at least\n 20 + NEQ .  The first few words of IWORK are used for\n additional and optional inputs and optional outputs. The following 2 words in IWORK are additional required\n inputs to DLSOIBT:\n            IWORK(1) = MB = block size\n            IWORK(2) = NB = number of blocks in the main diagonal\n These must satisfy  MB .ge. 1, NB .ge. 4, and MB*NB = NEQ. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSOIBT\n for the same problem, except possibly for the additional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSOIBT between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF the method flag.  used only for input.  The legal values of\n MF are 11, 12, 21, and 22. MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n METH indicates the basic linear multistep method: METH description 1 means the implicit Adams method. 2 means the method based on Backward Differentiation Formulas (BDFS). The BDF method is strongly preferred for stiff\n problems, while the Adams method is preferred when the\n problem is not stiff.  If the matrix A(t,y) is\n nonsingular, stiffness here can be taken to mean that of\n the explicit ODE system dy/dt = A-inverse * g.  If A is\n singular, the concept of stiffness is not well defined. If you do not know whether the problem is stiff, we\n recommend using METH = 2.  If it is stiff, the advantage\n of METH = 2 over METH = 1 will be great, while if it is\n not stiff, the advantage of METH = 1 will be slight.\n If maximum efficiency is important, some experimentation\n with METH may be necessary. MITER indicates the corrector iteration method: MITER description 1 means chord iteration with a user-supplied block-tridiagonal Jacobian. 2 means chord iteration with an internally generated (difference quotient) block- tridiagonal Jacobian approximation, using 3*MB+1 extra calls to RES per dr/dy evaluation. If MITER = 1, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC. For MITER = 2, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) MAXORD IWORK(5) the maximum order to be allowed.  The default value is 12 if METH = 1, and 5 if METH = 2. If MAXORD exceeds the default value, it will be reduced to the default value. If MAXORD is changed during the problem, it may cause the current order to be reduced. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. Optional Outputs. As optional additional output from DLSOIBT, the variables listed\n below are quantities related to the performance of DLSOIBT\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSOIBT, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) NST IWORK(11) the number of steps taken for the problem so far. NRE IWORK(12) the number of residual evaluations (RES calls) for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (each involving an evaluation of a and dr/dy) for the problem so far.  This equals the number of calls to ADDA and (if MITER = 1) to JAC, and the number of matrix LU decompositions. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required. This is defined on normal returns and on an illegal input return for insufficient storage. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at t = TCUR. ACOR LENRW-NEQ+1 array of size NEQ used for the accumulated corrections on each step, scaled on output to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a return from DLSOIBT with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSOIBT.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call Function CALL XSETUN(LUN) Set the logical unit number, LUN, for output of messages from DLSOIBT, if the default is not desired. The default value of LUN is 6. CALL XSETF(MFLAG) Set a flag to control the printing of messages by DLSOIBT. MFLAG = 0 means do not print. (Danger: This risks losing valuable information.) MFLAG = 1 means print (the default). Either of the above calls may be made at any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) saves and restores the contents of the internal Common blocks used by DLSOIBT (see Part 3 below). RSAV must be a real array of length 218 or more, and ISAV must be an integer array of length 37 or more. JOB=1 means save Common into RSAV/ISAV. JOB=2 means restore Common from RSAV/ISAV. DSRCOM is useful if one is interrupting a run and restarting later, or alternating between two or more problems solved with DLSOIBT. CALL DINTDY(,,,,,) Provide derivatives of y, of various (see below) orders, at a specified point t, if desired.  It may be called only after a successful return from DLSOIBT. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the t last returned by DLSOIBT).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(t), is already provided\n by DLSOIBT directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t).\n IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Save and Restore Program State If the solution of a given problem by DLSOIBT is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSOIBT call prior to the\n interruption, the contents of the call sequence variables and the\n internal state variables, and later restore these values before the\n next DLSOIBT call for that problem.  To save and restore the values\n , use Subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSOIBT package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET() The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) where NEQ, ITOL, RTOL, and ATOL are as in the DLSOIBT call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSOIBT in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM() The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v: D = DVNORM (N, V, W) where: N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSOIBT.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n  - substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n  - ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. Pedigree: Reference:\n     Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing,  R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64.\n This is based on the the 18 November 2003 version of ODEPACK Authors:       Alan C. Hindmarsh and Jeffrey F. Painter\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Charles S. Kenney\n formerly at:   Naval Weapons Center\n                China Lake, CA 93555 Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Ydoti real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: Mf Calls proc~~dlsoibt~~CallsGraph proc~dlsoibt dlsoibt proc~dewset dewset proc~dlsoibt->proc~dewset proc~dstodi dstodi proc~dlsoibt->proc~dstodi proc~dvnorm dvnorm proc~dlsoibt->proc~dvnorm proc~xerrwd xerrwd proc~dlsoibt->proc~xerrwd proc~dumach dumach proc~dlsoibt->proc~dumach proc~daigbt daigbt proc~dlsoibt->proc~daigbt proc~dintdy dintdy proc~dlsoibt->proc~dintdy proc~dstodi->proc~dvnorm proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsoibt.html"},{"title":"dpjibt – odepack","text":"public subroutine dpjibt(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPJIBT is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nand r = g(t,y) - A(t,y)*s. Here J is computed by the user-supplied\nroutine JAC if MITER = 1, or by finite differencing if MITER = 2. J is stored in WM, rescaled, and ADDA is called to generate P. P is then subjected to LU decomposition by DDECBT in preparation\nfor later solution of linear systems with P as coefficient matrix. In addition to variables described previously, communication\nwith DPJIBT uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array used for output only.  On output it contains the\nresidual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains block structure parameters\nMB = IWM(1) and NB = IWM(2).\nEL0 EL(1) (input). IERPJ output error flag.\n    = 0 if no trouble occurred,\n    = 1 if the P matrix was found to be unfactorable,\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res integer :: jac real :: adda Contents None","tags":"","loc":"proc/dpjibt.html"},{"title":"dprepj – odepack","text":"public subroutine dprepj(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) NAME dprepj ( 3 f ) - [ M_odepack ] Compute and process Newton iteration matrix . DESCRIPTION DPREPJ is called by DSTODE to compute and process the matrix\n  P = I - h el(1) J , where J is an approximation to the Jacobian. Here J is computed by the user-supplied routine JAC if\n  MITER = 1 or 4, or by finite differencing if MITER = 2, 3, or 5. If MITER = 3, a diagonal approximation to J is used. J is stored in WM and replaced by P.  If MITER .ne. 3, P is then\n  subjected to LU decomposition in preparation for later solution\n  of linear systems with P as coefficient matrix.  This is done\n  by DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. In addition to variables described in DSTODE and DLSODE prologues,\n  communication with DPREPJ uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODE). SAVF array containing f evaluated at predicted y. WM real work space for matrices.  On output it contains the\ninverse diagonal matrix if MITER = 3 and the LU decomposition\nof P if MITER is 1, 2 , 4, or 5.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments.\nWM(2) = H*EL0, saved for later use if MITER = 3. IWM integer work space containing pivot information, starting at\nIWM(21), if MITER is 1, 2, 4, or 5.  IWM also contains band\nparameters ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 EL(1) (input). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nP matrix found to be singular. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the COMMON variables EL0, H, TN, UROUND,\n  MITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac Calls proc~~dprepj~~CallsGraph proc~dprepj dprepj proc~dvnorm dvnorm proc~dprepj->proc~dvnorm proc~dgefa dgefa proc~dprepj->proc~dgefa proc~dscal dscal proc~dgefa->proc~dscal proc~daxpy daxpy proc~dgefa->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprepj.html"},{"title":"dprepji – odepack","text":"public subroutine dprepji(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPREPJI is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s. Here J is computed by the user-supplied\nroutine JAC if MITER = 1 or 4, or by finite differencing if MITER =\n2 or 5. J is stored in WM, rescaled, and ADDA is called to generate\nP. P is then subjected to LU decomposition in preparation\nfor later solution of linear systems with P as coefficient\nmatrix.  This is done by DGEFA if MITER = 1 or 2, and by\nDGBFA if MITER = 4 or 5. In addition to variables described previously, communication\nwith DPREPJI uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array used for output only.  On output it contains the\nresidual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains the band parameters\nML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 el(1) (input). IERPJ output error flag.\n    = 0 if no trouble occurred,\n    = 1 if the P matrix was found to be singular,\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Rtem (*) real(kind=dp) :: Savr (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: res integer :: jac real :: adda Calls proc~~dprepji~~CallsGraph proc~dprepji dprepji proc~dgefa dgefa proc~dprepji->proc~dgefa proc~dscal dscal proc~dgefa->proc~dscal proc~daxpy daxpy proc~dgefa->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprepji.html"},{"title":"dprja – odepack","text":"public subroutine dprja(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPRJA is called by DSTODA to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian. Here J is computed by the user-supplied routine JAC if\nMITER = 1 or 4 or by finite differencing if MITER = 2 or 5. J, scaled by -H*EL(1), is stored in WM.  Then the norm of J (the\nmatrix norm consistent with the weighted max-norm on vectors given\nby DMNORM) is computed, and J is overwritten by P. P is then\nsubjected to LU decomposition in preparation for later solution\nof linear systems with P as coefficient matrix.  This is done\nby DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. In addition to variables described previously, communication\nwith DPRJA uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODA). SAVF array containing f evaluated at predicted y. WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).   IWM also contains the band parameters\nML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 EL(1) (input). PDNORM norm of Jacobian matrix. (Output). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nP matrix found to be singular. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Ftem real(kind=dp), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac Calls proc~~dprja~~CallsGraph proc~dprja dprja proc~dmnorm dmnorm proc~dprja->proc~dmnorm proc~dgefa dgefa proc~dprja->proc~dgefa proc~dscal dscal proc~dgefa->proc~dscal proc~daxpy daxpy proc~dgefa->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprja.html"},{"title":"dprjis – odepack","text":"public subroutine dprjis(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wk, Iwk, res, jac, adda) DPRJIS is called to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s. J is computed by columns, either by\nthe user-supplied routine JAC if MITER = 1, or by finite differencing\nif MITER = 2. J is stored in WK, rescaled, and ADDA is called to\ngenerate P. The matrix P is subjected to LU decomposition in CDRV.\nP and its LU decomposition are stored separately in WK. In addition to variables described previously, communication\nwith DPRJIS uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array containing r evaluated at predicted y. On output it\ncontains the residual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WK real work space for matrices.  On output it contains P and\nits sparse LU decomposition.  Storage of matrix elements\nstarts at WK(3).\nWK also contains the following matrix-related data.\nWK(1) = SQRT(UROUND), used in numerical Jacobian increments. IWK integer work space for matrix-related data, assumed to be\nequivalenced to WK.  In addition,  WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. EL0 EL(1) (input). IERPJ output error flag (in COMMON).\n    =  0 if no error.\n    =  1 if zero pivot found in CDRV.\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3.\n    = -1 if insufficient storage for CDRV (should not occur).\n    = -2 if other error found in CDRV (should not occur here). JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses other variables in global structures. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wk integer, dimension(*) :: Iwk real :: res integer :: jac real :: adda Calls proc~~dprjis~~CallsGraph proc~dprjis dprjis proc~cdrv cdrv proc~dprjis->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprjis.html"},{"title":"dprjs – odepack","text":"public subroutine dprjs(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wk, Iwk, f, jac) DPRJS is called to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nJ is computed by columns, either by the user-supplied routine JAC\nif MITER = 1, or by finite differencing if MITER = 2. Alternatively, if MITER = 3, a diagonal approximation to J is used. if MITER = 1 or 2, and if the existing value of the Jacobian\n(as contained in P) is considered acceptable, then a new value of\nP is reconstructed from the old value. In any case, when MITER\nis 1 or 2, the P matrix is subjected to LU decomposition in CDRV. P and its LU decomposition are stored (separately) in WK. In addition to variables described previously, communication\nwith DPRJS uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODE). SAVF array containing f evaluated at predicted y. WK real work space for matrices.  On output it contains the\ninverse diagonal matrix if MITER = 3, and P and its sparse\nLU decomposition if MITER is 1 or 2.\nStorage of matrix elements starts at WK(3).\nWK also contains the following matrix-related data:\nWK(1) = SQRT(UROUND), used in numerical Jacobian increments.\nWK(2) = H*EL0, saved for later use if MITER = 3. IWK integer work space for matrix-related data, assumed to\nbe equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. EL0 EL(1) (input). IERPJ output error flag (in Common).\n  = 0 if no error.\n  = 1  if zero pivot found in CDRV.\n  = 2  if a singular matrix arose with MITER = 3.\n  = -1 if insufficient storage for CDRV (should not occur here).\n  = -2 if other error found in CDRV (should not occur here). JCUR output flag showing status of (approximate) Jacobian matrix:\n  = 1 to indicate that the Jacobian is now current, or\n  = 0 to indicate that a saved value was used. This routine also uses other variables in Common. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real :: f integer :: jac Calls proc~~dprjs~~CallsGraph proc~dprjs dprjs proc~dvnorm dvnorm proc~dprjs->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprjs.html"},{"title":"drchek – odepack","text":"public subroutine drchek(Job, g_sub, Neq, Y, Yh, Nyh, G0, G1, Gx, Jroot, Irt) This routine checks for the presence of a root in the vicinity of\nthe current T, in a manner depending on the input flag JOB.  It calls\nSubroutine DROOTS to locate the root as precisely as possible. In addition to variables described previously, DRCHEK\nuses the following for communication: JOB integer flag indicating type of call: JOB Description 1 means the problem is being initialized, and DRCHEK is to look for a root at or very near the initial T. ! 2 means a continuation call to the solver was just made, and DRCHEK is to check for a root in the relevant part of the step dlsr taken. ! 3 means a successful step was just taken, and DRCHEK is to look for a root in the interval of the step. G0 array of length NG, containing the value of g at T = T0.\nG0 is input for JOB .ge. 2, and output in all cases. G1,GX arrays of length NG for work space. IRT completion flag: IRT Description 0 means no root was found. -1 means JOB = 1 and a root was found too near to T. 1 means a legitimate root was found (JOB = 2 or 3). On return, T0 is the root location, and Y is the\ncorresponding solution vector. T0 value of T at one endpoint of interval of interest.  Only\nroots beyond T0 in the direction of integration are sought. T0 is input if JOB .ge. 2, and output in all cases. T0 is updated by DRCHEK, whether a root is found or not. TLAST dlsr value of T returned by the solver (input only). TOUTC copy of TOUT (input only). IRFND input flag showing whether the dlsr step taken had a root.\nIRFND = 1 if it did, = 0 if not. ITASKC copy of ITASK (input only). NGC copy of NG (input only). Arguments Type Intent Optional Attributes Name integer, intent(in) :: Job real :: g_sub integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: G0 (*) real(kind=dp) :: G1 (*) real(kind=dp) :: Gx (*) integer :: Jroot (*) integer, intent(out) :: Irt Calls proc~~drchek~~CallsGraph proc~drchek drchek proc~dintdy dintdy proc~drchek->proc~dintdy proc~xerrwd xerrwd proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~drchek~~CalledByGraph proc~drchek drchek proc~dlsodar dlsodar proc~dlsodar->proc~drchek proc~dlsodkr dlsodkr proc~dlsodkr->proc~drchek Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/drchek.html"},{"title":"dscal – odepack","text":"public subroutine dscal(N, Da, Dx, Incx) NAME dscal(3f) - [M_odepack::matrix] Multiply a vector by a constant. SYNOPSIS subroutine dscal(N,Da,Dx,Incx)\ninteger , intent(in) :: N\nreal(kind=dp) , intent(in) :: Da\nreal(kind=dp) , intent(inout) , dimension(*) :: Dx\ninteger , intent(in) :: Incx DESCRIPTION Replace double precision DX by double precision DA DX.\n   For I = 0 to N-1, replace DX(IX+I INCX) with  DA * DX(IX+I INCX),\n   where IX = 1 if INCX .GE. 0, else IX = 1+(1-N) INCX. OPTIONS N number of elements in input vector(s) DA double precision scale factor DX double precision vector with N elements INCX storage spacing between elements of DX RETURNS DX double precision result (unchanged if N.LE.0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(inout) :: Dx (*) integer, intent(in) :: Incx Called by proc~~dscal~~CalledByGraph proc~dscal dscal proc~dgefa dgefa proc~dgefa->proc~dscal proc~dainvg dainvg proc~dainvg->proc~dgefa proc~dprja dprja proc~dprja->proc~dgefa proc~dprepji dprepji proc~dprepji->proc~dgefa proc~dprepj dprepj proc~dprepj->proc~dgefa proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dscal.html"},{"title":"dslsbt – odepack","text":"public subroutine dslsbt(Wm, Iwm, X, Tem) This routine acts as an interface between the core integrator\nroutine and the DSOLBT routine for the solution of the linear system\narising from chord iteration.\nCommunication with DSLSBT uses the following variables: WM real work space containing the LU decomposition,\nstarting at WM(3). IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains block structure parameters\nMB = IWM(1) and NB = IWM(2). X the right-hand side vector on input, and the solution vector\non output, of length N. TEM vector of work space of length N, not used in this version. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Wm (*) integer :: Iwm (*) real(kind=dp) :: X (*) real(kind=dp) :: Tem (*) Contents None","tags":"","loc":"proc/dslsbt.html"},{"title":"dsolss – odepack","text":"public subroutine dsolss(Wk, Iwk, X, Tem) This routine manages the solution of the linear system arising from\na chord iteration.  It is called if MITER .ne. 0. If MITER is 1 or 2, it calls CDRV to accomplish this. If MITER = 3 it updates the coefficient H*EL0 in the diagonal\nmatrix, and then computes the solution.\ncommunication with DSOLSS uses the following variables: WK real work space containing the inverse diagonal matrix if\nMITER = 3 and the LU decomposition of the matrix otherwise.\nStorage of matrix elements starts at WK(3).\nWK also contains the following matrix-related data: WK ( 1 ) = SQRT ( UROUND ) ( not used here ) , WK ( 2 ) = HL0 , the previous value of H * EL0 , used if MITER = 3 . IWK integer work space for matrix-related data, assumed to\nbe equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. X the right-hand side vector on input, and the solution vector\non output, of length N. TEM vector of work space of length N, not used in this version. IERSL output flag (in Common). IERSL = 0 if no trouble occurred . IERSL = - 1 if CDRV returned an error flag ( MITER = 1 or 2 ) . This should never occur and is considered fatal . IERSL = 1 if a singular matrix arose with MITER = 3 . Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dsolss~~CallsGraph proc~dsolss dsolss proc~cdrv cdrv proc~dsolss->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dsolss.html"},{"title":"dsolsy – odepack","text":"public subroutine dsolsy(Wm, Iwm, X, Tem) DESCRIPTION This routine manages the solution of the linear system arising from\n  a chord iteration.  It is called if MITER .ne. 0. If MITER is 1 or 2, it calls DGESL to accomplish this. If MITER = 3 it updates the coefficient h*EL0 in the diagonal\n  matrix, and then computes the solution. If MITER is 4 or 5, it calls DGBSL. OPTIONS Communication with DSOLSY uses the following variables: WM real work space containing the inverse diagonal matrix if\n  MITER = 3 and the LU decomposition of the matrix otherwise.\n  Storage of matrix elements starts at WM(3).\n  WM also contains the following matrix-related data: WM ( 1 ) = SQRT ( UROUND ) ( not used here ) , WM ( 2 ) = HL0 , the previous value of h * EL0 , used if MITER = 3 . IWM integer work space containing pivot information, starting at\n  IWM(21), if MITER is 1, 2, 4, or 5. IWM also contains band parameters ML = IWM(1) \n  and MU = IWM(2) if MITER is 4 or 5. X the right-hand side vector on input, and the solution vector\n  on output, of length N. TEM vector of work space of length N, not used in this version. IERSL output flag (in COMMON).  IERSL = 0 if no trouble occurred. IERSL 1 if a singular matrix arose with MITER = 3. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dsolsy~~CallsGraph proc~dsolsy dsolsy proc~dgesl dgesl proc~dsolsy->proc~dgesl proc~daxpy daxpy proc~dgesl->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dsolsy.html"},{"title":"dsrcar – odepack","text":"public subroutine dsrcar(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(dlsa01)::DLSA, DLSR01, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 245 or more. ISAV integer array of length 55 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcar.html"},{"title":"dsrckr – odepack","text":"public subroutine dsrckr(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSR01, DLPK01, which\nare used internally by the DLSODKR solver. RSAV real array of length 228 or more. ISAV integer array of length 63 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrckr.html"},{"title":"dsrcma – odepack","text":"public subroutine dsrcma(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(DLSA01)::DLSA, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 240 or more. ISAV integer array of length 46 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcma.html"},{"title":"dsrcms – odepack","text":"public subroutine dsrcms(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSS01, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 224 or more. ISAV integer array of length 71 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcms.html"},{"title":"dsrcom – odepack","text":"public subroutine dsrcom(Rsav, Isav, Job) NAME dsrcom(3f) - [M_odepack] Save/restore ODEPACK COMMON blocks. DESCRIPTION This routine saves or restores (depending on JOB) the contents of\n  the internal types used to store the current state\n  by one (or more) of the ODEPACK solvers. VALUES RSAV real array of length 218 or more. ISAV integer array of length 37 or more. JOB flag indicating to save or restore the COMMON blocks:\n          JOB  = 1 if COMMON is to be saved (written to RSAV/ISAV)\n          JOB  = 2 if COMMON is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcom.html"},{"title":"dsrcpk – odepack","text":"public subroutine dsrcpk(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe internal types used internally by the DLSODPK solver. RSAV real array of length 222 or more. ISAV integer array of length 50 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcpk.html"},{"title":"dstoda – odepack","text":"public subroutine dstoda(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) DSTODA performs one step of the integration of an initial value\nproblem for a system of ordinary differential equations. Note: DSTODA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTODA is done with the following variables: Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). PJAC name of routine to evaluate and preprocess Jacobian matrix\nand P = I - H EL0 Jac, if a chord method is being used.\nIt also returns an estimate of norm(Jac) in PDNORM. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in H*EL0 before PJAC is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings:\n              0  perform the first step.\n          .gt.0  take a new step continuing from the last.\n             -1  take the next step with a new value of H,\n                   N, METH, MITER, and/or matrix parameters.\n             -2  take the next step with a new value of H,\n                   but with other inputs unchanged.\n         On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings:\n          0  the step was succesful.\n         -1  the requested error could not be achieved.\n         -2  corrector convergence could not be achieved.\n         -3  fatal error in PJAC or SLVS. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH current method.\n     METH = 1 means Adams method (nonstiff)\n     METH = 2 means BDF method (stiff)\n     METH may be reset by DSTODA. MITER corrector iteration method.\nMITER = 0 means functional iteration.\nMITER = JT .gt. 0 means a chord iteration corresponding\nto Jacobian type JT.  (The DLSODA/DLSODAR argument JT is\ncommunicated here as JTYP, but is not used in DSTODA\nexcept to load MITER following a method switch.)\nMITER may be reset by DSTODA. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs Calls proc~~dstoda~~CallsGraph proc~dstoda dstoda proc~dcfode dcfode proc~dstoda->proc~dcfode proc~dmnorm dmnorm proc~dstoda->proc~dmnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstoda~~CalledByGraph proc~dstoda dstoda proc~dlsoda dlsoda proc~dlsoda->proc~dstoda proc~dlsodar dlsodar proc~dlsodar->proc~dstoda Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dstoda.html"},{"title":"dstodpk – odepack","text":"public subroutine dstodpk(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTODPK performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. The following changes were made to generate Subroutine DSTODPK\nfrom Subroutine DSTODE: The array SAVX was added to the call sequence. PJAC and SLVS were replaced by PSOL in the call sequence. The Common block /DLPK01/ was added for communication. The test constant EPCON is loaded into Common below statement\n   numbers 125 and 155, and used below statement 400. The Newton iteration counter MNEWT is set below 220 and 400. The call to PJAC was replaced with a call to DPKSET (fixed name),\n   with a longer call sequence, called depending on JACFLG. The corrector residual is stored in SAVX (not Y) at 360,\n   and the solution vector is in SAVX in the 380 loop. SLVS was renamed DSOLPK and includes NEQ, SAVX, EWT, F, and JAC.\n   SAVX was added because DSOLPK now needs Y and SAVF undisturbed. The nonlinear convergence failure count NCFN is set at 430. Note: DSTODPK is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTODPK is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\nAlso used for input of YH(*,MAXORD+2) when JSTART = -1\nand MAXORD .lt. the current order NQ. SAVX an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). CCMAX maximum relative change in H*EL0 before DPKSET is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings: 0  the step was succesful.\n    -1  the requested error could not be achieved.\n    -2  corrector convergence could not be achieved.\n    -3  fatal error in DPKSET or DSOLPK. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between DPKSET calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH/MITER the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol Calls proc~~dstodpk~~CallsGraph proc~dstodpk dstodpk proc~dcfode dcfode proc~dstodpk->proc~dcfode proc~dvnorm dvnorm proc~dstodpk->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstodpk~~CalledByGraph proc~dstodpk dstodpk proc~dlsodpk dlsodpk proc~dlsodpk->proc~dstodpk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dstodpk.html"},{"title":"dstoka – odepack","text":"public subroutine dstoka(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTOKA performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. This routine was derived from Subroutine DSTODPK in the DLSODPK\npackage by the addition of automatic functional/Newton iteration\nswitching and logic for re-use of Jacobian data. Note: DSTOKA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure. Communication with DSTOKA is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\nAlso used for input of YH(*,MAXORD+2) when JSTART = -1\nand MAXORD .lt. the current order NQ. SAVX an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). CCMAX maximum relative change in H*EL0 before DSETPK is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used. HMXI = 0.0 is allowed and corresponds to an infinite HMAX. HMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n  . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings: 0  the step was succesful.\n      -1  the requested error could not be achieved.\n      -2  corrector convergence could not be achieved.\n      -3  fatal error in DSETPK or DSOLPK. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between DSETPK calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed.\nMETH/MITER = the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol Calls proc~~dstoka~~CallsGraph proc~dstoka dstoka proc~dcfode dcfode proc~dstoka->proc~dcfode proc~dvnorm dvnorm proc~dstoka->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstoka~~CalledByGraph proc~dstoka dstoka proc~dlsodkr dlsodkr proc~dlsodkr->proc~dstoka Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dstoka.html"},{"title":"jgroup – odepack","text":"public subroutine jgroup(N, Ia, Ja, Maxg, Ngrp, Igp, Jgp, Incl, Jdone, Ier) This subroutine constructs groupings of the column indices of\n the Jacobian matrix, used in the numerical evaluation of the\n Jacobian by finite differences. Input: N the order of the matrix. IA,JA sparse structure descriptors of the matrix by rows. MAXG length of available storage in the IGP array. Output: NGRP number of groups. JGP array of length N containing the column indices by groups. IGP pointer array of length NGRP + 1 to the locations in JGP\n of the beginning of each group. IER error indicator.  IER = 0 if no error occurred, or 1 if\n MAXG was insufficient. INCL and JDONE are working arrays of length N. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: Ia integer, intent(in), dimension(*) :: Ja integer, intent(in) :: Maxg integer, intent(out) :: Ngrp integer, intent(inout), dimension(*) :: Igp integer, intent(out), dimension(*) :: Jgp integer, intent(inout), dimension(*) :: Incl integer, intent(inout), dimension(*) :: Jdone integer, intent(out) :: Ier Called by proc~~jgroup~~CalledByGraph proc~jgroup jgroup proc~dprep dprep proc~dprep->proc~jgroup proc~dprepi dprepi proc~dprepi->proc~jgroup proc~dprepi~2 dprepi proc~dprepi~2->proc~jgroup proc~dprep~2 dprep proc~dprep~2->proc~jgroup proc~diprep~2 diprep proc~diprep~2->proc~dprep proc~diprep diprep proc~diprep->proc~dprep proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprepi~2 diprepi proc~diprepi~2->proc~dprepi proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~diprepi~2 proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/jgroup.html"},{"title":"odrv – odepack","text":"public subroutine odrv(N, Ia, Ja, A, P, Ip, Nsp, Isp, Path, Flag) Name odrv(3f) [M_odepack] - driver for sparse matrix reordering routines Description odrv finds a minimum degree ordering of the rows and columns\n   of a matrix m stored in (ia,ja,a) format (see below).  for the\n   reordered matrix, the work and storage required to perform\n   gaussian elimination is (usually) significantly less. note.. odrv and its subordinate routines have been modified to\n   compute orderings for general matrices, not necessarily having any\n   symmetry.  the miminum degree ordering is computed for the\n   structure of the symmetric matrix  m + m-transpose.\n   modifications to the original odrv module have been made in\n   the coding in subroutine mdi, and in the initial comments in\n   subroutines odrv and md. if only the nonzero entries in the upper triangle of m are being\n   stored, then odrv symmetrically reorders (ia,ja,a), (optionally)\n   with the diagonal entries placed first in each row.  this is to\n   ensure that if m(i,j) will be in the upper triangle of m with\n   respect to the new ordering, then m(i,j) is stored in row i (and\n   thus m(j,i) is not stored),  whereas if m(i,j) will be in the\n   strict lower triangle of m, then m(j,i) is stored in row j (and\n   thus m(i,j) is not stored). storage of sparse matrices the nonzero entries of the matrix m are stored row-by-row in the\n   array a.  to identify the individual nonzero entries in each row,\n   we need to know in which column each entry lies.  these column\n   indices are stored in the array ja.  i.e., if  a(k) = m(i,j),  then\n   ja(k) = j.  to identify the individual rows, we need to know where\n   each row starts.  these row pointers are stored in the array ia.\n   i.e., if m(i,j) is the first nonzero entry (stored) in the i-th row\n   and  a(k) = m(i,j),  then  ia(i) = k.  moreover, ia(n+1) points to\n   the first location following the last element in the last row.\n   thus, the number of entries in the i-th row is  ia(i+1) - ia(i),\n   the nonzero entries in the i-th row are stored consecutively in a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), and the corresponding column indices are stored consecutively in ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). when the coefficient matrix is symmetric, only the nonzero entries\n   in the upper triangle need be stored.  for example, the matrix ( 1  0  2  3  0 )\n             ( 0  4  0  0  0 )\n         m = ( 2  0  5  6  0 )\n             ( 3  0  6  7  8 )\n             ( 0  0  0  8  9 ) could be stored as - 1  2  3  4  5  6  7  8  9 10 11 12 13\n         ---+--------------------------------------\n         ia - 1  4  5  8 12 14\n         ja - 1  3  4  2  1  3  4  1  3  4  5  4  5\n          a - 1  2  3  4  2  5  6  3  6  7  8  8  9 or (symmetrically) as - 1  2  3  4  5  6  7  8  9\n         ---+--------------------------\n         ia - 1  4  5  7  9 10\n         ja - 1  3  4  2  3  4  4  5  5\n          a - 1  2  3  4  5  6  7  8  9          . parameters n    - order of the matrix\n\n    ia   - integer one-dimensional array containing pointers to delimit\n           rows in ja and a.  dimension = n+1\n\n    ja   - integer one-dimensional array containing the column indices\n           corresponding to the elements of a.  dimension = number of\n           nonzero entries in (the upper triangle of) m\n\n    a    - real one-dimensional array containing the nonzero entries in\n           (the upper triangle of) m, stored by rows.  dimension =\n           number of nonzero entries in (the upper triangle of) m\n\n    p    - integer one-dimensional array used to return the permutation\n           of the rows and columns of m corresponding to the minimum\n           degree ordering.  dimension = n\n\n    ip   - integer one-dimensional array used to return the inverse of\n           the permutation returned in p.  dimension = n\n\n    nsp  - declared dimension of the one-dimensional array isp.  nsp\n           must be at least  3n+4k,  where k is the number of nonzeroes\n           in the strict upper triangle of m\n\n    isp  - integer one-dimensional array used for working storage.\n           dimension = nsp\n\n    path - integer path specification.  values and their meanings are -\n             1  find minimum degree ordering only\n             2  find minimum degree ordering and reorder symmetrically\n                  stored matrix (used when only the nonzero entries in\n                  the upper triangle of m are being stored)\n             3  reorder symmetrically stored matrix as specified by\n                  input permutation (used when an ordering has already\n                  been determined and only the nonzero entries in the\n                  upper triangle of m are being stored)\n             4  same as 2 but put diagonal entries at start of each row\n             5  same as 3 but put diagonal entries at start of each row\n\n    flag - integer error flag.  values and their meanings are -\n               0    no errors detected\n              9n+k  insufficient storage in md\n             10n+1  insufficient storage in odrv\n             11n+1  illegal path specification Arguments Type Intent Optional Attributes Name integer :: N integer, dimension(*) :: Ia integer, dimension(*) :: Ja real(kind=dp), dimension(*) :: A integer, dimension(*) :: P integer, dimension(*) :: Ip integer, intent(in) :: Nsp integer, dimension(*) :: Isp integer, intent(in) :: Path integer, intent(inout) :: Flag Called by proc~~odrv~~CalledByGraph proc~odrv odrv proc~dprep dprep proc~dprep->proc~odrv proc~dprepi dprepi proc~dprepi->proc~odrv proc~dprepi~2 dprepi proc~dprepi~2->proc~odrv proc~dprep~2 dprep proc~dprep~2->proc~odrv proc~diprep~2 diprep proc~diprep~2->proc~dprep proc~diprep diprep proc~diprep->proc~dprep proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprepi~2 diprepi proc~diprepi~2->proc~dprepi proc~dlsodes~2 dlsodes proc~dlsodes~2->proc~diprep~2 proc~dlsodis~2 dlsodis proc~dlsodis~2->proc~diprepi~2 proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/odrv.html"},{"title":"xerrwd – odepack","text":"public subroutine xerrwd(Msg, Nmes, Nerr, Level, Ni, I1, I2, Nr, R1, R2) xerrwd(3f) - [M_odepack::Matrix] Write error message with values. subroutine xerrwd(Msg,Nmes,Nerr,Level,Ni,I1,I2,Nr,R1,R2)\n\n  character(len=*),intent(in) :: Msg\n  integer                     :: Nmes\n  integer                     :: Nerr\n  integer,intent(in)          :: Level\n  integer,intent(in)          :: Ni\n  integer,intent(in)          :: I1\n  integer,intent(in)          :: I2\n  integer,intent(in)          :: Nr\n  real(kind=dp),intent(in)    :: R1\n  real(kind=dp),intent(in)    :: R2 DESCRIPTION Subroutines XERRWD, XSETF, XSETUN, and the function routine IXSAV,\n  as given here, constitute a simplified version of the SLATEC error\n  handling package. OPTIONS All arguments are input arguments. MSG The message (character array). NMES The length of MSG (number of characters). NERR The error number (not used). LEVEL The error level..\n        0 or 1 means recoverable (control returns to caller).\n        2 means fatal (run is aborted–see note below). NI Number of integers (0, 1, or 2) to be printed with message. I1,I2 Integers to be printed, depending on NI. NR Number of reals (0, 1, or 2) to be printed with message. R1,R2 Reals to be printed, depending on NR. Note..  this routine is machine-dependent and specialized for use\n   in limited context, in the following ways.. The argument MSG is assumed to be of type CHARACTER, and\n      the message is printed with a format of (1X,A). The message is assumed to take only one line.\n      Multi-line messages are generated by repeated calls. If LEVEL = 2, control passes to the statement   STOP\n      to abort the run.  This statement may be machine-dependent. R1 and R2 are assumed to be in double precision and are printed\n      in D21.13 format. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: Msg integer :: Nmes integer :: Nerr integer, intent(in) :: Level integer, intent(in) :: Ni integer, intent(in) :: I1 integer, intent(in) :: I2 integer, intent(in) :: Nr real(kind=dp), intent(in) :: R1 real(kind=dp), intent(in) :: R2 Called by proc~~xerrwd~~CalledByGraph proc~xerrwd xerrwd proc~dlsodi dlsodi proc~dlsodi->proc~xerrwd proc~dintdy dintdy proc~dlsodi->proc~dintdy proc~dlsodkr dlsodkr proc~dlsodkr->proc~xerrwd proc~dlsodkr->proc~dintdy proc~drchek drchek proc~dlsodkr->proc~drchek proc~dintdy->proc~xerrwd proc~dlsode dlsode proc~dlsode->proc~xerrwd proc~dlsode->proc~dintdy proc~dlsodes dlsodes proc~dlsodes->proc~xerrwd proc~dlsodes->proc~dintdy proc~dlsodar dlsodar proc~dlsodar->proc~xerrwd proc~dlsodar->proc~dintdy proc~dlsodar->proc~drchek proc~dlsoda dlsoda proc~dlsoda->proc~xerrwd proc~dlsoda->proc~dintdy proc~dlsodis dlsodis proc~dlsodis->proc~xerrwd proc~dlsodis->proc~dintdy proc~dlsodpk dlsodpk proc~dlsodpk->proc~xerrwd proc~dlsodpk->proc~dintdy proc~dlsoibt dlsoibt proc~dlsoibt->proc~xerrwd proc~dlsoibt->proc~dintdy proc~drchek->proc~dintdy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/xerrwd.html"},{"title":"xsetf – odepack","text":"public subroutine xsetf(mflag) NAME xsetf(3f) - [M_odepack::matrix] Reset the error print control flag. SYNOPSIS subroutine xsetf (mflag)\ninteger mflag DESCRIPTION XSETF sets the error print control flag to MFLAG: OPTIONS MFLAG MFLAG=1 means print all messages (the default). MFLAG=0 means no printing. Arguments Type Intent Optional Attributes Name integer :: mflag Contents None","tags":"","loc":"proc/xsetf.html"},{"title":"xsetun – odepack","text":"public subroutine xsetun(lun) Name xsetun(3f) - [M_odepack::matrix] Reset the logical unit number for error messages. Synopsis subroutine xsetun (lun)\ninteger,intent(in) :: lun Description XSETUN sets the logical unit number for error messages to LUN. Options LUN logical unit number used for error messages Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun Contents None","tags":"","loc":"proc/xsetun.html"},{"title":"M_odepack – odepack","text":"Used by module~~m_odepack~~UsedByGraph module~m_odepack M_odepack proc~dprep dprep proc~dprep->module~m_odepack proc~dainvgs dainvgs proc~dainvgs->module~m_odepack proc~dprepi~2 dprepi proc~dprepi~2->module~m_odepack proc~dstode~2 dstode proc~dstode~2->module~m_odepack proc~dstodi dstodi proc~dstodi->module~m_odepack proc~dprepi dprepi proc~dprepi->module~m_odepack proc~dstode dstode proc~dstode->module~m_odepack proc~dainvgs~2 dainvgs proc~dainvgs~2->module~m_odepack proc~dstodi~2 dstodi proc~dstodi~2->module~m_odepack proc~dprep~2 dprep proc~dprep~2->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables dlpk dls dls1 dlsa dlsr dlss dp Functions dmnorm dumach dvnorm Subroutines adjlr cdrv cntnzu daigbt dainvg daxpy dcfode dcopy dewset dgefa dgesl dintdy diprep diprepi dlhin dlsoda dlsodar dlsode dlsodes dlsodi dlsodis dlsodkr dlsodpk dlsoibt dpjibt dprepj dprepji dprja dprjis dprjs drchek dscal dslsbt dsolss dsolsy dsrcar dsrckr dsrcma dsrcms dsrcom dsrcpk dstoda dstodpk dstoka jgroup odrv xerrwd xsetf xsetun Variables Type Visibility Attributes Name Initial type(dlpk01), public, save :: dlpk type(dls002), public, save :: dls type(dls001), public, save :: dls1 type(dlsa01), public, save :: dlsa type(dlsr01), public, save :: dlsr type(dlss01), public, save :: dlss integer, public, parameter :: dp = kind(0.0d0) Functions public pure function dmnorm (n, v, w) This function routine computes the weighted max-norm\nof the vector of length N contained in the array V, with weights\ncontained in the array w of length N:\n  DMNORM = MAX(i=1,…,N) ABS(V(i))*W(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) public function dumach () dumach(3f) - [M_odepack] Compute the unit roundoff of the machine. Read more… Arguments None Return Value real(kind=dp) public pure function dvnorm (n, v, w) dvnorm(3f) - [M_odepack] Weighted root-mean-square vector norm. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Subroutines public subroutine adjlr (N, Isp, Ldif) This routine computes an adjustment, LDIF, to the required\ninteger storage space in IWK (sparse matrix work space). Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Isp (*) integer, intent(out) :: Ldif public subroutine cdrv (N, R, C, Ic, Ia, Ja, A, B, Z, Nsp, Isp, Rsp, Esp, Path, Flag) cdrv(3f) - [M_odepack ] driver for solving sparse non-symmetric\n            systems of linear equations Read more… Arguments Type Intent Optional Attributes Name integer :: N integer :: R (*) integer :: C (*) integer :: Ic (*) integer :: Ia (*) integer :: Ja (*) real(kind=dp) :: A (*) real(kind=dp) :: B (*) real(kind=dp) :: Z (*) integer, intent(in) :: Nsp integer, intent(inout) :: Isp (*) real(kind=dp) :: Rsp (*) integer, intent(out) :: Esp integer, intent(in) :: Path integer, intent(inout) :: Flag public subroutine cntnzu (N, Ia, Ja, Nzsut) This routine counts the number of nonzero elements in the strict\nupper triangle of the matrix M + M(transpose), where the sparsity\nstructure of M is given by pointer arrays IA and JA. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(out) :: Nzsut public subroutine daigbt (res, adda, Neq, T, Y, Ydot, Mb, Nb, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: Neq (*) real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Mb integer, intent(inout) :: Nb real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier public subroutine dainvg (res, adda, Neq, T, Y, Ydot, Miter, Ml, Mu, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer, intent(inout) :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Miter integer, intent(inout) :: Ml integer, intent(inout) :: Mu real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier public subroutine daxpy (N, Da, Dx, Incx, Dy, Incy) daxpy(3f) - [M_odepack::matrix] Compute a constant times a vector plus a vector. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(inout) :: Dy (*) integer, intent(in) :: Incy public subroutine dcfode (meth, elco, tesco) dcfode(3f) - [M_odepack] Set ODE integrator coefficients. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: meth real(kind=dp), intent(inout) :: elco (13,12) real(kind=dp), intent(out) :: tesco (3,12) public subroutine dcopy (N, Dx, Incx, Dy, Incy) dcopy(3f) - [M_odepack::matrix] copy a vector Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(out) :: Dy (*) integer, intent(in) :: Incy public subroutine dewset (N, Itol, Rtol, Atol, Ycur, Ewt) dewset(3f) - [M_odepack] Set error weight vector. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Itol real(kind=dp), intent(in) :: Rtol (*) real(kind=dp), intent(in) :: Atol (*) real(kind=dp), intent(in) :: Ycur (N) real(kind=dp), intent(out) :: Ewt (N) public subroutine dgefa (A, Lda, N, Ipvt, Info) dgefa(3f) - [M_odepack::matrix] Factor a matrix using Gaussian elimination. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(out) :: Ipvt (*) integer, intent(out) :: Info public subroutine dgesl (A, Lda, N, Ipvt, B, Job) dgesl(3f) - [M_odepack::matrix] Solve the real system A X=B or TRANS(A) X=B\n               using the factors computed by DGECO or DGEFA. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) integer, intent(in) :: Job public subroutine dintdy (T, K, Yh, Nyh, Dky, Iflag) DINTDY computes interpolated values of the K-th derivative of the\n  dependent variable vector y, and stores it in DKY.  This routine\n  is called within the package with K = 0 and T = TOUT, but may\n  also be called by the user for any K up to the current order.\n  (See detailed instructions in the usage documentation.) Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: T integer :: K real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(inout) :: Dky (*) integer, intent(out) :: Iflag public subroutine diprep (Neq, Y, Rwork, Ia, Ja, Ipflag, f, jac) This routine serves as an interface between the driver and\nSubroutine DPREP.  It is called only if MITER is 1 or 2.\nTasks performed here are: Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer, intent(inout) :: Ipflag real :: f integer :: jac public subroutine diprepi (Neq, Y, S, Rwork, Ia, Ja, Ic, Jc, Ipflag, res, jac, adda) This routine serves as an interface between the driver and\nSubroutine DPREPI.  Tasks performed here are: Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer :: Ic (*) integer :: Jc (*) integer, intent(inout) :: Ipflag real :: res integer :: jac real :: adda public subroutine dlhin (Neq, N, T0, Y0, Ydot, f, Tout, Uround, Ewt, Itol, Atol, Y, Temp, H0, Niter, Ier) dlhin(3f) - [M_odepack] compute step size H0 to be attempted on\n   the first step, when the user supplied value is absent Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) integer :: N real(kind=dp), intent(in) :: T0 real(kind=dp) :: Y0 (*) real(kind=dp), intent(in) :: Ydot (*) real :: f real(kind=dp), intent(in) :: Tout real(kind=dp), intent(in) :: Uround real(kind=dp) :: Ewt (*) integer, intent(in) :: Itol real(kind=dp), intent(in) :: Atol (*) real(kind=dp) :: Y (*) real(kind=dp) :: Temp (*) real(kind=dp), intent(inout) :: H0 integer, intent(out) :: Niter integer, intent(out) :: Ier public subroutine dlsoda (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt) DLSODA solves the initial value problem for stiff or nonstiff\n systems of first order ODEs of the form Read more… Arguments Type Intent Optional Attributes Name real :: f integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: jac integer :: Jt public subroutine dlsodar (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt, g, Ng, Jroot) DLSODAR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs of the form Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Jt real :: g integer :: Ng integer, dimension(Ng) :: Jroot public subroutine dlsode (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) DLSODE solves the initial-value problem for stiff or\n  nonstiff systems of first-order ODE’s, Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf public subroutine dlsodes (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) DLSODES solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf public subroutine dlsodi (res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) DLSODI solves the initial value problem for linearly implicit\n systems of first order ODEs, Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf public subroutine dlsodis (res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) DLSODIS solves the initial value problem for linearly implicit\n systems of first order ODEs, Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf public subroutine dlsodkr (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf, g, Ng, Jroot) DLSODKR: Livermore Solver for Ordinary Differential equations,\n          with preconditioned Krylov iteration methods for the\n          Newton correction linear systems, and with Rootfinding. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf real :: g integer :: Ng integer :: Jroot (*) public subroutine dlsodpk (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf) DLSODPK: Livermore Solver for Ordinary Differential equations,\n          with Preconditioned Krylov iteration methods for the\n          Newton correction linear systems. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf public subroutine dlsoibt (res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) DLSOIBT: Livermore Solver for Ordinary differential equations given\n          in Implicit form, with Block-Tridiagonal Jacobian treatment. Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Ydoti real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: Mf public subroutine dpjibt (Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPJIBT is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nand r = g(t,y) - A(t,y)*s. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res integer :: jac real :: adda public subroutine dprepj (Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPREPJ is called by DSTODE to compute and process the matrix\n  P = I - h el(1) J , where J is an approximation to the Jacobian. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac public subroutine dprepji (Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPREPJI is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Rtem (*) real(kind=dp) :: Savr (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: res integer :: jac real :: adda public subroutine dprja (Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPRJA is called by DSTODA to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Ftem real(kind=dp), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac public subroutine dprjis (Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wk, Iwk, res, jac, adda) DPRJIS is called to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wk integer, dimension(*) :: Iwk real :: res integer :: jac real :: adda public subroutine dprjs (Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wk, Iwk, f, jac) DPRJS is called to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nJ is computed by columns, either by the user-supplied routine JAC\nif MITER = 1, or by finite differencing if MITER = 2. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real :: f integer :: jac public subroutine drchek (Job, g_sub, Neq, Y, Yh, Nyh, G0, G1, Gx, Jroot, Irt) This routine checks for the presence of a root in the vicinity of\nthe current T, in a manner depending on the input flag JOB.  It calls\nSubroutine DROOTS to locate the root as precisely as possible. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: Job real :: g_sub integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: G0 (*) real(kind=dp) :: G1 (*) real(kind=dp) :: Gx (*) integer :: Jroot (*) integer, intent(out) :: Irt public subroutine dscal (N, Da, Dx, Incx) dscal(3f) - [M_odepack::matrix] Multiply a vector by a constant. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(inout) :: Dx (*) integer, intent(in) :: Incx public subroutine dslsbt (Wm, Iwm, X, Tem) This routine acts as an interface between the core integrator\nroutine and the DSOLBT routine for the solution of the linear system\narising from chord iteration.\nCommunication with DSLSBT uses the following variables: Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: Wm (*) integer :: Iwm (*) real(kind=dp) :: X (*) real(kind=dp) :: Tem (*) public subroutine dsolss (Wk, Iwk, X, Tem) This routine manages the solution of the linear system arising from\na chord iteration.  It is called if MITER .ne. 0. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) public subroutine dsolsy (Wm, Iwm, X, Tem) This routine manages the solution of the linear system arising from\n  a chord iteration.  It is called if MITER .ne. 0. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) public subroutine dsrcar (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(dlsa01)::DLSA, DLSR01, which are used\ninternally by one or more ODEPACK solvers. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrckr (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSR01, DLPK01, which\nare used internally by the DLSODKR solver. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrcma (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(DLSA01)::DLSA, which are used\ninternally by one or more ODEPACK solvers. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrcms (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSS01, which are used\ninternally by one or more ODEPACK solvers. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrcom (Rsav, Isav, Job) dsrcom(3f) - [M_odepack] Save/restore ODEPACK COMMON blocks. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job public subroutine dsrcpk (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe internal types used internally by the DLSODPK solver. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job public subroutine dstoda (Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) DSTODA performs one step of the integration of an initial value\nproblem for a system of ordinary differential equations. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs public subroutine dstodpk (Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTODPK performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol public subroutine dstoka (Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTOKA performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol public subroutine jgroup (N, Ia, Ja, Maxg, Ngrp, Igp, Jgp, Incl, Jdone, Ier) This subroutine constructs groupings of the column indices of\n the Jacobian matrix, used in the numerical evaluation of the\n Jacobian by finite differences. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: Ia integer, intent(in), dimension(*) :: Ja integer, intent(in) :: Maxg integer, intent(out) :: Ngrp integer, intent(inout), dimension(*) :: Igp integer, intent(out), dimension(*) :: Jgp integer, intent(inout), dimension(*) :: Incl integer, intent(inout), dimension(*) :: Jdone integer, intent(out) :: Ier public subroutine odrv (N, Ia, Ja, A, P, Ip, Nsp, Isp, Path, Flag) odrv(3f) [M_odepack] - driver for sparse matrix reordering routines Read more… Arguments Type Intent Optional Attributes Name integer :: N integer, dimension(*) :: Ia integer, dimension(*) :: Ja real(kind=dp), dimension(*) :: A integer, dimension(*) :: P integer, dimension(*) :: Ip integer, intent(in) :: Nsp integer, dimension(*) :: Isp integer, intent(in) :: Path integer, intent(inout) :: Flag public subroutine xerrwd (Msg, Nmes, Nerr, Level, Ni, I1, I2, Nr, R1, R2) xerrwd(3f) - [M_odepack::Matrix] Write error message with values. Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: Msg integer :: Nmes integer :: Nerr integer, intent(in) :: Level integer, intent(in) :: Ni integer, intent(in) :: I1 integer, intent(in) :: I2 integer, intent(in) :: Nr real(kind=dp), intent(in) :: R1 real(kind=dp), intent(in) :: R2 public subroutine xsetf (mflag) xsetf(3f) - [M_odepack::matrix] Reset the error print control flag. Read more… Arguments Type Intent Optional Attributes Name integer :: mflag public subroutine xsetun (lun) xsetun(3f) - [M_odepack::matrix] Reset the logical unit number for error messages. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun","tags":"","loc":"module/m_odepack.html"},{"title":"M_odepack.f90 – odepack","text":"Files dependent on this one sourcefile~~m_odepack.f90~~AfferentGraph sourcefile~m_odepack.f90 M_odepack.f90 sourcefile~dprepi.inc dprepi.inc sourcefile~dprepi.inc->sourcefile~m_odepack.f90 sourcefile~dainvgs.inc dainvgs.inc sourcefile~dainvgs.inc->sourcefile~m_odepack.f90 sourcefile~dstode.inc dstode.inc sourcefile~dstode.inc->sourcefile~m_odepack.f90 sourcefile~dprep.inc dprep.inc sourcefile~dprep.inc->sourcefile~m_odepack.f90 sourcefile~dstodi.inc dstodi.inc sourcefile~dstodi.inc->sourcefile~m_odepack.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules M_odepack Subroutines dprep dainvgs dprepi dstodi dstode Source Code M_odepack.f90 Source Code module M_odepack ! ! dcopy can be replaced with array syntax ! SPAG removes save attribute and type from f90 function declaration ! SPAG removes external attribute ! determine what can be private and public ! many equality tests for real values; could replace ! simplify checkpoint capability, maybe TRANSFER() ! look for SAVEs that should be parameters ! remaining GOTOs ! replace dnrm2 with intrinsic norm2(3f) ? ! in production probably would make matrix routines separate so could use alternate library of BLAS matrix procedures ! same arrays passed on single call all over the place ! NOTE: DLSODKR did not initialize JROOT and neither did lsodkr.f90 example ! implicit none integer , parameter :: dp = kind ( 0.0d0 ) private !----------------------------------------------------------------------------------------------------------------------------------! ! da1 routines PUBLIC :: DEWSET PUBLIC :: DINTDY PUBLIC :: DSRCAR PUBLIC :: DSRCKR PUBLIC :: DSRCMA PUBLIC :: DSRCMS PUBLIC :: DSRCOM PUBLIC :: DSRCPK PUBLIC :: DUMACH ! COMPUTE THE UNIT ROUNDOFF OF THE MACHINE. PUBLIC :: DVNORM !-PUBLIC  :: DSTODE !-- maybe private once modularized public :: dmnorm public :: dpjibt public :: dprepj public :: dprepji public :: dsolss public :: dprja public :: dprjis public :: dprjs public :: dslsbt public :: dsolsy public :: adjlr public :: cdrv public :: cntnzu public :: daigbt public :: dainvg public :: dcfode ! Set ODE integrator coefficients. public :: diprep public :: diprepi public :: dlhin public :: drchek public :: dstoda public :: dstodpk public :: dstoka public :: jgroup public :: odrv !-- see nothing in documentation about being public private :: datp private :: datv private :: dbnorm private :: ddecbt private :: dfnorm private :: dhefa private :: dhels private :: dheqr private :: dhesl private :: dorthog private :: dpcg private :: dpcgs private :: dpkset private :: droots private :: dsetpk private :: dsolbt private :: dsolpk private :: dspigmr private :: dspiom private :: dusol private :: md private :: mdi private :: mdm private :: mdp private :: mdu private :: nnfc private :: nnsc private :: nntc private :: nroc private :: nsfc private :: sro private :: dnrm2 !-private :: dstodi !-private :: dprepi !-private :: dainvgs !-private :: dprep !----------------------------------------------------------------------------------------------------------------------------------! ! matrix routines PUBLIC :: DAXPY PUBLIC :: XSETUN PUBLIC :: XSETF PUBLIC :: DSCAL PUBLIC :: DCOPY PUBLIC :: XERRWD PUBLIC :: DGEFA PUBLIC :: DGESL ! should any matrix procedures be private? private :: idamax private :: ixsav private :: ddot private :: dgbsl private :: dgbfa ! main routines PUBLIC :: DLSODIS PUBLIC :: DLSODI PUBLIC :: DLSOIBT PUBLIC :: DLSODKR PUBLIC :: DLSODPK PUBLIC :: DLSODE PUBLIC :: DLSODA PUBLIC :: DLSODES PUBLIC :: DLSODAR !----------------------------------------------------------------------------------------------------------------------------------! ! state save and restore type dls002 real ( kind = dp ) :: stifr integer :: newt , nsfi , nslj , njev end type dls002 type ( dls002 ), public , save :: dls type dlss01 real ( kind = dp ) :: con0 , conmin , ccmxj , psmall , rbig , seth integer :: iplost , iesp , istatc , iys , iba , ibian , ibjan , ibjgp , ipian , ipjan , ipjgp , ipigp , ipr , ipc , ipic , ipisp , iprsp integer :: ipa , lenyh , lenyhm , lenwk , lreq , lrat , lrest , lwmin , moss , msbj , nslj , ngp , nlu , nnz , nsp , nzl , nzu end type dlss01 type ( dlss01 ), public , save :: dlss type dlsa01 real ( kind = dp ) :: tsw , cm1 ( 12 ), cm2 ( 5 ), pdest , pdlast , ratio , pdnorm integer :: insufr , insufi , ixpr , icount , irflag , jtyp , mused , mxordn , mxords end type dlsa01 type ( dlsa01 ), public , save :: dlsa type dlsr01 real ( kind = dp ) :: alpha , x2 , t0 , tlast , toutc integer :: lg0 , lg1 , lgx , imax , last , irfnd , itaskc , ngc , nge end type dlsr01 type ( dlsr01 ), public , save :: dlsr type dlpk01 real ( kind = dp ) :: delt , epcon , sqrtn , rsqrtn integer :: jpre , jacflg , locwp , lociwp , lsavx , kmp , maxl , mnewt , nni , nli , nps , ncfn , ncfl end type dlpk01 type ( dlpk01 ), public , save :: dlpk type dls001 real ( kind = dp ) :: conit , crate , el ( 13 ), elco ( 13 , 12 ), hold , rmax , tesco ( 3 , 12 ), ccmax , el0 , h , hmin , hmxi , hu , rc , tn , uround integer :: init , mxstep , mxhnil , nhnil , nslast , nyh , ialth , ipup , lmax , meo integer :: nqnyh , nslp , icf , ierpj , iersl , jcur , jstart , kflag , l , lyh integer :: lewt , lacor , lsavf , lwm , liwm , meth , miter , maxord , maxcor , msbp integer :: mxncf , n , nq , nst , nfe , nje , nqu end type dls001 type ( dls001 ), public , save :: dls1 private :: return_dls1_real private :: return_dls1_int private :: set_dls1_real private :: set_dls1_int contains !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! function return_dls1_real () real ( kind = dp ), allocatable :: return_dls1_real (:) return_dls1_real = [ dls1 % conit , dls1 % crate , dls1 % el (:), dls1 % elco (:,:), dls1 % hold , & & dls1 % rmax , dls1 % tesco (:,:), dls1 % ccmax , dls1 % el0 , dls1 % h , dls1 % hmin , & & dls1 % hmxi , dls1 % hu , dls1 % rc , dls1 % tn , dls1 % uround ] end function return_dls1_real function return_dls1_int () integer , allocatable :: return_dls1_int (:) return_dls1_int = [ dls1 % init , dls1 % mxstep , dls1 % mxhnil , dls1 % nhnil , dls1 % nslast , dls1 % nyh , dls1 % ialth , & & dls1 % ipup , dls1 % lmax , dls1 % meo , dls1 % nqnyh , dls1 % nslp , dls1 % icf , dls1 % ierpj , & & dls1 % iersl , dls1 % jcur , dls1 % jstart , dls1 % kflag , dls1 % l , dls1 % lyh , dls1 % lewt , & & dls1 % lacor , dls1 % lsavf , dls1 % lwm , dls1 % liwm , dls1 % meth , dls1 % miter , dls1 % maxord , & & dls1 % maxcor , dls1 % msbp , dls1 % mxncf , dls1 % n , dls1 % nq , dls1 % nst , dls1 % nfe , & & dls1 % nje , dls1 % nqu ] end function return_dls1_int subroutine set_dls1_real ( r ) real ( kind = dp ), intent ( in ) :: r ( 218 ) dls1 % conit = r ( 1 ) dls1 % crate = r ( 2 ) dls1 % el = r ( 3 : 15 ) dls1 % elco = reshape ( r ( 16 : 16 + 156 - 1 ),[ 13 , 12 ]) dls1 % hold = r ( 172 ) dls1 % rmax = r ( 173 ) dls1 % tesco = reshape ( r ( 174 : 174 + 36 - 1 ),[ 3 , 12 ]) dls1 % ccmax = r ( 210 ) dls1 % el0 = r ( 211 ) dls1 % h = r ( 212 ) dls1 % hmin = r ( 213 ) dls1 % hmxi = r ( 214 ) dls1 % hu = r ( 215 ) dls1 % rc = r ( 216 ) dls1 % tn = r ( 217 ) dls1 % uround = r ( 218 ) end subroutine set_dls1_real subroutine set_dls1_int ( int ) integer , intent ( in ) :: int ( 37 ) dls1 % init = int ( 1 ) dls1 % mxstep = int ( 2 ) dls1 % mxhnil = int ( 3 ) dls1 % nhnil = int ( 4 ) dls1 % nslast = int ( 5 ) dls1 % nyh = int ( 6 ) dls1 % ialth = int ( 7 ) dls1 % ipup = int ( 8 ) dls1 % lmax = int ( 9 ) dls1 % meo = int ( 10 ) dls1 % nqnyh = int ( 11 ) dls1 % nslp = int ( 12 ) dls1 % icf = int ( 13 ) dls1 % ierpj = int ( 14 ) dls1 % iersl = int ( 15 ) dls1 % jcur = int ( 16 ) dls1 % jstart = int ( 17 ) dls1 % kflag = int ( 18 ) dls1 % l = int ( 19 ) dls1 % lyh = int ( 20 ) dls1 % lewt = int ( 21 ) dls1 % lacor = int ( 22 ) dls1 % lsavf = int ( 23 ) dls1 % lwm = int ( 24 ) dls1 % liwm = int ( 25 ) dls1 % meth = int ( 26 ) dls1 % miter = int ( 27 ) dls1 % maxord = int ( 28 ) dls1 % maxcor = int ( 29 ) dls1 % msbp = int ( 30 ) dls1 % mxncf = int ( 31 ) dls1 % n = int ( 32 ) dls1 % nq = int ( 33 ) dls1 % nst = int ( 34 ) dls1 % nfe = int ( 35 ) dls1 % nje = int ( 36 ) dls1 % nqu = int ( 37 ) end subroutine set_dls1_int !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! ! da1 routines include \"M_da1/dumach.inc\" include \"M_da1/dcfode.inc\" include \"M_da1/dmnorm.inc\" include \"M_da1/dfnorm.inc\" include \"M_da1/dbnorm.inc\" include \"M_da1/dvnorm.inc\" include \"M_da1/sro.inc\" include \"M_da1/adjlr.inc\" include \"M_da1/dewset.inc\" include \"M_da1/jgroup.inc\" include \"M_da1/odrv.inc\" include \"M_da1/dhels.inc\" include \"M_da1/cntnzu.inc\" include \"M_da1/daigbt.inc\" include \"M_da1/ddecbt.inc\" include \"M_da1/dslsbt.inc\" include \"M_da1/dsolbt.inc\" include \"M_da1/md.inc\" include \"M_da1/mdi.inc\" include \"M_da1/mdm.inc\" include \"M_da1/mdp.inc\" include \"M_da1/mdu.inc\" include \"M_da1/nnsc.inc\" include \"M_da1/nntc.inc\" include \"M_da1/cdrv.inc\" include \"M_da1/dainvg.inc\" include \"M_da1/dheqr.inc\" include \"M_da1/dhesl.inc\" include \"M_da1/dorthog.inc\" include \"M_da1/dusol.inc\" include \"M_da1/dhefa.inc\" include \"M_da1/dpcg.inc\" include \"M_da1/dspiom.inc\" include \"M_da1/dpcgs.inc\" include \"M_da1/nsfc.inc\" include \"M_da1/dspigmr.inc\" include \"M_da1/nroc.inc\" include \"M_da1/nnfc.inc\" include \"M_da1/dintdy.inc\" include \"M_da1/droots.inc\" include \"M_da1/dsolss.inc\" include \"M_da1/dsolsy.inc\" include \"M_da1/dsrcar.inc\" include \"M_da1/dsrckr.inc\" include \"M_da1/dsrcma.inc\" include \"M_da1/dsrcms.inc\" include \"M_da1/dsrcom.inc\" include \"M_da1/dsrcpk.inc\" include \"M_da1/dlhin.inc\" include \"M_da1/diprep.inc\" include \"M_da1/diprepi.inc\" include \"M_da1/dprepji.inc\" include \"M_da1/drchek.inc\" include \"M_da1/dsetpk.inc\" include \"M_da1/datv.inc\" include \"M_da1/dprjis.inc\" include \"M_da1/dprja.inc\" include \"M_da1/dpjibt.inc\" include \"M_da1/dpkset.inc\" include \"M_da1/dsolpk.inc\" include \"M_da1/dprjs.inc\" include \"M_da1/datp.inc\" include \"M_da1/dprepj.inc\" include \"M_da1/dstoda.inc\" include \"M_da1/dstoka.inc\" include \"M_da1/dstodpk.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! ! main routines include \"M_main/dlsodis.inc\" include \"M_main/dlsodi.inc\" include \"M_main/dlsoibt.inc\" include \"M_main/dlsodkr.inc\" include \"M_main/dlsodpk.inc\" include \"M_main/dlsode.inc\" include \"M_main/dlsoda.inc\" include \"M_main/dlsodes.inc\" include \"M_main/dlsodar.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! ! matrix routines include \"M_matrix/daxpy.inc\" include \"M_matrix/xsetun.inc\" include \"M_matrix/xsetf.inc\" include \"M_matrix/dscal.inc\" include \"M_matrix/idamax.inc\" include \"M_matrix/dcopy.inc\" include \"M_matrix/ixsav.inc\" include \"M_matrix/ddot.inc\" include \"M_matrix/xerrwd.inc\" include \"M_matrix/dgefa.inc\" include \"M_matrix/dgesl.inc\" include \"M_matrix/dgbsl.inc\" include \"M_matrix/dgbfa.inc\" include \"M_matrix/dnrm2.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !-include \"M_da1/dprep.inc\" !-include \"M_da1/dainvgs.inc\" !-include \"M_da1/dprepi.inc\" !-include \"M_da1/dstodi.inc\" !-include \"M_da1_/dstode.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! end module M_odepack !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !- TYPE MISMATCH include \"M_da1/dprep.inc\" include \"M_da1/dainvgs.inc\" include \"M_da1/dprepi.inc\" include \"M_da1/dstodi.inc\" include \"M_da1/dstode.inc\"","tags":"","loc":"sourcefile/m_odepack.f90.html"},{"title":"adjlr.inc – odepack","text":"Contents Subroutines adjlr Source Code adjlr.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine computes an adjustment, LDIF, to the required !! integer storage space in IWK (sparse matrix work space). !! !! It is called only if the word length ratio is LRAT = 1. !! This is to account for the possibility that the symbolic LU phase !! may require more storage than the numerical LU and solution phases. !! !----------------------------------------------------------------------- subroutine adjlr ( N , Isp , Ldif ) integer , intent ( in ) :: N integer , intent ( in ) :: Isp ( * ) integer , intent ( out ) :: Ldif integer :: ip , jlmax , jumax , lnfc , lsfc , nzlu ip = 2 * N + 1 ! Get JLMAX = IJL(N) and JUMAX = IJU(N) (sizes of JL and JU). ------- ! jlmax = Isp ( ip ) jumax = Isp ( ip + ip ) ! NZLU = (size of L) + (size of U) = (IL(N+1)-IL(1)) + (IU(N+1)-IU(1)). ! nzlu = Isp ( N + 1 ) - Isp ( 1 ) + Isp ( ip + N + 1 ) - Isp ( ip + 1 ) lsfc = 12 * N + 3 + 2 * max ( jlmax , jumax ) lnfc = 9 * N + 2 + jlmax + jumax + nzlu Ldif = max ( 0 , lsfc - lnfc ) end subroutine adjlr","tags":"","loc":"sourcefile/adjlr.inc.html"},{"title":"mdp.inc – odepack","text":"Contents Subroutines mdp Source Code mdp.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!  mdp -- purge inactive elements and do mass elimination !! !----------------------------------------------------------------------- subroutine mdp ( K , Ek , Tail , V , L , Head , Last , Next , Mark ) ! integer , intent ( inout ) :: K integer , intent ( in ) :: Ek integer , intent ( inout ) :: Tail integer , intent ( inout ) :: V ( * ) integer , intent ( inout ) :: L ( * ) integer , intent ( out ) :: Head ( * ) integer , intent ( inout ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) ! integer :: es , evi , i , ilp , ilpmax , li , ls , lvi , s , tag , vi integer :: free free =- 1 ! !----initialize tag tag = Mark ( Ek ) ! !----for each vertex vi in ek li = Ek ilpmax = Last ( Ek ) if ( ilpmax > 0 ) then do ilp = 1 , ilpmax i = li li = L ( i ) vi = V ( li ) ! !------remove vi from degree list if ( Last ( vi ) /= 0 ) then if ( Last ( vi ) > 0 ) then Next ( Last ( vi )) = Next ( vi ) else Head ( - Last ( vi )) = Next ( vi ) endif if ( Next ( vi ) > 0 ) Last ( Next ( vi )) = Last ( vi ) endif ! !------remove inactive items from element list of vi ls = vi do s = ls ls = L ( s ) if ( ls == 0 ) then ! !------if vi is interior vertex, then remove from list and eliminate lvi = L ( vi ) if ( lvi /= 0 ) then ! !------else ... !--------classify vertex vi if ( L ( lvi ) /= 0 ) then ! !----------else mark vi to compute degree Last ( vi ) = - Ek else evi = V ( lvi ) if ( Next ( evi ) >= 0 ) then Last ( vi ) = - Ek elseif ( Mark ( evi ) < 0 ) then ! !----------else if vi is duplicate vertex, then mark as such and adjust !----------overlap count for corresponding element Last ( vi ) = 0 Mark ( evi ) = Mark ( evi ) - 1 else ! !----------if vi is prototype vertex, then mark as such, initialize !----------overlap count for corresponding element, and move vi to end !----------of boundary list Last ( vi ) = evi Mark ( evi ) = - 1 L ( Tail ) = li Tail = li L ( i ) = L ( li ) li = i endif endif ! !--------insert ek in element list of vi if ( free > 0 ) then V ( free ) = Ek L ( free ) = L ( vi ) L ( vi ) = free else stop '*mdp* is uninitialized but being used' endif else L ( i ) = L ( li ) li = i K = K + 1 Next ( vi ) = - K Last ( Ek ) = Last ( Ek ) - 1 endif exit else es = V ( ls ) if ( Mark ( es ) >= tag ) then free = ls L ( s ) = L ( ls ) ls = s endif endif enddo enddo endif ! !----terminate boundary list L ( Tail ) = 0 end subroutine mdp","tags":"","loc":"sourcefile/mdp.inc.html"},{"title":"dfnorm.inc – odepack","text":"Contents Functions dfnorm Source Code dfnorm.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This function computes the norm of a full N by N matrix, !! stored in the array A, that is consistent with the weighted max-norm !! on vectors, with weights stored in the array W: !! !!     DFNORM = MAX(i=1,...,N) ( W(i) * Sum(j=1,...,N) ABS(a(i,j))/W(j) ) !----------------------------------------------------------------------- pure function dfnorm ( n , a , w ) integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: a ( n , n ) real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dfnorm real ( kind = dp ) an , sum integer i , j an = 0.0d0 do i = 1 , n sum = 0.0d0 do j = 1 , n sum = sum + abs ( a ( i , j )) / w ( j ) enddo an = max ( an , sum * w ( i )) enddo dfnorm = an end function dfnorm","tags":"","loc":"sourcefile/dfnorm.inc.html"},{"title":"dprja.inc – odepack","text":"Contents Subroutines dprja Source Code dprja.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DPRJA is called by DSTODA to compute and process the matrix !! P = I - H*EL(1)*J, where J is an approximation to the Jacobian. !! !! Here J is computed by the user-supplied routine JAC if !! MITER = 1 or 4 or by finite differencing if MITER = 2 or 5. !! !! J, scaled by -H*EL(1), is stored in WM.  Then the norm of J (the !! matrix norm consistent with the weighted max-norm on vectors given !! by DMNORM) is computed, and J is overwritten by P. !! !! P is then !! subjected to LU decomposition in preparation for later solution !! of linear systems with P as coefficient matrix.  This is done !! by DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. !! !! In addition to variables described previously, communication !! with DPRJA uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! FTEM !! !! : work array of length N (ACOR in DSTODA). !! !! SAVF !! !! : array containing f evaluated at predicted y. !! !! WM !! !! : real work space for matrices.  On output it contains the !! LU decomposition of P. !! Storage of matrix elements starts at WM(3). !! WM also contains the following matrix-related data: !! WM(1) = SQRT(UROUND), used in numerical Jacobian increments. !! !! IWM !! !! : integer work space containing pivot information, starting at !! IWM(21).   IWM also contains the band parameters !! ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. !! !! EL0 !! !! : EL(1) (input). !! !! PDNORM !! !! : norm of Jacobian matrix. (Output). !! !! IERPJ !! !! : output error flag,  = 0 if no trouble, .gt. 0 if !! P matrix found to be singular. !! !! JCUR !! !! : output flag = 1 to indicate that the Jacobian matrix !! (or approximation) is now current. !! !! This routine also uses the Common variables EL0, H, TN, UROUND, !! MITER, N, NFE, and NJE. !----------------------------------------------------------------------- subroutine dprja ( Neq , Y , Yh , Nyh , Ewt , Ftem , Savf , Wm , Iwm , f , jac ) ! integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), dimension ( * ) :: Ftem real ( kind = dp ), dimension ( * ) :: Savf real ( kind = dp ), intent ( inout ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external :: f external :: jac ! real ( kind = dp ) :: con , fac , hl0 , r , r0 , srur , yi , yj , yjj integer :: i , i1 , i2 , ier , ii , j , j1 , jj , lenp , mba , mband , meb1 , meband , ml , ml3 , mu , np1 ! dls1 % nje = dls1 % nje + 1 dls1 % ierpj = 0 dls1 % jcur = 1 hl0 = dls1 % h * dls1 % el0 select case ( dls1 % miter ) case ( 2 ) !  If MITER = 2, make N calls to F to approximate J. -------------------- fac = dmnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 srur = Wm ( 1 ) j1 = 2 do j = 1 , dls1 % n yj = Y ( j ) r = max ( srur * abs ( yj ), r0 / Ewt ( j )) Y ( j ) = Y ( j ) + r fac = - hl0 / r call f ( Neq , dls1 % tn , Y , Ftem ) do i = 1 , dls1 % n Wm ( i + j1 ) = ( Ftem ( i ) - Savf ( i )) * fac enddo Y ( j ) = yj j1 = j1 + dls1 % n enddo dls1 % nfe = dls1 % nfe + dls1 % n case ( 3 ) !  Dummy block only, since MITER is never 3 in this routine. ------------ return case ( 4 ) !  If MITER = 4, call JAC and multiply by scalar. ----------------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 meband = mband + ml lenp = meband * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , ml , mu , Wm ( ml3 ), meband ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo call wrapup () return case ( 5 ) !  If MITER = 5, make MBAND calls to F to approximate J. ---------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) mband = ml + mu + 1 mba = min ( mband , dls1 % n ) meband = mband + ml meb1 = meband - 1 srur = Wm ( 1 ) fac = dmnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 do j = 1 , mba do i = j , dls1 % n , mband yi = Y ( i ) r = max ( srur * abs ( yi ), r0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call f ( Neq , dls1 % tn , Y , Ftem ) do jj = j , dls1 % n , mband Y ( jj ) = Yh ( jj , 1 ) yjj = Y ( jj ) r = max ( srur * abs ( yjj ), r0 / Ewt ( jj )) fac = - hl0 / r i1 = max ( jj - mu , 1 ) i2 = min ( jj + ml , dls1 % n ) ii = jj * meb1 - ml + 2 do i = i1 , i2 Wm ( ii + i ) = ( Ftem ( i ) - Savf ( i )) * fac enddo enddo enddo dls1 % nfe = dls1 % nfe + mba call wrapup () return case default !  If MITER = 1, call JAC and multiply by scalar. ----------------------- lenp = dls1 % n * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , 0 , 0 , Wm ( 3 ), dls1 % n ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endselect !  Compute norm of Jacobian. -------------------------------------------- dlsa % pdnorm = dfnorm ( dls1 % n , Wm ( 3 ), Ewt ) / abs ( hl0 ) !  Add identity matrix. ------------------------------------------------- j = 3 np1 = dls1 % n + 1 do i = 1 , dls1 % n Wm ( j ) = Wm ( j ) + 1.0D0 j = j + np1 enddo !  Do LU decomposition on P. -------------------------------------------- call dgefa ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 return contains subroutine wrapup () !  Compute norm of Jacobian. -------------------------------------------- dlsa % pdnorm = dbnorm ( dls1 % n , Wm ( ml + 3 ), meband , ml , mu , Ewt ) / abs ( hl0 ) !  Add identity matrix. ------------------------------------------------- ii = mband + 2 do i = 1 , dls1 % n Wm ( ii ) = Wm ( ii ) + 1.0D0 ii = ii + meband enddo !  Do LU decomposition of P. -------------------------------------------- call dgbfa ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine wrapup end subroutine dprja","tags":"","loc":"sourcefile/dprja.inc.html"},{"title":"datp.inc – odepack","text":"Contents Subroutines datp Source Code datp.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine computes the product !! !!              w = (I - hl0*df/dy)*p !! !! This is computed by a call to F and a difference quotient. !! !!### On entry !! !!   NEQ !! !!   : problem size, passed to F and PSOL (NEQ(1) = N). !! !!   Y !! !!   : array containing current dependent variable vector. !! !!   SAVF !! !!   : array containing current value of f(t,y). !! !!   P !! !!   : real array of length N. !! !!   WGHT !! !!   : array of length N containing scale factors. !!   1/WGHT(i) are the diagonal elements of the matrix D. !! !!   WK !! !!   : work array of length N. !! !!### On return !! !!   W !! !!   : array of length N containing desired !!   matrix-vector product. !! !! In addition, this routine uses the Common variables TN, N, NFE. ! !----------------------------------------------------------------------- subroutine datp ( Neq , Y , Savf , P , Wght , Hl0 , Wk , f , W ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ), intent ( in ) :: Savf ( * ) real ( kind = dp ) :: P ( * ) real ( kind = dp ) :: Wght ( * ) real ( kind = dp ), intent ( in ) :: Hl0 real ( kind = dp ) :: Wk ( * ) external :: f real ( kind = dp ), intent ( inout ) :: W ( * ) real ( kind = dp ) :: fac , pnrm , rpnrm integer :: i pnrm = dvnorm ( dls1 % n , P , Wght ) rpnrm = 1.0D0 / pnrm !X!call dcopy(dls1%n,Y,1,W,1) W ( 1 : dls1 % n ) = Y ( 1 : dls1 % n ) do i = 1 , dls1 % n Y ( i ) = W ( i ) + P ( i ) * rpnrm enddo call f ( Neq , dls1 % tn , Y , Wk ) dls1 % nfe = dls1 % nfe + 1 !X!call dcopy(dls1%n,W,1,Y,1) Y ( 1 : dls1 % n ) = W ( 1 : dls1 % n ) fac = Hl0 * pnrm do i = 1 , dls1 % n W ( i ) = P ( i ) - fac * ( Wk ( i ) - Savf ( i )) enddo end subroutine datp","tags":"","loc":"sourcefile/datp.inc.html"},{"title":"dorthog.inc – odepack","text":"Contents Subroutines dorthog Source Code dorthog.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine orthogonalizes the vector VNEW against the previous !! KMP vectors in the V array.  It uses a modified Gram-Schmidt !! orthogonalization procedure with conditional reorthogonalization. !! This is the version of 28 may 1986. !! !!### On entry !! !! VNEW !! !! : the vector of length N containing a scaled product !! of the Jacobian and the vector V(*,LL). !! !! V !! !! : the N x l array containing the previous LL !! orthogonal vectors v(*,1) to v(*,LL). !! !! HES !! !! : an LL x LL upper Hessenberg matrix containing, !! in HES(i,k), k.lt.LL, scaled inner products of !! A*V(*,k) and V(*,i). !! !! LDHES !! !! : the leading dimension of the HES array. !! !! N !! !! : the order of the matrix A, and the length of VNEW. !! !! LL !! !! : the current order of the matrix HES. !! !! KMP !! !! : the number of previous vectors the new vector VNEW !! must be made orthogonal to (KMP .le. MAXL). !! !! !!### On return !! !! VNEW !! !! : the new vector orthogonal to V(*,i0) to V(*,LL), !! where i0 = MAX(1, LL-KMP+1). !! !! HES !! !! : upper Hessenberg matrix with column LL filled in with !! scaled inner products of A*V(*,LL) and V(*,i). !! !! SNORMW !! !! : L-2 norm of VNEW. !! !----------------------------------------------------------------------- subroutine dorthog ( Vnew , V , Hes , N , Ll , Ldhes , Kmp , Snormw ) real ( kind = dp ) :: Vnew ( * ) integer :: N real ( kind = dp ) :: V ( N , * ) integer , intent ( in ) :: Ldhes real ( kind = dp ), intent ( inout ) :: Hes ( Ldhes , * ) integer , intent ( in ) :: Ll integer , intent ( in ) :: Kmp real ( kind = dp ), intent ( inout ) :: Snormw real ( kind = dp ) :: arg , sumdsq , tem , vnrm integer :: i , i0 !  Get norm of unaltered VNEW for later use. ---------------------------- vnrm = dnrm2 ( N , Vnew , 1 ) !----------------------------------------------------------------------- !  Do modified Gram-Schmidt on VNEW = A*v(LL). !  Scaled inner products give new column of HES. !  Projections of earlier vectors are subtracted from VNEW. !----------------------------------------------------------------------- i0 = max ( 1 , Ll - Kmp + 1 ) do i = i0 , Ll Hes ( i , Ll ) = ddot ( N , V ( 1 , i ), 1 , Vnew , 1 ) tem = - Hes ( i , Ll ) call daxpy ( N , tem , V ( 1 , i ), 1 , Vnew , 1 ) enddo !----------------------------------------------------------------------- !  Compute SNORMW = norm of VNEW. !  If VNEW is small compared to its input value (in norm), then !  reorthogonalize VNEW to V(*,1) through V(*,LL). !  Correct if relative correction exceeds 1000*(unit roundoff). !  finally, correct SNORMW using the dot products involved. !----------------------------------------------------------------------- Snormw = dnrm2 ( N , Vnew , 1 ) if ( vnrm + 0.001D0 * Snormw /= vnrm ) return sumdsq = 0.0D0 do i = i0 , Ll tem = - ddot ( N , V ( 1 , i ), 1 , Vnew , 1 ) if ( Hes ( i , Ll ) + 0.001D0 * tem /= Hes ( i , Ll ) ) then Hes ( i , Ll ) = Hes ( i , Ll ) - tem call daxpy ( N , tem , V ( 1 , i ), 1 , Vnew , 1 ) sumdsq = sumdsq + tem ** 2 endif enddo if ( sumdsq == 0.0D0 ) return arg = max ( 0.0D0 , Snormw ** 2 - sumdsq ) Snormw = sqrt ( arg ) end subroutine dorthog","tags":"","loc":"sourcefile/dorthog.inc.html"},{"title":"dvnorm.inc – odepack","text":"Contents Functions dvnorm Source Code dvnorm.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !! dvnorm(3f) - [M_odepack] Weighted root-mean-square vector norm. !! !!### DESCRIPTION !!  This function routine computes the weighted root-mean-square norm !!  of the vector of length N contained in the array V, with weights !!  contained in the array W of length N: !! !!        DVNORM = SQRT( (1/N) * SUM( V(i)*W(i) )**2 ) !! !----------------------------------------------------------------------- ! ### SUBSIDIARY ! ### TYPE      real(kind=dp) (SVNORM-S, DVNORM-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890503  Minor cosmetic changes.  (FNF) !     19930809  Renamed to allow single/real(kind=dp) versions. (ACH) !----------------------------------------------------------------------- pure function dvnorm ( n , v , w ) integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: v ( n ) real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dvnorm integer :: i real ( kind = dp ) :: sum sum = 0.0d0 do i = 1 , n sum = sum + ( v ( i ) * w ( i )) ** 2 enddo dvnorm = sqrt ( sum / n ) end function dvnorm","tags":"","loc":"sourcefile/dvnorm.inc.html"},{"title":"dusol.inc – odepack","text":"Contents Subroutines dusol Source Code dusol.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine solves the linear system A * x = b using only a call !! to the user-supplied routine PSOL (no Krylov iteration). !! If the norm of the right-hand side vector b is smaller than DELTA, !! the vector X returned is X = b (if MNEWT = 0) or X = 0 otherwise. !! PSOL is called with an LR argument of 0. !! !!### On entry !! !! NEQ !! !! : problem size, passed to F and PSOL (NEQ(1) = N). !! !! TN !! !! : current value of t. !! !! Y !! !! : array containing current dependent variable vector. !! !! SAVF !! !! : array containing current value of f(t,y). !! !! B !! !! : the right hand side of the system A*x = b. !! !! WGHT !! !! : the vector of length N containing the nonzero !! elements of the diagonal scaling matrix. !! !! N !! !! : the order of the matrix A, and the lengths !! of the vectors WGHT, B and X. !! !! DELTA !! !! : tolerance on residuals b - A*x in weighted RMS-norm. !! !! HL0 !! !! : current value of (step size h) * (coefficient l0). !! !! MNEWT !! !! : Newton iteration counter (.ge. 0). !! !! WK !! !! : real work array used by PSOL. !! !! WP !! !! : real work array used by preconditioner PSOL. !! !! IWP !! !! : integer work array used by preconditioner PSOL. !! !!### On return !! !! X !! !! : the final computed approximation to the solution !! of the system A*x = b. !! !! NPSL !! !! : the number of calls to PSOL. !! !! IFLAG !! !! : integer error flag: !! !!                0 means no trouble occurred. !!                3 means there was a recoverable error in PSOL !!                  caused by the preconditioner being out of date. !!               -1 means there was a nonrecoverable error in PSOL. !! !----------------------------------------------------------------------- subroutine dusol ( Neq , Tn , Y , Savf , B , Wght , N , Delta , Hl0 , Mnewt , psol , Npsl , X , Wp , Iwp , Wk , Iflag ) ! integer , dimension ( * ) :: Neq real ( kind = dp ) :: Tn real ( kind = dp ) , dimension ( * ) :: Y real ( kind = dp ) , dimension ( * ) :: Savf real ( kind = dp ) , dimension ( * ) :: B real ( kind = dp ) , dimension ( * ) :: Wght integer :: N real ( kind = dp ) , intent ( in ) :: Delta real ( kind = dp ) :: Hl0 integer , intent ( in ) :: Mnewt external :: psol ! real ( kind = dp ) :: bnrm integer :: i , ier integer , intent ( out ) :: Iflag , Npsl integer , dimension ( * ) :: Iwp real ( kind = dp ) , dimension ( * ) :: Wk , Wp , X ! Iflag = 0 Npsl = 0 !----------------------------------------------------------------------- !  Test for an immediate return with X = 0 or X = b. !----------------------------------------------------------------------- bnrm = dvnorm ( N , B , Wght ) if ( bnrm > Delta ) then !  Make call to PSOL and copy result from B to X. ----------------------- ier = 0 call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , B , 0 , ier ) Npsl = 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif elseif ( Mnewt > 0 ) then do i = 1 , N X ( i ) = 0.0D0 enddo return else !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) return endif !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) end subroutine dusol","tags":"","loc":"sourcefile/dusol.inc.html"},{"title":"dhels.inc – odepack","text":"Contents Subroutines dhels Source Code dhels.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This is part of the LINPACK routine DGESL with changes !! due to the fact that A is an upper Hessenberg matrix. !! !! DHELS solves the least squares problem !! !!           min (b-A*x, b-A*x) !! !!     using the factors computed by DHEQR. !! !!### On entry !! !!        A       DOUBLE PRECISION(LDA, N) !!                the output from DHEQR which contains the upper !!                triangular factor R in the QR decomposition of A. !! !!        LDA     INTEGER !!                the leading dimension of the array  A . !! !!        N       INTEGER !!                A is originally an (N+1) by N matrix. !! !!        Q       DOUBLE PRECISION(2*N) !!                The coefficients of the N givens rotations !!                used in the QR factorization of A. !! !!        B       DOUBLE PRECISION(N+1) !!                the right hand side vector. !! !!### On return !! !!        B       the solution vector  x . !! !----------------------------------------------------------------------- !    Modification of LINPACK, by Peter Brown, LLNL. !    Written 1/13/86.  This version dated 6/20/01. ! !    BLAS called: DAXPY !----------------------------------------------------------------------- subroutine dhels ( A , Lda , N , Q , B ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: A ( Lda , * ) integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Q ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) ! real ( kind = dp ) :: c , s , t , t1 , t2 integer :: iq , k , kb , kp1 ! !         Minimize (b-A*x, b-A*x) !         First form Q*b. ! do k = 1 , N kp1 = k + 1 iq = 2 * ( k - 1 ) + 1 c = Q ( iq ) s = Q ( iq + 1 ) t1 = B ( k ) t2 = B ( kp1 ) B ( k ) = c * t1 - s * t2 B ( kp1 ) = s * t1 + c * t2 enddo ! !         Now solve  R*x = Q*b. ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / A ( k , k ) t = - B ( k ) call daxpy ( k - 1 , t , A ( 1 , k ), 1 , B ( 1 ), 1 ) enddo end subroutine dhels","tags":"","loc":"sourcefile/dhels.inc.html"},{"title":"dstodpk.inc – odepack","text":"Contents Subroutines dstodpk Source Code dstodpk.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DSTODPK performs one step of the integration of an initial value !! problem for a system of Ordinary Differential Equations. !! !! The following changes were made to generate Subroutine DSTODPK !! from Subroutine DSTODE: !! !! 1. The array SAVX was added to the call sequence. !! 2. PJAC and SLVS were replaced by PSOL in the call sequence. !! 3. The Common block /DLPK01/ was added for communication. !! 4. The test constant EPCON is loaded into Common below statement !!    numbers 125 and 155, and used below statement 400. !! 5. The Newton iteration counter MNEWT is set below 220 and 400. !! 6. The call to PJAC was replaced with a call to DPKSET (fixed name), !!    with a longer call sequence, called depending on JACFLG. !! 7. The corrector residual is stored in SAVX (not Y) at 360, !!    and the solution vector is in SAVX in the 380 loop. !! 8. SLVS was renamed DSOLPK and includes NEQ, SAVX, EWT, F, and JAC. !!    SAVX was added because DSOLPK now needs Y and SAVF undisturbed. !! 9. The nonlinear convergence failure count NCFN is set at 430. !! !! Note: DSTODPK is independent of the value of the iteration method !! indicator MITER, when this is .ne. 0, and hence is independent !! of the type of chord method used, or the Jacobian structure. !! !! Communication with DSTODPK is done with the following variables: !! !! NEQ !! !! : integer array containing problem size in NEQ(1), and !! passed as the NEQ argument in all calls to F and JAC. !! !! Y !! !! : an array of length .ge. N used as the Y argument in !! all calls to F and JAC. !! !! YH !! !! : an NYH by LMAX array containing the dependent variables !! and their approximate scaled derivatives, where !! LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate !! j-th derivative of y(i), scaled by H**j/factorial(j) !! (j = 0,1,...,NQ).  On entry for the first step, the first !! two columns of YH must be set from the initial values. !! !! NYH !! !! : a constant integer .ge. N, the first dimension of YH. !! !! YH1 !! !! : a one-dimensional array occupying the same space as YH. !! !! EWT !! !! : an array of length N containing multiplicative weights !! for local error measurements.  Local errors in y(i) are !! compared to 1.0/EWT(i) in various error tests. !! !! SAVF !! !! : an array of working storage, of length N. !! Also used for input of YH(*,MAXORD+2) when JSTART = -1 !! and MAXORD .lt. the current order NQ. !! !! SAVX !! !! : an array of working storage, of length N. !! !! ACOR !! !! : a work array of length N, used for the accumulated !! corrections.  On a successful return, ACOR(i) contains !! the estimated one-step local error in y(i). !! !! WM,IWM !! !! : real and integer work arrays associated with matrix !! operations in chord iteration (MITER .ne. 0). !! !! CCMAX !! !! : maximum relative change in H*EL0 before DPKSET is called. !! !! H !! !! : the step size to be attempted on the next step. !! H is altered by the error control algorithm during the !! problem.  H can be either positive or negative, but its !! sign must remain constant throughout the problem. !! !! HMIN !! !! : the minimum absolute value of the step size H to be used. !! !! HMXI !! !! : inverse of the maximum absolute value of H to be used. !! HMXI = 0.0 is allowed and corresponds to an infinite HMAX. !! HMIN and HMXI may be changed at any time, but will not !! take effect until the next change of H is considered. !! !! TN !! !! : the independent variable. TN is updated on each step taken. !! !! JSTART !! !! : an integer used for input only, with the following !! values and meanings: !! !!              0  perform the first step. !!          .gt.0  take a new step continuing from the last. !!             -1  take the next step with a new value of H, MAXORD, !!                 N, METH, MITER, and/or matrix parameters. !!             -2  take the next step with a new value of H, !!                 but with other inputs unchanged. !! !! On return, JSTART is set to 1 to facilitate continuation. !! !! KFLAG !! !! : a completion code with the following meanings: !! !!              0  the step was succesful. !!             -1  the requested error could not be achieved. !!             -2  corrector convergence could not be achieved. !!             -3  fatal error in DPKSET or DSOLPK. !! !! A return with KFLAG = -1 or -2 means either !! ABS(H) = HMIN or 10 consecutive failures occurred. !! On a return with KFLAG negative, the values of TN and !! the YH array are as of the beginning of the last !! step, and H is the last step size attempted. !! !! MAXORD !! !! : the maximum order of integration method to be allowed. !! !! MAXCOR !! !! : the maximum number of corrector iterations allowed. !! !! MSBP !! !! : maximum number of steps between DPKSET calls (MITER .gt. 0). !! !! MXNCF !! !! : maximum number of convergence failures allowed. !! !! METH/MITER !! !! : the method flags.  See description in driver. !! !! N !! !! : the number of first-order differential equations. !----------------------------------------------------------------------- subroutine dstodpk ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Savx , Acor , Wm , Iwm , f , jac , psol ) integer , dimension ( * ) :: Neq real ( kind = dp ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( inout ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( inout ), dimension ( * ) :: Yh1 real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savf real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savx real ( kind = dp ), intent ( inout ), dimension ( * ) :: Acor real ( kind = dp ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external f external jac external psol real ( kind = dp ) :: dcon , ddn , del , delp , dsm , dup , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , told integer :: i , i1 , iredo , iret , j , jb , m , ncf , newq dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  The flag IPUP is set according to whether matrix data is involved !  (JACFLG .ne. 0) or not (JACFLG = 0), to trigger a call to DPKSET. !  IPUP is set to MITER when RC differs from 1 by more than CCMAX, !  and at least every MSBP steps, when JACFLG = 1. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !----------------------------------------------------------------------- 400 continue if ( dlpk % jacflg /= 0 ) then if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter else dls1 % ipup = 0 dls1 % crate = 0.7D0 endif dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 dlpk % mnewt = 0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, DPKSET is called to update any matrix data needed, !  before starting the corrector iteration. !  IPUP is set to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call dpkset ( Neq , Y , Yh1 , Ewt , Acor , Savf , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls1 % miter /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savx ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo call dsolpk ( Neq , Y , Savf , Savx , Ewt , Wm , Iwm , f , psol ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dvnorm ( dls1 % n , Savx , Ewt ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Savx ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo endif !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. !----------------------------------------------------------------------- if ( m /= 0 ) dls1 % crate = max ( 0.2D0 * dls1 % crate , del / delp ) dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / dlpk % epcon if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1300 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  the largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then dlpk % mnewt = m delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If MITER .ne. 0 and the Jacobian is out of date, DPKSET is called for !  the next try.  Otherwise the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue if ( dls1 % miter /= 0 . and . dls1 % jcur /= 1 . and . dlpk % jacflg /= 0 ) then dls1 % icf = 1 dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dlpk % ncfn = dlpk % ncfn + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1300 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1300 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1300 else rh = 0.5D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1200 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstodpk","tags":"","loc":"sourcefile/dstodpk.inc.html"},{"title":"diprep.inc – odepack","text":"Contents Subroutines diprep Source Code diprep.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine serves as an interface between the driver and !! Subroutine DPREP.  It is called only if MITER is 1 or 2. !! Tasks performed here are: !! !!  * call DPREP, !!  * reset the required WM segment length LENWK, !!  * move YH back to its final location (following WM in RWORK), !!  * reset pointers for YH, SAVF, EWT, and ACOR, and !!  * move EWT to its new position if ISTATE = 1. !! !! IPFLAG is an output error indication flag.  IPFLAG = 0 if there was !! no trouble, and IPFLAG is the value of the DPREP error flag IPPER !! if there was trouble in Subroutine DPREP. !----------------------------------------------------------------------- subroutine diprep ( Neq , Y , Rwork , Ia , Ja , Ipflag , f , jac ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ), intent ( inout ) :: Rwork ( * ) integer :: Ia ( * ) integer :: Ja ( * ) integer , intent ( inout ) :: Ipflag external :: f external :: jac integer :: i , imax , lewtn , lyhd , lyhn !integer :: Iwork2(size(Rwork)*2) !SCRATCH SPACE Ipflag = 0 ! =============================================== ! subroutine dprep (neq, y, yh, savf, ewt, ftem, ia, ja, wk, iwk, ipper, f, jac) ! integer          :: neq(*) ! double precision :: y(*) ! double precision :: yh(*) ! double precision :: savf(*) ! double precision :: ewt(*) ! double precision :: ftem(*) ! integer          :: ia(*) ! integer          :: ja(*) ! double precision :: wk(*) ! integer          :: iwk(*) ! integer          :: ipper ! external         :: f ! external         :: jac ! =============================================== !  Call DPREP to do matrix preprocessing operations. -------------------- call dprep ( Neq , Y , & & Rwork ( dls1 % lyh ), Rwork ( dls1 % lsavf ), Rwork ( dls1 % lewt ), Rwork ( dls1 % lacor ), & & Ia , Ja , & & Rwork ( dls1 % lwm ), & & Rwork ( dls1 % lwm ), & & Ipflag , & & f , jac ) dlss % lenwk = max ( dlss % lreq , dlss % lwmin ) if ( Ipflag < 0 ) return !  If DPREP was successful, move YH to end of required space for WM. ---- lyhn = dls1 % lwm + dlss % lenwk if ( lyhn > dls1 % lyh ) return lyhd = dls1 % lyh - lyhn if ( lyhd /= 0 ) then imax = lyhn - 1 + dlss % lenyhm do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo dls1 % lyh = lyhn endif !  Reset pointers for SAVF, EWT, and ACOR. ------------------------------ dls1 % lsavf = dls1 % lyh + dlss % lenyh lewtn = dls1 % lsavf + dls1 % n dls1 % lacor = lewtn + dls1 % n if ( dlss % istatc /= 3 ) then !  If ISTATE = 1, move EWT (left) to its new position. ------------------ if ( lewtn > dls1 % lewt ) return do i = 1 , dls1 % n Rwork ( i + lewtn - 1 ) = Rwork ( i + dls1 % lewt - 1 ) enddo endif dls1 % lewt = lewtn end subroutine diprep","tags":"","loc":"sourcefile/diprep.inc.html"},{"title":"dhesl.inc – odepack","text":"Contents Subroutines dhesl Source Code dhesl.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!   This is essentially the LINPACK routine DGESL except for changes !!   due to the fact that A is an upper Hessenberg matrix. !! !!   DHESL solves the real system A * x = b !!   using the factors computed by DHEFA. !! !!### On entry !! !!        A       DOUBLE PRECISION(LDA, N) !!                the output from DHEFA. !! !!        LDA     INTEGER !!                the leading dimension of the array  A . !! !!        N       INTEGER !!                the order of the matrix  A . !! !!        IPVT    INTEGER(N) !!                the pivot vector from DHEFA. !! !!        B       DOUBLE PRECISION(N) !!                the right hand side vector. !! !!### On return !! !!        B       the solution vector  x . !! !----------------------------------------------------------------------- !    Modification of LINPACK, by Peter Brown, LLNL. !    Written 7/20/83.  This version dated 6/20/01. ! !    BLAS called: DAXPY !----------------------------------------------------------------------- subroutine dhesl ( A , Lda , N , Ipvt , B ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ipvt ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) ! integer :: k , kb , l , nm1 real ( kind = dp ) :: t ! ! nm1 = N - 1 ! !         Solve  A * x = b !         First solve  L*y = b ! if ( nm1 >= 1 ) then do k = 1 , nm1 l = Ipvt ( k ) t = B ( l ) if ( l /= k ) then B ( l ) = B ( k ) B ( k ) = t endif B ( k + 1 ) = B ( k + 1 ) + t * A ( k + 1 , k ) enddo endif ! !         Now solve  U*x = y ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / A ( k , k ) t = - B ( k ) call daxpy ( k - 1 , t , A ( 1 , k ), 1 , B ( 1 ), 1 ) enddo end subroutine dhesl","tags":"","loc":"sourcefile/dhesl.inc.html"},{"title":"mdu.inc – odepack","text":"Contents Subroutines mdu Source Code mdu.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!  mdu -- update degrees of uneliminated vertices in ek !! !----------------------------------------------------------------------- subroutine mdu ( Ek , Dmin , V , L , Head , Last , Next , Mark ) ! integer , intent ( in ) :: Ek integer , intent ( inout ) :: Dmin integer , intent ( in ) :: V ( * ) integer , intent ( in ) :: L ( * ) integer , intent ( inout ) :: Head ( * ) integer , intent ( inout ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) integer :: b , blp , blpmax , dvi , es , evi , i , ilp , ilpmax , s , tag , vb , vi , vs equivalence ( vs , es ) ! !----initialize tag tag = Mark ( Ek ) - Last ( Ek ) ! !----for each vertex vi in ek i = Ek ilpmax = Last ( Ek ) if ( ilpmax > 0 ) then MAIN : do ilp = 1 , ilpmax i = L ( i ) vi = V ( i ) if ( Last ( vi ) < 0 ) then ! !------if vi neither prototype nor duplicate vertex, then merge elements !------to compute degree tag = tag + 1 dvi = Last ( Ek ) ! !--------for each vertex/element vs/es in element list of vi s = L ( vi ) do s = L ( s ) if ( s == 0 ) exit vs = V ( s ) if ( Next ( vs ) >= 0 ) then ! !----------if vs is uneliminated vertex, then tag and adjust degree Mark ( vs ) = tag dvi = dvi + 1 ! !----------if es is active element, then expand !------------check for outmatched vertex elseif ( Mark ( es ) < 0 ) then ! !------else if vi is outmatched vertex, then adjust overlaps but do not !------compute degree Last ( vi ) = 0 Mark ( es ) = Mark ( es ) - 1 do s = L ( s ) if ( s == 0 ) cycle MAIN es = V ( s ) if ( Mark ( es ) < 0 ) Mark ( es ) = Mark ( es ) - 1 enddo else ! !------------for each vertex vb in es b = es blpmax = Last ( es ) do blp = 1 , blpmax b = L ( b ) vb = V ( b ) ! !--------------if vb is untagged, then tag and adjust degree if ( Mark ( vb ) < tag ) then Mark ( vb ) = tag dvi = dvi + 1 endif ! enddo endif enddo elseif ( Last ( vi ) == 0 ) then cycle else ! !------else if vi is prototype vertex, then calculate degree by !------inclusion/exclusion and reset overlap count evi = Last ( vi ) dvi = Last ( Ek ) + Last ( evi ) + Mark ( evi ) Mark ( evi ) = 0 endif ! !------insert vi in appropriate degree list Next ( vi ) = Head ( dvi ) Head ( dvi ) = vi Last ( vi ) = - dvi if ( Next ( vi ) > 0 ) Last ( Next ( vi )) = vi if ( dvi < Dmin ) Dmin = dvi ! enddo MAIN endif end subroutine mdu","tags":"","loc":"sourcefile/mdu.inc.html"},{"title":"dsolpk.inc – odepack","text":"Contents Subroutines dsolpk Source Code dsolpk.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine interfaces to one of DSPIOM, DSPIGMR, DPCG, DPCGS, or !! DUSOL, for the solution of the linear system arising from a Newton !! iteration.  It is called if MITER .ne. 0. !! In addition to variables described elsewhere, !! communication with DSOLPK uses the following variables: !! !! WM !! !! : real work space containing data for the algorithm !! (Krylov basis vectors, Hessenberg matrix, etc.) !! IWM !! : integer work space containing data for the algorithm !! !! X !! !! : the right-hand side vector on input, and the solution vector !! on output, of length N. !! !! IERSL !! !! : output flag (in Common): !!       ERSL =  0 means no trouble occurred. !!       ERSL =  1 means the iterative method failed to converge. !!                 If the preconditioner is out of date, the step !!                 is repeated with a new preconditioner. !!                 Otherwise, the stepsize is reduced (forcing a !!                 new evaluation of the preconditioner) and the !!                 step is repeated. !!       ERSL = -1 means there was a nonrecoverable error in the !!                 iterative solver, and an error exit occurs. !! !! This routine also uses the Common variables TN, EL0, H, N, MITER, !! DELT, EPCON, SQRTN, RSQRTN, MAXL, KMP, MNEWT, NNI, NLI, NPS, NCFL, !! LOCWP, LOCIWP. !----------------------------------------------------------------------- subroutine dsolpk ( Neq , Y , Savf , X , Ewt , Wm , Iwm , f , psol ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ) :: X ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: psol real ( kind = dp ) :: delta , hl0 integer :: iflag , lb , ldl , lgmr , lhes , liom , lp , lpcg , lq , lr , lv , lw , lwk , lz , maxlp1 , npsl dls1 % iersl = 0 hl0 = dls1 % h * dls1 % el0 delta = dlpk % delt * dlpk % epcon select case ( dls1 % miter ) case ( 2 ) !----------------------------------------------------------------------- !  Use the SPIGMR algorithm to solve the linear system P*x = -f. !----------------------------------------------------------------------- maxlp1 = dlpk % maxl + 1 lv = 1 lb = lv + dls1 % n * dlpk % maxl lhes = lb + dls1 % n + 1 lq = lhes + dlpk % maxl * maxlp1 lwk = lq + 2 * dlpk % maxl ldl = lwk + min ( 1 , dlpk % maxl - dlpk % kmp ) * dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lb),1) Wm ( lb : lb + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dscal ( dls1 % n , dlpk % rsqrtn , Ewt , 1 ) call dspigmr ( Neq , dls1 % tn , Y , Savf , Wm ( lb ), Ewt , dls1 % n , dlpk % maxl , maxlp1 , & & dlpk % kmp , delta , hl0 , dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , & & Wm ( lv ), Wm ( lhes ), Wm ( lq ), lgmr , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), Wm ( ldl ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + lgmr dlpk % nps = dlpk % nps + npsl call dscal ( dls1 % n , dlpk % sqrtn , Ewt , 1 ) if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case ( 3 ) !----------------------------------------------------------------------- !  Use DPCG to solve the linear system P*x = -f !----------------------------------------------------------------------- lr = 1 lp = lr + dls1 % n lw = lp + dls1 % n lz = lw + dls1 % n lwk = lz + dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lr),1) Wm ( lr : lr + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dpcg ( Neq , dls1 % tn , Y , Savf , Wm ( lr ), Ewt , dls1 % n , dlpk % maxl , delta , hl0 , & & dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , Wm ( lp ), Wm ( lw ), Wm ( lz ), & & lpcg , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + lpcg dlpk % nps = dlpk % nps + npsl if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case ( 4 ) !----------------------------------------------------------------------- !  Use DPCGS to solve the linear system P*x = -f !----------------------------------------------------------------------- lr = 1 lp = lr + dls1 % n lw = lp + dls1 % n lz = lw + dls1 % n lwk = lz + dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lr),1) Wm ( lr : lr + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dpcgs ( Neq , dls1 % tn , Y , Savf , Wm ( lr ), Ewt , dls1 % n , dlpk % maxl , delta , hl0 , & & dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , Wm ( lp ), Wm ( lw ), Wm ( lz ),& & lpcg , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + lpcg dlpk % nps = dlpk % nps + npsl if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case ( 5 , 6 , 7 , 8 , 9 ) !----------------------------------------------------------------------- !  Use DUSOL, which interfaces to PSOL, to solve the linear system !  (no Krylov iteration). !----------------------------------------------------------------------- lb = 1 lwk = lb + dls1 % n !X!call dcopy(dls1%n,X,1,Wm(lb),1) Wm ( lb : lb + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dusol ( Neq , dls1 % tn , Y , Savf , Wm ( lb ), Ewt , dls1 % n , delta , hl0 , dlpk % mnewt , & & psol , npsl , X , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nps = dlpk % nps + npsl if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag == 3 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 case default !----------------------------------------------------------------------- !  Use the SPIOM algorithm to solve the linear system P*x = -f. !----------------------------------------------------------------------- lv = 1 lb = lv + dls1 % n * dlpk % maxl lhes = lb + dls1 % n lwk = lhes + dlpk % maxl * dlpk % maxl !X!call dcopy(dls1%n,X,1,Wm(lb),1) Wm ( lb : lb + dls1 % n - 1 ) = X ( 1 : dls1 % n ) call dscal ( dls1 % n , dlpk % rsqrtn , Ewt , 1 ) call dspiom ( Neq , dls1 % tn , Y , Savf , Wm ( lb ), Ewt , dls1 % n , dlpk % maxl , dlpk % kmp , & & delta , hl0 , dlpk % jpre , dlpk % mnewt , f , psol , npsl , X , Wm ( lv ), & & Wm ( lhes ), Iwm , liom , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), Wm ( lwk ), iflag ) dlpk % nni = dlpk % nni + 1 dlpk % nli = dlpk % nli + liom dlpk % nps = dlpk % nps + npsl call dscal ( dls1 % n , dlpk % sqrtn , Ewt , 1 ) if ( iflag /= 0 ) dlpk % ncfl = dlpk % ncfl + 1 if ( iflag >= 2 ) dls1 % iersl = 1 if ( iflag < 0 ) dls1 % iersl = - 1 endselect end subroutine dsolpk","tags":"","loc":"sourcefile/dsolpk.inc.html"},{"title":"dprepji.inc – odepack","text":"Contents Subroutines dprepji Source Code dprepji.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DPREPJI is called by DSTODI to compute and process the matrix !! P = A - H*EL(1)*J, where J is an approximation to the Jacobian dr/dy, !! where r = g(t,y) - A(t,y)*s. !! !! Here J is computed by the user-supplied !! routine JAC if MITER = 1 or 4, or by finite differencing if MITER = !! 2 or 5. !! !! J is stored in WM, rescaled, and ADDA is called to generate !! P. !! !! P is then subjected to LU decomposition in preparation !! for later solution of linear systems with P as coefficient !! matrix.  This is done by DGEFA if MITER = 1 or 2, and by !! DGBFA if MITER = 4 or 5. !! !! In addition to variables described previously, communication !! with DPREPJI uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! RTEM !! !! : work array of length N (ACOR in DSTODI). !! !! SAVR !! !! : array used for output only.  On output it contains the !! residual evaluated at current values of t and y. !! !! S !! !! : array containing predicted values of dy/dt (SAVF in DSTODI). !! !! WM !! !! : real work space for matrices.  On output it contains the !! LU decomposition of P. !! Storage of matrix elements starts at WM(3). !! WM also contains the following matrix-related data: !! WM(1) = SQRT(UROUND), used in numerical Jacobian increments. !! !! IWM !! !! : integer work space containing pivot information, starting at !! IWM(21).  IWM also contains the band parameters !! ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. !! !! EL0 !! !! : el(1) (input). !! !! IERPJ !! !! : output error flag. !!         = 0 if no trouble occurred, !!         = 1 if the P matrix was found to be singular, !!         = IRES (= 2 or 3) if RES returned IRES = 2 or 3. !! !! JCUR !! !! : output flag = 1 to indicate that the Jacobian matrix !! (or approximation) is now current. !! !! This routine also uses the Common variables EL0, H, TN, UROUND, !! MITER, N, NFE, and NJE. !----------------------------------------------------------------------- subroutine dprepji ( Neq , Y , Yh , Nyh , Ewt , Rtem , Savr , S , Wm , Iwm , res , jac , adda ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( in ) :: Ewt ( * ) real ( kind = dp ) :: Rtem ( * ) real ( kind = dp ) :: Savr ( * ) real ( kind = dp ) :: S ( * ) real ( kind = dp ), intent ( inout ) :: Wm ( * ) integer :: Iwm ( * ) external adda external jac external res ! real ( kind = dp ) :: con , fac , hl0 , r , srur , yi , yj , yjj integer :: i , i1 , i2 , ier , ii , ires , j , j1 , jj , lenp , mba , mband , meb1 , meband , ml , ml3 , mu ! dls1 % nje = dls1 % nje + 1 hl0 = dls1 % h * dls1 % el0 dls1 % ierpj = 0 dls1 % jcur = 1 select case ( dls1 % miter ) case ( 2 ) !  If MITER = 2, make N + 1 calls to RES to approximate J. -------------- ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then !  Error return for IRES = 2 or IRES = 3 return from RES. --------------- dls1 % ierpj = ires return else srur = Wm ( 1 ) j1 = 2 do j = 1 , dls1 % n yj = Y ( j ) r = max ( srur * abs ( yj ), 0.01D0 / Ewt ( j )) Y ( j ) = Y ( j ) + r fac = - hl0 / r call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do i = 1 , dls1 % n Wm ( i + j1 ) = ( Rtem ( i ) - Savr ( i )) * fac enddo Y ( j ) = yj j1 = j1 + dls1 % n endif enddo ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return endif endif case ( 3 ) !  Dummy section for MITER = 3 return case ( 4 ) !  If MITER = 4, call RES, then JAC, and multiply by scalar. ------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 meband = mband + ml lenp = meband * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , ml , mu , Wm ( ml3 ), meband ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo call wrapup () return endif case ( 5 ) !  If MITER = 5, make ML + MU + 2 calls to RES to approximate J. -------- ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 mba = min ( mband , dls1 % n ) meband = mband + ml meb1 = meband - 1 srur = Wm ( 1 ) do j = 1 , mba do i = j , dls1 % n , mband yi = Y ( i ) r = max ( srur * abs ( yi ), 0.01D0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do jj = j , dls1 % n , mband Y ( jj ) = Yh ( jj , 1 ) yjj = Y ( jj ) r = max ( srur * abs ( yjj ), 0.01D0 / Ewt ( jj )) fac = - hl0 / r i1 = max ( jj - mu , 1 ) i2 = min ( jj + ml , dls1 % n ) ii = jj * meb1 - ml + 2 do i = i1 , i2 Wm ( ii + i ) = ( Rtem ( i ) - Savr ( i )) * fac enddo enddo endif enddo ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires <= 1 ) then call wrapup () return endif dls1 % ierpj = ires return endif case default !  If MITER = 1, call RES, then JAC, and multiply by scalar. ------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else lenp = dls1 % n * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , 0 , 0 , Wm ( 3 ), dls1 % n ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endif endselect !  Add matrix A. -------------------------------------------------------- call adda ( Neq , dls1 % tn , Y , 0 , 0 , Wm ( 3 ), dls1 % n ) !  Do LU decomposition on P. -------------------------------------------- call dgefa ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 contains subroutine wrapup () !  Add matrix A. -------------------------------------------------------- call adda ( Neq , dls1 % tn , Y , ml , mu , Wm ( ml3 ), meband ) !  Do LU decomposition of P. -------------------------------------------- call dgbfa ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine wrapup end subroutine dprepji","tags":"","loc":"sourcefile/dprepji.inc.html"},{"title":"droots.inc – odepack","text":"Contents Subroutines droots Source Code droots.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This subroutine finds the leftmost root of a set of arbitrary !! functions gi(x) (i = 1,...,NG) in an interval (X0,X1).  Only roots !! of odd multiplicity (i.e. changes of sign of the gi) are found. !! Here the sign of X1 - X0 is arbitrary, but is constant for a given !! problem, and -leftmost- means nearest to X0. !! The values of the vector-valued function g(x) = (gi, i=1...NG) !! are communicated through the call sequence of DROOTS. !! The method used is the Illinois algorithm. !! !! #### Reference: !! Kathie L. Hiebert and Lawrence F. Shampine, Implicitly Defined !! Output Points for Solutions of ODEs, Sandia Report SAND80-0180, !! February 1980. !! !!### Description of parameters. !! !! NG !! !! : number of functions gi, or the number of components of !! the vector valued function g(x).  Input only. !! !! HMIN !! !! : resolution parameter in X.  Input only.  When a root is !! found, it is located only to within an error of HMIN in X. !! Typically, HMIN should be set to something on the order of !!               100 * UROUND * MAX(ABS(X0),ABS(X1)), !! where UROUND is the unit roundoff of the machine. !! !! JFLAG !! !! : integer flag for input and output communication. !! !! On input, set JFLAG = 0 on the first call for the problem, !! and leave it unchanged until the problem is completed. !! (The problem is completed when JFLAG .ge. 2 on return.) !! !!### On output !! JFLAG !! !! :JFLAG has the following values and meanings: !! !!          JFLAG = 1 means DROOTS needs a value of g(x).  Set GX = g(X) !!                    and call DROOTS again. !!          JFLAG = 2 means a root has been found.  The root is !!                    at X, and GX contains g(X).  (Actually, X is the !!                    rightmost approximation to the root on an interval !!                    (X0,X1) of size HMIN or less.) !!          JFLAG = 3 means X = X1 is a root, with one or more of the gi !!                    being zero at X1 and no sign changes in (X0,X1). !!                    GX contains g(X) on output. !!          JFLAG = 4 means no roots (of odd multiplicity) were !!                    found in (X0,X1) (no sign changes). !! !! X0,X1 !! !! : endpoints of the interval where roots are sought. !! X1 and X0 are input when JFLAG = 0 (first call), and !! must be left unchanged between calls until the problem is !! completed.  X0 and X1 must be distinct, but X1 - X0 may be !! of either sign.  However, the notion of -left- and -right- !! will be used to mean nearer to X0 or X1, respectively. !! When JFLAG .ge. 2 on return, X0 and X1 are output, and !! are the endpoints of the relevant interval. !! !! G0,G1 !! !! : arrays of length NG containing the vectors g(X0) and g(X1), !! respectively.  When JFLAG = 0, G0 and G1 are input and !! none of the G0(i) should be zero. !! When JFLAG .ge. 2 on return, G0 and G1 are output. !! !! GX !! !! : array of length NG containing g(X).  GX is input !! when JFLAG = 1, and output when JFLAG .ge. 2. !! !! X !! !! : independent variable value.  Output only. !! When JFLAG = 1 on output, X is the point at which g(x) !! is to be evaluated and loaded into GX. !! !!          When JFLAG = 2 or 3, X is the root. !! !!          When JFLAG = 4, X is the right endpoint of the interval, X1. !! !! JROOT !! !! : integer array of length NG.  Output only. !! When JFLAG = 2 or 3, JROOT indicates which components !! of g(x) have a root at X.  JROOT(i) is 1 if the i-th !! component has a root, and JROOT(i) = 0 otherwise. !----------------------------------------------------------------------- subroutine droots ( Ng , Hmin , Jflag , X0 , X1 , G0 , G1 , Gx , X , Jroot ) ! integer :: Ng real ( kind = dp ), intent ( in ) :: Hmin integer , intent ( inout ) :: Jflag real ( kind = dp ), intent ( inout ) :: X0 real ( kind = dp ), intent ( inout ) :: X1 real ( kind = dp ) :: G0 ( Ng ) real ( kind = dp ) :: G1 ( Ng ) real ( kind = dp ) :: Gx ( Ng ) real ( kind = dp ), intent ( out ) :: X integer , intent ( out ) :: Jroot ( Ng ) ! real ( kind = dp ) :: fracint , fracsub , t2 , tmax integer :: i , imxold , nxlast logical :: sgnchg , xroot , zroot ! real ( kind = dp ) , parameter :: five = 5.0d0 , half = 0.5d0 , tenth = 0.1d0 , zero = 0.0d0 ! if ( Jflag == 1 ) then !  Check to see in which interval g changes sign. ----------------------- imxold = dlsr % imax dlsr % imax = 0 tmax = zero zroot = . false . do i = 1 , Ng if ( abs ( Gx ( i )) <= zero ) then zroot = . true . !  Neither G0(i) nor GX(i) can be zero at this point. ------------------- elseif ( sign ( 1.0D0 , G0 ( i )) /= sign ( 1.0D0 , Gx ( i )) ) then t2 = abs ( Gx ( i ) / ( Gx ( i ) - G0 ( i ))) if ( t2 > tmax ) then tmax = t2 dlsr % imax = i endif endif enddo if ( dlsr % imax > 0 ) then sgnchg = . true . else sgnchg = . false . dlsr % imax = imxold endif nxlast = dlsr % last if ( sgnchg ) then !  Sign change between X0 and X2, so replace X1 with X2. ---------------- X1 = dlsr % x2 !X!call dcopy(Ng,Gx,1,G1,1) G1 ( 1 : Ng ) = Gx ( 1 : Ng ) dlsr % last = 1 xroot = . false . elseif ( . not . zroot ) then !  No sign change between X0 and X2.  Replace X0 with X2. --------------- !X!call dcopy(Ng,Gx,1,G0,1) G0 ( 1 : Ng ) = Gx ( 1 : Ng ) X0 = dlsr % x2 dlsr % last = 0 xroot = . false . else !  Zero value at X2 and no sign change in (X0,X2), so X2 is a root. ----- X1 = dlsr % x2 !X!call dcopy(Ng,Gx,1,G1,1) G1 ( 1 : Ng ) = Gx ( 1 : Ng ) xroot = . true . endif if ( abs ( X1 - X0 ) <= Hmin ) xroot = . true . else !  JFLAG .ne. 1.  Check for change in sign of g or zero at X1. ---------- dlsr % imax = 0 tmax = zero zroot = . false . do i = 1 , Ng if ( abs ( G1 ( i )) <= zero ) then zroot = . true . !  At this point, G0(i) has been checked and cannot be zero. ------------ elseif ( sign ( 1.0D0 , G0 ( i )) /= sign ( 1.0D0 , G1 ( i )) ) then t2 = abs ( G1 ( i ) / ( G1 ( i ) - G0 ( i ))) if ( t2 > tmax ) then tmax = t2 dlsr % imax = i endif endif enddo if ( dlsr % imax > 0 ) then sgnchg = . true . else sgnchg = . false . endif if ( . not . sgnchg ) then ! !  No sign change in the interval.  Check for zero at right endpoint. --- if ( zroot ) then ! !  Zero value at X1 and no sign change in (X0,X1).  Return JFLAG = 3. --- X = X1 !X!call dcopy(Ng,G1,1,Gx,1) Gx ( 1 : Ng ) = G1 ( 1 : Ng ) do i = 1 , Ng Jroot ( i ) = 0 if ( abs ( G1 ( i )) <= zero ) Jroot ( i ) = 1 enddo Jflag = 3 return endif ! !  No sign changes in this interval.  Set X = X1, return JFLAG = 4. ----- !X!call dcopy(Ng,G1,1,Gx,1) Gx ( 1 : Ng ) = G1 ( 1 : Ng ) X = X1 Jflag = 4 return else !  There is a sign change.  Find the first root in the interval. -------- xroot = . false . nxlast = 0 dlsr % last = 1 endif endif ! !  Repeat until the first root in the interval is found.  Loop point. --- if ( xroot ) then ! !  Return with X1 as the root.  Set JROOT.  Set X = X1 and GX = G1. ----- Jflag = 2 X = X1 !X!call dcopy(Ng,G1,1,Gx,1) Gx ( 1 : Ng ) = G1 ( 1 : Ng ) do i = 1 , Ng Jroot ( i ) = 0 if ( abs ( G1 ( i )) > zero ) then if ( sign ( 1.0D0 , G0 ( i )) /= sign ( 1.0D0 , G1 ( i )) ) Jroot ( i ) = 1 else Jroot ( i ) = 1 endif enddo else if ( nxlast /= dlsr % last ) then dlsr % alpha = 1.0D0 elseif ( dlsr % last == 0 ) then dlsr % alpha = 2.0D0 * dlsr % alpha else dlsr % alpha = 0.5D0 * dlsr % alpha endif dlsr % x2 = X1 - ( X1 - X0 ) * G1 ( dlsr % imax ) / ( G1 ( dlsr % imax ) - dlsr % alpha * G0 ( dlsr % imax )) !  If X2 is too close to X0 or X1, adjust it inward, by a fractional ---- !  distance that is between 0.1 and 0.5. -------------------------------- if ( abs ( dlsr % x2 - X0 ) < half * Hmin ) then fracint = abs ( X1 - X0 ) / Hmin fracsub = tenth if ( fracint <= five ) fracsub = half / fracint dlsr % x2 = X0 + fracsub * ( X1 - X0 ) endif if ( abs ( X1 - dlsr % x2 ) < half * Hmin ) then fracint = abs ( X1 - X0 ) / Hmin fracsub = tenth if ( fracint <= five ) fracsub = half / fracint dlsr % x2 = X1 - fracsub * ( X1 - X0 ) endif Jflag = 1 X = dlsr % x2 !  Return to the calling routine to get a value of GX = g(X). ----------- endif end subroutine droots","tags":"","loc":"sourcefile/droots.inc.html"},{"title":"dpkset.inc – odepack","text":"Contents Subroutines dpkset Source Code dpkset.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DPKSET is called by DSTODPK to interface with the user-supplied !! routine JAC, to compute and process relevant parts of !! the matrix P = I - H*EL(1)*J, where J is the Jacobian df/dy, !! as need for preconditioning matrix operations later. !! !! In addition to variables described previously, communication !! with DPKSET uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! YSV !! !! : array containing predicted y, to be saved (YH1 in DSTODPK). !! !! FTEM !! !! : work array of length N (ACOR in DSTODPK). !! !! SAVF !! !! : array containing f evaluated at predicted y. !! !! WM !! !! : real work space for matrices. !! Space for preconditioning data starts at WM(LOCWP). !! !! IWM !! !! : integer work space. !! Space for preconditioning data starts at IWM(LOCIWP). !! !! IERPJ !! !! : output error flag,  = 0 if no trouble, .gt. 0 if !! JAC returned an error flag. !! !! JCUR !! !! : output flag = 1 to indicate that the Jacobian matrix !! (or approximation) is now current. !! !! This routine also uses Common variables EL0, H, TN, IERPJ, JCUR, NJE. !----------------------------------------------------------------------- subroutine dpkset ( Neq , Y , Ysv , Ewt , Ftem , Savf , Wm , Iwm , f , jac ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ysv ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: jac real ( kind = dp ) :: hl0 integer :: ier dls1 % ierpj = 0 dls1 % jcur = 1 hl0 = dls1 % el0 * dls1 % h call jac ( f , Neq , dls1 % tn , Y , Ysv , Ewt , Savf , Ftem , hl0 , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), ier ) dls1 % nje = dls1 % nje + 1 if ( ier /= 0 ) then dls1 % ierpj = 1 endif end subroutine dpkset","tags":"","loc":"sourcefile/dpkset.inc.html"},{"title":"dsrcpk.inc – odepack","text":"Contents Subroutines dsrcpk Source Code dsrcpk.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine saves or restores (depending on JOB) the contents of !! the internal types used internally by the DLSODPK solver. !! !! RSAV !! !! : real array of length 222 or more. !! !! ISAV !! !! : integer array of length 50 or more. !! !! JOB !! !! : flag indicating to save or restore the Common blocks: !! !!        JOB  = 1 if Common is to be saved (written to RSAV/ISAV) !!        JOB  = 2 if Common is to be restored (read from RSAV/ISAV) !!        A call with JOB = 2 presumes a prior call with JOB = 1. !! !----------------------------------------------------------------------- subroutine dsrcpk ( rsav , isav , job ) real ( kind = dp ) :: Rsav ( * ) integer :: Isav ( * ) integer , intent ( in ) :: Job integer , parameter :: lenils = 37 , lenrls = 218 select case ( job ) case ( 1 ) rsav ( 1 : lenrls ) = return_dls1_real () rsav ( lenrls + 1 ) = dlpk % delt rsav ( lenrls + 2 ) = dlpk % epcon rsav ( lenrls + 3 ) = dlpk % sqrtn rsav ( lenrls + 4 ) = dlpk % rsqrtn isav ( 1 : lenils ) = return_dls1_int () isav ( lenils + 1 ) = dlpk % jpre isav ( lenils + 2 ) = dlpk % jacflg isav ( lenils + 3 ) = dlpk % locwp isav ( lenils + 4 ) = dlpk % lociwp isav ( lenils + 5 ) = dlpk % lsavx isav ( lenils + 6 ) = dlpk % kmp isav ( lenils + 7 ) = dlpk % maxl isav ( lenils + 8 ) = dlpk % mnewt isav ( lenils + 9 ) = dlpk % nni isav ( lenils + 10 ) = dlpk % nli isav ( lenils + 11 ) = dlpk % nps isav ( lenils + 12 ) = dlpk % ncfn isav ( lenils + 13 ) = dlpk % ncfl case ( 2 ) call set_dls1_real ( rsav ( 1 : lenrls )) dlpk % delt = rsav ( lenrls + 1 ) dlpk % epcon = rsav ( lenrls + 2 ) dlpk % sqrtn = rsav ( lenrls + 3 ) dlpk % rsqrtn = rsav ( lenrls + 4 ) call set_dls1_int ( isav ( 1 : lenils )) dlpk % jpre = isav ( lenils + 1 ) dlpk % jacflg = isav ( lenils + 2 ) dlpk % locwp = isav ( lenils + 3 ) dlpk % lociwp = isav ( lenils + 4 ) dlpk % lsavx = isav ( lenils + 5 ) dlpk % kmp = isav ( lenils + 6 ) dlpk % maxl = isav ( lenils + 7 ) dlpk % mnewt = isav ( lenils + 8 ) dlpk % nni = isav ( lenils + 9 ) dlpk % nli = isav ( lenils + 10 ) dlpk % nps = isav ( lenils + 11 ) dlpk % ncfn = isav ( lenils + 12 ) dlpk % ncfl = isav ( lenils + 13 ) case default write ( * , * ) '<ERROR>*dsrcpk* unknown value for JOB=' , Job stop 1 end select end subroutine dsrcpk","tags":"","loc":"sourcefile/dsrcpk.inc.html"},{"title":"jgroup.inc – odepack","text":"Contents Subroutines jgroup Source Code jgroup.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This subroutine constructs groupings of the column indices of !! the Jacobian matrix, used in the numerical evaluation of the !! Jacobian by finite differences. !! !!### Input: !! !! N !! !! : the order of the matrix. !! !! IA,JA !! !! : sparse structure descriptors of the matrix by rows. !! !! MAXG !! !! : length of available storage in the IGP array. !! !!### Output: !! !! NGRP !! !! : number of groups. !! !! JGP !! !! : array of length N containing the column indices by groups. !! !! IGP !! !! : pointer array of length NGRP + 1 to the locations in JGP !! of the beginning of each group. !! !! IER !! !! : error indicator.  IER = 0 if no error occurred, or 1 if !! MAXG was insufficient. !! !! INCL and JDONE are working arrays of length N. !----------------------------------------------------------------------- subroutine jgroup ( N , Ia , Ja , Maxg , Ngrp , Igp , Jgp , Incl , Jdone , Ier ) ! integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: Ia integer , intent ( in ) , dimension ( * ) :: Ja integer , intent ( in ) :: Maxg integer , intent ( out ) :: Ngrp integer , intent ( inout ) , dimension ( * ) :: Igp integer , intent ( out ) , dimension ( * ) :: Jgp integer , intent ( inout ) , dimension ( * ) :: Incl integer , intent ( inout ) , dimension ( * ) :: Jdone integer , intent ( out ) :: Ier ! integer :: i , j , k , kmax , kmin , ncol , ng ! Ier = 0 do j = 1 , N Jdone ( j ) = 0 enddo ncol = 1 do ng = 1 , Maxg Igp ( ng ) = ncol do i = 1 , N Incl ( i ) = 0 enddo TEST : do j = 1 , N ! Reject column J if it is already in a group.-------------------------- if ( Jdone ( j ) /= 1 ) then kmin = Ia ( j ) kmax = Ia ( j + 1 ) - 1 do k = kmin , kmax ! Reject column J if it overlaps any column already in this group.------ i = Ja ( k ) if ( Incl ( i ) == 1 ) cycle TEST enddo ! Accept column J into group NG.---------------------------------------- Jgp ( ncol ) = j ncol = ncol + 1 Jdone ( j ) = 1 do k = kmin , kmax i = Ja ( k ) Incl ( i ) = 1 enddo endif enddo TEST ! Stop if this group is empty (grouping is complete).------------------- if ( ncol == Igp ( ng ) ) then Ngrp = ng - 1 return endif enddo ! Error return if not all columns were chosen (MAXG too small).--------- if ( ncol <= N ) then Ier = 1 return else ng = Maxg endif Ngrp = ng - 1 end subroutine jgroup","tags":"","loc":"sourcefile/jgroup.inc.html"},{"title":"nroc.inc – odepack","text":"Contents Subroutines nroc Source Code nroc.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! !!               yale sparse matrix package - nonsymmetric codes !!                    solving the system of equations mx = b !! !!### i.   calling sequences !! !!         the coefficient matrix can be processed by an ordering routine !!    (e.g., to reduce fillin or ensure numerical stability) before using !!    the remaining subroutines.  if no reordering is done, then set !!    r(i) = c(i) = ic(i) = i  for i=1,...,n.  if an ordering subroutine !!    is used, then nroc should be used to reorder the coefficient matrix !! !!### the calling sequence is -- !!```text !!        (       (matrix ordering)) !!        (nroc   (matrix reordering)) !!         nsfc   (symbolic factorization to determine where fillin will !!                  occur during numeric factorization) !!         nnfc   (numeric factorization into product ldu of unit lower !!                  triangular matrix l, diagonal matrix d, and unit !!                  upper triangular matrix u, and solution of linear !!                  system) !!         nnsc   (solution of linear system for additional right-hand !!                  side using ldu factorization from nnfc) !!``` !!    (if only one system of equations is to be solved, then the !!    subroutine trk should be used.) !! !!### ii.  storage of sparse matrices !!         the nonzero entries of the coefficient matrix m are stored !! !!    row-by-row in the array a.  to identify the individual nonzero !!    entries in each row, we need to know in which column each entry !!    lies.  the column indices which correspond to the nonzero entries !!    of m are stored in the array ja.  i.e., if  a(k) = m(i,j),  then !!    ja(k) = j.  in addition, we need to know where each row starts and !!    how long it is.  the index positions in ja and a where the rows of !!    m begin are stored in the array ia.  i.e., if m(i,j) is the first !!    (leftmost) entry in the i-th row and  a(k) = m(i,j),  then !!    ia(i) = k.  moreover, the index in ja and a of the first location !!    following the last element in the last row is stored in ia(n+1). !!    thus, the number of entries in the i-th row is given by !!    ia(i+1) - ia(i),  the nonzero entries of the i-th row are stored !!    consecutively in !! !!            a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), !! !!    and the corresponding column indices are stored consecutively in !! !!            ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). !! !!    for example, the 5 by 5 matrix !!```text !!                ( 1. 0. 2. 0. 0.) !!                ( 0. 3. 0. 0. 0.) !!            m = ( 0. 4. 5. 6. 0.) !!                ( 0. 0. 0. 7. 0.) !!                ( 0. 0. 0. 8. 9.) !!``` !!    would be stored as !!```text !!               - 1  2  3  4  5  6  7  8  9 !!            ---+-------------------------- !!            ia - 1  3  4  7  8 10 !!            ja - 1  3  2  2  3  4  4  4  5 !!             a - 1. 2. 3. 4. 5. 6. 7. 8. 9.         . !!``` !! !!         the strict upper (lower) triangular portion of the matrix !!    u (l) is stored in a similar fashion using the arrays  iu, ju, u !!    (il, jl, l)  except that an additional array iju (ijl) is used to !!    compress storage of ju (jl) by allowing some sequences of column !!    (row) indices to used for more than one row (column)  (n.b., l is !!    stored by columns).  iju(k) (ijl(k)) points to the starting !!    location in ju (jl) of entries for the kth row (column). !!    compression in ju (jl) occurs in two ways.  first, if a row !!    (column) i was merged into the current row (column) k, and the !!    number of elements merged in from (the tail portion of) row !!    (column) i is the same as the final length of row (column) k, then !!    the kth row (column) and the tail of row (column) i are identical !!    and iju(k) (ijl(k)) points to the start of the tail.  second, if !!    some tail portion of the (k-1)st row (column) is identical to the !!    head of the kth row (column), then iju(k) (ijl(k)) points to the !!    start of that tail portion.  for example, the nonzero structure of !!    the strict upper triangular part of the matrix !!```text !!            d 0 x x x !!            0 d 0 x x !!            0 0 d x 0 !!            0 0 0 d x !!            0 0 0 0 d !!``` !!    would be represented as !!```text !!                - 1 2 3 4 5 6 !!            ----+------------ !!             iu - 1 4 6 7 8 8 !!             ju - 3 4 5 4 !!            iju - 1 2 4 3           . !!``` !!    the diagonal entries of l and u are assumed to be equal to one and !!    are not stored.  the array d contains the reciprocals of the !!    diagonal entries of the matrix d. !! !!### iii. additional storage savings !!         in nsfc, r and ic can be the same array in the calling !!    sequence if no reordering of the coefficient matrix has been done. !! !!         in nnfc, r, c, and ic can all be the same array if no !!    reordering has been done.  if only the rows have been reordered, !!    then c and ic can be the same array.  if the row and column !!    orderings are the same, then r and c can be the same array.  z and !!    row can be the same array. !! !!         in nnsc or nntc, r and c can be the same array if no !!    reordering has been done or if the row and column orderings are the !!    same.  z and b can be the same array.  however, then b will be !!    destroyed. !! !!### iv.  parameters !!         following is a list of parameters to the programs.  names are !!    uniform among the various subroutines.  class abbreviations are -- !!```text !!       n - integer variable !!       f - real variable !!       v - supplies a value to a subroutine !!       r - returns a result from a subroutine !!       i - used internally by a subroutine !!       a - array !! !! class - parameter !! ------+---------- !! fva   - a     - nonzero entries of the coefficient matrix m, stored !!       -           by rows. !!       -           size = number of nonzero entries in m. !! fva   - b     - right-hand side b. !!       -           size = n. !! nva   - c     - ordering of the columns of m. !!       -           size = n. !! fvra  - d     - reciprocals of the diagonal entries of the matrix d. !!       -           size = n. !! nr    - flag  - error flag.  values and their meanings are -- !!       -            0     no errors detected !!       -            n+k   null row in a  --  row = k !!       -           2n+k   duplicate entry in a  --  row = k !!       -           3n+k   insufficient storage for jl  --  row = k !!       -           4n+1   insufficient storage for l !!       -           5n+k   null pivot  --  row = k !!       -           6n+k   insufficient storage for ju  --  row = k !!       -           7n+1   insufficient storage for u !!       -           8n+k   zero pivot  --  row = k !! nva   - ia    - pointers to delimit the rows of a. !!       -           size = n+1. !! nvra  - ijl   - pointers to the first element in each column in jl, !!       -           used to compress storage in jl. !!       -           size = n. !! nvra  - iju   - pointers to the first element in each row in ju, used !!       -           to compress storage in ju. !!       -           size = n. !! nvra  - il    - pointers to delimit the columns of l. !!       -           size = n+1. !! nvra  - iu    - pointers to delimit the rows of u. !!       -           size = n+1. !! nva   - ja    - column numbers corresponding to the elements of a. !!       -           size = size of a. !! nvra  - jl    - row numbers corresponding to the elements of l. !!       -           size = jlmax. !! nv    - jlmax - declared dimension of jl.  jlmax must be larger than !!       -           the number of nonzeros in the strict lower triangle !!       -           of m plus fillin minus compression. !! nvra  - ju    - column numbers corresponding to the elements of u. !!       -           size = jumax. !! nv    - jumax - declared dimension of ju.  jumax must be larger than !!       -           the number of nonzeros in the strict upper triangle !!       -           of m plus fillin minus compression. !! fvra  - l     - nonzero entries in the strict lower triangular portion !!       -           of the matrix l, stored by columns. !!       -           size = lmax. !! nv    - lmax  - declared dimension of l.  lmax must be larger than !!       -           the number of nonzeros in the strict lower triangle !!       -           of m plus fillin  (il(n+1)-1 after nsfc). !! nv    - n     - number of variables/equations. !! nva   - r     - ordering of the rows of m. !!       -           size = n. !! fvra  - u     - nonzero entries in the strict upper triangular portion !!       -           of the matrix u, stored by rows. !!       -           size = umax. !! nv    - umax  - declared dimension of u.  umax must be larger than !!       -           the number of nonzeros in the strict upper triangle !!       -           of m plus fillin  (iu(n+1)-1 after nsfc). !! fra   - z     - solution x. !!       -           size = n. !! !!``` !!       ---------------------------------------------------------------- !! !!###  subroutine nroc !!###  reorders rows of a, leaving row order unchanged !! !! !!       input parameters.. n, ic, ia, ja, a !!       output parameters.. ja, a, flag !! !!       parameters used internally.. !! nia   - p     - at the kth step, p is a linked list of the reordered !!       -           column indices of the kth row of a.  p(n+1) points !!       -           to the first entry in the list. !!       -           size = n+1. !! nia   - jar   - at the kth step,jar contains the elements of the !!       -           reordered column indices of a. !!       -           size = n. !! fia   - ar    - at the kth step, ar contains the elements of the !!       -           reordered row of a. !!       -           size = n. !! !----------------------------------------------------------------------- subroutine nroc ( N , Ic , Ia , Ja , A , Jar , Ar , P , Flag ) ! !      real  a(*), ar(*) integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: Ic integer , intent ( in ) , dimension ( * ) :: Ia integer , intent ( inout ) , dimension ( * ) :: Ja real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: A integer , intent ( inout ) , dimension ( * ) :: Jar real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Ar integer , intent ( inout ) , dimension ( * ) :: P integer , intent ( out ) :: Flag ! integer :: i , j , jmax , jmin , k , newj ! !   ******  for each nonempty row  ******************************* do k = 1 , N jmin = Ia ( k ) jmax = Ia ( k + 1 ) - 1 if ( jmin <= jmax ) then P ( N + 1 ) = N + 1 !   ******  insert each element in the list  ********************* do j = jmin , jmax newj = Ic ( Ja ( j )) i = N + 1 do while ( P ( i ) < newj ) i = P ( i ) enddo if ( P ( i ) == newj ) then ! !  ** error.. duplicate entry in a Flag = N + k return else P ( newj ) = P ( i ) P ( i ) = newj Jar ( newj ) = Ja ( j ) Ar ( newj ) = A ( j ) endif enddo !   ******  replace old row in ja and a  ************************* i = N + 1 do j = jmin , jmax i = P ( i ) Ja ( j ) = Jar ( i ) A ( j ) = Ar ( i ) enddo endif enddo Flag = 0 end subroutine nroc","tags":"","loc":"sourcefile/nroc.inc.html"},{"title":"nsfc.inc – odepack","text":"Contents Subroutines nsfc Source Code nsfc.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!###  subroutine nsfc !! !!###  symbolic ldu-factorization of nonsymmetric sparse matrix !!      (compressed pointer storage) !! !! !!       input variables.. n, r, ic, ia, ja, jlmax, jumax. !!       output variables.. il, jl, ijl, iu, ju, iju, flag. !! !!       parameters used internally.. !!```text !! nia   - q     - suppose  m*  is the result of reordering  m.  if !!       -           processing of the ith row of  m*  (hence the ith !!       -           row of  u) is being done,  q(j)  is initially !!       -           nonzero if  m*(i,j) is nonzero (j.ge.i).  since !!       -           values need not be stored, each entry points to the !!       -           next nonzero and  q(n+1)  points to the first.  n+1 !!       -           indicates the end of the list.  for example, if n=9 !!       -           and the 5th row of  m*  is !!       -              0 x x 0 x 0 0 x 0 !!       -           then  q  will initially be !!       -              a a a a 8 a a 10 5           (a - arbitrary). !!       -           as the algorithm proceeds, other elements of  q !!       -           are inserted in the list because of fillin. !!       -           q  is used in an analogous manner to compute the !!       -           ith column of  l. !!       -           size = n+1. !! nia   - ira,  - vectors used to find the columns of  m.  at the kth !! nia   - jra,      step of the factorization,  irac(k)  points to the !! nia   - irac      head of a linked list in  jra  of row indices i !!       -           such that i .ge. k and  m(i,k)  is nonzero.  zero !!       -           indicates the end of the list.  ira(i)  (i.ge.k) !!       -           points to the smallest j such that j .ge. k and !!       -           m(i,j)  is nonzero. !!       -           size of each = n. !! nia   - irl,  - vectors used to find the rows of  l.  at the kth step !! nia   - jrl       of the factorization,  jrl(k)  points to the head !!       -           of a linked list in  jrl  of column indices j !!       -           such j .lt. k and  l(k,j)  is nonzero.  zero !!       -           indicates the end of the list.  irl(j)  (j.lt.k) !!       -           points to the smallest i such that i .ge. k and !!       -           l(i,j)  is nonzero. !!       -           size of each = n. !! nia   - iru,  - vectors used in a manner analogous to  irl and jrl !! nia   - jru       to find the columns of  u. !!       -           size of each = n. !!``` !! !!### internal variables.. !! !!```text !!    jlptr - points to the last position used in  jl. !!    juptr - points to the last position used in  ju. !!    jmin,jmax - are the indices in  a or u  of the first and last !!                elements to be examined in a given row. !!                for example,  jmin=ia(k), jmax=ia(k+1)-1. !!``` !! !----------------------------------------------------------------------- subroutine nsfc ( N , R , Ic , Ia , Ja , Jlmax , Il , Jl , Ijl , Jumax , Iu , Ju , Iju , Q , Ira , Jra , Irac , Irl , Jrl , Iru , Jru , Flag ) ! integer , intent ( in ) :: N integer , intent ( inout ) :: R ( * ) integer , intent ( in ) :: Ic ( * ) integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( in ) :: Jlmax integer , intent ( inout ) :: Il ( * ) integer , intent ( inout ) :: Jl ( * ) integer , intent ( inout ) :: Ijl ( * ) integer , intent ( in ) :: Jumax integer , intent ( inout ) :: Iu ( * ) integer , intent ( inout ) :: Ju ( * ) integer , intent ( inout ) :: Iju ( * ) integer , intent ( inout ) :: Q ( * ) integer , intent ( inout ) :: Ira ( * ) integer , intent ( inout ) :: Jra ( * ) integer , intent ( inout ) :: Irac ( * ) integer , intent ( inout ) :: Irl ( * ) integer , intent ( inout ) :: Jrl ( * ) integer , intent ( inout ) :: Iru ( * ) integer , intent ( inout ) :: Jru ( * ) integer , intent ( out ) :: Flag ! integer :: cend , i , i1 , iak , irai , irll , irul , j , jaiak , jairai , jlmin , jlptr , jmax , jmin , jtmp , jumin , juptr , k , & & lasti , lastid , long , luk , m , np1 , qm , rend , rk , vj ! !   ******  initialize pointers  **************************************** np1 = N + 1 jlmin = 1 jlptr = 0 Il ( 1 ) = 1 jumin = 1 juptr = 0 Iu ( 1 ) = 1 do k = 1 , N Irac ( k ) = 0 Jra ( k ) = 0 Jrl ( k ) = 0 Jru ( k ) = 0 enddo !   ******  initialize column pointers for a  *************************** do k = 1 , N rk = R ( k ) iak = Ia ( rk ) if ( iak >= Ia ( rk + 1 ) ) then ! !  ** error.. null row in a Flag = N + rk return else jaiak = Ic ( Ja ( iak )) if ( jaiak > k ) then !  ** error.. null pivot Flag = 5 * N + k return endif Jra ( k ) = Irac ( jaiak ) Irac ( jaiak ) = k Ira ( k ) = iak endif enddo ! !   ******  for each column of l and row of u  ************************** ALL : do k = 1 , N ! !   ******  initialize q for computing kth column of l  ***************** Q ( np1 ) = np1 luk = - 1 !   ******  by filling in kth column of a  ****************************** vj = Irac ( k ) if ( vj /= 0 ) then qm = np1 do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm == vj ) then !  ** error.. duplicate entry in a Flag = 2 * N + rk return endif luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm vj = Jra ( vj ) if ( vj == 0 ) exit qm = np1 endif enddo endif !   ******  link through jru  ******************************************* lastid = 0 lasti = 0 Ijl ( k ) = jlptr i = k LOOP : do i = Jru ( i ) if ( i == 0 ) then !   ******  lasti is the longest column merged into the kth  ************ !   ******  see if it equals the entire kth column  ********************* qm = Q ( np1 ) if ( qm /= k ) then !  ** error.. null pivot Flag = 5 * N + k return endif LUKZ : if ( luk /= 0 ) then if ( lastid /= luk ) then !   ******  if not, see if kth column can overlap the previous one  ***** KTHCOL : if ( jlmin <= jlptr ) then qm = Q ( qm ) do j = jlmin , jlptr if ( Jl ( j ) < qm ) cycle if ( Jl ( j ) == qm ) then Ijl ( k ) = j do i = j , jlptr if ( Jl ( i ) /= qm ) exit KTHCOL qm = Q ( qm ) if ( qm > N ) exit LUKZ enddo jlptr = j - 1 endif exit enddo endif KTHCOL !   ******  move column indices from q to jl, update vectors  *********** jlmin = jlptr + 1 Ijl ( k ) = jlmin if ( luk /= 0 ) then jlptr = jlptr + luk if ( jlptr > Jlmax ) then !  ** error.. insufficient storage for jl Flag = 3 * N + k return else qm = Q ( np1 ) do j = jlmin , jlptr qm = Q ( qm ) Jl ( j ) = qm enddo endif endif else !   ******  if so, jl can be compressed  ******************************** irll = Irl ( lasti ) Ijl ( k ) = irll + 1 if ( Jl ( irll ) /= k ) Ijl ( k ) = Ijl ( k ) - 1 endif endif LUKZ Irl ( k ) = Ijl ( k ) Il ( k + 1 ) = Il ( k ) + luk ! !   ******  initialize q for computing kth row of u  ******************** Q ( np1 ) = np1 luk = - 1 !   ******  by filling in kth row of reordered a  *********************** rk = R ( k ) jmin = Ira ( k ) jmax = Ia ( rk + 1 ) - 1 if ( jmin <= jmax ) then do j = jmin , jmax vj = Ic ( Ja ( j )) qm = np1 do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm == vj ) then !  ** error.. duplicate entry in a Flag = 2 * N + rk return endif luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm exit endif enddo enddo endif !   ******  link through jrl,  ****************************************** lastid = 0 lasti = 0 Iju ( k ) = juptr i = k i1 = Jrl ( k ) do i = i1 if ( i == 0 ) then !   ******  update jrl(k) and irl(k)  *********************************** if ( Il ( k + 1 ) > Il ( k ) ) then j = Jl ( Irl ( k )) Jrl ( k ) = Jrl ( j ) Jrl ( j ) = k endif !   ******  lasti is the longest row merged into the kth  *************** !   ******  see if it equals the entire kth row  ************************ qm = Q ( np1 ) if ( qm /= k ) then !  ** error.. null pivot Flag = 5 * N + k return endif LUKY : if ( luk /= 0 ) then if ( lastid /= luk ) then !   ******  if not, see if kth row can overlap the previous one  ******** KTHROW : if ( jumin <= juptr ) then qm = Q ( qm ) do j = jumin , juptr if ( Ju ( j ) < qm ) cycle if ( Ju ( j ) == qm ) then Iju ( k ) = j do i = j , juptr if ( Ju ( i ) /= qm ) exit KTHROW qm = Q ( qm ) if ( qm > N ) exit LUKY enddo juptr = j - 1 endif exit enddo endif KTHROW !   ******  move row indices from q to ju, update vectors  ************** jumin = juptr + 1 Iju ( k ) = jumin if ( luk /= 0 ) then juptr = juptr + luk if ( juptr > Jumax ) then !  ** error.. insufficient storage for ju Flag = 6 * N + k return else qm = Q ( np1 ) do j = jumin , juptr qm = Q ( qm ) Ju ( j ) = qm enddo endif endif else !   ******  if so, ju can be compressed  ******************************** irul = Iru ( lasti ) Iju ( k ) = irul + 1 if ( Ju ( irul ) /= k ) Iju ( k ) = Iju ( k ) - 1 endif endif LUKY Iru ( k ) = Iju ( k ) Iu ( k + 1 ) = Iu ( k ) + luk ! !   ******  update iru, jru  ******************************************** i = k exit LOOP else i1 = Jrl ( i ) qm = np1 jmin = Iru ( i ) jmax = Iju ( i ) + Iu ( i + 1 ) - Iu ( i ) - 1 long = jmax - jmin if ( long >= 0 ) then jtmp = Ju ( jmin ) if ( jtmp /= k ) then !   ******  update irl and jrl, ***************************************** long = long + 1 cend = Ijl ( i ) + Il ( i + 1 ) - Il ( i ) Irl ( i ) = Irl ( i ) + 1 if ( Irl ( i ) < cend ) then j = Jl ( Irl ( i )) Jrl ( i ) = Jrl ( j ) Jrl ( j ) = i endif endif if ( lastid < long ) then lasti = i lastid = long endif !   ******  and merge the corresponding rows into the kth row  ********** do j = jmin , jmax vj = Ju ( j ) do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm /= vj ) then luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm qm = vj endif exit endif enddo enddo endif endif enddo else qm = np1 jmin = Irl ( i ) jmax = Ijl ( i ) + Il ( i + 1 ) - Il ( i ) - 1 long = jmax - jmin if ( long >= 0 ) then jtmp = Jl ( jmin ) if ( jtmp /= k ) long = long + 1 if ( jtmp == k ) R ( i ) = - R ( i ) if ( lastid < long ) then lasti = i lastid = long endif !   ******  and merge the corresponding columns into the kth column  **** do j = jmin , jmax vj = Jl ( j ) do m = qm qm = Q ( m ) if ( qm >= vj ) then if ( qm /= vj ) then luk = luk + 1 Q ( m ) = vj Q ( vj ) = qm qm = vj endif exit endif enddo enddo endif endif enddo LOOP BACK : do i1 = Jru ( i ) if ( R ( i ) < 0 ) then R ( i ) = - R ( i ) else rend = Iju ( i ) + Iu ( i + 1 ) - Iu ( i ) if ( Iru ( i ) < rend ) then j = Ju ( Iru ( i )) Jru ( i ) = Jru ( j ) Jru ( j ) = i endif endif i = i1 if ( i == 0 ) then ! !   ******  update ira, jra, irac  ************************************** i = Irac ( k ) if ( i == 0 ) cycle ALL else Iru ( i ) = Iru ( i ) + 1 cycle BACK endif exit BACK enddo BACK INFINITE : do i1 = Jra ( i ) Ira ( i ) = Ira ( i ) + 1 if ( Ira ( i ) < Ia ( R ( i ) + 1 ) ) then irai = Ira ( i ) jairai = Ic ( Ja ( irai )) if ( jairai <= i ) then Jra ( i ) = Irac ( jairai ) Irac ( jairai ) = i endif endif i = i1 if ( i == 0 ) exit INFINITE enddo INFINITE enddo ALL ! Ijl ( N ) = jlptr Iju ( N ) = juptr Flag = 0 end subroutine nsfc","tags":"","loc":"sourcefile/nsfc.inc.html"},{"title":"dsrcms.inc – odepack","text":"Contents Subroutines dsrcms Source Code dsrcms.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine saves or restores (depending on JOB) the contents of !! the Common blocks DLS001, DLSS01, which are used !! internally by one or more ODEPACK solvers. !! !! RSAV !! !! : real array of length 224 or more. !! !! ISAV !! !! : integer array of length 71 or more. !! !! JOB !! !! : flag indicating to save or restore the Common blocks: !! !!        JOB  = 1 if Common is to be saved (written to RSAV/ISAV) !!        JOB  = 2 if Common is to be restored (read from RSAV/ISAV) !!        A call with JOB = 2 presumes a prior call with JOB = 1. !----------------------------------------------------------------------- subroutine dsrcms ( rsav , isav , job ) real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job integer , parameter :: lenils = 37 , lenrls = 218 select case ( job ) case ( 1 ) rsav ( 1 : lenrls ) = return_dls1_real () rsav ( 1 + lenrls ) = dlss % con0 rsav ( 2 + lenrls ) = dlss % conmin rsav ( 3 + lenrls ) = dlss % ccmxj rsav ( 4 + lenrls ) = dlss % psmall rsav ( 5 + lenrls ) = dlss % rbig rsav ( 6 + lenrls ) = dlss % seth isav ( 1 : lenils ) = return_dls1_int () isav ( 1 + lenils ) = dlss % iplost isav ( 2 + lenils ) = dlss % iesp isav ( 3 + lenils ) = dlss % istatc isav ( 4 + lenils ) = dlss % iys isav ( 5 + lenils ) = dlss % iba isav ( 6 + lenils ) = dlss % ibian isav ( 7 + lenils ) = dlss % ibjan isav ( 8 + lenils ) = dlss % ibjgp isav ( 9 + lenils ) = dlss % ipian isav ( 10 + lenils ) = dlss % ipjan isav ( 11 + lenils ) = dlss % ipjgp isav ( 12 + lenils ) = dlss % ipigp isav ( 13 + lenils ) = dlss % ipr isav ( 14 + lenils ) = dlss % ipc isav ( 15 + lenils ) = dlss % ipic isav ( 16 + lenils ) = dlss % ipisp isav ( 17 + lenils ) = dlss % iprsp isav ( 18 + lenils ) = dlss % ipa isav ( 19 + lenils ) = dlss % lenyh isav ( 20 + lenils ) = dlss % lenyhm isav ( 21 + lenils ) = dlss % lenwk isav ( 22 + lenils ) = dlss % lreq isav ( 23 + lenils ) = dlss % lrat isav ( 24 + lenils ) = dlss % lrest isav ( 25 + lenils ) = dlss % lwmin isav ( 26 + lenils ) = dlss % moss isav ( 27 + lenils ) = dlss % msbj isav ( 28 + lenils ) = dlss % nslj isav ( 29 + lenils ) = dlss % ngp isav ( 30 + lenils ) = dlss % nlu isav ( 31 + lenils ) = dlss % nnz isav ( 32 + lenils ) = dlss % nsp isav ( 33 + lenils ) = dlss % nzl isav ( 34 + lenils ) = dlss % nzu case ( 2 ) call set_dls1_real ( rsav ( 1 : lenrls )) dlss % con0 = rsav ( 1 + lenrls ) dlss % conmin = rsav ( 2 + lenrls ) dlss % ccmxj = rsav ( 3 + lenrls ) dlss % psmall = rsav ( 4 + lenrls ) dlss % rbig = rsav ( 5 + lenrls ) dlss % seth = rsav ( 6 + lenrls ) call set_dls1_int ( isav ( 1 : lenils )) dlss % iplost = isav ( 1 + lenils ) dlss % iesp = isav ( 2 + lenils ) dlss % istatc = isav ( 3 + lenils ) dlss % iys = isav ( 4 + lenils ) dlss % iba = isav ( 5 + lenils ) dlss % ibian = isav ( 6 + lenils ) dlss % ibjan = isav ( 7 + lenils ) dlss % ibjgp = isav ( 8 + lenils ) dlss % ipian = isav ( 9 + lenils ) dlss % ipjan = isav ( 10 + lenils ) dlss % ipjgp = isav ( 11 + lenils ) dlss % ipigp = isav ( 12 + lenils ) dlss % ipr = isav ( 13 + lenils ) dlss % ipc = isav ( 14 + lenils ) dlss % ipic = isav ( 15 + lenils ) dlss % ipisp = isav ( 16 + lenils ) dlss % iprsp = isav ( 17 + lenils ) dlss % ipa = isav ( 18 + lenils ) dlss % lenyh = isav ( 19 + lenils ) dlss % lenyhm = isav ( 20 + lenils ) dlss % lenwk = isav ( 21 + lenils ) dlss % lreq = isav ( 22 + lenils ) dlss % lrat = isav ( 23 + lenils ) dlss % lrest = isav ( 24 + lenils ) dlss % lwmin = isav ( 25 + lenils ) dlss % moss = isav ( 26 + lenils ) dlss % msbj = isav ( 27 + lenils ) dlss % nslj = isav ( 28 + lenils ) dlss % ngp = isav ( 29 + lenils ) dlss % nlu = isav ( 30 + lenils ) dlss % nnz = isav ( 31 + lenils ) dlss % nsp = isav ( 32 + lenils ) dlss % nzl = isav ( 33 + lenils ) dlss % nzu = isav ( 34 + lenils ) case default write ( * , * ) '<ERROR>*dsrcms* unknown value for JOB=' , job stop 1 end select end subroutine dsrcms","tags":"","loc":"sourcefile/dsrcms.inc.html"},{"title":"nnsc.inc – odepack","text":"Contents Subroutines nnsc Source Code nnsc.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!###  subroutine nnsc !!###  numerical solution of sparse nonsymmetric system of linear !!     equations given ldu-factorization (compressed pointer storage) !! !! !!       input variables..  n, r, c, il, jl, ijl, l, d, iu, ju, iju, u, b !!       output variables.. z !! !!       parameters used internally.. !!```text !! fia   - tmp   - temporary vector which gets result of solving  ly = b. !!       -           size = n. !!``` !! !!### internal variables.. !!    jmin, jmax - indices of the first and last positions in a row of !!      u or l  to be used. !! !----------------------------------------------------------------------- subroutine nnsc ( N , R , C , Il , Jl , Ijl , L , D , Iu , Ju , Iju , U , Z , B , Tmp ) ! !      real l(*), d(*), u(*), b(*), z(*), tmp(*), tmpk, sum integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: R integer , intent ( in ) , dimension ( * ) :: C integer , intent ( in ) , dimension ( * ) :: Il integer , intent ( in ) , dimension ( * ) :: Jl integer , intent ( in ) , dimension ( * ) :: Ijl real ( kind = dp ) , intent ( in ) , dimension ( * ) :: L real ( kind = dp ) , intent ( in ) , dimension ( * ) :: D integer , intent ( in ) , dimension ( * ) :: Iu integer , intent ( in ) , dimension ( * ) :: Ju integer , intent ( in ) , dimension ( * ) :: Iju real ( kind = dp ) , intent ( in ) , dimension ( * ) :: U real ( kind = dp ) , intent ( out ) , dimension ( * ) :: Z real ( kind = dp ) , intent ( in ) , dimension ( * ) :: B real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Tmp ! integer :: i , j , jmax , jmin , k , ml , mu real ( kind = dp ) :: sum , tmpk ! !   ******  set tmp to reordered b  ************************************* do k = 1 , N Tmp ( k ) = B ( R ( k )) enddo !   ******  solve  ly = b  by forward substitution  ********************* do k = 1 , N jmin = Il ( k ) jmax = Il ( k + 1 ) - 1 tmpk = - D ( k ) * Tmp ( k ) Tmp ( k ) = - tmpk if ( jmin <= jmax ) then ml = Ijl ( k ) - jmin do j = jmin , jmax Tmp ( Jl ( ml + j )) = Tmp ( Jl ( ml + j )) + tmpk * L ( j ) enddo endif enddo !   ******  solve  ux = y  by back substitution  ************************ k = N do i = 1 , N sum = - Tmp ( k ) jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax sum = sum + U ( j ) * Tmp ( Ju ( mu + j )) enddo endif Tmp ( k ) = - sum Z ( C ( k )) = - sum k = k - 1 enddo end subroutine nnsc","tags":"","loc":"sourcefile/nnsc.inc.html"},{"title":"dstode.inc – odepack","text":"This file depends on sourcefile~~dstode.inc~~EfferentGraph sourcefile~dstode.inc dstode.inc sourcefile~m_odepack.f90 M_odepack.f90 sourcefile~dstode.inc->sourcefile~m_odepack.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Subroutines dstode Source Code dstode.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dstode(3f) - [M_odepack] Performs one step of an ODEPACK integration. !!### DESCRIPTION !! !!  DSTODE performs one step of the integration of an initial value !!  problem for a system of ordinary differential equations. !! !!  Note:  DSTODE is independent of the value of the iteration method !!  indicator MITER, when this is .ne. 0, and hence is independent !!  of the type of chord method used, or the Jacobian structure. !! !!  Communication with DSTODE is done with the following variables: !! !!  NEQ !! !!  : integer array containing problem size in NEQ(1), and !!  passed as the NEQ argument in all calls to F and JAC. !! !!  Y !! !!  : an array of length .ge. N used as the Y argument in !!  all calls to F and JAC. !! !!  YH !! !!  : an NYH by LMAX array containing the dependent variables !!  and their approximate scaled derivatives, where !!  LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate !!  j-th derivative of y(i), scaled by h**j/factorial(j) !!  (j = 0,1,...,NQ).  on entry for the first step, the first !!  two columns of YH must be set from the initial values. !! !!  NYH !! !!  : a constant integer .ge. N, the first dimension of YH. !! !!  YH1 !! !!  : a one-dimensional array occupying the same space as YH. !! !!  EWT !! !!  : an array of length N containing multiplicative weights !!  for local error measurements.  Local errors in Y(i) are !!  compared to 1.0/EWT(i) in various error tests. !! !!  SAVF !! !!  : an array of working storage, of length N. !!  Also used for input of YH(*,MAXORD+2) when JSTART = -1 !!  and MAXORD .lt. the current order NQ. !! !!  ACOR !! !!  : a work array of length N, used for the accumulated !!  corrections.  On a successful return, ACOR(i) contains !!  the estimated one-step local error in Y(i). !! !!  WM,IWM !! !!  : real and integer work arrays associated with matrix !!  operations in chord iteration (MITER .ne. 0). !! !!  PJAC !! !!  : name of routine to evaluate and preprocess Jacobian matrix !!  and P = I - h*el0*JAC, if a chord method is being used. !! !!  SLVS !! !!  : name of routine to solve linear system in chord iteration. !! !!  CCMAX !! !!  : maximum relative change in h*el0 before PJAC is called. !! !!  H !! !!  : the step size to be attempted on the next step. !!  H is altered by the error control algorithm during the !!  problem.  H can be either positive or negative, but its !!  sign must remain constant throughout the problem. !! !!  HMIN !! !!  : the minimum absolute value of the step size h to be used. !! !!  HMXI !! !!  : inverse of the maximum absolute value of h to be used. !!  HMXI = 0.0 is allowed and corresponds to an infinite hmax. !!  HMIN and HMXI may be changed at any time, but will not !!  take effect until the next change of h is considered. !! !!  TN !! !!  : the independent variable. TN is updated on each step taken. !! !!  JSTART !! !!  : an integer used for input only, with the following !!  values and meanings: !!            0  perform the first step. !!        .gt.0  take a new step continuing from the last. !!           -1  take the next step with a new value of H, MAXORD, !!               N, METH, MITER, and/or matrix parameters. !!           -2  take the next step with a new value of H, !!               but with other inputs unchanged. !!  On return, JSTART is set to 1 to facilitate continuation. !! !!  KFLAG !! !!  : a completion code with the following meanings: !!            0  the step was succesful. !!           -1  the requested error could not be achieved. !!           -2  corrector convergence could not be achieved. !!           -3  fatal error in PJAC or SLVS. !!  A return with KFLAG = -1 or -2 means either !!  abs(H) = HMIN or 10 consecutive failures occurred. !!  On a return with KFLAG negative, the values of TN and !!  the YH array are as of the beginning of the last !!  step, and H is the last step size attempted. !! !!  MAXORD !! !!  : the maximum order of integration method to be allowed. !! !!  MAXCOR !! !!  : the maximum number of corrector iterations allowed. !! !!  MSBP !! !!  : maximum number of steps between PJAC calls (MITER .gt. 0). !! !!  MXNCF !! !!  : maximum number of convergence failures allowed. !! !!  METH/MITER !! !!  : the method flags.  See description in driver. !! !!  N !! !!  : the number of first-order differential equations. !! !!  The values of CCMAX, H, HMIN, HMXI, TN, JSTART, KFLAG, MAXORD, !!  MAXCOR, MSBP, MXNCF, METH, MITER, and N are communicated via COMMON. !! !----------------------------------------------------------------------- ! ### BEGIN PROLOGUE  DSTODE ! ### SUBSIDIARY ! ### PURPOSE  Performs one step of an ODEPACK integration. ! ### TYPE      DOUBLE PRECISION (SSTODE-S, DSTODE-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  DCFODE, DVNORM ! ### COMMON BLOCKS    DLS001 ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890503  Minor cosmetic changes.  (FNF) !     19930809  Renamed to allow single/double precision versions. (ACH) !     20010418  Reduced size of Common block /DLS001/. (ACH) !     20031105  Restored 'own' variables to Common block /DLS001/, to !               enable interrupt/restart feature. (ACH) ! ### END PROLOGUE  DSTODE ! **End !----------------------------------------------------------------------- subroutine dstode ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Acor , Wm , Iwm , f , jac , pjac , slvs ) use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer :: Nyh real ( kind = dp ), intent ( inout ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( inout ) :: Yh1 ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Acor ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external f external jac external pjac external slvs real ( kind = dp ) :: dcon , ddn , del , delp , dsm , dup , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , told integer :: i , i1 , iredo , iret , j , jb , m , ncf , newq dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set to 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal Triangle matrix. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !  When RC differs from 1 by more than CCMAX, IPUP is set to MITER !  to force PJAC to be called, if a Jacobian is involved. !  In any case, PJAC is called at least every MSBP steps. !----------------------------------------------------------------------- 400 continue if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! dir$ ivdep do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the R.M.S. norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, the matrix P = I - dls1%h*dls1%el(1)*J is reevaluated and !  preprocessed before starting the corrector iteration.  IPUP is set !  to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call pjac ( Neq , Y , Yh , Nyh , Ewt , Acor , Savf , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls1 % miter /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix. !----------------------------------------------------------------------- do i = 1 , dls1 % n Y ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo call slvs ( Wm , Iwm , Y , Savf ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Y ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo endif !----------------------------------------------------------------------- !  Test for convergence.  If M.gt.0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. !----------------------------------------------------------------------- if ( m /= 0 ) dls1 % crate = max ( 0.2D0 * dls1 % crate , del / delp ) dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / ( dls1 % tesco ( 2 , dls1 % nq ) * dls1 % conit ) if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! dir$ ivdep do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1300 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  The largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If MITER .ne. 0 and the Jacobian is out of date, PJAC is called for !  the next try.  Otherwise the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue if ( dls1 % miter /= 0 . and . dls1 % jcur /= 1 ) then dls1 % icf = 1 dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! dir$ ivdep do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1300 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1300 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1300 else rh = 0.25D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, dls1%l, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1200 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstode","tags":"","loc":"sourcefile/dstode.inc.html"},{"title":"nntc.inc – odepack","text":"Contents Subroutines nntc Source Code nntc.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!###  subroutine nntc !!### DESCRIPTION !!   numeric solution of the transpose of a sparse nonsymmetric system !!   of linear equations given lu-factorization (compressed pointer !!   storage) !! !! !!       input variables..  n, r, c, il, jl, ijl, l, d, iu, ju, iju, u, b !!       output variables.. z !! !!       parameters used internally.. !!```text !! fia   - tmp   - temporary vector which gets result of solving ut y = b !!       -           size = n. !!``` !! !!  internal variables.. !!    jmin, jmax - indices of the first and last positions in a row of !!      u or l  to be used. !! !----------------------------------------------------------------------- subroutine nntc ( N , R , C , Il , Jl , Ijl , L , D , Iu , Ju , Iju , U , Z , B , Tmp ) ! !      real l(*), d(*), u(*), b(*), z(*), tmp(*), tmpk,sum integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: R integer , intent ( in ) , dimension ( * ) :: C integer , intent ( in ) , dimension ( * ) :: Il integer , intent ( in ) , dimension ( * ) :: Jl integer , intent ( in ) , dimension ( * ) :: Ijl real ( kind = dp ) , intent ( in ) , dimension ( * ) :: L real ( kind = dp ) , intent ( in ) , dimension ( * ) :: D integer , intent ( in ) , dimension ( * ) :: Iu integer , intent ( in ) , dimension ( * ) :: Ju integer , intent ( in ) , dimension ( * ) :: Iju real ( kind = dp ) , intent ( in ) , dimension ( * ) :: U real ( kind = dp ) , intent ( out ) , dimension ( * ) :: Z real ( kind = dp ) , intent ( in ) , dimension ( * ) :: B real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Tmp ! integer :: i , j , jmax , jmin , k , ml , mu real ( kind = dp ) :: sum , tmpk ! !   ******  set tmp to reordered b  ************************************* do k = 1 , N Tmp ( k ) = B ( C ( k )) enddo !   ******  solve  ut y = b  by forward substitution  ******************* do k = 1 , N jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 tmpk = - Tmp ( k ) if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax Tmp ( Ju ( mu + j )) = Tmp ( Ju ( mu + j )) + tmpk * U ( j ) enddo endif enddo !   ******  solve  lt x = y  by back substitution  ********************** k = N do i = 1 , N sum = - Tmp ( k ) jmin = Il ( k ) jmax = Il ( k + 1 ) - 1 if ( jmin <= jmax ) then ml = Ijl ( k ) - jmin do j = jmin , jmax sum = sum + L ( j ) * Tmp ( Jl ( ml + j )) enddo endif Tmp ( k ) = - sum * D ( k ) Z ( R ( k )) = Tmp ( k ) k = k - 1 enddo end subroutine nntc","tags":"","loc":"sourcefile/nntc.inc.html"},{"title":"dstoda.inc – odepack","text":"Contents Subroutines dstoda Source Code dstoda.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DSTODA performs one step of the integration of an initial value !! problem for a system of ordinary differential equations. !! !! Note: DSTODA is independent of the value of the iteration method !! indicator MITER, when this is .ne. 0, and hence is independent !! of the type of chord method used, or the Jacobian structure. !! !! Communication with DSTODA is done with the following variables: !! !! Y !! !! : an array of length .ge. N used as the Y argument in !! all calls to F and JAC. !! !! NEQ !! !! : integer array containing problem size in NEQ(1), and !! passed as the NEQ argument in all calls to F and JAC. !! !! YH !! !! : an NYH by LMAX array containing the dependent variables !! and their approximate scaled derivatives, where !! LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate !! j-th derivative of y(i), scaled by H**j/factorial(j) !! (j = 0,1,...,NQ).  On entry for the first step, the first !! two columns of YH must be set from the initial values. !! !! NYH !! !! : a constant integer .ge. N, the first dimension of YH. !! !! YH1 !! !! : a one-dimensional array occupying the same space as YH. !! !! EWT !! !! : an array of length N containing multiplicative weights !! for local error measurements.  Local errors in y(i) are !! compared to 1.0/EWT(i) in various error tests. !! !! SAVF !! !! : an array of working storage, of length N. !! !! ACOR !! !! : a work array of length N, used for the accumulated !! corrections.  On a successful return, ACOR(i) contains !! the estimated one-step local error in y(i). !! !! WM,IWM !! !! : real and integer work arrays associated with matrix !! operations in chord iteration (MITER .ne. 0). !! !! PJAC !! !! : name of routine to evaluate and preprocess Jacobian matrix !! and P = I - H*EL0*Jac, if a chord method is being used. !! It also returns an estimate of norm(Jac) in PDNORM. !! !! SLVS !! !! : name of routine to solve linear system in chord iteration. !! !! CCMAX !! !! : maximum relative change in H*EL0 before PJAC is called. !! !! H !! !! : the step size to be attempted on the next step. !! H is altered by the error control algorithm during the !! problem.  H can be either positive or negative, but its !! sign must remain constant throughout the problem. !! !! HMIN !! !! : the minimum absolute value of the step size H to be used. !! !! HMXI !! !! : inverse of the maximum absolute value of H to be used. !! HMXI = 0.0 is allowed and corresponds to an infinite HMAX. !! HMIN and HMXI may be changed at any time, but will not !! take effect until the next change of H is considered. !! !! TN !! !! : the independent variable. TN is updated on each step taken. !! !! JSTART !! !! : an integer used for input only, with the following !! values and meanings: !!               0  perform the first step. !!           .gt.0  take a new step continuing from the last. !!              -1  take the next step with a new value of H, !!                    N, METH, MITER, and/or matrix parameters. !!              -2  take the next step with a new value of H, !!                    but with other inputs unchanged. !!          On return, JSTART is set to 1 to facilitate continuation. !! !! KFLAG !! !! : a completion code with the following meanings: !!               0  the step was succesful. !!              -1  the requested error could not be achieved. !!              -2  corrector convergence could not be achieved. !!              -3  fatal error in PJAC or SLVS. !! A return with KFLAG = -1 or -2 means either !! ABS(H) = HMIN or 10 consecutive failures occurred. !! On a return with KFLAG negative, the values of TN and !! the YH array are as of the beginning of the last !! step, and H is the last step size attempted. !! !! MAXORD !! !! : the maximum order of integration method to be allowed. !! !! MAXCOR !! !! : the maximum number of corrector iterations allowed. !! !! MSBP !! !! : maximum number of steps between PJAC calls (MITER .gt. 0). !! !! MXNCF !! !! : maximum number of convergence failures allowed. !! !! METH !! !! : current method. !!          METH = 1 means Adams method (nonstiff) !!          METH = 2 means BDF method (stiff) !!          METH may be reset by DSTODA. !! !! MITER !! !! : corrector iteration method. !! MITER = 0 means functional iteration. !! MITER = JT .gt. 0 means a chord iteration corresponding !! to Jacobian type JT.  (The DLSODA/DLSODAR argument JT is !! communicated here as JTYP, but is not used in DSTODA !! except to load MITER following a method switch.) !! MITER may be reset by DSTODA. !! !! N !! !! : the number of first-order differential equations. !----------------------------------------------------------------------- subroutine dstoda ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Acor , Wm , Iwm , f , jac , pjac , slvs ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer :: Nyh real ( kind = dp ), intent ( inout ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( inout ) :: Yh1 ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Acor ( * ) real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external f external jac external pjac external slvs real ( kind = dp ) :: alpha , dcon , ddn , del , delp , dm1 , dm2 , dsm , dup , exdn , exm1 , exm2 , exsm , exup , pdh , pnorm , r , & & rate , rh , rh1 , rh1it , rh2 , rhdn , rhsm , rhup , rm , told integer :: i , i1 , iredo , iret , j , jb , lm1 , lm1p1 , lm2 , lm2p1 , m , ncf , newq , nqm1 , nqm2 real ( kind = dp ), parameter :: sm1 ( 12 ) = & & [ 0.5D0 , 0.575D0 , 0.55D0 , 0.45D0 , 0.35D0 , 0.25D0 , 0.20D0 , 0.15D0 , 0.10D0 , 0.075D0 , 0.050D0 , 0.025D0 ] dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth == dlsa % mused ) goto 200 call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % ialth = dls1 % l iret = 1 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !  DCFODE is called to get the needed coefficients for both methods. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !  Initialize switching parameters.  METH = 1 is assumed initially. ----- dlsa % icount = 20 dlsa % irflag = 0 dlsa % pdest = 0.0D0 dlsa % pdlast = 0.0D0 dlsa % ratio = 5.0D0 call dcfode ( 2 , dls1 % elco , dls1 % tesco ) do i = 1 , 5 dlsa % cm2 ( i ) = dls1 % tesco ( 2 , i ) * dls1 % elco ( i + 1 , i ) enddo call dcfode ( 1 , dls1 % elco , dls1 % tesco ) do i = 1 , 12 dlsa % cm1 ( i ) = dls1 % tesco ( 2 , i ) * dls1 % elco ( i + 1 , i ) enddo endif !----------------------------------------------------------------------- !  The dls1%el vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) !----------------------------------------------------------------------- !  If METH = 1, also restrict the new step size by the stability region. !  If this reduces H, set IRFLAG to 1 so that if there are roundoff !  problems later, we can assume that is the cause of the trouble. !----------------------------------------------------------------------- if ( dls1 % meth /= 2 ) then dlsa % irflag = 0 pdh = max ( abs ( dls1 % h ) * dlsa % pdlast , 0.000001D0 ) if ( rh * pdh * 1.00001D0 >= sm1 ( dls1 % nq ) ) then rh = sm1 ( dls1 % nq ) / pdh dlsa % irflag = 1 endif endif r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1300 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !  When RC differs from 1 by more than CCMAX, IPUP is set to MITER !  to force PJAC to be called, if a Jacobian is involved. !  In any case, PJAC is called at least every MSBP steps. !----------------------------------------------------------------------- 400 continue if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo pnorm = dmnorm ( dls1 % n , Yh1 , Ewt ) !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 rate = 0.0D0 del = 0.0D0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, the matrix P = I - H*EL(1)*J is reevaluated and !  preprocessed before starting the corrector iteration.  IPUP is set !  to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call pjac ( Neq , Y , Yh , Nyh , Ewt , Acor , Savf , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls1 % miter /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix. !----------------------------------------------------------------------- do i = 1 , dls1 % n Y ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo call slvs ( Wm , Iwm , Y , Savf ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dmnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Y ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dmnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo endif !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. ! !  We first check for a change of iterates that is the size of !  roundoff error.  If this occurs, the iteration has converged, and a !  new rate estimate is not formed. !  In all other cases, force at least two iterations to estimate a !  local Lipschitz constant estimate for Adams methods. !  On convergence, form PDEST = local maximum Lipschitz constant !  estimate.  PDLAST is the most recent nonzero estimate. !----------------------------------------------------------------------- if ( del <= 10 0.0D0 * pnorm * dls1 % uround ) goto 900 if ( m /= 0 . or . dls1 % meth /= 1 ) then if ( m /= 0 ) then rm = 102 4.0D0 if ( del <= 102 4.0D0 * delp ) rm = del / delp rate = max ( rate , rm ) dls1 % crate = max ( 0.2D0 * dls1 % crate , rm ) endif dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / ( dls1 % tesco ( 2 , dls1 % nq ) * dls1 % conit ) if ( dcon <= 1.0D0 ) then dlsa % pdest = max ( dlsa % pdest , rate / abs ( dls1 % h * dls1 % el ( 1 ))) if ( dlsa % pdest /= 0.0D0 ) dlsa % pdlast = dlsa % pdest goto 900 endif endif m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If MITER .ne. 0 and the Jacobian is out of date, PJAC is called for !  the next try.  Otherwise the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue if ( dls1 % miter /= 0 . and . dls1 % jcur /= 1 ) then dls1 % icf = 1 dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1400 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1400 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1400 else rh = 0.25D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- 900 continue dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dmnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1400 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1400 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Decrease ICOUNT by 1, and if it is -1, consider switching methods. !  If a method switch is made, reset various parameters, !  rescale the YH array, and exit.  If there is no switch, !  consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq dlsa % mused = dls1 % meth do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dlsa % icount = dlsa % icount - 1 if ( dlsa % icount < 0 ) then if ( dls1 % meth == 2 ) then !----------------------------------------------------------------------- !  We are currently using a BDF method.  Consider switching to Adams. !  Compute the step size we could have (ideally) used on this step, !  with the current (BDF) method, and also that for the Adams. !  If NQ .gt. MXORDN, we consider changing to order MXORDN on switching. !  Compare the two step sizes to decide whether to switch. !  The step size advantage must be at least 5/RATIO = 1 to switch. !  If the step size for Adams would be so small as to cause !  roundoff pollution, we stay with BDF. !----------------------------------------------------------------------- exsm = 1.0D0 / dls1 % l if ( dlsa % mxordn >= dls1 % nq ) then dm1 = dsm * ( dlsa % cm2 ( dls1 % nq ) / dlsa % cm1 ( dls1 % nq )) rh1 = 1.0D0 / ( 1.2D0 * dm1 ** exsm + 0.0000012D0 ) nqm1 = dls1 % nq exm1 = exsm else nqm1 = dlsa % mxordn lm1 = dlsa % mxordn + 1 exm1 = 1.0D0 / lm1 lm1p1 = lm1 + 1 dm1 = dmnorm ( dls1 % n , Yh ( 1 , lm1p1 ), Ewt ) / dlsa % cm1 ( dlsa % mxordn ) rh1 = 1.0D0 / ( 1.2D0 * dm1 ** exm1 + 0.0000012D0 ) endif rh1it = 2.0D0 * rh1 pdh = dlsa % pdnorm * abs ( dls1 % h ) if ( pdh * rh1 > 0.00001D0 ) rh1it = sm1 ( nqm1 ) / pdh rh1 = min ( rh1 , rh1it ) rh2 = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) if ( rh1 * dlsa % ratio >= 5.0D0 * rh2 ) then alpha = max ( 0.001D0 , rh1 ) dm1 = ( alpha ** exm1 ) * dm1 if ( dm1 > 100 0.0D0 * dls1 % uround * pnorm ) then !  The switch test passed.  Reset relevant quantities for Adams. -------- rh = rh1 dlsa % icount = 20 dls1 % meth = 1 dls1 % miter = 0 dlsa % pdlast = 0.0D0 dls1 % nq = nqm1 dls1 % l = dls1 % nq + 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif !----------------------------------------------------------------------- !  We are currently using an Adams method.  Consider switching to BDF. !  If the current order is greater than 5, assume the problem is !  not stiff, and skip this section. !  If the Lipschitz constant and error estimate are not polluted !  by roundoff, go to 470 and perform the usual test. !  Otherwise, switch to the BDF methods if the last step was !  restricted to insure stability (dlsa%irflag = 1), and stay with Adams !  method if not.  When switching to BDF with polluted error estimates, !  in the absence of other information, double the step size. ! !  When the estimates are OK, we make the usual test by computing !  the step size we could have (ideally) used on this step, !  with the current (Adams) method, and also that for the BDF. !  If NQ .gt. MXORDS, we consider changing to order MXORDS on switching. !  Compare the two step sizes to decide whether to switch. !  The step size advantage must be at least RATIO = 5 to switch. !----------------------------------------------------------------------- elseif ( dls1 % nq <= 5 ) then if ( dsm > 10 0.0D0 * pnorm * dls1 % uround . and . dlsa % pdest /= 0.0D0 ) then exsm = 1.0D0 / dls1 % l rh1 = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rh1it = 2.0D0 * rh1 pdh = dlsa % pdlast * abs ( dls1 % h ) if ( pdh * rh1 > 0.00001D0 ) rh1it = sm1 ( dls1 % nq ) / pdh rh1 = min ( rh1 , rh1it ) if ( dls1 % nq <= dlsa % mxords ) then dm2 = dsm * ( dlsa % cm1 ( dls1 % nq ) / dlsa % cm2 ( dls1 % nq )) rh2 = 1.0D0 / ( 1.2D0 * dm2 ** exsm + 0.0000012D0 ) nqm2 = dls1 % nq else nqm2 = dlsa % mxords lm2 = dlsa % mxords + 1 exm2 = 1.0D0 / lm2 lm2p1 = lm2 + 1 dm2 = dmnorm ( dls1 % n , Yh ( 1 , lm2p1 ), Ewt ) / dlsa % cm2 ( dlsa % mxords ) rh2 = 1.0D0 / ( 1.2D0 * dm2 ** exm2 + 0.0000012D0 ) endif if ( rh2 < dlsa % ratio * rh1 ) goto 950 else if ( dlsa % irflag == 0 ) goto 950 rh2 = 2.0D0 nqm2 = min ( dls1 % nq , dlsa % mxords ) endif !  THE SWITCH TEST PASSED.  RESET RELEVANT QUANTITIES FOR BDF. ---------- rh = rh2 dlsa % icount = 20 dls1 % meth = 2 dls1 % miter = dlsa % jtyp dlsa % pdlast = 0.0D0 dls1 % nq = nqm2 dls1 % l = dls1 % nq + 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif ! !  No method switch is being made.  Do the usual step/order selection. -- 950 continue dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  The largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dmnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1300 endif endif exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dmnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif !  If METH = 1, limit RH according to the stability region also. -------- if ( dls1 % meth /= 2 ) then pdh = max ( abs ( dls1 % h ) * dlsa % pdlast , 0.000001D0 ) if ( dls1 % l < dls1 % lmax ) rhup = min ( rhup , sm1 ( dls1 % l ) / pdh ) rhsm = min ( rhsm , sm1 ( dls1 % nq ) / pdh ) if ( dls1 % nq > 1 ) rhdn = min ( rhdn , sm1 ( dls1 % nq - 1 ) / pdh ) dlsa % pdest = 0.0D0 endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1300 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1200 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 !  If METH = 1 and H is restricted by stability, bypass 10 percent test. 1000 continue if ( dls1 % meth /= 2 ) then if ( rh * pdh * 1.00001D0 >= sm1 ( newq ) ) goto 1100 endif if ( dls1 % kflag == 0 . and . rh < 1.1D0 ) then dls1 % ialth = 3 goto 1300 endif 1100 continue if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 1200 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1300 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1400 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstoda","tags":"","loc":"sourcefile/dstoda.inc.html"},{"title":"dspiom.inc – odepack","text":"Contents Subroutines dspiom Source Code dspiom.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine solves the linear system A * x = b using a scaled !! preconditioned version of the Incomplete Orthogonalization Method. !! An initial guess of x = 0 is assumed. !! !!### On entry !! !! NEQ !! !! : problem size, passed to F and PSOL (NEQ(1) = N). !! !! TN !! !! : current value of t. !! !! Y !! !! : array containing current dependent variable vector. !! !! SAVF !! !! : array containing current value of f(t,y). !! !! B !! !! : the right hand side of the system A*x = b. !! B is also used as work space when computing the !! final approximation. !! (B is the same as V(*,MAXL+1) in the call to DSPIOM.) !! !! WGHT !! !! : array of length N containing scale factors. !! 1/WGHT(i) are the diagonal elements of the diagonal !! scaling matrix D. !! !! N !! !! : the order of the matrix A, and the lengths !! of the vectors Y, SAVF, B, WGHT, and X. !! !! MAXL !! !! : the maximum allowable order of the matrix HES. !! !! KMP !! !! : the number of previous vectors the new vector VNEW !! must be made orthogonal to.  KMP .le. MAXL. !! !! DELTA !! !! : tolerance on residuals b - A*x in weighted RMS-norm. !! !! HL0 !! !! : current value of (step size h) * (coefficient l0). !! !! JPRE !! !! : preconditioner type flag. !! !! MNEWT !! !! : Newton iteration counter (.ge. 0). !! !! WK !! !! : real work array of length N used by DATV and PSOL. !! !! WP !! !! : real work array used by preconditioner PSOL. !! !! IWP !! !! : integer work array used by preconditioner PSOL. !! !!### On return !! !! X !! !! : the final computed approximation to the solution !! of the system A*x = b. !! !! V !! !! : the N by (LIOM+1) array containing the LIOM !! orthogonal vectors V(*,1) to V(*,LIOM). !! !! HES !! !! : the LU factorization of the LIOM by LIOM upper !! Hessenberg matrix whose entries are the !! scaled inner products of A*V(*,k) and V(*,i). !! !! IPVT !! !! : an integer array containg pivoting information. !! It is loaded in DHEFA and used in DHESL. !! !! LIOM !! !! : the number of iterations performed, and current !! order of the upper Hessenberg matrix HES. !! !! NPSL !! !! : the number of calls to PSOL. !! !! IFLAG !! !! : integer error flag: !! !!                0 means convergence in LIOM iterations, LIOM.le.MAXL. !!                1 means the convergence test did not pass in MAXL !!                  iterations, but the residual norm is .lt. 1, !!                  or .lt. norm(b) if MNEWT = 0, and so X is computed. !!                2 means the convergence test did not pass in MAXL !!                  iterations, residual .gt. 1, and X is undefined. !!                3 means there was a recoverable error in PSOL !!                  caused by the preconditioner being out of date. !!               -1 means there was a nonrecoverable error in PSOL. !! !----------------------------------------------------------------------- subroutine dspiom ( Neq , Tn , Y , Savf , B , Wght , N , Maxl , Kmp , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , V , Hes , Ipvt , Liom , Wp , Iwp , Wk , Iflag ) ! integer , dimension ( * ) :: Neq real ( kind = dp ) :: Tn real ( kind = dp ) , dimension ( * ) :: Y real ( kind = dp ) , dimension ( * ) :: Savf real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: B real ( kind = dp ) , dimension ( * ) :: Wght integer :: N integer :: Maxl integer :: Kmp real ( kind = dp ) , intent ( inout ) :: Delta real ( kind = dp ) :: Hl0 integer :: Jpre integer , intent ( in ) :: Mnewt external :: f ! real ( kind = dp ) :: bnrm , bnrm0 , prod , rho , snormw , tem real ( kind = dp ) , intent ( inout ) , dimension ( Maxl , Maxl ) :: Hes integer :: i , ier , info , j , k , ll , lm1 integer , intent ( out ) :: Iflag , Liom , Npsl integer , dimension ( * ) :: Ipvt , Iwp real ( kind = dp ) , dimension ( N , * ) :: V real ( kind = dp ) , dimension ( * ) :: Wk , Wp , X external psol ! Iflag = 0 Liom = 0 Npsl = 0 !----------------------------------------------------------------------- !  The initial residual is the vector b.  Apply scaling to b, and test !  for an immediate return with X = 0 or X = b. !----------------------------------------------------------------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm0 = dnrm2 ( N , V , 1 ) bnrm = bnrm0 IFDELTA : if ( bnrm0 > Delta ) then !  Apply inverse of left preconditioner to vector b. -------------------- ier = 0 if ( Jpre /= 0 . and . Jpre /= 2 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , B , 1 , ier ) Npsl = 1 if ( ier /= 0 ) then !  This block handles error returns forced by routine PSOL. if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif !  Calculate norm of scaled vector V(*,1) and normalize it. ------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm = dnrm2 ( N , V , 1 ) Delta = Delta * ( bnrm / bnrm0 ) endif tem = 1.0D0 / bnrm call dscal ( N , tem , V ( 1 , 1 ), 1 ) !  Zero out the HES array. ---------------------------------------------- do j = 1 , Maxl do i = 1 , Maxl Hes ( i , j ) = 0.0D0 enddo enddo !----------------------------------------------------------------------- !  Main loop on LL = l to compute the vectors V(*,2) to V(*,MAXL). !  The running product PROD is needed for the convergence test. !----------------------------------------------------------------------- prod = 1.0D0 do ll = 1 , Maxl Liom = ll !----------------------------------------------------------------------- !  Call routine DATV to compute VNEW = Abar*v(l), where Abar is !  the matrix A with scaling and inverse preconditioner factors applied. !  Call routine DORTHOG to orthogonalize the new vector vnew = V(*,l+1). !  Call routine DHEFA to update the factors of HES. !----------------------------------------------------------------------- call datv ( Neq , Y , Savf , V ( 1 , ll ), Wght , X , f , psol , V ( 1 , ll + 1 ), Wk , Wp , Iwp , Hl0 , Jpre , ier , Npsl ) if ( ier /= 0 ) then !  This block handles error returns forced by routine PSOL. if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif call dorthog ( V ( 1 , ll + 1 ), V , Hes , N , ll , Maxl , Kmp , snormw ) call dhefa ( Hes , Maxl , ll , Ipvt , info , ll ) lm1 = ll - 1 if ( ll > 1 ) then if ( Ipvt ( lm1 ) == lm1 ) prod = prod * Hes ( ll , lm1 ) endif if ( info /= ll ) then !----------------------------------------------------------------------- !  Update RHO, the estimate of the norm of the residual b - A*x(l). !  test for convergence.  If passed, compute approximation x(l). !  If failed and l .lt. MAXL, then continue iterating. !----------------------------------------------------------------------- rho = bnrm * snormw * abs ( prod / Hes ( ll , ll )) if ( rho <= Delta ) then call approximate () return endif if ( ll == Maxl ) exit else !----------------------------------------------------------------------- !  The last pivot in HES was found to be zero. !  If vnew = 0 or l = MAXL, take an error return with IFLAG = 2. !  otherwise, continue the iteration without a convergence test. !----------------------------------------------------------------------- if ( snormw == 0.0D0 ) exit IFDELTA if ( ll == Maxl ) exit IFDELTA endif !  If l .lt. MAXL, store HES(l+1,l) and normalize the vector v(*,l+1). Hes ( ll + 1 , ll ) = snormw tem = 1.0D0 / snormw call dscal ( N , tem , V ( 1 , ll + 1 ), 1 ) enddo !----------------------------------------------------------------------- !  l has reached MAXL without passing the convergence test: !  If RHO is not too large, compute a solution anyway and return with !  IFLAG = 1.  Otherwise return with IFLAG = 2. !----------------------------------------------------------------------- if ( rho <= 1.0D0 ) then Iflag = 1 call approximate () return elseif ( rho <= bnrm . and . Mnewt == 0 ) then Iflag = 1 call approximate () return endif elseif ( Mnewt > 0 ) then do i = 1 , N X ( i ) = 0.0D0 enddo return else !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) return endif IFDELTA Iflag = 2 contains subroutine approximate () !----------------------------------------------------------------------- !  Compute the approximation x(l) to the solution. !  Since the vector X was used as work space, and the initial guess !  of the Newton correction is zero, X must be reset to zero. !----------------------------------------------------------------------- integer :: ll ll = Liom do k = 1 , ll B ( k ) = 0.0D0 enddo B ( 1 ) = bnrm call dhesl ( Hes , Maxl , ll , Ipvt , B ) do k = 1 , N X ( k ) = 0.0D0 enddo do i = 1 , ll call daxpy ( N , B ( i ), V ( 1 , i ), 1 , X , 1 ) enddo do i = 1 , N X ( i ) = X ( i ) / Wght ( i ) enddo if ( Jpre <= 1 ) return call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , X , 2 , ier ) Npsl = Npsl + 1 if ( ier == 0 ) return !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 end subroutine approximate end subroutine dspiom","tags":"","loc":"sourcefile/dspiom.inc.html"},{"title":"dsrcom.inc – odepack","text":"Contents Subroutines dsrcom Source Code dsrcom.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !! dsrcom(3f) - [M_odepack] Save/restore ODEPACK COMMON blocks. !! !!### DESCRIPTION !!  This routine saves or restores (depending on JOB) the contents of !!  the internal types used to store the current state !!  by one (or more) of the ODEPACK solvers. !! !!### VALUES !! !!  RSAV !! !!  : real array of length 218 or more. !! !!  ISAV !! !!  : integer array of length 37 or more. !! !!  JOB !! !!  : flag indicating to save or restore the COMMON blocks: !!              JOB  = 1 if COMMON is to be saved (written to RSAV/ISAV) !!              JOB  = 2 if COMMON is to be restored (read from RSAV/ISAV) !!  A call with JOB = 2 presumes a prior call with JOB = 1. !! !----------------------------------------------------------------------- ! ### BEGIN PROLOGUE  DSRCOM ! ### SUBSIDIARY ! ### PURPOSE  Save/restore ODEPACK COMMON blocks. ! ### TYPE      DOUBLE PRECISION (SSRCOM-S, DSRCOM-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### DESCRIPTION ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  (NONE) ! ### COMMON BLOCKS    DLS001 ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890503  Minor cosmetic changes.  (FNF) !     19921116  Deleted treatment of block /EH0001/.  (ACH) !     19930801  Reduced Common block length by 2.  (ACH) !     19930809  Renamed to allow single/double precision versions. (ACH) !     20010418  Reduced Common block length by 209+12. (ACH) !     20031105  Restored 'own' variables to Common block /DLS001/, to !               enable interrupt/restart feature. (ACH) !     20031112  Added SAVE statement for data-loaded constants. ! ### END PROLOGUE  DSRCOM !----------------------------------------------------------------------- subroutine dsrcom ( rsav , isav , job ) real ( kind = dp ) :: Rsav ( * ) integer :: Isav ( * ) integer , intent ( in ) :: Job integer , parameter :: lenils = 37 , lenrls = 218 select case ( job ) case ( 1 ) rsav ( 1 : lenrls ) = return_dls1_real () isav ( 1 : lenils ) = return_dls1_int () case ( 2 ) call set_dls1_real ( rsav ( 1 : lenrls )) call set_dls1_int ( isav ( 1 : lenils )) case default write ( * , * ) '<ERROR>*dsrcom* unknown JOB value=' , job stop 1 end select end subroutine dsrcom","tags":"","loc":"sourcefile/dsrcom.inc.html"},{"title":"dsolbt.inc – odepack","text":"Contents Subroutines dsolbt Source Code dsolbt.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! Solution of block-tridiagonal linear system. !! Coefficient matrix must have been previously processed by DDECBT. !! M, N, A,B,C, and IP  must not have been changed since call to DDECBT. !! Written by A. C. Hindmarsh. !!### Input !! !! M !! !! : order of each block. !! !! N !! !! : number of blocks in each direction of matrix. !! !! A,B,C !! !! : M by M by N arrays containing block LU decomposition !! of coefficient matrix from DDECBT. !! !! IP !! !! : M by N integer array of pivot information from DDECBT. !! !! Y !! !! : array of length M*N containg the right-hand side vector !! (treated as an M by N array here). !! !!### Output !! !! Y !! !! : solution vector, of length M*N. !! !! External routines required: DGESL (LINPACK) and DDOT (BLAS). !----------------------------------------------------------------------- subroutine dsolbt ( M , N , A , B , C , Y , Ip ) ! integer :: M integer , intent ( in ) :: N real ( kind = dp ) :: A ( M , M , N ) real ( kind = dp ) :: B ( M , M , N ) real ( kind = dp ) :: C ( M , M , N ) real ( kind = dp ), intent ( inout ) :: Y ( M , N ) integer :: Ip ( M , N ) ! real ( kind = dp ) :: dpr integer :: i , k , kb , km1 , kp1 , nm1 , nm2 ! nm1 = N - 1 nm2 = N - 2 ! Forward solution sweep. ---------------------------------------------- call dgesl ( A , M , M , Ip , Y , 0 ) do k = 2 , nm1 km1 = k - 1 do i = 1 , M dpr = ddot ( M , C ( i , 1 , k ), M , Y ( 1 , km1 ), 1 ) Y ( i , k ) = Y ( i , k ) - dpr enddo call dgesl ( A ( 1 , 1 , k ), M , M , Ip ( 1 , k ), Y ( 1 , k ), 0 ) enddo do i = 1 , M dpr = ddot ( M , C ( i , 1 , N ), M , Y ( 1 , nm1 ), 1 ) + ddot ( M , B ( i , 1 , N ), M , Y ( 1 , nm2 ), 1 ) Y ( i , N ) = Y ( i , N ) - dpr enddo call dgesl ( A ( 1 , 1 , N ), M , M , Ip ( 1 , N ), Y ( 1 , N ), 0 ) ! Backward solution sweep. --------------------------------------------- do kb = 1 , nm1 k = N - kb kp1 = k + 1 do i = 1 , M dpr = ddot ( M , B ( i , 1 , k ), M , Y ( 1 , kp1 ), 1 ) Y ( i , k ) = Y ( i , k ) - dpr enddo enddo do i = 1 , M dpr = ddot ( M , C ( i , 1 , 1 ), M , Y ( 1 , 3 ), 1 ) Y ( i , 1 ) = Y ( i , 1 ) - dpr enddo end subroutine dsolbt","tags":"","loc":"sourcefile/dsolbt.inc.html"},{"title":"datv.inc – odepack","text":"Contents Subroutines datv Source Code datv.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine computes the product !! !!      (D-inverse)*(P1-inverse)*(I - hl0*df/dy)*(P2-inverse)*(D*v) !! !! where D is a diagonal scaling matrix, and P1 and P2 are the !! left and right preconditioning matrices, respectively. !! !! v is assumed to have WRMS norm equal to 1. !! The product is stored in z.  This is computed by a !! difference quotient, a call to F, and two calls to PSOL. !! !!### On entry !! !! NEQ !! !! : problem size, passed to F and PSOL (NEQ(1) = N). !! !! Y !! !! : array containing current dependent variable vector. !! !! SAVF !! !! : array containing current value of f(t,y). !! !! V !! !! : real array of length N (can be the same array as Z). !! !! WGHT !! !! : array of length N containing scale factors. !! 1/WGHT(i) are the diagonal elements of the matrix D. !! !! FTEM !! !! : work array of length N. !! !! VTEM !! !! : work array of length N used to store the !! unscaled version of V. !! !! WP !! !! : real work array used by preconditioner PSOL. !! !! IWP !! !! : integer work array used by preconditioner PSOL. !! !! HL0 !! !! : current value of (step size h) * (coefficient l0). !! !! JPRE !! !! : preconditioner type flag. !! !!### On return !! !! Z !! !! : array of length N containing desired scaled !! matrix-vector product. !! !! IER !! !! : error flag from PSOL. !! !! NPSL !! !! : the number of calls to PSOL. !! !! In addition, this routine uses the Common variables TN, N, NFE. !----------------------------------------------------------------------- subroutine datv ( Neq , Y , Savf , V , Wght , Ftem , f , psol , Z , Vtem , Wp , Iwp , Hl0 , Jpre , Ier , Npsl ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( in ) :: V ( * ) real ( kind = dp ), intent ( in ) :: Wght ( * ) real ( kind = dp ) :: Ftem ( * ) external :: f external :: psol real ( kind = dp ), intent ( inout ) :: Z ( * ) real ( kind = dp ), intent ( inout ) :: Vtem ( * ) real ( kind = dp ), intent ( inout ) :: Wp ( * ) integer :: Iwp ( * ) real ( kind = dp ) :: Hl0 integer , intent ( inout ) :: Jpre integer , intent ( inout ) :: Ier integer , intent ( inout ) :: Npsl real ( kind = dp ) :: fac , rnorm , tempn integer :: i !  Set VTEM = D * V. do i = 1 , dls1 % n Vtem ( i ) = V ( i ) / Wght ( i ) enddo Ier = 0 if ( Jpre >= 2 ) then !  JPRE = 2 or 3.  Apply inverse of right preconditioner to VTEM. call psol ( Neq , dls1 % tn , Y , Savf , Ftem , Hl0 , Wp , Iwp , Vtem , 2 , Ier ) Npsl = Npsl + 1 if ( Ier /= 0 ) return !  Calculate L-2 norm of (D-inverse) * VTEM. do i = 1 , dls1 % n Z ( i ) = Vtem ( i ) * Wght ( i ) enddo tempn = dnrm2 ( dls1 % n , Z , 1 ) rnorm = 1.0D0 / tempn !  Save Y in Z and increment Y by VTEM/norm. !X!call dcopy(dls1%n,Y,1,Z,1) Z ( 1 : dls1 % n ) = Y ( 1 : dls1 % n ) do i = 1 , dls1 % n Y ( i ) = Z ( i ) + Vtem ( i ) * rnorm enddo fac = Hl0 * tempn else !  JPRE = 0 or 1.  Save Y in Z and increment Y by VTEM. !X!call dcopy(dls1%n,Y,1,Z,1) Z ( 1 : dls1 % n ) = Y ( 1 : dls1 % n ) do i = 1 , dls1 % n Y ( i ) = Z ( i ) + Vtem ( i ) enddo fac = Hl0 endif !  For all JPRE, call F with incremented Y argument, and restore Y. call f ( Neq , dls1 % tn , Y , Ftem ) dls1 % nfe = dls1 % nfe + 1 !X!call dcopy(dls1%n,Z,1,Y,1) Y ( 1 : dls1 % n ) = Z ( 1 : dls1 % n ) !  Set Z = (identity - hl0*Jacobian) * VTEM, using difference quotient. do i = 1 , dls1 % n Z ( i ) = Ftem ( i ) - Savf ( i ) enddo do i = 1 , dls1 % n Z ( i ) = Vtem ( i ) - fac * Z ( i ) enddo !  Apply inverse of left preconditioner to Z, if nontrivial. if ( Jpre /= 0 . and . Jpre /= 2 ) then call psol ( Neq , dls1 % tn , Y , Savf , Ftem , Hl0 , Wp , Iwp , Z , 1 , Ier ) Npsl = Npsl + 1 if ( Ier /= 0 ) return endif !  Apply D-inverse to Z and return. do i = 1 , dls1 % n Z ( i ) = Z ( i ) * Wght ( i ) enddo end subroutine datv","tags":"","loc":"sourcefile/datv.inc.html"},{"title":"dsrcma.inc – odepack","text":"Contents Subroutines dsrcma Source Code dsrcma.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine saves or restores (depending on JOB) the contents of !! the Common blocks DLS001, type(DLSA01)::DLSA, which are used !! internally by one or more ODEPACK solvers. !! !! RSAV !! !! : real array of length 240 or more. !! !! ISAV !! !! : integer array of length 46 or more. !! !! JOB !! !! : flag indicating to save or restore the Common blocks: !! !!        JOB  = 1 if Common is to be saved (written to RSAV/ISAV) !!        JOB  = 2 if Common is to be restored (read from RSAV/ISAV) !!        A call with JOB = 2 presumes a prior call with JOB = 1. !----------------------------------------------------------------------- subroutine dsrcma ( Rsav , Isav , Job ) ! integer , parameter :: LENRLS = 218 , LENILS = 37 ! real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job ! select case ( Job ) case ( 1 ) Rsav ( 1 : LENRLS ) = return_dls1_real () Rsav ( LENRLS + 1 ) = dlsa % tsw Rsav ( LENRLS + 2 : LENRLS + 13 ) = dlsa % cm1 ( 1 : 12 ) Rsav ( LENRLS + 14 : LENRLS + 18 ) = dlsa % cm2 ( 1 : 5 ) Rsav ( LENRLS + 19 ) = dlsa % pdest Rsav ( LENRLS + 20 ) = dlsa % pdlast Rsav ( LENRLS + 21 ) = dlsa % ratio Rsav ( LENRLS + 22 ) = dlsa % pdnorm Isav ( 1 : LENILS ) = return_dls1_int () Isav ( LENILS + 1 ) = dlsa % insufr Isav ( LENILS + 2 ) = dlsa % insufi Isav ( LENILS + 3 ) = dlsa % ixpr Isav ( LENILS + 4 ) = dlsa % icount Isav ( LENILS + 5 ) = dlsa % irflag Isav ( LENILS + 6 ) = dlsa % jtyp Isav ( LENILS + 7 ) = dlsa % mused Isav ( LENILS + 8 ) = dlsa % mxordn Isav ( LENILS + 9 ) = dlsa % mxords case ( 2 ) call set_dls1_real ( Rsav ( 1 : LENRLS )) dlsa % tsw = Rsav ( LENRLS + 1 ) dlsa % cm1 ( 1 : 12 ) = Rsav ( LENRLS + 2 : LENRLS + 13 ) dlsa % cm2 ( 1 : 5 ) = Rsav ( LENRLS + 14 : LENRLS + 18 ) dlsa % pdest = Rsav ( LENRLS + 19 ) dlsa % pdlast = Rsav ( LENRLS + 20 ) dlsa % ratio = Rsav ( LENRLS + 21 ) dlsa % pdnorm = Rsav ( LENRLS + 22 ) call set_dls1_int ( Isav ( 1 : LENILS )) dlsa % insufr = Isav ( LENILS + 1 ) dlsa % insufi = Isav ( LENILS + 2 ) dlsa % ixpr = Isav ( LENILS + 3 ) dlsa % icount = Isav ( LENILS + 4 ) dlsa % irflag = Isav ( LENILS + 5 ) dlsa % jtyp = Isav ( LENILS + 6 ) dlsa % mused = Isav ( LENILS + 7 ) dlsa % mxordn = Isav ( LENILS + 8 ) dlsa % mxords = Isav ( LENILS + 9 ) case default write ( * , * ) '<ERROR>*dsrcma* unknown value for JOB=' , Job stop 1 endselect end subroutine dsrcma","tags":"","loc":"sourcefile/dsrcma.inc.html"},{"title":"dslsbt.inc – odepack","text":"Contents Subroutines dslsbt Source Code dslsbt.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine acts as an interface between the core integrator !! routine and the DSOLBT routine for the solution of the linear system !! arising from chord iteration. !! Communication with DSLSBT uses the following variables: !! !! WM !! !! : real work space containing the LU decomposition, !! starting at WM(3). !! !! IWM !! !! : integer work space containing pivot information, starting at !! IWM(21).  IWM also contains block structure parameters !! MB = IWM(1) and NB = IWM(2). !! !! X !! !! : the right-hand side vector on input, and the solution vector !! on output, of length N. !! !! TEM !! !! : vector of work space of length N, not used in this version. !----------------------------------------------------------------------- subroutine dslsbt ( Wm , Iwm , X , Tem ) ! real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) real ( kind = dp ) :: X ( * ) real ( kind = dp ) :: Tem ( * ) ! integer :: lblox , lpb , lpc , mb , nb ! mb = Iwm ( 1 ) nb = Iwm ( 2 ) lblox = mb * mb * nb lpb = 3 + lblox lpc = lpb + lblox call dsolbt ( mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc ), X , Iwm ( 21 )) end subroutine dslsbt","tags":"","loc":"sourcefile/dslsbt.inc.html"},{"title":"sro.inc – odepack","text":"Contents Subroutines sro Source Code sro.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### Name !!  sro -- symmetric reordering of sparse symmetric matrix !! !!### Description !! !!    the nonzero entries of the matrix m are assumed to be stored !!    symmetrically in (ia,ja,a) format (i.e., not both m(i,j) and m(j,i) !!    are stored if i ne j). !! !!    sro does not rearrange the order of the rows, but does move !!    nonzeroes from one row to another to ensure that if m(i,j) will be !!    in the upper triangle of m with respect to the new ordering, then !!    m(i,j) is stored in row i (and thus m(j,i) is not stored),  whereas !!    if m(i,j) will be in the strict lower triangle of m, then m(j,i) is !!    stored in row j (and thus m(i,j) is not stored). !! !! !!### additional parameters !! !!   q !! !!   : integer one-dimensional work array.  dimension = n !! !!   r !! !!   : integer one-dimensional work array.  dimension = number of !!   nonzero entries in the upper triangle of m !! !!   dflag !! !!   : logical variable.  if dflag = .true., then store nonzero !!   diagonal elements at the beginning of the row !! !----------------------------------------------------------------------- subroutine sro ( N , Ip , Ia , Ja , A , Q , R , Dflag ) integer , intent ( in ) :: N integer , intent ( in ) :: Ip ( * ) integer , intent ( inout ) :: Ia ( * ) integer , intent ( inout ) :: Ja ( * ) real ( kind = dp ), intent ( inout ) :: A ( * ) integer , intent ( inout ) :: Q ( * ) integer , intent ( inout ) :: R ( * ) logical , intent ( in ) :: Dflag ! real ( kind = dp ) :: ak integer :: i , ilast , j , jak , jdummy , jmax , jmin , k ! !--phase 1 -- find row in which to store each nonzero !----initialize count of nonzeroes to be stored in each row do i = 1 , N Q ( i ) = 0 enddo !----for each nonzero element a(j) do i = 1 , N jmin = Ia ( i ) jmax = Ia ( i + 1 ) - 1 if ( jmin <= jmax ) then do j = jmin , jmax !--------find row (=r(j)) and column (=ja(j)) in which to store a(j) ... k = Ja ( j ) if ( Ip ( k ) < Ip ( i ) ) Ja ( j ) = i if ( Ip ( k ) >= Ip ( i ) ) k = i R ( j ) = k !--------... and increment count of nonzeroes (=q(r(j)) in that row Q ( k ) = Q ( k ) + 1 enddo endif enddo ! !--phase 2 -- find new ia and permutation to apply to (ja,a) !----determine pointers to delimit rows in permuted (ja,a) do i = 1 , N Ia ( i + 1 ) = Ia ( i ) + Q ( i ) Q ( i ) = Ia ( i + 1 ) enddo ! !----determine where each (ja(j),a(j)) is stored in permuted (ja,a) !----for each nonzero element (in reverse order) ilast = 0 jmin = Ia ( 1 ) jmax = Ia ( N + 1 ) - 1 j = jmax do jdummy = jmin , jmax i = R ( j ) if ( . not . Dflag . or . Ja ( j ) /= i . or . i == ilast ) then ! !------put (off-diagonal) nonzero in last unused location in row Q ( i ) = Q ( i ) - 1 R ( j ) = Q ( i ) else ! !------if dflag, then put diagonal nonzero at beginning of row R ( j ) = Ia ( i ) ilast = i endif ! j = j - 1 enddo ! !--phase 3 -- permute (ja,a) to upper triangular form (wrt new ordering) do j = jmin , jmax do while ( R ( j ) /= j ) k = R ( j ) R ( j ) = R ( k ) R ( k ) = k jak = Ja ( k ) Ja ( k ) = Ja ( j ) Ja ( j ) = jak ak = A ( k ) A ( k ) = A ( j ) A ( j ) = ak enddo enddo ! end subroutine sro","tags":"","loc":"sourcefile/sro.inc.html"},{"title":"dainvgs.inc – odepack","text":"This file depends on sourcefile~~dainvgs.inc~~EfferentGraph sourcefile~dainvgs.inc dainvgs.inc sourcefile~m_odepack.f90 M_odepack.f90 sourcefile~dainvgs.inc->sourcefile~m_odepack.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Subroutines dainvgs Source Code dainvgs.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This subroutine computes the initial value of the vector YDOT !! satisfying !! !!      A * YDOT = g(t,y) !! !! when A is nonsingular.  It is called by DLSODIS for initialization !! only, when ISTATE = 0.  The matrix A is subjected to LU !! decomposition in CDRV.  Then the system A*YDOT = g(t,y) is solved !! in CDRV. !! !! In addition to variables described previously, communication !! with DAINVGS uses the following: !! !! Y !! !! : array of initial values. !! !! WK !! !! : real work space for matrices.  On output it contains A and !!   its LU decomposition.  The LU decomposition is not entirely !!   sparse unless the structure of the matrix A is identical to !!   the structure of the Jacobian matrix dr/dy. !!   Storage of matrix elements starts at WK(3). !!   WK(1) = SQRT(UROUND), not used here. !! !! IWK !! !! : integer work space for matrix-related data, assumed to !!   be equivalenced to WK.  In addition, WK(IPRSP) and WK(IPISP) !!   are assumed to have identical locations. !! !! TEM !! !! : vector of work space of length N (ACOR in DSTODI). !! !! YDOT !! !! : output vector containing the initial dy/dt. YDOT(i) contains !!   dy(i)/dt when the matrix A is non-singular. !! !! IER !! !! : output error flag with the following values and meanings: !!       = 0  if DAINVGS was successful. !!       = 1  if the A-matrix was found to be singular. !!       = 2  if RES returned an error flag IRES = IER = 2. !!       = 3  if RES returned an error flag IRES = IER = 3. !!       = 4  if insufficient storage for CDRV (should not occur here). !!       = 5  if other error found in CDRV (should not occur here). !----------------------------------------------------------------------- subroutine dainvgs ( Neq , T , Y , Wk , Iwk , Tem , Ydot , Ier , res , adda ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Wk ( * ) integer :: Iwk ( * ) real ( kind = dp ), intent ( inout ) :: Tem ( * ) real ( kind = dp ) :: Ydot ( * ) integer , intent ( inout ) :: Ier external :: res external :: adda integer :: i , imul , j , k , kmax , kmin do i = 1 , dlss % nnz Wk ( dlss % iba + i ) = 0.0D0 enddo Ier = 1 call res ( Neq , T , Y , Wk ( dlss % ipa ), Ydot , Ier ) if ( Ier > 1 ) then return endif kmin = Iwk ( dlss % ipian ) do j = 1 , Neq kmax = Iwk ( dlss % ipian + j ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Tem ( i ) = 0.0D0 enddo call adda ( Neq , T , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Tem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Tem ( i ) enddo kmin = kmax + 1 enddo dlss % nlu = dlss % nlu + 1 Ier = 0 do i = 1 , Neq Tem ( i ) = 0.0D0 enddo ! Numerical factorization of matrix A. --------------------------------- call cdrv ( Neq , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), & & Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Tem , Tem , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 2 , dlss % iys ) if ( dlss % iys == 0 ) then ! ! Solution of the linear system. --------------------------------------- call cdrv ( Neq , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), & & Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Ydot , Ydot , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 4 , dlss % iys ) if ( dlss % iys /= 0 ) Ier = 5 else imul = ( dlss % iys - 1 ) / Neq Ier = 5 if ( imul == 8 ) Ier = 1 if ( imul == 10 ) Ier = 4 endif end subroutine dainvgs","tags":"","loc":"sourcefile/dainvgs.inc.html"},{"title":"cdrv.inc – odepack","text":"Contents Subroutines cdrv Source Code cdrv.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !! cdrv(3f) - [M_odepack ] driver for solving sparse non-symmetric !!            systems of linear equations !! !!### DESCRIPTION !!   driver for subroutines for solving sparse nonsymmetric systems of !!   linear equations (compressed pointer storage) !! !!### PARAMETERS !! !!    class abbreviations are-- !!       n - integer variable !!       f - real variable !!       v - supplies a value to the driver !!       r - returns a result from the driver !!       i - used internally by the driver !!       a - array !! !!### class - parameter !! !!   the nonzero entries of the coefficient matrix m are stored !!   row-by-row in the array a.  to identify the individual nonzero !!   entries in each row, we need to know in which column each entry !!   lies.  the column indices which correspond to the nonzero entries !!   of m are stored in the array ja.  i.e., if  a(k) = m(i,j),  then !!   ja(k) = j.  in addition, we need to know where each row starts and !!   how long it is.  the index positions in ja and a where the rows of !!   m begin are stored in the array ia.  i.e., if m(i,j) is the first !!   nonzero entry (stored) in the i-th row and a(k) = m(i,j),  then !!   ia(i) = k.  moreover, the index in ja and a of the first location !!   following the last element in the last row is stored in ia(n+1). !!   thus, the number of entries in the i-th row is given by !!   ia(i+1) - ia(i),  the nonzero entries of the i-th row are stored !!   consecutively in !!```text !!            a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), !!``` !!   and the corresponding column indices are stored consecutively in !!```text !!            ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). !!``` !!   for example, the 5 by 5 matrix !!```text !!                ( 1. 0. 2. 0. 0.) !!                ( 0. 3. 0. 0. 0.) !!            m = ( 0. 4. 5. 6. 0.) !!                ( 0. 0. 0. 7. 0.) !!                ( 0. 0. 0. 8. 9.) !!``` !!   would be stored as !!```text !!               - 1  2  3  4  5  6  7  8  9 !!            ---+-------------------------- !!            ia - 1  3  4  7  8 10 !!            ja - 1  3  2  2  3  4  4  4  5 !!             a - 1. 2. 3. 4. 5. 6. 7. 8. 9.         . !!``` !! !!```text !!     nv    - n     - number of variables/equations. !!     fva   - a     - nonzero entries of the coefficient matrix m, stored !!           -           by rows. !!           -           size = number of nonzero entries in m. !!     nva   - ia    - pointers to delimit the rows in a. !!           -           size = n+1. !!     nva   - ja    - column numbers corresponding to the elements of a. !!           -           size = size of a. !!     fva   - b     - right-hand side b.  b and z can the same array. !!           -           size = n. !!     fra   - z     - solution x.  b and z can be the same array. !!           -           size = n. !!``` !! !!   the rows and columns of the original matrix m can be !!   reordered (e.g., to reduce fillin or ensure numerical stability) !!   before calling the driver.  if no reordering is done, then set !!   r(i) = c(i) = ic(i) = i  for i=1,...,n.  the solution z is returned !!   in the original order. !! !!   if the columns have been reordered (i.e.,  c(i).ne.i  for some !!   i), then the driver will call a subroutine (nroc) which rearranges !!   each row of ja and a, leaving the rows in the original order, but !!   placing the elements of each row in increasing order with respect !!   to the new ordering.  if  path.ne.1,  then nroc is assumed to have !!   been called already. !! !!```text !! nva   - r     - ordering of the rows of m. !!       -           size = n. !! nva   - c     - ordering of the columns of m. !!       -           size = n. !! nva   - ic    - inverse of the ordering of the columns of m.  i.e., !!       -           ic(c(i)) = i  for i=1,...,n. !!       -           size = n. !!``` !! !!   the solution of the system of linear equations is divided into !!   three stages -- !! !!```text !!      nsfc -- the matrix m is processed symbolically to determine where !!               fillin will occur during the numeric factorization. !!      nnfc -- the matrix m is factored numerically into the product ldu !!               of a unit lower triangular matrix l, a diagonal matrix !!               d, and a unit upper triangular matrix u, and the system !!               mx = b  is solved. !!      nnsc -- the linear system  mx = b  is solved using the ldu !!  or           factorization from nnfc. !!      nntc -- the transposed linear system  mt x = b  is solved using !!               the ldu factorization from nnf. !!``` !! !!   for several systems whose coefficient matrices have the same !!   nonzero structure, nsfc need be done only once (for the first !!   system).  then nnfc is done once for each additional system.  for !!   several systems with the same coefficient matrix, nsfc and nnfc !!   need be done only once (for the first system).  then nnsc or nntc !!   is done once for each additional right-hand side. !!```text !! nv    - path  - path specification.  values and their meanings are -- !!       -           1  perform nroc, nsfc, and nnfc. !!       -           2  perform nnfc only  (nsfc is assumed to have been !!       -               done in a manner compatible with the storage !!       -               allocation used in the driver). !!       -           3  perform nnsc only  (nsfc and nnfc are assumed to !!       -               have been done in a manner compatible with the !!       -               storage allocation used in the driver). !!       -           4  perform nntc only  (nsfc and nnfc are assumed to !!       -               have been done in a manner compatible with the !!       -               storage allocation used in the driver). !!       -           5  perform nroc and nsfc. !!``` !! !!   various errors are detected by the driver and the individual !!   subroutines. !! !!```text !! nr    - flag  - error flag.  values and their meanings are -- !!       -             0     no errors detected !!       -             n+k   null row in a  --  row = k !!       -            2n+k   duplicate entry in a  --  row = k !!       -            3n+k   insufficient storage in nsfc  --  row = k !!       -            4n+1   insufficient storage in nnfc !!       -            5n+k   null pivot  --  row = k !!       -            6n+k   insufficient storage in nsfc  --  row = k !!       -            7n+1   insufficient storage in nnfc !!       -            8n+k   zero pivot  --  row = k !!       -           10n+1   insufficient storage in cdrv !!       -           11n+1   illegal path specification !!``` !! !!   working storage is needed for the factored form of the matrix !!   m plus various temporary vectors.  the arrays isp and rsp should be !!   equivalenced.  integer storage is allocated from the beginning of !!   isp and real storage from the end of rsp. !! !!```text !!        nv    - nsp   - declared dimension of rsp.  nsp generally must !!                        be larger than  8n+2 + 2k  (where  k = (number of !!                        nonzero entries in m)). !!        nvira - isp   - integer working storage divided up into various arrays !!                        needed by the subroutines.  isp and rsp should be !!                        equivalenced. !!                             size = lratio*nsp. !!        fvira - rsp   - real working storage divided up into various arrays !!                        needed by the subroutines.  isp and rsp should be !!                        equivalenced. !!                             size = nsp. !!        nr    - esp   - if sufficient storage was available to perform the !!                        symbolic factorization (nsfc), then esp is set to !!                        the amount of excess storage provided (negative if !!                        insufficient storage was available to perform the !!                        numeric factorization (nnfc)). !!``` !! !----------------------------------------------------------------------- subroutine cdrv ( N , R , C , Ic , Ia , Ja , A , B , Z , Nsp , Isp , Rsp , Esp , Path , Flag ) ! integer :: N integer :: R ( * ) integer :: C ( * ) integer :: Ic ( * ) integer :: Ia ( * ) integer :: Ja ( * ) real ( kind = dp ) :: A ( * ) real ( kind = dp ) :: B ( * ) real ( kind = dp ) :: Z ( * ) integer , intent ( inout ) :: Isp ( * ) integer , intent ( in ) :: Nsp real ( kind = dp ) :: Rsp ( * ) integer , intent ( out ) :: Esp integer , intent ( in ) :: Path integer , intent ( inout ) :: Flag ! integer :: ar , d , i , ijl , iju , il , ira , irac , irl , iru , iu , j , jl , jlmax , jra , jrl , jru , ju , jumax , jutmp , l , & & lmax , max , q , row , tmp , u , umax integer , save :: lratio ! !   set lratio equal to the ratio between the length of floating point !   and integer array data.  e. g., lratio = 1 for (real, integer), !   lratio = 2 for (double precision, integer) ! data lratio / 2 / ! if ( Path < 1 . or . 5 < Path ) then !  ** error.. illegal path specification Flag = 11 * N + 1 return else ! ### ***initialize and divide up temporary storage  ******************* il = 1 ijl = il + ( N + 1 ) iu = ijl + N iju = iu + ( N + 1 ) irl = iju + N jrl = irl + N jl = jrl + N ! !   ******  reorder a if necessary, call nsfc if flag is set  *********** if ( ( Path - 1 ) * ( Path - 5 ) == 0 ) then max = ( lratio * Nsp + 1 - jl ) - ( N + 1 ) - 5 * N jlmax = max / 2 q = jl + jlmax ira = q + ( N + 1 ) jra = ira + N irac = jra + N iru = irac + N jru = iru + N jutmp = jru + N jumax = lratio * Nsp + 1 - jutmp Esp = max / lratio if ( jlmax <= 0 . or . jumax <= 0 ) then !  ** error.. insufficient storage Flag = 10 * N + 1 return endif ! do i = 1 , N if ( C ( i ) /= i ) then ar = Nsp + 1 - N call nroc ( N , Ic , Ia , Ja , A , Isp ( il ), Rsp ( ar ), Isp ( iu ), Flag ) if ( Flag == 0 ) exit !  ** error.. error detected in nroc, nsfc, nnfc, or nnsc return endif enddo ! call nsfc ( N , R , Ic , Ia , Ja , jlmax , Isp ( il ), Isp ( jl ), Isp ( ijl ), jumax , Isp ( iu ), Isp ( jutmp ), Isp ( iju ), Isp ( q ), Isp ( ira ), Isp ( jra ), Isp ( irac ), & & Isp ( irl ), Isp ( jrl ), Isp ( iru ), Isp ( jru ), Flag ) if ( Flag /= 0 ) then !  ** error.. error detected in nroc, nsfc, nnfc, or nnsc return endif !   ******  move ju next to jl  ***************************************** jlmax = Isp ( ijl + N - 1 ) ju = jl + jlmax jumax = Isp ( iju + N - 1 ) if ( jumax > 0 ) then do j = 1 , jumax Isp ( ju + j - 1 ) = Isp ( jutmp + j - 1 ) enddo endif endif ! !   ******  call remaining subroutines  ********************************* jlmax = Isp ( ijl + N - 1 ) ju = jl + jlmax jumax = Isp ( iju + N - 1 ) l = ( ju + jumax - 2 + lratio ) / lratio + 1 lmax = Isp ( il + N ) - 1 d = l + lmax u = d + N row = Nsp + 1 - N tmp = row - N umax = tmp - u Esp = umax - ( Isp ( iu + N ) - 1 ) ! if ( ( Path - 1 ) * ( Path - 2 ) == 0 ) then if ( umax < 0 ) then !  ** error.. insufficient storage Flag = 10 * N + 1 return endif call nnfc ( N , R , C , Ic , Ia , Ja , A , Z , B , lmax , Isp ( il ), Isp ( jl ), Isp ( ijl ), Rsp ( l ), Rsp ( d ), umax , Isp ( iu ), Isp ( ju ), Isp ( iju ), Rsp ( u ), Rsp ( row ),& & Rsp ( tmp ), Isp ( irl ), Isp ( jrl ), Flag ) if ( Flag /= 0 ) then !  ** error.. error detected in nroc, nsfc, nnfc, or nnsc return endif endif ! if ( ( Path - 3 ) == 0 ) call nnsc ( N , R , C , Isp ( il ), Isp ( jl ), Isp ( ijl ), Rsp ( l ), Rsp ( d ), Isp ( iu ), Isp ( ju ), Isp ( iju ), Rsp ( u ), Z , B , Rsp ( tmp )) ! if ( ( Path - 4 ) == 0 ) call nntc ( N , R , C , Isp ( il ), Isp ( jl ), Isp ( ijl ), Rsp ( l ), Rsp ( d ), Isp ( iu ), Isp ( ju ), Isp ( iju ), Rsp ( u ), Z , B , Rsp ( tmp )) return endif ! end subroutine cdrv","tags":"","loc":"sourcefile/cdrv.inc.html"},{"title":"dsrcar.inc – odepack","text":"Contents Subroutines dsrcar Source Code dsrcar.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine saves or restores (depending on JOB) the contents of !! the Common blocks DLS001, type(dlsa01)::DLSA, DLSR01, which are used !! internally by one or more ODEPACK solvers. !! !! RSAV !! !! : real array of length 245 or more. !! !! ISAV !! !! : integer array of length 55 or more. !! !! JOB !! !! : flag indicating to save or restore the Common blocks: !! !!        JOB  = 1 if Common is to be saved (written to RSAV/ISAV) !!        JOB  = 2 if Common is to be restored (read from RSAV/ISAV) !! !!  A call with JOB = 2 presumes a prior call with JOB = 1. !! !----------------------------------------------------------------------- subroutine dsrcar ( Rsav , Isav , Job ) ! integer , parameter :: LENRLS = 218 , LENILS = 37 ! real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job ! integer :: ioff ! select case ( Job ) case ( 1 ) Rsav ( 1 : LENRLS ) = return_dls1_real () Rsav ( LENRLS + 1 ) = dlsa % tsw Rsav ( LENRLS + 2 : LENRLS + 13 ) = dlsa % cm1 ( 1 : 12 ) Rsav ( LENRLS + 14 : LENRLS + 18 ) = dlsa % cm2 ( 1 : 5 ) Rsav ( LENRLS + 19 ) = dlsa % pdest Rsav ( LENRLS + 20 ) = dlsa % pdlast Rsav ( LENRLS + 21 ) = dlsa % ratio Rsav ( LENRLS + 22 ) = dlsa % pdnorm Isav ( 1 : LENILS ) = return_dls1_int () Isav ( LENILS + 1 ) = dlsa % insufr Isav ( LENILS + 2 ) = dlsa % insufi Isav ( LENILS + 3 ) = dlsa % ixpr Isav ( LENILS + 4 ) = dlsa % icount Isav ( LENILS + 5 ) = dlsa % irflag Isav ( LENILS + 6 ) = dlsa % jtyp Isav ( LENILS + 7 ) = dlsa % mused Isav ( LENILS + 8 ) = dlsa % mxordn Isav ( LENILS + 9 ) = dlsa % mxords ioff = LENRLS + 22 Rsav ( ioff + 1 ) = dlsr % alpha Rsav ( ioff + 2 ) = dlsr % x2 Rsav ( ioff + 3 ) = dlsr % t0 Rsav ( ioff + 4 ) = dlsr % tlast Rsav ( ioff + 5 ) = dlsr % toutc ioff = LENILS + 9 Isav ( ioff + 1 ) = dlsr % lg0 Isav ( ioff + 2 ) = dlsr % lg1 Isav ( ioff + 3 ) = dlsr % lgx Isav ( ioff + 4 ) = dlsr % imax Isav ( ioff + 5 ) = dlsr % last Isav ( ioff + 6 ) = dlsr % irfnd Isav ( ioff + 7 ) = dlsr % itaskc Isav ( ioff + 8 ) = dlsr % ngc Isav ( ioff + 9 ) = dlsr % nge case ( 2 ) call set_dls1_real ( Rsav ( 1 : LENRLS )) dlsa % tsw = Rsav ( LENRLS + 1 ) dlsa % cm1 ( 1 : 12 ) = Rsav ( LENRLS + 2 : LENRLS + 13 ) dlsa % cm2 ( 1 : 5 ) = Rsav ( LENRLS + 14 : LENRLS + 18 ) dlsa % pdest = Rsav ( LENRLS + 19 ) dlsa % pdlast = Rsav ( LENRLS + 20 ) dlsa % ratio = Rsav ( LENRLS + 21 ) dlsa % pdnorm = Rsav ( LENRLS + 22 ) dlsa % insufr = Isav ( LENILS + 1 ) dlsa % insufi = Isav ( LENILS + 2 ) dlsa % ixpr = Isav ( LENILS + 3 ) dlsa % icount = Isav ( LENILS + 4 ) dlsa % irflag = Isav ( LENILS + 5 ) dlsa % jtyp = Isav ( LENILS + 6 ) dlsa % mused = Isav ( LENILS + 7 ) dlsa % mxordn = Isav ( LENILS + 8 ) dlsa % mxords = Isav ( LENILS + 9 ) ioff = LENRLS + 22 dlsr % alpha = Rsav ( ioff + 1 ) dlsr % x2 = Rsav ( ioff + 2 ) dlsr % t0 = Rsav ( ioff + 3 ) dlsr % tlast = Rsav ( ioff + 4 ) dlsr % toutc = Rsav ( ioff + 5 ) ioff = LENILS + 9 dlsr % lg0 = Isav ( ioff + 1 ) dlsr % lg1 = Isav ( ioff + 2 ) dlsr % lgx = Isav ( ioff + 3 ) dlsr % imax = Isav ( ioff + 4 ) dlsr % last = Isav ( ioff + 5 ) dlsr % irfnd = Isav ( ioff + 6 ) dlsr % itaskc = Isav ( ioff + 7 ) dlsr % ngc = Isav ( ioff + 8 ) dlsr % nge = Isav ( ioff + 9 ) call set_dls1_int ( Isav ( 1 : LENILS )) case default write ( * , * ) '<ERROR>*dsrcar* unknown value for JOB=' , job stop 1 end select end subroutine dsrcar","tags":"","loc":"sourcefile/dsrcar.inc.html"},{"title":"nnfc.inc – odepack","text":"Contents Subroutines nnfc Source Code nnfc.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !! nnfc(3f) - [M_odepack] numerical LDU-factorization of sparse nonsymmetric matrix !! !!### DESCRIPTION !!   numerical ldu-factorization of sparse nonsymmetric matrix and !!   solution of system of linear equations (compressed pointer !!   storage) !!```text !!       input variables..  n, r, c, ic, ia, ja, a, b, !!                          il, jl, ijl, lmax, iu, ju, iju, umax !!       output variables.. z, l, d, u, flag !!``` !!       parameters used internally.. !!```text !! nia   - irl,  - vectors used to find the rows of  l.  at the kth step !! nia   - jrl       of the factorization,  jrl(k)  points to the head !!       -           of a linked list in  jrl  of column indices j !!       -           such j .lt. k and  l(k,j)  is nonzero.  zero !!       -           indicates the end of the list.  irl(j)  (j.lt.k) !!       -           points to the smallest i such that i .ge. k and !!       -           l(i,j)  is nonzero. !!       -           size of each = n. !! fia   - row   - holds intermediate values in calculation of  u and l. !!       -           size = n. !! fia   - tmp   - holds new right-hand side  b*  for solution of the !!       -           equation ux = b*. !!       -           size = n. !!``` !! !!### internal variables.. !! !!    jmin, jmax - indices of the first and last positions in a row to !!      be examined. !! !!    sum - used in calculating  tmp. !! !----------------------------------------------------------------------- subroutine nnfc ( N , R , C , Ic , Ia , Ja , A , Z , B , Lmax , Il , Jl , Ijl , L , D , Umax , Iu , Ju , Iju , U , Row , Tmp , Irl , Jrl , Flag ) ! !      real  a(*), l(*), d(*), u(*), z(*), b(*), row(*) !      real tmp(*), lki, sum, dk integer , intent ( in ) :: N integer , intent ( in ) , dimension ( * ) :: R integer , intent ( in ) , dimension ( * ) :: C integer , intent ( in ) , dimension ( * ) :: Ic integer , intent ( in ) , dimension ( * ) :: Ia integer , intent ( in ) , dimension ( * ) :: Ja real ( kind = dp ) , intent ( in ) , dimension ( * ) :: A real ( kind = dp ) , intent ( out ) , dimension ( * ) :: Z real ( kind = dp ) , intent ( in ) , dimension ( * ) :: B integer , intent ( in ) :: Lmax integer , intent ( in ) , dimension ( * ) :: Il integer , intent ( in ) , dimension ( * ) :: Jl integer , intent ( in ) , dimension ( * ) :: Ijl real ( kind = dp ) , intent ( out ) , dimension ( * ) :: L real ( kind = dp ) , intent ( out ) , dimension ( * ) :: D integer , intent ( in ) :: Umax integer , intent ( in ) , dimension ( * ) :: Iu integer , intent ( in ) , dimension ( * ) :: Ju integer , intent ( in ) , dimension ( * ) :: Iju real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: U real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Row real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: Tmp integer , intent ( inout ) , dimension ( * ) :: Irl integer , intent ( inout ) , dimension ( * ) :: Jrl integer , intent ( out ) :: Flag ! real ( kind = dp ) :: dk , lki , sum integer :: i , i1 , i2 , ijlb , j , jmax , jmin , k , mu , rk ! !   ******  initialize pointers and test storage  *********************** if ( Il ( N + 1 ) - 1 > Lmax ) then ! !  ** error.. insufficient storage for l Flag = 4 * N + 1 return elseif ( Iu ( N + 1 ) - 1 > Umax ) then !  ** error.. insufficient storage for u Flag = 7 * N + 1 return else do k = 1 , N Irl ( k ) = Il ( k ) Jrl ( k ) = 0 enddo ! !   ******  for each row  *********************************************** do k = 1 , N !   ******  reverse jrl and zero row where kth row of l will fill in  *** Row ( k ) = 0 i1 = 0 if ( Jrl ( k ) /= 0 ) then i = Jrl ( k ) do i2 = Jrl ( i ) Jrl ( i ) = i1 i1 = i Row ( i ) = 0 i = i2 if ( i == 0 ) exit enddo endif !   ******  set row to zero where u will fill in  *********************** jmin = Iju ( k ) jmax = jmin + Iu ( k + 1 ) - Iu ( k ) - 1 if ( jmin <= jmax ) then do j = jmin , jmax Row ( Ju ( j )) = 0 enddo endif !   ******  place kth row of a in row  ********************************** rk = R ( k ) jmin = Ia ( rk ) jmax = Ia ( rk + 1 ) - 1 do j = jmin , jmax Row ( Ic ( Ja ( j ))) = A ( j ) enddo !   ******  initialize sum, and link through jrl  *********************** sum = B ( rk ) i = i1 if ( i /= 0 ) then !   ******  assign the kth row of l and adjust row, sum  **************** do lki = - Row ( i ) !   ******  if l is not required, then comment out the following line  ** L ( Irl ( i )) = - lki sum = sum + lki * Tmp ( i ) jmin = Iu ( i ) jmax = Iu ( i + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( i ) - jmin do j = jmin , jmax Row ( Ju ( mu + j )) = Row ( Ju ( mu + j )) + lki * U ( j ) enddo endif i = Jrl ( i ) if ( i == 0 ) exit enddo endif !   ******  assign kth row of u and diagonal d, set tmp(k)  ************* if ( Row ( k ) == 0.0D0 ) then !  ** error.. zero pivot Flag = 8 * N + k return else dk = 1.0D0 / Row ( k ) D ( k ) = dk Tmp ( k ) = sum * dk if ( k == N ) cycle jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax U ( j ) = Row ( Ju ( mu + j )) * dk enddo endif ! !   ******  update irl and jrl, keeping jrl in decreasing order  ******** i = i1 if ( i /= 0 ) then do Irl ( i ) = Irl ( i ) + 1 i1 = Jrl ( i ) if ( Irl ( i ) < Il ( i + 1 ) ) then ijlb = Irl ( i ) - Il ( i ) + Ijl ( i ) j = Jl ( ijlb ) do while ( i <= Jrl ( j ) ) j = Jrl ( j ) enddo Jrl ( i ) = Jrl ( j ) Jrl ( j ) = i endif i = i1 if ( i == 0 ) exit enddo endif endif if ( Irl ( k ) < Il ( k + 1 ) ) then j = Jl ( Ijl ( k )) Jrl ( k ) = Jrl ( j ) Jrl ( j ) = k endif enddo ! !   ******  solve  ux = tmp  by back substitution  ********************** k = N do i = 1 , N sum = Tmp ( k ) jmin = Iu ( k ) jmax = Iu ( k + 1 ) - 1 if ( jmin <= jmax ) then mu = Iju ( k ) - jmin do j = jmin , jmax sum = sum - U ( j ) * Tmp ( Ju ( mu + j )) enddo endif Tmp ( k ) = sum Z ( C ( k )) = sum k = k - 1 enddo Flag = 0 endif end subroutine nnfc","tags":"","loc":"sourcefile/nnfc.inc.html"},{"title":"dpjibt.inc – odepack","text":"Contents Subroutines dpjibt Source Code dpjibt.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DPJIBT is called by DSTODI to compute and process the matrix !! P = A - H*EL(1)*J, where J is an approximation to the Jacobian dr/dy, !! and r = g(t,y) - A(t,y)*s. !! !! Here J is computed by the user-supplied !! routine JAC if MITER = 1, or by finite differencing if MITER = 2. !! !! J is stored in WM, rescaled, and ADDA is called to generate P. !! !! P is then subjected to LU decomposition by DDECBT in preparation !! for later solution of linear systems with P as coefficient matrix. !! !! In addition to variables described previously, communication !! with DPJIBT uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! RTEM !! !! : work array of length N (ACOR in DSTODI). !! !! SAVR !! !! : array used for output only.  On output it contains the !! residual evaluated at current values of t and y. !! !! S !! !! : array containing predicted values of dy/dt (SAVF in DSTODI). !! !! WM !! !! : real work space for matrices.  On output it contains the !! LU decomposition of P. !! Storage of matrix elements starts at WM(3). !! WM also contains the following matrix-related data: !! WM(1) = SQRT(UROUND), used in numerical Jacobian increments. !! !! IWM !! !! : integer work space containing pivot information, starting at !! IWM(21).  IWM also contains block structure parameters !! MB = IWM(1) and NB = IWM(2). !! EL0 !! !! : EL(1) (input). !! !! IERPJ !! !! : output error flag. !!         = 0 if no trouble occurred, !!         = 1 if the P matrix was found to be unfactorable, !!         = IRES (= 2 or 3) if RES returned IRES = 2 or 3. !! !! JCUR !! !! : output flag = 1 to indicate that the Jacobian matrix !! (or approximation) is now current. !! !! This routine also uses the Common variables EL0, H, TN, UROUND, !! MITER, N, NFE, and NJE. !----------------------------------------------------------------------- subroutine dpjibt ( Neq , Y , Yh , Nyh , Ewt , Rtem , Savr , S , Wm , Iwm , res , jac , adda ) ! integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( in ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Rtem real ( kind = dp ), dimension ( * ) :: Savr real ( kind = dp ), dimension ( * ) :: S real ( kind = dp ), intent ( inout ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external :: res external :: jac external :: adda ! real ( kind = dp ) :: con , fac , hl0 , r , srur integer :: i , ier , iia , iib , iic , ipa , ipb , ipc , ires , j , j1 , j2 , k , k1 , lblox , lenp , lpb , lpc , mb , mbsq , mwid , nb ! dls1 % nje = dls1 % nje + 1 hl0 = dls1 % h * dls1 % el0 dls1 % ierpj = 0 dls1 % jcur = 1 mb = Iwm ( 1 ) nb = Iwm ( 2 ) mbsq = mb * mb lblox = mbsq * nb lpb = 3 + lblox lpc = lpb + lblox lenp = 3 * lblox if ( dls1 % miter == 2 ) then ! !  If MITER = 2, make 3*MB + 1 calls to RES to approximate J. ----------- ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then !  Error return for IRES = 2 or IRES = 3 return from RES. --------------- dls1 % ierpj = ires return else mwid = 3 * mb srur = Wm ( 1 ) do i = 1 , lenp Wm ( 2 + i ) = 0.0D0 enddo do k = 1 , 3 do j = 1 , mb !          Increment Y(I) for group of column indices, and call RES. ---- j1 = j + ( k - 1 ) * mb do i = j1 , dls1 % n , mwid r = max ( srur * abs ( Y ( i )), 0.01D0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do i = 1 , dls1 % n Rtem ( i ) = Rtem ( i ) - Savr ( i ) enddo k1 = k do i = j1 , dls1 % n , mwid !            Get Jacobian elements in column I (block-column K1). ------- Y ( i ) = Yh ( i , 1 ) r = max ( srur * abs ( Y ( i )), 0.01D0 / Ewt ( i )) fac = - hl0 / r !            Compute and load elements PA(*,J,K1). ---------------------- iia = i - j ipa = 2 + ( j - 1 ) * mb + ( k1 - 1 ) * mbsq do j2 = 1 , mb Wm ( ipa + j2 ) = Rtem ( iia + j2 ) * fac enddo if ( k1 > 1 ) then !            Compute and load elements PB(*,J,K1-1). -------------------- iib = iia - mb ipb = ipa + lblox - mbsq do j2 = 1 , mb Wm ( ipb + j2 ) = Rtem ( iib + j2 ) * fac enddo endif if ( k1 < nb ) then !            Compute and load elements PC(*,J,K1+1). -------------------- iic = iia + mb ipc = ipa + 2 * lblox + mbsq do j2 = 1 , mb Wm ( ipc + j2 ) = Rtem ( iic + j2 ) * fac enddo endif if ( k1 == 3 ) then !            Compute and load elements PC(*,J,1). ----------------------- ipc = ipa - 2 * mbsq + 2 * lblox do j2 = 1 , mb Wm ( ipc + j2 ) = Rtem ( j2 ) * fac enddo endif if ( k1 == nb - 2 ) then !            Compute and load elements PB(*,J,NB). ---------------------- iib = dls1 % n - mb ipb = ipa + 2 * mbsq + lblox do j2 = 1 , mb Wm ( ipb + j2 ) = Rtem ( iib + j2 ) * fac enddo endif k1 = k1 + 3 enddo endif enddo enddo !  RES call for first corrector iteration. ------------------------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return endif endif else !  If MITER = 1, call RES, then JAC, and multiply by scalar. ------------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc )) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endif endif !  Add matrix A. -------------------------------------------------------- call adda ( Neq , dls1 % tn , Y , mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc )) !  Do LU decomposition on P. -------------------------------------------- call ddecbt ( mb , nb , Wm ( 3 ), Wm ( lpb ), Wm ( lpc ), Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine dpjibt","tags":"","loc":"sourcefile/dpjibt.inc.html"},{"title":"dstodi.inc – odepack","text":"This file depends on sourcefile~~dstodi.inc~~EfferentGraph sourcefile~dstodi.inc dstodi.inc sourcefile~m_odepack.f90 M_odepack.f90 sourcefile~dstodi.inc->sourcefile~m_odepack.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Subroutines dstodi Source Code dstodi.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DSTODI performs one step of the integration of an initial value !! problem for a system of Ordinary Differential Equations. !! !! Note: DSTODI is independent of the value of the iteration method !! indicator MITER, and hence is independent !! of the type of chord method used, or the Jacobian structure. !! !! Communication with DSTODI is done with the following variables: !! !! NEQ !! !! : integer array containing problem size in NEQ(1), and !! passed as the NEQ argument in all calls to RES, ADDA, !! and JAC. !! !! Y !! !! : an array of length .ge. N used as the Y argument in !! all calls to RES, JAC, and ADDA. !! !! NEQ !! !! : integer array containing problem size in NEQ(1), and !! passed as the NEQ argument in all calls tO RES, G, ADDA, !! and JAC. !! !! YH !! !! : an NYH by LMAX array containing the dependent variables !! and their approximate scaled derivatives, where !! !! LMAX !! !! : MAXORD + 1.  YH(i,j+1) contains the approximate !! j-th derivative of y(i), scaled by H**j/factorial(j) !! (j = 0,1,...,NQ).  On entry for the first step, the first !! two columns of YH must be set from the initial values. !! !! NYH !! !! : a constant integer .ge. N, the first dimension of YH. !! !! YH1 !! !! : a one-dimensional array occupying the same space as YH. !! !! EWT !! !! : an array of length N containing multiplicative weights !! for local error measurements.  Local errors in y(i) are !! compared to 1.0/EWT(i) in various error tests. !! !! SAVF !! !! : an array of working storage, of length N. also used for !! input of YH(*,MAXORD+2) when JSTART = -1 and MAXORD is less !! than the current order NQ. !! Same as YDOTI in the driver. !! !! SAVR !! !! : an array of working storage, of length N. !! !! ACOR !! !! : a work array of length N used for the accumulated !! corrections. On a succesful return, ACOR(i) contains !! the estimated one-step local error in y(i). !! !! WM,IWM !! !! : real and integer work arrays associated with matrix !! operations in chord iteration. !! !! PJAC !! !! : name of routine to evaluate and preprocess Jacobian matrix. !! !! SLVS !! !! : name of routine to solve linear system in chord iteration. !! !! CCMAX !! !! : maximum relative change in H*EL0 before PJAC is called. !! !! H !! !! : the step size to be attempted on the next step. !! H is altered by the error control algorithm during the !! problem.  H can be either positive or negative, but its !! sign must remain constant throughout the problem. !! !! HMIN !! !! : the minimum absolute value of the step size H to be used. !! !! HMXI !! !! : inverse of the maximum absolute value of H to be used. !! HMXI = 0.0 is allowed and corresponds to an infinite HMAX. !! HMIN and HMXI may be changed at any time, but will not !! take effect until the next change of H is considered. !! !! TN !! !! : the independent variable. TN is updated on each step taken. !! !! JSTART !! !! : an integer used for input only, with the following !! values and meanings: !! !!               0  perform the first step. !!           .gt.0  take a new step continuing from the last. !!              -1  take the next step with a new value of H, MAXORD, !!                  N, METH, MITER, and/or matrix parameters. !!              -2  take the next step with a new value of H, !!                  but with other inputs unchanged. !!                  On return, JSTART is set to 1 to facilitate continuation. !! !! KFLAG !! !! : a completion code with the following meanings: !! !!               0  the step was succesful. !!              -1  the requested error could not be achieved. !!              -2  corrector convergence could not be achieved. !!              -3  RES ordered immediate return. !!              -4  error condition from RES could not be avoided. !!              -5  fatal error in PJAC or SLVS. !! !! A return with KFLAG = -1, -2, or -4 means either !! !! ABS(H) !! !! : HMIN or 10 consecutive failures occurred. !! !! On a return with KFLAG negative, the values of TN and !! the YH array are as of the beginning of the last !! step, and H is the last step size attempted. !! !! MAXORD !! !! : the maximum order of integration method to be allowed. !! !! MAXCOR !! !! : the maximum number of corrector iterations allowed. !! !! MSBP !! !! : maximum number of steps between PJAC calls. !! !! MXNCF !! !! : maximum number of convergence failures allowed. !! METH/MITER = the method flags.  See description in driver. !! !! N !! !! : the number of first-order differential equations. !----------------------------------------------------------------------- subroutine dstodi ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Savr , Acor , Wm , Iwm , res , adda , jac , pjac , slvs ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , dimension ( * ) :: Neq real ( kind = dp ), dimension ( * ) :: Y integer :: Nyh real ( kind = dp ), intent ( inout ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( inout ), dimension ( * ) :: Yh1 real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), dimension ( * ) :: Savf real ( kind = dp ), dimension ( * ) :: Savr real ( kind = dp ), intent ( inout ), dimension ( * ) :: Acor real ( kind = dp ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external res external adda external jac external pjac external slvs real ( kind = dp ) :: dcon , ddn , del , delp , dsm , dup , el1h , eljh , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , told integer :: i , i1 , iredo , ires , iret , j , jb , kgo , m , ncf , newq dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls1 % ipup = dls1 % miter iret = 3 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !  When RC differs from 1 by more than CCMAX, IPUP is set to MITER !  to force PJAC to be called. !  In any case, PJAC is called at least every MSBP steps. !----------------------------------------------------------------------- 400 continue if ( abs ( dls1 % rc - 1.0D0 ) > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by H and the !  error weight vector EWT.  The sum of the corrections is accumulated !  in ACOR(i).  The YH array is not altered in the corrector loop. !----------------------------------------------------------------------- 500 continue m = 0 do i = 1 , dls1 % n Savf ( i ) = Yh ( i , 2 ) / dls1 % h Y ( i ) = Yh ( i , 1 ) enddo if ( dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, the matrix P = A - H*EL(1)*dr/dy is reevaluated and !  preprocessed before starting the corrector iteration.  IPUP is set !  to 0 as an indicator that this has been done. !----------------------------------------------------------------------- call pjac ( Neq , Y , Yh , Nyh , Ewt , Acor , Savr , Savf , Wm , Iwm , res , jac , adda ) dls1 % ipup = 0 dls1 % rc = 1.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj == 0 ) goto 600 if ( dls1 % ierpj < 0 ) goto 800 ires = dls1 % ierpj select case ( ires ) case ( 1 , 3 ) goto 700 case ( 2 ) goto 800 case default endselect endif !  Get residual at predicted values, if not already done in PJAC. ------- ires = 1 call res ( Neq , dls1 % tn , Y , Savf , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 kgo = abs ( ires ) select case ( kgo ) case ( 2 ) goto 800 case ( 3 ) goto 700 case default endselect 600 continue do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo do !----------------------------------------------------------------------- !  Solve the linear system with the current residual as !  right-hand side and P as coefficient matrix. !----------------------------------------------------------------------- call slvs ( Wm , Iwm , Savr , Savf ) if ( dls1 % iersl < 0 ) exit if ( dls1 % iersl <= 0 ) then el1h = dls1 % el ( 1 ) * dls1 % h del = dvnorm ( dls1 % n , Savr , Ewt ) * abs ( dls1 % h ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Savr ( i ) Savf ( i ) = Acor ( i ) + Yh ( i , 2 ) / dls1 % h Y ( i ) = Yh ( i , 1 ) + el1h * Acor ( i ) enddo !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is stored in CRATE, and this is used in the test. !----------------------------------------------------------------------- if ( m /= 0 ) dls1 % crate = max ( 0.2D0 * dls1 % crate , del / delp ) dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / ( dls1 % tesco ( 2 , dls1 % nq ) * dls1 % conit ) if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 !  to signal that the Jacobian involved may need updating later. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = abs ( dls1 % h ) * dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.1 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 7 ) then dls1 % kflag = - 1 goto 1300 else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l eljh = dls1 % el ( j ) * dls1 % h do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + eljh * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  In the case of failure, RHUP = 0.0 to avoid an order increase. !  The largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = abs ( dls1 % h ) * dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then delp = del ires = 1 call res ( Neq , dls1 % tn , Y , Savf , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 kgo = abs ( ires ) select case ( kgo ) case ( 1 ) cycle case ( 2 ) goto 800 case default endselect endif endif endif endif !----------------------------------------------------------------------- !  The correctors failed to converge, or RES has returned abnormally. !  on a convergence failure, if the Jacobian is out of date, PJAC is !  called for the next try.  Otherwise the YH array is retracted to its !  values before prediction, and H is reduced, if possible. !  take an error exit if IRES = 2, or H cannot be reduced, or MXNCF !  failures have occurred, or a fatal error occurred in PJAC or SLVS. !----------------------------------------------------------------------- dls1 % icf = 1 if ( dls1 % jcur == 1 ) exit dls1 % ipup = dls1 % miter goto 500 enddo 700 continue dls1 % icf = 2 ncf = ncf + 1 dls1 % rmax = 2.0D0 800 continue dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( ires == 2 ) then dls1 % kflag = - 1 - ires elseif ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 5 else if ( abs ( dls1 % h ) > dls1 % hmin * 1.00001D0 ) then if ( ncf /= dls1 % mxncf ) then rh = 0.25D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif if ( ires == 3 ) then dls1 % kflag = - 1 - ires else dls1 % kflag = - 2 endif endif goto 1300 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % h * dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.1D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 !----------------------------------------------------------------------------------------------------------------------------------- 1200 continue r = dls1 % h / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstodi","tags":"","loc":"sourcefile/dstodi.inc.html"},{"title":"dewset.inc – odepack","text":"Contents Subroutines dewset Source Code dewset.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dewset(3f) - [M_odepack] Set error weight vector. !! !!### SYNOPSIS !!        subroutine dewset(N,Itol,Rtol,Atol,Ycur,Ewt) !!        integer,intent(in)        :: N !!        integer,intent(in)        :: Itol !!        real(kind=dp),intent(in)  :: Rtol(*) !!        real(kind=dp),intent(in)  :: Atol(*) !!        real(kind=dp),intent(in)  :: Ycur(N) !!        real(kind=dp),intent(out) :: Ewt(N) !! !!### DESCRIPTION !!  This subroutine sets the error weight vector EWT according to !! !!       EWT(i) = RTOL(i)*ABS(YCUR(i)) + ATOL(i),  i = 1,...,N, !! !!  with the subscript on RTOL and/or ATOL possibly replaced by 1 above, !!  depending on the value of ITOL. !! ! ### SUBSIDIARY ! ### PURPOSE  Set error weight vector. ! ### TYPE      DOUBLE PRECISION (SEWSET-S, DEWSET-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### DESCRIPTION ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890503  Minor cosmetic changes.  (FNF) !     19930809  Renamed to allow single/double precision versions. (ACH) !----------------------------------------------------------------------- subroutine dewset ( N , Itol , Rtol , Atol , Ycur , Ewt ) ! integer , intent ( in ) :: N integer , intent ( in ) :: Itol real ( kind = dp ), intent ( in ) :: Rtol ( * ) real ( kind = dp ), intent ( in ) :: Atol ( * ) real ( kind = dp ), intent ( in ) :: Ycur ( N ) real ( kind = dp ), intent ( out ) :: Ewt ( N ) ! integer :: i ! select case ( Itol ) case ( 2 ) do i = 1 , N Ewt ( i ) = Rtol ( 1 ) * abs ( Ycur ( i )) + Atol ( i ) enddo case ( 3 ) do i = 1 , N Ewt ( i ) = Rtol ( i ) * abs ( Ycur ( i )) + Atol ( 1 ) enddo case ( 4 ) do i = 1 , N Ewt ( i ) = Rtol ( i ) * abs ( Ycur ( i )) + Atol ( i ) enddo case default do i = 1 , N Ewt ( i ) = Rtol ( 1 ) * abs ( Ycur ( i )) + Atol ( 1 ) enddo endselect end subroutine dewset","tags":"","loc":"sourcefile/dewset.inc.html"},{"title":"daigbt.inc – odepack","text":"Contents Subroutines daigbt Source Code daigbt.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This subroutine computes the initial value !! of the vector YDOT satisfying !! !!      A * YDOT = g(t,y) !! !! when A is nonsingular.  It is called by DLSOIBT for !! initialization only, when ISTATE = 0 . !! DAIGBT returns an error flag IER: !! !!     IER  =  0  means DAIGBT was successful. !!     IER .ge. 2 means RES returned an error flag IRES = IER. !!     IER .lt. 0 means the A matrix was found to have a singular !!                diagonal block (hence YDOT could not be solved for). !! !----------------------------------------------------------------------- subroutine daigbt ( res , adda , Neq , T , Y , Ydot , Mb , Nb , Pw , Ipvt , Ier ) ! external res , adda integer :: Neq ( * ) real ( kind = dp ) :: T real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydot ( * ) integer , intent ( inout ) :: Mb integer , intent ( inout ) :: Nb real ( kind = dp ) :: Pw ( * ) integer :: Ipvt ( * ) integer , intent ( inout ) :: Ier integer :: i , lblox , lenpw , lpb , lpc ! lblox = Mb * Mb * Nb lpb = 1 + lblox lpc = lpb + lblox lenpw = 3 * lblox do i = 1 , lenpw Pw ( i ) = 0.0D0 enddo Ier = 1 call res ( Neq , T , Y , Pw , Ydot , Ier ) if ( Ier > 1 ) return call adda ( Neq , T , Y , Mb , Nb , Pw ( 1 ), Pw ( lpb ), Pw ( lpc )) call ddecbt ( Mb , Nb , Pw , Pw ( lpb ), Pw ( lpc ), Ipvt , Ier ) if ( Ier == 0 ) then call dsolbt ( Mb , Nb , Pw , Pw ( lpb ), Pw ( lpc ), Ydot , Ipvt ) return endif Ier = - Ier end subroutine daigbt","tags":"","loc":"sourcefile/daigbt.inc.html"},{"title":"drchek.inc – odepack","text":"Contents Subroutines drchek Source Code drchek.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine checks for the presence of a root in the vicinity of !! the current T, in a manner depending on the input flag JOB.  It calls !! Subroutine DROOTS to locate the root as precisely as possible. !! !! In addition to variables described previously, DRCHEK !! uses the following for communication: !! !! JOB !! !! : integer flag indicating type of call: !! !!  JOB | Description !!  --- | ---------------------------------------------------------- !!   1  | means the problem is being initialized, and DRCHEK !!      | is to look for a root at or very near the initial T. !!      ! !!   2  | means a continuation call to the solver was just !!      | made, and DRCHEK is to check for a root in the !!      | relevant part of the step dlsr taken. !!      ! !!   3  | means a successful step was just taken, and DRCHEK !!      | is to look for a root in the interval of the step. !! !! G0 !! !! : array of length NG, containing the value of g at T = T0. !! G0 is input for JOB .ge. 2, and output in all cases. !! !! G1,GX !! !! : arrays of length NG for work space. !! !! IRT !! !! : completion flag: !! !!  IRT | Description !!  --- | ---------------------------------------------------------- !!   0  | means no root was found. !!  -1  | means JOB = 1 and a root was found too near to T. !!   1  | means a legitimate root was found (JOB = 2 or 3). !! !! On return, T0 is the root location, and Y is the !! corresponding solution vector. !! !! T0 !! !! : value of T at one endpoint of interval of interest.  Only !! roots beyond T0 in the direction of integration are sought. !! !! T0 is input if JOB .ge. 2, and output in all cases. !! !! T0 is updated by DRCHEK, whether a root is found or not. !! !! TLAST !! !! : dlsr value of T returned by the solver (input only). !! !! TOUTC !! !! : copy of TOUT (input only). !! !! IRFND !! !! : input flag showing whether the dlsr step taken had a root. !! IRFND = 1 if it did, = 0 if not. !! !! ITASKC !! !! : copy of ITASK (input only). !! !! NGC !! !! : copy of NG (input only). !----------------------------------------------------------------------- subroutine drchek ( Job , g_sub , Neq , Y , Yh , Nyh , G0 , G1 , Gx , Jroot , Irt ) ! integer , intent ( in ) :: Job external g_sub integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ) :: Yh ( Nyh , * ) real ( kind = dp ) :: G0 ( * ) real ( kind = dp ) :: G1 ( * ) real ( kind = dp ) :: Gx ( * ) integer :: Jroot ( * ) integer , intent ( out ) :: Irt real ( kind = dp ) :: hming , t1 , temp1 , temp2 , x integer :: i , iflag , jflag logical :: zroot Irt = 0 do i = 1 , dlsr % ngc Jroot ( i ) = 0 enddo hming = ( abs ( dls1 % tn ) + abs ( dls1 % h )) * dls1 % uround * 10 0.0D0 select case ( Job ) case ( 2 ) if ( dlsr % irfnd /= 0 ) then !  If a root was found on the previous step, evaluate G0 = g(T0). ------- call dintdy ( dlsr % t0 , 0 , Yh , Nyh , Y , iflag ) call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = dlsr % nge + 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) zroot = . true . enddo if ( zroot ) then !  g has a zero at T0.  Look at g at T + (small increment). ------------- temp1 = sign ( hming , dls1 % h ) dlsr % t0 = dlsr % t0 + temp1 if ( ( dlsr % t0 - dls1 % tn ) * dls1 % h < 0.0D0 ) then call dintdy ( dlsr % t0 , 0 , Yh , Nyh , Y , iflag ) else temp2 = temp1 / dls1 % h do i = 1 , dls1 % n Y ( i ) = Y ( i ) + temp2 * Yh ( i , 2 ) enddo endif call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = dlsr % nge + 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) then Jroot ( i ) = 1 zroot = . true . endif enddo if ( zroot ) then !  g has a zero at T0 and also close to T0.  Return root. --------------- Irt = 1 return endif endif endif !  G0 has no zero components.  Proceed to check relevant interval. ------ if ( dls1 % tn == dlsr % tlast ) then return endif case ( 3 ) case default ! !  Evaluate g at initial T, and check for zero values. ------------------ dlsr % t0 = dls1 % tn call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) zroot = . true . enddo if ( zroot ) then !  g has a zero at T.  Look at g at T + (small increment). -------------- temp2 = max ( hming / abs ( dls1 % h ), 0.1D0 ) temp1 = temp2 * dls1 % h dlsr % t0 = dlsr % t0 + temp1 do i = 1 , dls1 % n Y ( i ) = Y ( i ) + temp2 * Yh ( i , 2 ) enddo call g_sub ( Neq , dlsr % t0 , Y , dlsr % ngc , G0 ) dlsr % nge = dlsr % nge + 1 zroot = . false . do i = 1 , dlsr % ngc if ( abs ( G0 ( i )) <= 0.0D0 ) zroot = . true . enddo if ( zroot ) then !  g has a zero at T and also close to T.  Take error return. ----------- Irt = - 1 return endif endif return endselect ! !  Set T1 to TN or TOUTC, whichever comes first, and get g at T1. ------- if ( dlsr % itaskc /= 2 . and . dlsr % itaskc /= 3 . and . dlsr % itaskc /= 5 ) then if ( ( dlsr % toutc - dls1 % tn ) * dls1 % h < 0.0D0 ) then t1 = dlsr % toutc if ( ( t1 - dlsr % t0 ) * dls1 % h <= 0.0D0 ) then return endif call dintdy ( t1 , 0 , Yh , Nyh , Y , iflag ) endif t1 = dls1 % tn do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo endif call g_sub ( Neq , t1 , Y , dlsr % ngc , G1 ) dlsr % nge = dlsr % nge + 1 !  Call DROOTS to search for root in interval from T0 to T1. ------------ jflag = 0 do call droots ( dlsr % ngc , hming , jflag , dlsr % t0 , t1 , G0 , G1 , Gx , x , Jroot ) if ( jflag > 1 ) then dlsr % t0 = x !X!call dcopy(dlsr%ngc,Gx,1,G0,1) G0 ( 1 : dlsr % ngc ) = Gx ( 1 : dlsr % ngc ) if ( jflag /= 4 ) exit return else call dintdy ( x , 0 , Yh , Nyh , Y , iflag ) call g_sub ( Neq , x , Y , dlsr % ngc , Gx ) dlsr % nge = dlsr % nge + 1 endif enddo !  Found a root.  Interpolate to X and return. -------------------------- call dintdy ( x , 0 , Yh , Nyh , Y , iflag ) Irt = 1 end subroutine drchek","tags":"","loc":"sourcefile/drchek.inc.html"},{"title":"dintdy.inc – odepack","text":"Contents Subroutines dintdy Source Code dintdy.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! !!### DESCRIPTION !!  DINTDY computes interpolated values of the K-th derivative of the !!  dependent variable vector y, and stores it in DKY.  This routine !!  is called within the package with K = 0 and T = TOUT, but may !!  also be called by the user for any K up to the current order. !!  (See detailed instructions in the usage documentation.) !! !!  The computed values in DKY are gotten by interpolation using the !!  Nordsieck history array YH.  This array corresponds uniquely to a !!  vector-valued polynomial of degree NQCUR or less, and DKY is set !!  to the K-th derivative of this polynomial at T. !!  The formula for DKY is: !!```text !!               q !!   DKY(i)  =  sum  c(j,K) * (T - tn)**(j-K) * h**(-j) * YH(i,j+1) !!              j=K !!``` !!  where  c(j,K) = j*(j-1)*...*(j-K+1), q = NQCUR, tn = TCUR, h = HCUR. !! !!  The quantities  nq = NQCUR, l = nq+1, N = NEQ, tn, and h are !!  communicated by COMMON.  The above sum is done in reverse order. !!  IFLAG is returned negative if either K or T is out of bounds. !! ! ### SUBSIDIARY ! ### PURPOSE  Interpolate solution derivatives. ! ### TYPE      DOUBLE PRECISION (SINTDY-S, DINTDY-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  XERRWD ! ### COMMON BLOCKS    DLS001 ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890503  Minor cosmetic changes.  (FNF) !     19930809  Renamed to allow single/double precision versions. (ACH) !     20010418  Reduced size of Common block /DLS001/. (ACH) !     20031105  Restored 'own' variables to Common block /DLS001/, to !               enable interrupt/restart feature. (ACH) !     20050427  Corrected roundoff decrement in TP. (ACH) !----------------------------------------------------------------------- subroutine dintdy ( T , K , Yh , Nyh , Dky , Iflag ) ! real ( kind = dp ) :: T integer :: K integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ), intent ( inout ) :: Dky ( * ) integer , intent ( out ) :: Iflag ! real ( kind = dp ) :: c , r , s , tp integer :: i , ic , j , jb , jb2 , jj , jj1 , jp1 character ( len = 80 ) :: msg ! Iflag = 0 if ( K < 0 . or . K > dls1 % nq ) then msg = 'DINTDY-  K (=I1) illegal      ' call xerrwd ( msg , 30 , 51 , 0 , 1 , K , 0 , 0 , 0.0D0 , 0.0D0 ) Iflag = - 1 return endif tp = dls1 % tn - dls1 % hu - 10 0.0D0 * dls1 % uround * sign ( abs ( dls1 % tn ) + abs ( dls1 % hu ), dls1 % hu ) if ( ( T - tp ) * ( T - dls1 % tn ) > 0.0D0 ) then msg = 'DINTDY-  T (=R1) illegal      ' call xerrwd ( msg , 30 , 52 , 0 , 0 , 0 , 0 , 1 , T , 0.0D0 ) msg = '      T not in interval TCUR - HU (= R1) to TCUR (=R2)      ' call xerrwd ( msg , 60 , 52 , 0 , 0 , 0 , 0 , 2 , tp , dls1 % tn ) Iflag = - 2 return endif ! s = ( T - dls1 % tn ) / dls1 % h ic = 1 if ( K /= 0 ) then jj1 = dls1 % l - K do jj = jj1 , dls1 % nq ic = ic * jj enddo endif c = ic do i = 1 , dls1 % n Dky ( i ) = c * Yh ( i , dls1 % l ) enddo if ( K /= dls1 % nq ) then jb2 = dls1 % nq - K do jb = 1 , jb2 j = dls1 % nq - jb jp1 = j + 1 ic = 1 if ( K /= 0 ) then jj1 = jp1 - K do jj = jj1 , j ic = ic * jj enddo endif c = ic do i = 1 , dls1 % n Dky ( i ) = c * Yh ( i , jp1 ) + s * Dky ( i ) enddo enddo if ( K == 0 ) return endif r = dls1 % h ** ( - K ) do i = 1 , dls1 % n Dky ( i ) = r * Dky ( i ) enddo end subroutine dintdy","tags":"","loc":"sourcefile/dintdy.inc.html"},{"title":"dheqr.inc – odepack","text":"Contents Subroutines dheqr Source Code dheqr.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!   This routine performs a QR decomposition of an upper !!   Hessenberg matrix A.  There are two options available: !! !!          (1)  performing a fresh decomposition !!          (2)  updating the QR factors by adding a row and a !!               column to the matrix A. !! !!   DHEQR decomposes an upper Hessenberg matrix by using Givens !!   rotations. !! !!### On entry !! !!        A       DOUBLE PRECISION(LDA, N) !!                the matrix to be decomposed. !! !!        LDA     INTEGER !!                the leading dimension of the array  A . !! !!        N       INTEGER !!                A is an (N+1) by N Hessenberg matrix. !! !!        IJOB    INTEGER !!                = 1     means that a fresh decomposition of the !!                        matrix A is desired. !!                .ge. 2  means that the current decomposition of A !!                        will be updated by the addition of a row !!                        and a column. !!### On return !! !!        A       the upper triangular matrix R. !!                The factorization can be written Q*A = R, where !!                Q is a product of Givens rotations and R is upper !!                triangular. !! !!        Q       DOUBLE PRECISION(2*N) !!                the factors c and s of each Givens rotation used !!                in decomposing A. !! !!        INFO    INTEGER !!                = 0  normal value. !!                = k  if  A(k,k) .eq. 0.0 .  This is not an error !!                     condition for this subroutine, but it does !!                     indicate that DHELS will divide by zero !!                     if called. !! !----------------------------------------------------------------------- !    Modification of LINPACK, by Peter Brown, LLNL. !    Written 1/13/86.  This version dated 6/20/01. !----------------------------------------------------------------------- subroutine dheqr ( A , Lda , N , Q , Info , Ijob ) ! integer , intent ( in ) :: Lda real ( kind = dp ), intent ( inout ) :: A ( Lda , * ) integer , intent ( in ) :: N real ( kind = dp ), intent ( inout ) :: Q ( * ) integer , intent ( out ) :: Info integer , intent ( in ) :: Ijob ! real ( kind = dp ) :: c , s , t , t1 , t2 integer :: i , iq , j , k , km1 , kp1 , nm1 ! if ( Ijob > 1 ) then ! !  The old factorization of A will be updated.  A row and a column !  has been added to the matrix A. !  N by N-1 is now the old size of the matrix. ! nm1 = N - 1 ! !  Multiply the new column by the N previous Givens rotations. ! do k = 1 , nm1 i = 2 * ( k - 1 ) + 1 t1 = A ( k , N ) t2 = A ( k + 1 , N ) c = Q ( i ) s = Q ( i + 1 ) A ( k , N ) = c * t1 - s * t2 A ( k + 1 , N ) = s * t1 + c * t2 enddo ! !  Complete update of decomposition by forming last Givens rotation, !  and multiplying it times the column vector (A(N,N), A(N+1,N)). ! Info = 0 t1 = A ( N , N ) t2 = A ( N + 1 , N ) if ( t2 == 0.0D0 ) then c = 1.0D0 s = 0.0D0 elseif ( abs ( t2 ) < abs ( t1 ) ) then t = t2 / t1 c = 1.0D0 / sqrt ( 1.0D0 + t * t ) s = - c * t else t = t1 / t2 s = - 1.0D0 / sqrt ( 1.0D0 + t * t ) c = - s * t endif iq = 2 * N - 1 Q ( iq ) = c Q ( iq + 1 ) = s A ( N , N ) = c * t1 - s * t2 if ( A ( N , N ) == 0.0D0 ) Info = N else ! !  A new facorization is desired. ! !      QR decomposition without pivoting ! Info = 0 do k = 1 , N km1 = k - 1 kp1 = k + 1 ! !            Compute kth column of R. !            First, multiply the kth column of A by the previous !            k-1 Givens rotations. ! if ( km1 >= 1 ) then do j = 1 , km1 i = 2 * ( j - 1 ) + 1 t1 = A ( j , k ) t2 = A ( j + 1 , k ) c = Q ( i ) s = Q ( i + 1 ) A ( j , k ) = c * t1 - s * t2 A ( j + 1 , k ) = s * t1 + c * t2 enddo endif ! !            Compute Givens components c and s ! iq = 2 * km1 + 1 t1 = A ( k , k ) t2 = A ( kp1 , k ) if ( t2 == 0.0D0 ) then c = 1.0D0 s = 0.0D0 elseif ( abs ( t2 ) < abs ( t1 ) ) then t = t2 / t1 c = 1.0D0 / sqrt ( 1.0D0 + t * t ) s = - c * t else t = t1 / t2 s = - 1.0D0 / sqrt ( 1.0D0 + t * t ) c = - s * t endif Q ( iq ) = c Q ( iq + 1 ) = s A ( k , k ) = c * t1 - s * t2 if ( A ( k , k ) == 0.0D0 ) Info = k enddo return endif end subroutine dheqr","tags":"","loc":"sourcefile/dheqr.inc.html"},{"title":"dmnorm.inc – odepack","text":"Contents Functions dmnorm Source Code dmnorm.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This function routine computes the weighted max-norm !! of the vector of length N contained in the array V, with weights !! contained in the array w of length N: !!   DMNORM = MAX(i=1,...,N) ABS(V(i))*W(i) !----------------------------------------------------------------------- pure function dmnorm ( n , v , w ) integer , intent ( in ) :: n real ( kind = dp ), intent ( in ) :: v ( n ) real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dmnorm integer :: i real ( kind = dp ) :: vm vm = 0.0d0 do i = 1 , n vm = max ( vm , abs ( v ( i )) * w ( i )) enddo dmnorm = vm end function dmnorm","tags":"","loc":"sourcefile/dmnorm.inc.html"},{"title":"dprep.inc – odepack","text":"This file depends on sourcefile~~dprep.inc~~EfferentGraph sourcefile~dprep.inc dprep.inc sourcefile~m_odepack.f90 M_odepack.f90 sourcefile~dprep.inc->sourcefile~m_odepack.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Subroutines dprep Source Code dprep.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine performs preprocessing related to the sparse linear !! systems that must be solved if MITER = 1 or 2. !! !! The operations that are performed here are: !! !!  * compute sparseness structure of Jacobian according to MOSS, !!  * compute grouping of column indices (MITER = 2), !!  * compute a new ordering of rows and columns of the matrix, !!  * reorder JA corresponding to the new ordering, !!  * perform a symbolic LU factorization of the matrix, and !!  * set pointers for segments of the IWK/WK array. !! !! In addition to variables described previously, DPREP uses the !! following for communication: !! !! YH !! !! : the history array.  Only the first column, containing the !! current Y vector, is used.  Used only if MOSS .ne. 0. !! !! SAVF !! !! : a work array of length NEQ, used only if MOSS .ne. 0. !! !! EWT !! !! : array of length NEQ containing (inverted) error weights. !! Used only if MOSS = 2 or if ISTATE = MOSS = 1. !! !! FTEM !! !! : a work array of length NEQ, identical to ACOR in the driver, !! used only if MOSS = 2. !! !! WK !! !! : a real work array of length LENWK, identical to WM in !! the driver. !! !! IWK !! !! : integer work array, assumed to occupy the same space as WK. !! !! LENWK !! !! : the length of the work arrays WK and IWK. !! !! ISTATC !! !! : a copy of the driver input argument ISTATE (= 1 on the !! first call, = 3 on a continuation call). !! !! IYS !! !! : flag value from ODRV or CDRV. !! !! IPPER !! !! : output error flag with the following values and meanings: !!          0  no error. !!         -1  insufficient storage for internal structure pointers. !!         -2  insufficient storage for JGROUP. !!         -3  insufficient storage for ODRV. !!         -4  other error flag from ODRV (should never occur). !!         -5  insufficient storage for CDRV. !!         -6  other error flag from CDRV. !----------------------------------------------------------------------- subroutine dprep ( Neq , Y , Yh , Savf , Ewt , Ftem , Ia , Ja , Wk , Iwk , Ipper , f , jac ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) real ( kind = dp ), intent ( in ) :: Yh ( * ) real ( kind = dp ), intent ( inout ) :: Savf ( * ) real ( kind = dp ), intent ( in ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) real ( kind = dp ) :: Wk ( * ) integer , intent ( inout ) :: Iwk ( * ) integer , intent ( out ) :: Ipper external :: f external :: jac real ( kind = dp ) :: dq , dyj , erwt , fac , yj integer :: i , ibr , ier , ipil , ipiu , iptt1 , iptt2 , j , jfound , k , kmax , kmin , knew , ldif , lenigp , liwk , maxg , np1 , nzsut dlss % ibian = dlss % lrat * 2 dlss % ipian = dlss % ibian + 1 np1 = dls1 % n + 1 dlss % ipjan = dlss % ipian + np1 dlss % ibjan = dlss % ipjan - 1 liwk = dlss % lenwk * dlss % lrat if ( dlss % ipjan + dls1 % n - 1 > liwk ) then call wrapup400 () return endif if ( dlss % moss /= 0 ) then ! if ( dlss % istatc /= 3 ) then !  ISTATE = 1 and MOSS .ne. 0.  Perturb Y for structure determination. -- do i = 1 , dls1 % n erwt = 1.0D0 / Ewt ( i ) fac = 1.0D0 + 1.0D0 / ( i + 1.0D0 ) Y ( i ) = Y ( i ) + fac * sign ( erwt , Y ( i )) enddo if ( dlss % moss == 1 ) goto 100 if ( dlss % moss == 2 ) goto 200 endif ! !  ISTATE = 3 and MOSS .ne. 0.  Load Y from YH(*,1). -------------------- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) enddo if ( dlss % moss == 1 ) goto 100 if ( dlss % moss == 2 ) goto 200 endif ! !  MOSS = 0.  Process user's IA,JA.  Add diagonal entries if necessary. - knew = dlss % ipjan kmin = Ia ( 1 ) Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n jfound = 0 kmax = Ia ( j + 1 ) - 1 if ( kmin <= kmax ) then do k = kmin , kmax i = Ja ( k ) if ( i == j ) jfound = 1 if ( knew > liwk ) then call wrapup400 () return endif Iwk ( knew ) = i knew = knew + 1 enddo if ( jfound == 1 ) goto 50 endif if ( knew > liwk ) then call wrapup400 () return endif Iwk ( knew ) = j knew = knew + 1 50 continue Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan kmin = kmax + 1 enddo goto 300 ! !  MOSS = 1.  Compute structure from user-supplied Jacobian routine JAC. !  A dummy call to F allows user to create temporaries for use in JAC. -- 100 continue call f ( Neq , dls1 % tn , Y , Savf ) k = dlss % ipjan Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = j k = k + 1 do i = 1 , dls1 % n Savf ( i ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Savf ) do i = 1 , dls1 % n if ( abs ( Savf ( i )) > dlss % seth ) then if ( i /= j ) then if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = i k = k + 1 endif endif enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo goto 300 ! !  MOSS = 2.  Compute structure from results of N + 1 calls to F. ------- 200 continue k = dlss % ipjan Iwk ( dlss % ipian ) = 1 call f ( Neq , dls1 % tn , Y , Savf ) do j = 1 , dls1 % n if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = j k = k + 1 yj = Y ( j ) erwt = 1.0D0 / Ewt ( j ) dyj = sign ( erwt , yj ) Y ( j ) = yj + dyj call f ( Neq , dls1 % tn , Y , Ftem ) Y ( j ) = yj do i = 1 , dls1 % n dq = ( Ftem ( i ) - Savf ( i )) / dyj if ( abs ( dq ) > dlss % seth ) then if ( i /= j ) then if ( k > liwk ) then call wrapup400 () return endif Iwk ( k ) = i k = k + 1 endif endif enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo ! 300 continue if ( dlss % moss /= 0 . and . dlss % istatc == 1 ) then !  If ISTATE = 1 and MOSS .ne. 0, restore Y from YH. -------------------- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) enddo endif dlss % nnz = Iwk ( dlss % ipian + dls1 % n ) - 1 lenigp = 0 dlss % ipigp = dlss % ipjan + dlss % nnz if ( dls1 % miter == 2 ) then ! !  Compute grouping of column indices (MITER = 2). ---------------------- maxg = np1 dlss % ipjgp = dlss % ipjan + dlss % nnz dlss % ibjgp = dlss % ipjgp - 1 dlss % ipigp = dlss % ipjgp + dls1 % n iptt1 = dlss % ipigp + np1 iptt2 = iptt1 + dls1 % n dlss % lreq = iptt2 + dls1 % n - 1 if ( dlss % lreq > liwk ) then call wrapup500 () return endif call jgroup ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), maxg , dlss % ngp , Iwk ( dlss % ipigp ), Iwk ( dlss % ipjgp ), Iwk ( iptt1 ), Iwk ( iptt2 ), ier ) if ( ier /= 0 ) then call wrapup500 () return endif lenigp = dlss % ngp + 1 endif ! !  Compute new ordering of rows/columns of Jacobian. -------------------- dlss % ipr = dlss % ipigp + lenigp dlss % ipc = dlss % ipr dlss % ipic = dlss % ipc + dls1 % n dlss % ipisp = dlss % ipic + dls1 % n dlss % iprsp = ( dlss % ipisp - 2 ) / dlss % lrat + 2 dlss % iesp = dlss % lenwk + 1 - dlss % iprsp if ( dlss % iesp < 0 ) then call wrapup600 () return endif ibr = dlss % ipr - 1 do i = 1 , dls1 % n Iwk ( ibr + i ) = i enddo dlss % nsp = liwk + 1 - dlss % ipisp call odrv ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk , Iwk ( dlss % ipr ), Iwk ( dlss % ipic ), dlss % nsp , Iwk ( dlss % ipisp ), 1 , dlss % iys ) if ( dlss % iys == 11 * dls1 % n + 1 ) then ! Ipper = - 4 return else if ( dlss % iys /= 0 ) then call wrapup600 () return endif ! !  Reorder JAN and do symbolic LU factorization of matrix. -------------- dlss % ipa = dlss % lenwk + 1 - dlss % nnz dlss % nsp = dlss % ipa - dlss % iprsp dlss % lreq = max ( 12 * dls1 % n / dlss % lrat , 6 * dls1 % n / dlss % lrat + 2 * dls1 % n + dlss % nnz ) + 3 dlss % lreq = dlss % lreq + dlss % iprsp - 1 + dlss % nnz if ( dlss % lreq > dlss % lenwk ) then call wrapup700 () return endif dlss % iba = dlss % ipa - 1 do i = 1 , dlss % nnz Wk ( dlss % iba + i ) = 0.0D0 enddo dlss % ipisp = dlss % lrat * ( dlss % iprsp - 1 ) + 1 call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), & & Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Wk ( dlss % ipa ), & & Wk ( dlss % ipa ), dlss % nsp , Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 5 , dlss % iys ) dlss % lreq = dlss % lenwk - dlss % iesp if ( dlss % iys == 10 * dls1 % n + 1 ) then call wrapup700 () return endif if ( dlss % iys /= 0 ) then ! Ipper = - 6 dlss % lreq = dlss % lenwk return else ipil = dlss % ipisp ipiu = ipil + 2 * dls1 % n + 1 dlss % nzu = Iwk ( ipil + dls1 % n ) - Iwk ( ipil ) dlss % nzl = Iwk ( ipiu + dls1 % n ) - Iwk ( ipiu ) if ( dlss % lrat <= 1 ) then call adjlr ( dls1 % n , Iwk ( dlss % ipisp ), ldif ) dlss % lreq = dlss % lreq + ldif endif if ( dlss % lrat == 2 . and . dlss % nnz == dls1 % n ) dlss % lreq = dlss % lreq + 1 dlss % nsp = dlss % nsp + dlss % lreq - dlss % lenwk dlss % ipa = dlss % lreq + 1 - dlss % nnz dlss % iba = dlss % ipa - 1 Ipper = 0 return endif endif contains subroutine wrapup400 () Ipper = - 1 dlss % lreq = 2 + ( 2 * dls1 % n + 1 ) / dlss % lrat dlss % lreq = max ( dlss % lenwk + 1 , dlss % lreq ) end subroutine wrapup400 subroutine wrapup500 () Ipper = - 2 dlss % lreq = ( dlss % lreq - 1 ) / dlss % lrat + 1 end subroutine wrapup500 subroutine wrapup600 () Ipper = - 3 call cntnzu ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), nzsut ) dlss % lreq = dlss % lenwk - dlss % iesp + ( 3 * dls1 % n + 4 * nzsut - 1 ) / dlss % lrat + 1 end subroutine wrapup600 subroutine wrapup700 () Ipper = - 5 end subroutine wrapup700 end subroutine dprep","tags":"","loc":"sourcefile/dprep.inc.html"},{"title":"dbnorm.inc – odepack","text":"Contents Functions dbnorm Source Code dbnorm.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This function computes the norm of a banded N by N matrix, !! stored in the array A, that is consistent with the weighted max-norm !! on vectors, with weights stored in the array W. !! ML and MU are the lower and upper half-bandwidths of the matrix. !! NRA is the first dimension of the A array, NRA .ge. ML+MU+1. !! In terms of the matrix elements a(i,j), the norm is given by: !! !!     DBNORM = MAX(i=1,...,N) ( W(i) * Sum(j=1,...,N) ABS(a(i,j))/W(j) ) !! !----------------------------------------------------------------------- pure function dbnorm ( n , a , nra , ml , mu , w ) integer , intent ( in ) :: n integer , intent ( in ) :: nra real ( kind = dp ), intent ( in ) :: a ( nra , n ) integer , intent ( in ) :: ml integer , intent ( in ) :: mu real ( kind = dp ), intent ( in ) :: w ( n ) real ( kind = dp ) :: dbnorm integer :: i , i1 , jlo , jhi , j real ( kind = dp ) :: an , sum an = 0.0d0 do i = 1 , n sum = 0.0d0 i1 = i + mu + 1 jlo = max ( i - ml , 1 ) jhi = min ( i + mu , n ) do j = jlo , jhi sum = sum + abs ( a ( i1 - j , j )) / w ( j ) enddo an = max ( an , sum * w ( i )) enddo dbnorm = an end function dbnorm","tags":"","loc":"sourcefile/dbnorm.inc.html"},{"title":"odrv.inc – odepack","text":"Contents Subroutines odrv Source Code odrv.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### Name !!  odrv(3f) [M_odepack] - driver for sparse matrix reordering routines !! !!### Description !! !!   odrv finds a minimum degree ordering of the rows and columns !!   of a matrix m stored in (ia,ja,a) format (see below).  for the !!   reordered matrix, the work and storage required to perform !!   gaussian elimination is (usually) significantly less. !! !!   note.. odrv and its subordinate routines have been modified to !!   compute orderings for general matrices, not necessarily having any !!   symmetry.  the miminum degree ordering is computed for the !!   structure of the symmetric matrix  m + m-transpose. !!   modifications to the original odrv module have been made in !!   the coding in subroutine mdi, and in the initial comments in !!   subroutines odrv and md. !! !!   if only the nonzero entries in the upper triangle of m are being !!   stored, then odrv symmetrically reorders (ia,ja,a), (optionally) !!   with the diagonal entries placed first in each row.  this is to !!   ensure that if m(i,j) will be in the upper triangle of m with !!   respect to the new ordering, then m(i,j) is stored in row i (and !!   thus m(j,i) is not stored),  whereas if m(i,j) will be in the !!   strict lower triangle of m, then m(j,i) is stored in row j (and !!   thus m(i,j) is not stored). !! !! !!### storage of sparse matrices !! !!   the nonzero entries of the matrix m are stored row-by-row in the !!   array a.  to identify the individual nonzero entries in each row, !!   we need to know in which column each entry lies.  these column !!   indices are stored in the array ja.  i.e., if  a(k) = m(i,j),  then !!   ja(k) = j.  to identify the individual rows, we need to know where !!   each row starts.  these row pointers are stored in the array ia. !!   i.e., if m(i,j) is the first nonzero entry (stored) in the i-th row !!   and  a(k) = m(i,j),  then  ia(i) = k.  moreover, ia(n+1) points to !!   the first location following the last element in the last row. !!   thus, the number of entries in the i-th row is  ia(i+1) - ia(i), !!   the nonzero entries in the i-th row are stored consecutively in !!```text !!            a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), !!``` !!   and the corresponding column indices are stored consecutively in !!```text !!            ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). !!``` !!   when the coefficient matrix is symmetric, only the nonzero entries !!   in the upper triangle need be stored.  for example, the matrix !!```text !!             ( 1  0  2  3  0 ) !!             ( 0  4  0  0  0 ) !!         m = ( 2  0  5  6  0 ) !!             ( 3  0  6  7  8 ) !!             ( 0  0  0  8  9 ) !!``` !!   could be stored as !!```text !!            - 1  2  3  4  5  6  7  8  9 10 11 12 13 !!         ---+-------------------------------------- !!         ia - 1  4  5  8 12 14 !!         ja - 1  3  4  2  1  3  4  1  3  4  5  4  5 !!          a - 1  2  3  4  2  5  6  3  6  7  8  8  9 !!``` !!   or (symmetrically) as !!```text !!            - 1  2  3  4  5  6  7  8  9 !!         ---+-------------------------- !!         ia - 1  4  5  7  9 10 !!         ja - 1  3  4  2  3  4  4  5  5 !!          a - 1  2  3  4  5  6  7  8  9          . !!``` !! !!### parameters !!```text !!    n    - order of the matrix !! !!    ia   - integer one-dimensional array containing pointers to delimit !!           rows in ja and a.  dimension = n+1 !! !!    ja   - integer one-dimensional array containing the column indices !!           corresponding to the elements of a.  dimension = number of !!           nonzero entries in (the upper triangle of) m !! !!    a    - real one-dimensional array containing the nonzero entries in !!           (the upper triangle of) m, stored by rows.  dimension = !!           number of nonzero entries in (the upper triangle of) m !! !!    p    - integer one-dimensional array used to return the permutation !!           of the rows and columns of m corresponding to the minimum !!           degree ordering.  dimension = n !! !!    ip   - integer one-dimensional array used to return the inverse of !!           the permutation returned in p.  dimension = n !! !!    nsp  - declared dimension of the one-dimensional array isp.  nsp !!           must be at least  3n+4k,  where k is the number of nonzeroes !!           in the strict upper triangle of m !! !!    isp  - integer one-dimensional array used for working storage. !!           dimension = nsp !! !!    path - integer path specification.  values and their meanings are - !!             1  find minimum degree ordering only !!             2  find minimum degree ordering and reorder symmetrically !!                  stored matrix (used when only the nonzero entries in !!                  the upper triangle of m are being stored) !!             3  reorder symmetrically stored matrix as specified by !!                  input permutation (used when an ordering has already !!                  been determined and only the nonzero entries in the !!                  upper triangle of m are being stored) !!             4  same as 2 but put diagonal entries at start of each row !!             5  same as 3 but put diagonal entries at start of each row !! !!    flag - integer error flag.  values and their meanings are - !!               0    no errors detected !!              9n+k  insufficient storage in md !!             10n+1  insufficient storage in odrv !!             11n+1  illegal path specification !!``` !! !----------------------------------------------------------------------- subroutine odrv ( N , Ia , Ja , A , P , Ip , Nsp , Isp , Path , Flag ) integer :: N integer , dimension ( * ) :: Ia integer , dimension ( * ) :: Ja real ( kind = dp ), dimension ( * ) :: A integer , dimension ( * ) :: P integer , dimension ( * ) :: Ip integer , intent ( in ) :: Nsp integer , dimension ( * ) :: Isp integer , intent ( in ) :: Path integer , intent ( inout ) :: Flag logical :: dflag integer :: head , l , max , next , q , tmp , v !----initialize error flag and validate path specification Flag = 0 if ( Path < 1 . or . 5 < Path ) then !  ** error -- illegal path specified Flag = 11 * N + 1 return else !----allocate storage and find minimum degree ordering if ( ( Path - 1 ) * ( Path - 2 ) * ( Path - 4 ) == 0 ) then max = ( Nsp - N ) / 2 v = 1 l = v + max head = l + max next = head + N if ( max < N ) then Flag = 10 * N + 1 return endif call md ( N , Ia , Ja , max , Isp ( v ), Isp ( l ), Isp ( head ), P , Ip , Isp ( v ), Flag ) !  ** error -- error detected in md if ( Flag /= 0 ) return endif !----allocate storage and symmetrically reorder matrix if ( ( Path - 2 ) * ( Path - 3 ) * ( Path - 4 ) * ( Path - 5 ) == 0 ) then tmp = ( Nsp + 1 ) - N q = tmp - ( Ia ( N + 1 ) - 1 ) if ( q < 1 ) then Flag = 10 * N + 1 return endif dflag = Path == 4 . or . Path == 5 call sro ( N , Ip , Ia , Ja , A , Isp ( tmp ), Isp ( q ), dflag ) endif return endif !  ** error -- insufficient storage Flag = 10 * N + 1 end subroutine odrv","tags":"","loc":"sourcefile/odrv.inc.html"},{"title":"cntnzu.inc – odepack","text":"Contents Subroutines cntnzu Source Code cntnzu.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine counts the number of nonzero elements in the strict !! upper triangle of the matrix M + M(transpose), where the sparsity !! structure of M is given by pointer arrays IA and JA. !! !! This is needed to compute the storage requirements for the !! sparse matrix reordering operation in ODRV. !----------------------------------------------------------------------- subroutine cntnzu ( N , Ia , Ja , Nzsut ) ! integer , intent ( in ) :: N integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( out ) :: Nzsut ! integer :: ii , j , jj , jmax , jmin , k , kmax , kmin , num ! num = 0 OUTER : do ii = 1 , N jmin = Ia ( ii ) jmax = Ia ( ii + 1 ) - 1 if ( jmin <= jmax ) then MAIN : do j = jmin , jmax if ( Ja ( j ) < ii ) then jj = Ja ( j ) kmin = Ia ( jj ) kmax = Ia ( jj + 1 ) - 1 if ( kmin <= kmax ) then do k = kmin , kmax if ( Ja ( k ) == ii ) cycle MAIN enddo endif elseif ( Ja ( j ) == ii ) then cycle MAIN endif num = num + 1 enddo MAIN endif enddo OUTER Nzsut = num end subroutine cntnzu","tags":"","loc":"sourcefile/cntnzu.inc.html"},{"title":"ddecbt.inc – odepack","text":"Contents Subroutines ddecbt Source Code ddecbt.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !! ddecbt(3f) -[M_odepack] Block-tridiagonal matrix decomposition routine. !! !!### DESCRIPTION !! The input matrix contains three blocks of elements in each block-row, !! including blocks in the (1,3) and (N,N-2) block positions. !! DDECBT uses block Gauss elimination and Subroutines DGEFA and DGESL !! for solution of blocks.  Partial pivoting is done within !! block-rows only. !! !! Note: this version uses LINPACK routines DGEFA/DGESL instead of !! of dec/sol for solution of blocks, and it uses the BLAS routine DDOT !! for dot product calculations. !! !!### INPUT !! !! M !! !! : order of each block. !! !! N !! !! : number of blocks in each direction of the matrix. !!   N must be 4 or more.  The complete matrix has order M*N. !! !! A !! !! : M by M by N array containing diagonal blocks. !!   A(i,j,k) contains the (i,j) element of the k-th block. !! !! B !! !! : M by M by N array containing the super-diagonal blocks !!   (in B(*,*,k) for k = 1,...,N-1) and the block in the (N,N-2) !!   block position (in B(*,*,N)). !! !! C !! !! : M by M by N array containing the subdiagonal blocks !!   (in C(*,*,k) for k = 2,3,...,N) and the block in the !!   (1,3) block position (in C(*,*,1)). !! !! IP !! !! : integer array of length M*N for working storage. !! !!### OUTPUT !! !! A,B,C !! !! : M by M by N arrays containing the block-LU decomposition !!   of the input matrix. !! !! IP !! !! : M by N array of pivot information.  IP(*,k) contains !!   information for the k-th digonal block. !! !! IER !! !! : 0  if no trouble occurred, or !!       = -1 if the input value of M or N was illegal, or !!       = k  if a singular matrix was found in the k-th diagonal block. !! !! Use DSOLBT to solve the associated linear system. !! !! External routines required: DGEFA and DGESL (from LINPACK) and !! DDOT (from the BLAS, or Basic Linear Algebra package). !----------------------------------------------------------------------- !  Written by A. C. Hindmarsh. !  Latest revision:  November 10, 1983 (ACH) !  Reference:  UCID-30150 !              Solution of Block-Tridiagonal Systems of Linear !              Algebraic Equations !              A.C. Hindmarsh !              February 1977 !----------------------------------------------------------------------- subroutine ddecbt ( M , N , A , B , C , Ip , Ier ) ! integer :: M integer , intent ( in ) :: N real ( kind = dp ), intent ( inout ) :: A ( M , M , N ) real ( kind = dp ), intent ( inout ) :: B ( M , M , N ) real ( kind = dp ), intent ( inout ) :: C ( M , M , N ) integer :: Ip ( M , N ) integer , intent ( inout ) :: Ier ! real ( kind = dp ) :: dpp integer :: i , j , k , km1 , nm1 , nm2 ! if ( M < 1 . or . N < 4 ) then Ier = - 1 return else nm1 = N - 1 nm2 = N - 2 ! Process the first block-row. ----------------------------------------- call dgefa ( A , M , M , Ip , Ier ) k = 1 if ( Ier == 0 ) then do j = 1 , M call dgesl ( A , M , M , Ip , B ( 1 , j , 1 ), 0 ) call dgesl ( A , M , M , Ip , C ( 1 , j , 1 ), 0 ) enddo ! Adjust B(*,*,2). ----------------------------------------------------- do j = 1 , M do i = 1 , M dpp = ddot ( M , C ( i , 1 , 2 ), M , C ( 1 , j , 1 ), 1 ) B ( i , j , 2 ) = B ( i , j , 2 ) - dpp enddo enddo ! Main loop.  Process block-rows 2 to N-1. ----------------------------- do k = 2 , nm1 km1 = k - 1 do j = 1 , M do i = 1 , M dpp = ddot ( M , C ( i , 1 , k ), M , B ( 1 , j , km1 ), 1 ) A ( i , j , k ) = A ( i , j , k ) - dpp enddo enddo call dgefa ( A ( 1 , 1 , k ), M , M , Ip ( 1 , k ), Ier ) if ( Ier /= 0 ) then Ier = k return endif do j = 1 , M call dgesl ( A ( 1 , 1 , k ), M , M , Ip ( 1 , k ), B ( 1 , j , k ), 0 ) enddo enddo ! Process last block-row and return. ----------------------------------- do j = 1 , M do i = 1 , M dpp = ddot ( M , B ( i , 1 , N ), M , B ( 1 , j , nm2 ), 1 ) C ( i , j , N ) = C ( i , j , N ) - dpp enddo enddo do j = 1 , M do i = 1 , M dpp = ddot ( M , C ( i , 1 , N ), M , B ( 1 , j , nm1 ), 1 ) A ( i , j , N ) = A ( i , j , N ) - dpp enddo enddo call dgefa ( A ( 1 , 1 , N ), M , M , Ip ( 1 , N ), Ier ) k = N if ( Ier == 0 ) return endif endif ! Error returns. ------------------------------------------------------- Ier = k end subroutine ddecbt","tags":"","loc":"sourcefile/ddecbt.inc.html"},{"title":"mdi.inc – odepack","text":"Contents Subroutines mdi Source Code mdi.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!  mdi -- initialization !----------------------------------------------------------------------- subroutine mdi ( N , Ia , Ja , Max , V , L , Head , Last , Next , Mark , Tag , Flag ) ! integer , intent ( in ) :: N integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( in ) :: Max integer , intent ( inout ) :: V ( * ) integer , intent ( inout ) :: L ( * ) integer , intent ( inout ) :: Head ( * ) integer , intent ( out ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) integer , intent ( in ) :: Tag integer :: Flag ! integer :: dvi , j , jmax , jmin , k , kmax , lvk , nextvi , sfs , vi , vj ! !----initialize degrees, element lists, and degree lists do vi = 1 , N Mark ( vi ) = 1 L ( vi ) = 0 Head ( vi ) = 0 enddo sfs = N + 1 ! !----create nonzero structure !----for each nonzero entry a(vi,vj) do vi = 1 , N jmin = Ia ( vi ) jmax = Ia ( vi + 1 ) - 1 if ( jmin <= jmax ) then MINMAX : do j = jmin , jmax vj = Ja ( j ) if ( vj < vi ) then ! !------if a(vi,vj) is in strict lower triangle !------check for previous occurrence of a(vj,vi) lvk = vi kmax = Mark ( vi ) - 1 if ( kmax /= 0 ) then do k = 1 , kmax lvk = L ( lvk ) if ( V ( lvk ) == vj ) cycle MINMAX enddo endif elseif ( vj == vi ) then cycle endif !----for unentered entries a(vi,vj) if ( sfs >= Max ) then ! !  ** error-  insufficient storage Flag = 9 * N + vi return else ! !------enter vj in element list for vi Mark ( vi ) = Mark ( vi ) + 1 V ( sfs ) = vj L ( sfs ) = L ( vi ) L ( vi ) = sfs sfs = sfs + 1 ! !------enter vi in element list for vj Mark ( vj ) = Mark ( vj ) + 1 V ( sfs ) = vi L ( sfs ) = L ( vj ) L ( vj ) = sfs sfs = sfs + 1 endif enddo MINMAX endif enddo ! !----create degree lists and initialize mark vector do vi = 1 , N dvi = Mark ( vi ) Next ( vi ) = Head ( dvi ) Head ( dvi ) = vi Last ( vi ) = - dvi nextvi = Next ( vi ) if ( nextvi > 0 ) Last ( nextvi ) = vi Mark ( vi ) = Tag enddo end subroutine mdi","tags":"","loc":"sourcefile/mdi.inc.html"},{"title":"dainvg.inc – odepack","text":"Contents Subroutines dainvg Source Code dainvg.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This subroutine computes the initial value !! of the vector YDOT satisfying !! !!      A * YDOT = g(t,y) !! !! when A is nonsingular.  It is called by DLSODI for !! initialization only, when ISTATE = 0 . !! DAINVG returns an error flag IER: !! !!     IER  =  0  means DAINVG was successful. !!     IER .ge. 2 means RES returned an error flag IRES = IER. !!     IER .lt. 0 means the a-matrix was found to be singular. !! !----------------------------------------------------------------------- subroutine dainvg ( res , adda , Neq , T , Y , Ydot , Miter , Ml , Mu , Pw , Ipvt , Ier ) ! external res , adda integer , intent ( inout ) :: Neq real ( kind = dp ) :: T real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydot ( * ) integer , intent ( inout ) :: Miter integer , intent ( inout ) :: Ml integer , intent ( inout ) :: Mu real ( kind = dp ) :: Pw ( * ) integer :: Ipvt ( * ) integer , intent ( inout ) :: Ier integer :: i , lenpw , mlp1 , nrowpw ! if ( Miter >= 4 ) then ! !  Band matrix case ----------------------------------------------------- ! nrowpw = 2 * Ml + Mu + 1 lenpw = Neq * nrowpw do i = 1 , lenpw Pw ( i ) = 0.0D0 enddo ! Ier = 1 call res ( Neq , T , Y , Pw , Ydot , Ier ) if ( Ier > 1 ) return ! mlp1 = Ml + 1 call adda ( Neq , T , Y , Ml , Mu , Pw ( mlp1 ), nrowpw ) call dgbfa ( Pw , nrowpw , Neq , Ml , Mu , Ipvt , Ier ) if ( Ier == 0 ) then call dgbsl ( Pw , nrowpw , Neq , Ml , Mu , Ipvt , Ydot , 0 ) return endif else ! !  Full matrix case ----------------------------------------------------- ! lenpw = Neq * Neq do i = 1 , lenpw Pw ( i ) = 0.0D0 enddo ! Ier = 1 call res ( Neq , T , Y , Pw , Ydot , Ier ) if ( Ier > 1 ) return ! call adda ( Neq , T , Y , 0 , 0 , Pw , Neq ) call dgefa ( Pw , Neq , Neq , Ipvt , Ier ) if ( Ier == 0 ) then call dgesl ( Pw , Neq , Neq , Ipvt , Ydot , 0 ) return else Ier = - Ier return endif endif Ier = - Ier end subroutine dainvg","tags":"","loc":"sourcefile/dainvg.inc.html"},{"title":"dpcgs.inc – odepack","text":"Contents Subroutines dpcgs Source Code dpcgs.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine computes the solution to the system A*x = b using a !! scaled preconditioned version of the Conjugate Gradient algorithm. !! !! It is assumed here that the scaled matrix D**-1 * A * D and the !! scaled preconditioner D**-1 * M * D are close to being !! symmetric positive definite. !! !!### On entry !! !! NEQ !! !! : problem size, passed to F and PSOL (NEQ(1) = N). !! !! TN !! !! : current value of t. !! !! Y !! !! : array containing current dependent variable vector. !! !! SAVF !! !! : array containing current value of f(t,y). !! !! R !! !! : the right hand side of the system A*x = b. !! !! WGHT !! !! : array of length N containing scale factors. !! 1/WGHT(i) are the diagonal elements of the diagonal !! scaling matrix D. !! !! N !! !! : the order of the matrix A, and the lengths !! of the vectors Y, SAVF, R, WGHT, P, W, Z, WK, and X. !! !! MAXL !! !! : the maximum allowable number of iterates. !! !! DELTA !! !! : tolerance on residuals b - A*x in weighted RMS-norm. !! !! HL0 !! !! : current value of (step size h) * (coefficient l0). !! !! JPRE !! !! : preconditioner type flag. !! !! MNEWT !! !! : Newton iteration counter (.ge. 0). !! !! WK !! !! : real work array used by routine DATP. !! !! WP !! !! : real work array used by preconditioner PSOL. !! !! IWP !! !! : integer work array used by preconditioner PSOL. !! !!### On return !! !! X !! !! : the final computed approximation to the solution !! of the system A*x = b. !! !! LPCG !! !! : the number of iterations performed, and current !! order of the upper Hessenberg matrix HES. !! !! NPSL !! !! : the number of calls to PSOL. !! !! IFLAG !! !! : integer error flag: !! !!                0 means convergence in LPCG iterations, LPCG .le. MAXL. !!                1 means the convergence test did not pass in MAXL !!                  iterations, but the residual norm is .lt. 1, !!                  or .lt. norm(b) if MNEWT = 0, and so X is computed. !!                2 means the convergence test did not pass in MAXL !!                  iterations, residual .gt. 1, and X is undefined. !!                3 means there was a recoverable error in PSOL !!                  caused by the preconditioner being out of date. !!                4 means there was a zero denominator in the algorithm. !!                  the scaled matrix or scaled preconditioner is not !!                  sufficiently close to being symmetric pos. definite. !!               -1 means there was a nonrecoverable error in PSOL. !! !----------------------------------------------------------------------- subroutine dpcgs ( Neq , Tn , Y , Savf , R , Wght , N , Maxl , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , P , W , Z , Lpcg , Wp , Iwp , Wk , Iflag ) ! integer , dimension ( * ) :: Neq real ( kind = dp ) :: Tn real ( kind = dp ) , dimension ( * ) :: Y real ( kind = dp ) , dimension ( * ) :: Savf real ( kind = dp ) , dimension ( * ) :: R real ( kind = dp ) , dimension ( * ) :: Wght integer :: N integer , intent ( in ) :: Maxl real ( kind = dp ) , intent ( in ) :: Delta real ( kind = dp ) :: Hl0 integer , intent ( in ) :: Jpre integer , intent ( in ) :: Mnewt external :: f ! real ( kind = dp ) :: alpha , beta , bnrm , ptw , rnrm , ztr , ztr0 integer :: i , ier integer , intent ( out ) :: Iflag , Lpcg , Npsl integer , dimension ( * ) :: Iwp real ( kind = dp ) , intent ( inout ) , dimension ( * ) :: P , W , Wk , Wp , X , Z ! external psol ! Iflag = 0 Npsl = 0 Lpcg = 0 do i = 1 , N X ( i ) = 0.0D0 enddo bnrm = dvnorm ( N , R , Wght ) !  Test for immediate return with X = 0 or X = b. ----------------------- if ( bnrm > Delta ) then ! ztr = 0.0D0 else if ( Mnewt > 0 ) return !X!call dcopy(N,R,1,X,1) X ( 1 : N ) = R ( 1 : N ) return endif !  Loop point for PCG iterations. --------------------------------------- INFINITE : do Lpcg = Lpcg + 1 !X!call dcopy(N,R,1,Z,1) Z ( 1 : N ) = R ( 1 : N ) ier = 0 if ( Jpre /= 0 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , Z , 3 , ier ) Npsl = Npsl + 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns from PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif endif ztr0 = ztr ztr = 0.0D0 do i = 1 , N ztr = ztr + Z ( i ) * R ( i ) * Wght ( i ) ** 2 enddo if ( Lpcg /= 1 ) then if ( ztr0 == 0.0D0 ) then !----------------------------------------------------------------------- !  This block handles division by zero errors. !----------------------------------------------------------------------- Iflag = 4 return endif beta = ztr / ztr0 do i = 1 , N P ( i ) = Z ( i ) + beta * P ( i ) enddo else !X!call dcopy(N,Z,1,P,1) P ( 1 : N ) = Z ( 1 : N ) endif !----------------------------------------------------------------------- !   Call DATP to compute A*p and return the answer in W. !----------------------------------------------------------------------- call datp ( Neq , Y , Savf , P , Wght , Hl0 , Wk , f , W ) ! ptw = 0.0D0 do i = 1 , N ptw = ptw + P ( i ) * W ( i ) * Wght ( i ) ** 2 enddo if ( ptw == 0.0D0 ) then !----------------------------------------------------------------------- !  This block handles division by zero errors. !----------------------------------------------------------------------- Iflag = 4 return endif alpha = ztr / ptw call daxpy ( N , alpha , P , 1 , X , 1 ) alpha = - alpha call daxpy ( N , alpha , W , 1 , R , 1 ) rnrm = dvnorm ( N , R , Wght ) if ( rnrm <= Delta ) return if ( Lpcg >= Maxl ) exit INFINITE enddo INFINITE Iflag = 2 if ( rnrm <= 1.0D0 ) Iflag = 1 if ( rnrm <= bnrm . and . Mnewt == 0 ) Iflag = 1 end subroutine dpcgs","tags":"","loc":"sourcefile/dpcgs.inc.html"},{"title":"md.inc – odepack","text":"Contents Subroutines md Source Code md.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!  md -- minimum degree algorithm (based on element model) !! !!### description !! !!    md finds a minimum degree ordering of the rows and columns of a !!    general sparse matrix m stored in (ia,ja,a) format. !!    when the structure of m is nonsymmetric, the ordering is that !!    obtained for the symmetric matrix  m + m-transpose. !! !! !!### additional parameters !! !!    MAX !! !!    : declared dimension of the one-dimensional arrays v and l. !!    max must be at least  n+2k,  where k is the number of !!    nonzeroes in the strict upper triangle of m + m-transpose !! !!    V !! !!    : integer one-dimensional work array.  dimension = max !! !!    L !! !!    : integer one-dimensional work array.  dimension = max !! !!    HEAD !! !!    : integer one-dimensional work array.  dimension = n !! !!    LAST !! !!    : integer one-dimensional array used to return the permutation !!    of the rows and columns of m corresponding to the minimum !!    degree ordering.  dimension = n !! !!    NEXT !! !!    : integer one-dimensional array used to return the inverse of !!    the permutation returned in last.  dimension = n !! !!    MARK !! !!    : integer one-dimensional work array (may be the same as v). !!    dimension = n !! !!    FLAG !! !!    : integer error flag.  values and their meanings are - !! !!             0     no errors detected !!             9n+k  insufficient storage in md !! !! !!### definitions of internal parameters !!```text !!    ---------+--------------------------------------------------------- !!    v(s)     - value field of list entry !!    ---------+--------------------------------------------------------- !!    l(s)     - link field of list entry  (0 =) end of list) !!    ---------+--------------------------------------------------------- !!    l(vi)    - pointer to element list of uneliminated vertex vi !!    ---------+--------------------------------------------------------- !!    l(ej)    - pointer to boundary list of active element ej !!    ---------+--------------------------------------------------------- !!    head(d)  - vj =) vj head of d-list d !!             -  0 =) no vertex in d-list d !! !! !!             -                  vi uneliminated vertex !!             -          vi in ek           -       vi not in ek !!    ---------+-----------------------------+--------------------------- !!    next(vi) - undefined but nonnegative   - vj =) vj next in d-list !!             -                             -  0 =) vi tail of d-list !!    ---------+-----------------------------+--------------------------- !!    last(vi) - (not set until mdp)         - -d =) vi head of d-list d !!             --vk =) compute degree        - vj =) vj last in d-list !!             - ej =) vi prototype of ej    -  0 =) vi not in any d-list !!             -  0 =) do not compute degree - !!    ---------+-----------------------------+--------------------------- !!    mark(vi) - mark(vk)                    - nonneg. tag .lt. mark(vk) !! !! !!             -                   vi eliminated vertex !!             -      ei active element      -           otherwise !!    ---------+-----------------------------+--------------------------- !!    next(vi) - -j =) vi was j-th vertex    - -j =) vi was j-th vertex !!             -       to be eliminated      -       to be eliminated !!    ---------+-----------------------------+--------------------------- !!    last(vi) -  m =) size of ei = m        - undefined !!    ---------+-----------------------------+--------------------------- !!    mark(vi) - -m =) overlap count of ei   - undefined !!             -       with ek = m           - !!             - otherwise nonnegative tag   - !!             -       .lt. mark(vk)         - !!``` !! !----------------------------------------------------------------------- subroutine md ( N , Ia , Ja , Max , V , L , Head , Last , Next , Mark , Flag ) integer :: N integer :: Ia ( * ) integer :: Ja ( * ) integer :: Max integer :: V ( * ) integer :: L ( * ) integer , intent ( inout ) :: Head ( * ) integer , intent ( inout ) :: Last ( * ) integer , intent ( inout ) :: Next ( * ) integer :: Mark ( * ) integer :: Flag integer :: dmin , ek , k , tag , tail , vk equivalence ( vk , ek ) !----initialization tag = 0 call mdi ( N , Ia , Ja , Max , V , L , Head , Last , Next , Mark , tag , Flag ) if ( Flag /= 0 ) return ! k = 0 dmin = 1 ! !----while  k .lt. n  do do while ( k < N ) ! !------search for vertex of minimum degree do while ( Head ( dmin ) <= 0 ) dmin = dmin + 1 enddo ! !------remove vertex vk of minimum degree from degree list vk = Head ( dmin ) Head ( dmin ) = Next ( vk ) if ( Head ( dmin ) > 0 ) Last ( Head ( dmin )) = - dmin ! !------number vertex vk, adjust tag, and tag vk k = k + 1 Next ( vk ) = - k Last ( ek ) = dmin - 1 tag = tag + Last ( ek ) Mark ( vk ) = tag ! !------form element ek from uneliminated neighbors of vk call mdm ( vk , tail , V , L , Last , Next , Mark ) ! !------purge inactive elements and do mass elimination call mdp ( k , ek , tail , V , L , Head , Last , Next , Mark ) ! !------update degrees of uneliminated vertices in ek ! call mdu ( ek , dmin , V , L , Head , Last , Next , Mark ) enddo ! !----generate inverse permutation from permutation do k = 1 , N Next ( k ) = - Next ( k ) Last ( Next ( k )) = k enddo end subroutine md","tags":"","loc":"sourcefile/md.inc.html"},{"title":"dsrckr.inc – odepack","text":"Contents Subroutines dsrckr Source Code dsrckr.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine saves or restores (depending on JOB) the contents of !! the Common blocks DLS001, DLSR01, DLPK01, which !! are used internally by the DLSODKR solver. !! !! RSAV !! !! : real array of length 228 or more. !! !! ISAV !! !! : integer array of length 63 or more. !! !! JOB !! !! : flag indicating to save or restore the Common blocks: !! !!        JOB  = 1 if Common is to be saved (written to RSAV/ISAV) !!        JOB  = 2 if Common is to be restored (read from RSAV/ISAV) !! !! A call with JOB = 2 presumes a prior call with JOB = 1. !! !----------------------------------------------------------------------- subroutine dsrckr ( Rsav , Isav , Job ) ! integer , parameter :: LENRLS = 218 , LENILS = 37 ! real ( kind = dp ), intent ( inout ) :: Rsav ( * ) integer , intent ( inout ) :: Isav ( * ) integer , intent ( in ) :: Job ! integer :: ioff ! select case ( Job ) case ( 1 ) Rsav ( 1 : LENRLS ) = return_dls1_real () Rsav ( LENRLS + 1 ) = dls % stifr Rsav ( LENRLS + 1 + 1 ) = dlsr % alpha Rsav ( LENRLS + 2 + 1 ) = dlsr % x2 Rsav ( LENRLS + 3 + 1 ) = dlsr % t0 Rsav ( LENRLS + 4 + 1 ) = dlsr % tlast Rsav ( LENRLS + 5 + 1 ) = dlsr % toutc Rsav ( LENRLS + 5 + 2 ) = dlpk % delt Rsav ( LENRLS + 5 + 3 ) = dlpk % epcon Rsav ( LENRLS + 5 + 4 ) = dlpk % sqrtn Rsav ( LENRLS + 5 + 5 ) = dlpk % rsqrtn Isav ( 1 : LENILS ) = return_dls1_int () Isav ( LENILS + 1 ) = dls % newt Isav ( LENILS + 2 ) = dls % nsfi Isav ( LENILS + 3 ) = dls % nslj Isav ( LENILS + 4 ) = dls % njev ioff = LENILS + 2 Isav ( ioff + 1 ) = dlsr % lg0 Isav ( ioff + 2 ) = dlsr % lg1 Isav ( ioff + 3 ) = dlsr % lgx Isav ( ioff + 4 ) = dlsr % imax Isav ( ioff + 5 ) = dlsr % last Isav ( ioff + 6 ) = dlsr % irfnd Isav ( ioff + 7 ) = dlsr % itaskc Isav ( ioff + 8 ) = dlsr % ngc Isav ( ioff + 9 ) = dlsr % nge ioff = ioff + 9 Isav ( ioff + 1 ) = dlpk % jpre Isav ( ioff + 2 ) = dlpk % jacflg Isav ( ioff + 3 ) = dlpk % locwp Isav ( ioff + 4 ) = dlpk % lociwp Isav ( ioff + 5 ) = dlpk % lsavx Isav ( ioff + 6 ) = dlpk % kmp Isav ( ioff + 7 ) = dlpk % maxl Isav ( ioff + 8 ) = dlpk % mnewt Isav ( ioff + 9 ) = dlpk % nni Isav ( ioff + 10 ) = dlpk % nli Isav ( ioff + 11 ) = dlpk % nps Isav ( ioff + 12 ) = dlpk % ncfn Isav ( ioff + 13 ) = dlpk % ncfl case ( 2 ) call set_dls1_real ( Rsav ( 1 : LENRLS )) dls % stifr = Rsav ( LENRLS + 1 ) dlsr % alpha = Rsav ( LENRLS + 1 + 1 ) dlsr % x2 = Rsav ( LENRLS + 2 + 1 ) dlsr % t0 = Rsav ( LENRLS + 3 + 1 ) dlsr % tlast = Rsav ( LENRLS + 4 + 1 ) dlsr % toutc = Rsav ( LENRLS + 5 + 1 ) dlpk % delt = Rsav ( LENRLS + 5 + 2 ) dlpk % epcon = Rsav ( LENRLS + 5 + 3 ) dlpk % sqrtn = Rsav ( LENRLS + 5 + 4 ) dlpk % rsqrtn = Rsav ( LENRLS + 5 + 5 ) call set_dls1_int ( Isav ( 1 : LENILS )) dls % newt = Isav ( LENILS + 1 ) dls % nsfi = Isav ( LENILS + 2 ) dls % nslj = Isav ( LENILS + 3 ) dls % njev = Isav ( LENILS + 4 ) ioff = LENILS + 2 dlsr % lg0 = Isav ( ioff + 1 ) dlsr % lg1 = Isav ( ioff + 2 ) dlsr % lgx = Isav ( ioff + 3 ) dlsr % imax = Isav ( ioff + 4 ) dlsr % last = Isav ( ioff + 5 ) dlsr % irfnd = Isav ( ioff + 6 ) dlsr % itaskc = Isav ( ioff + 7 ) dlsr % ngc = Isav ( ioff + 8 ) dlsr % nge = Isav ( ioff + 9 ) ioff = ioff + 9 dlpk % jpre = Isav ( ioff + 1 ) dlpk % jacflg = Isav ( ioff + 2 ) dlpk % locwp = Isav ( ioff + 3 ) dlpk % lociwp = Isav ( ioff + 4 ) dlpk % lsavx = Isav ( ioff + 5 ) dlpk % kmp = Isav ( ioff + 6 ) dlpk % maxl = Isav ( ioff + 7 ) dlpk % mnewt = Isav ( ioff + 8 ) dlpk % nni = Isav ( ioff + 9 ) dlpk % nli = Isav ( ioff + 10 ) dlpk % nps = Isav ( ioff + 11 ) dlpk % ncfn = Isav ( ioff + 12 ) dlpk % ncfl = Isav ( ioff + 13 ) case default write ( * , * ) '<ERROR>*dsrckr* unknown value for JOB=' , Job stop 1 endselect end subroutine dsrckr","tags":"","loc":"sourcefile/dsrckr.inc.html"},{"title":"dprjs.inc – odepack","text":"Contents Subroutines dprjs Source Code dprjs.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DPRJS is called to compute and process the matrix !! P = I - H*EL(1)*J, where J is an approximation to the Jacobian. !! J is computed by columns, either by the user-supplied routine JAC !! if MITER = 1, or by finite differencing if MITER = 2. !! !! Alternatively, if MITER = 3, a diagonal approximation to J is used. !! !! if MITER = 1 or 2, and if the existing value of the Jacobian !! (as contained in P) is considered acceptable, then a new value of !! P is reconstructed from the old value. !! !! In any case, when MITER !! is 1 or 2, the P matrix is subjected to LU decomposition in CDRV. !! !! P and its LU decomposition are stored (separately) in WK. !! !! In addition to variables described previously, communication !! with DPRJS uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! FTEM !! !! : work array of length N (ACOR in DSTODE). !! !! SAVF !! !! : array containing f evaluated at predicted y. !! !! WK !! !! : real work space for matrices.  On output it contains the !! inverse diagonal matrix if MITER = 3, and P and its sparse !! LU decomposition if MITER is 1 or 2. !! Storage of matrix elements starts at WK(3). !! WK also contains the following matrix-related data: !! WK(1) = SQRT(UROUND), used in numerical Jacobian increments. !! WK(2) = H*EL0, saved for later use if MITER = 3. !! !! IWK !! !! : integer work space for matrix-related data, assumed to !! be equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP) !! are assumed to have identical locations. !! !! EL0 !! !! : EL(1) (input). !! !! IERPJ !! !! : output error flag (in Common). !!       = 0 if no error. !!       = 1  if zero pivot found in CDRV. !!       = 2  if a singular matrix arose with MITER = 3. !!       = -1 if insufficient storage for CDRV (should not occur here). !!       = -2 if other error found in CDRV (should not occur here). !! !! JCUR !! !! : output flag showing status of (approximate) Jacobian matrix: !!       = 1 to indicate that the Jacobian is now current, or !!       = 0 to indicate that a saved value was used. !! This routine also uses other variables in Common. !----------------------------------------------------------------------- subroutine dprjs ( Neq , Y , Yh , Nyh , Ewt , Ftem , Savf , Wk , Iwk , f , jac ) integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer :: Iwk ( * ) external :: f external :: jac real ( kind = dp ) :: con , di , fac , hl0 , pij , r , r0 , rcon , rcont , srur integer :: i , imul , j , jj , jmax , jmin , jok , k , kmax , kmin , ng hl0 = dls1 % h * dls1 % el0 con = - hl0 if ( dls1 % miter == 3 ) then ! !  If MITER = 3, construct a diagonal approximation to J and P. --------- dls1 % jcur = 1 dls1 % nje = dls1 % nje + 1 Wk ( 2 ) = hl0 dls1 % ierpj = 0 r = dls1 % el0 * 0.1D0 do i = 1 , dls1 % n Y ( i ) = Y ( i ) + r * ( dls1 % h * Savf ( i ) - Yh ( i , 2 )) enddo call f ( Neq , dls1 % tn , Y , Wk ( 3 )) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n r0 = dls1 % h * Savf ( i ) - Yh ( i , 2 ) di = 0.1D0 * r0 - dls1 % h * ( Wk ( i + 2 ) - Savf ( i )) Wk ( i + 2 ) = 1.0D0 if ( abs ( r0 ) >= dls1 % uround / Ewt ( i ) ) then if ( abs ( di ) == 0.0D0 ) then dls1 % ierpj = 2 return else Wk ( i + 2 ) = 0.1D0 * r0 / di endif endif enddo return else !  See whether J should be reevaluated (JOK = 0) or not (JOK = 1). ------ jok = 1 if ( dls1 % nst == 0 . or . dls1 % nst >= dlss % nslj + dlss % msbj ) jok = 0 if ( dls1 % icf == 1 . and . abs ( dls1 % rc - 1.0D0 ) < dlss % ccmxj ) jok = 0 if ( dls1 % icf == 2 ) jok = 0 if ( jok == 1 ) then ! !  If JOK = 1, reconstruct new P from old P. ---------------------------- dls1 % jcur = 0 rcon = con / dlss % con0 rcont = abs ( con ) / dlss % conmin if ( rcont <= dlss % rbig . or . dlss % iplost /= 1 ) then kmin = Iwk ( dlss % ipian ) do j = 1 , dls1 % n kmax = Iwk ( dlss % ipian + j ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) pij = Wk ( dlss % iba + k ) if ( i == j ) then pij = pij - 1.0D0 if ( abs ( pij ) < dlss % psmall ) then dlss % iplost = 1 dlss % conmin = min ( abs ( dlss % con0 ), dlss % conmin ) endif endif pij = pij * rcon if ( i == j ) pij = pij + 1.0D0 Wk ( dlss % iba + k ) = pij enddo kmin = kmax + 1 enddo call wrapup () return endif endif ! !  MITER = 1 or 2, and the Jacobian is to be reevaluated. --------------- dls1 % jcur = 1 dls1 % nje = dls1 % nje + 1 dlss % nslj = dls1 % nst dlss % iplost = 0 dlss % conmin = abs ( con ) if ( dls1 % miter == 2 ) then ! !  If MITER = 2, make NGP calls to F to approximate J and P. ------------ fac = dvnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 srur = Wk ( 1 ) jmin = Iwk ( dlss % ipigp ) do ng = 1 , dlss % ngp jmax = Iwk ( dlss % ipigp + ng ) - 1 do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) r = max ( srur * abs ( Y ( jj )), r0 / Ewt ( jj )) Y ( jj ) = Y ( jj ) + r enddo call f ( Neq , dls1 % tn , Y , Ftem ) do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) Y ( jj ) = Yh ( jj , 1 ) r = max ( srur * abs ( Y ( jj )), r0 / Ewt ( jj )) fac = - hl0 / r kmin = Iwk ( dlss % ibian + jj ) kmax = Iwk ( dlss % ibian + jj + 1 ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = ( Ftem ( i ) - Savf ( i )) * fac if ( i == jj ) Wk ( dlss % iba + k ) = Wk ( dlss % iba + k ) + 1.0D0 enddo enddo jmin = jmax + 1 enddo dls1 % nfe = dls1 % nfe + dlss % ngp else ! !  If MITER = 1, call JAC, multiply by scalar, and add identity. -------- kmin = Iwk ( dlss % ipian ) do j = 1 , dls1 % n kmax = Iwk ( dlss % ipian + j ) - 1 do i = 1 , dls1 % n Ftem ( i ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Ftem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Ftem ( i ) * con if ( i == j ) Wk ( dlss % iba + k ) = Wk ( dlss % iba + k ) + 1.0D0 enddo kmin = kmax + 1 enddo endif endif call wrapup () contains subroutine wrapup () ! !  Do numerical factorization of P matrix. ------------------------------ dlss % nlu = dlss % nlu + 1 dlss % con0 = con dls1 % ierpj = 0 do i = 1 , dls1 % n Ftem ( i ) = 0.0D0 enddo call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), & & Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Ftem , Ftem , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 2 , dlss % iys ) if ( dlss % iys == 0 ) return imul = ( dlss % iys - 1 ) / dls1 % n dls1 % ierpj = - 2 if ( imul == 8 ) dls1 % ierpj = 1 if ( imul == 10 ) dls1 % ierpj = - 1 end subroutine wrapup end subroutine dprjs","tags":"","loc":"sourcefile/dprjs.inc.html"},{"title":"dumach.inc – odepack","text":"Contents Functions dumach Source Code dumach.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dumach(3f) - [M_odepack] Compute the unit roundoff of the machine. !! !!### SYNOPSIS !!        a = dumach() !!        double precision :: dumach !!        double precision :: a !! !!### DESCRIPTION !!   The unit roundoff is defined as the smallest positive machine !!   number u such that  1.0 + u .ne. 1.0.  This is computed by DUMACH !!   in a machine-independent manner. !! !!### RETURNS !!   A !! !!   : the unit roundoff of the machine. !! !----------------------------------------------------------------------- ! ### BEGIN PROLOGUE  DUMACH ! ### PURPOSE  Compute the unit roundoff of the machine. ! ### CATEGORY  R1 ! ### TYPE      DOUBLE PRECISION (RUMACH-S, DUMACH-D) ! ### KEYWORDS  MACHINE CONSTANTS ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### REFERENCES  (NONE) ! ### ROUTINES CALLED  DUMSUM ! ### REVISION HISTORY  (YYYYMMDD) !     19930216 DATE WRITTEN !     19930818 Added SLATEC-format prologue.  (FNF) !     20030707 Added DUMSUM to force normal storage of COMP.  (ACH) !     20220122 f90+ syntax (JSU) !     TODO: replace with EPSILON() and cached value ! ### END PROLOGUE  DUMACH !----------------------------------------------------------------------- function dumach () real ( kind = dp ) :: dumach real ( kind = dp ) :: u , comp u = 1.0d0 do u = u * 0.5d0 call dumsum ( 1.0d0 , u , comp ) if ( comp == 1.0d0 ) then dumach = u * 2.0d0 exit endif enddo contains subroutine dumsum ( a , b , c ) !  Routine to force normal storing of A + B, for DUMACH. real ( kind = dp ), intent ( in ) :: a , b real ( kind = dp ), intent ( out ) :: c c = a + b end subroutine dumsum end function dumach","tags":"","loc":"sourcefile/dumach.inc.html"},{"title":"dprepi.inc – odepack","text":"This file depends on sourcefile~~dprepi.inc~~EfferentGraph sourcefile~dprepi.inc dprepi.inc sourcefile~m_odepack.f90 M_odepack.f90 sourcefile~dprepi.inc->sourcefile~m_odepack.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Subroutines dprepi Source Code dprepi.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine performs preprocessing related to the sparse linear !! systems that must be solved. !! !! The operations that are performed here are: !! !!  * compute sparseness structure of the iteration matrix !!      P = A - con*J  according to MOSS, !!  * compute grouping of column indices (MITER = 2), !!  * compute a new ordering of rows and columns of the matrix, !!  * reorder JA corresponding to the new ordering, !!  * perform a symbolic LU factorization of the matrix, and !!  * set pointers for segments of the IWK/WK array. !! !! In addition to variables described previously, DPREPI uses the !! following for communication: !! !! YH !! !! : the history array.  Only the first column, containing the !! current Y vector, is used.  Used only if MOSS .ne. 0. !! !! S !! !! : array of length NEQ, identical to YDOTI in the driver, used !! only if MOSS .ne. 0. !! !! SAVR !! !! : a work array of length NEQ, used only if MOSS .ne. 0. !! !! EWT !! !! : array of length NEQ containing (inverted) error weights. !! Used only if MOSS = 2 or 4 or if ISTATE = MOSS = 1. !! !! RTEM !! !! : a work array of length NEQ, identical to ACOR in the driver, !! used only if MOSS = 2 or 4. !! !! WK !! !! : a real work array of length LENWK, identical to WM in !! the driver. !! !! IWK !! !! : integer work array, assumed to occupy the same space as WK. !! !! LENWK !! !! : the length of the work arrays WK and IWK. !! !! ISTATC !! !! : a copy of the driver input argument ISTATE (= 1 on the !! first call, = 3 on a continuation call). !! !! IYS !! !! : flag value from ODRV or CDRV. !! !! IPPER !! !! : output error flag, with the following values and meanings: !!        =   0  no error. !!        =  -1  insufficient storage for internal structure pointers. !!        =  -2  insufficient storage for JGROUP. !!        =  -3  insufficient storage for ODRV. !!        =  -4  other error flag from ODRV (should never occur). !!        =  -5  insufficient storage for CDRV. !!        =  -6  other error flag from CDRV. !!        =  -7  if the RES routine returned error flag IRES = IER = 2. !!        =  -8  if the RES routine returned error flag IRES = IER = 3. !----------------------------------------------------------------------- subroutine dprepi ( Neq , Y , S , Yh , Savr , Ewt , Rtem , Ia , Ja , Ic , Jc , Wk , Iwk , Ipper , res , jac , adda ) Use M_odepack implicit none integer , parameter :: dp = kind ( 0.0d0 ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) real ( kind = dp ) :: S ( * ) real ( kind = dp ), intent ( in ) :: Yh ( * ) real ( kind = dp ), intent ( inout ) :: Savr ( * ) real ( kind = dp ), intent ( in ) :: Ewt ( * ) real ( kind = dp ), intent ( inout ) :: Rtem ( * ) integer , intent ( in ) :: Ia ( * ) integer , intent ( in ) :: Ja ( * ) integer , intent ( in ) :: Ic ( * ) integer , intent ( in ) :: Jc ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer , intent ( inout ) :: Iwk ( * ) integer , intent ( out ) :: Ipper external res external jac external adda real ( kind = dp ) :: erwt , fac , yj integer :: i , ibr , ier , ipil , ipiu , iptt1 , iptt2 , j , k , kamax , kamin , kcmax , kcmin , knew , ldif , lenigp , lenwk1 , & & liwk , ljfo , maxg , np1 , nzsut dlss % ibian = dlss % lrat * 2 dlss % ipian = dlss % ibian + 1 np1 = dls1 % n + 1 dlss % ipjan = dlss % ipian + np1 dlss % ibjan = dlss % ipjan - 1 lenwk1 = dlss % lenwk - dls1 % n liwk = dlss % lenwk * dlss % lrat if ( dlss % moss == 0 ) liwk = liwk - dls1 % n if ( dlss % moss == 1 . or . dlss % moss == 2 ) liwk = lenwk1 * dlss % lrat if ( dlss % ipjan + dls1 % n - 1 > liwk ) goto 600 if ( dlss % moss /= 0 ) then ! if ( dlss % istatc /= 3 ) then !  ISTATE = 1 and MOSS .ne. 0.  Perturb Y for structure determination. !  Initialize S with random nonzero elements for structure determination. do i = 1 , dls1 % n erwt = 1.0D0 / Ewt ( i ) fac = 1.0D0 + 1.0D0 / ( i + 1.0D0 ) Y ( i ) = Y ( i ) + fac * sign ( erwt , Y ( i )) S ( i ) = 1.0D0 + fac * erwt enddo select case ( dlss % moss ) case ( 1 ) goto 100 case ( 2 ) goto 200 case ( 3 ) goto 300 case ( 4 ) goto 400 case default endselect endif ! !  ISTATE = 3 and MOSS .ne. 0. Load Y from YH(*,1) and S from YH(*,2). -- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) S ( i ) = Yh ( dls1 % n + i ) enddo select case ( dlss % moss ) case ( 1 ) goto 100 case ( 2 ) goto 200 case ( 3 ) goto 300 case ( 4 ) goto 400 case default endselect endif ! !  MOSS = 0. Process user's IA,JA and IC,JC. ---------------------------- knew = dlss % ipjan kamin = Ia ( 1 ) kcmin = Ic ( 1 ) Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n do i = 1 , dls1 % n Iwk ( liwk + i ) = 0 enddo kamax = Ia ( j + 1 ) - 1 if ( kamin <= kamax ) then do k = kamin , kamax i = Ja ( k ) Iwk ( liwk + i ) = 1 if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 enddo endif kamin = kamax + 1 kcmax = Ic ( j + 1 ) - 1 if ( kcmin <= kcmax ) then do k = kcmin , kcmax i = Jc ( k ) if ( Iwk ( liwk + i ) == 0 ) then if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 endif enddo endif Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan kcmin = kcmax + 1 enddo goto 500 ! !  MOSS = 1. Compute structure from user-supplied Jacobian routine JAC. - !  A dummy call to RES allows user to create temporaries for use in JAC. 100 continue ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do i = 1 , dls1 % n Savr ( i ) = 0.0D0 Wk ( lenwk1 + i ) = 0.0D0 enddo k = dlss % ipjan Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n call adda ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( lenwk1 + 1 )) call jac ( Neq , dls1 % tn , Y , S , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Savr ) do i = 1 , dls1 % n ljfo = lenwk1 + i if ( Wk ( ljfo ) == 0.0D0 ) then if ( Savr ( i ) == 0.0D0 ) cycle Savr ( i ) = 0.0D0 else Wk ( ljfo ) = 0.0D0 Savr ( i ) = 0.0D0 endif if ( k > liwk ) goto 600 Iwk ( k ) = i k = k + 1 enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo goto 500 ! !  MOSS = 2. Compute structure from results of N + 1 calls to RES. ------ 200 continue do i = 1 , dls1 % n Wk ( lenwk1 + i ) = 0.0D0 enddo k = dlss % ipjan Iwk ( dlss % ipian ) = 1 ier = - 1 if ( dls1 % miter == 1 ) ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do j = 1 , dls1 % n call adda ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( lenwk1 + 1 )) yj = Y ( j ) erwt = 1.0D0 / Ewt ( j ) Y ( j ) = yj + sign ( erwt , yj ) call res ( Neq , dls1 % tn , Y , S , Rtem , ier ) if ( ier > 1 ) return Y ( j ) = yj do i = 1 , dls1 % n ljfo = lenwk1 + i if ( Wk ( ljfo ) /= 0.0D0 ) then Wk ( ljfo ) = 0.0D0 elseif ( Rtem ( i ) == Savr ( i ) ) then cycle endif if ( k > liwk ) goto 600 Iwk ( k ) = i k = k + 1 enddo Iwk ( dlss % ipian + j ) = k + 1 - dlss % ipjan enddo goto 500 ! !  MOSS = 3. Compute structure from the user's IA/JA and JAC routine. --- !  A dummy call to RES allows user to create temporaries for use in JAC. 300 continue ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do i = 1 , dls1 % n Savr ( i ) = 0.0D0 enddo knew = dlss % ipjan kamin = Ia ( 1 ) Iwk ( dlss % ipian ) = 1 do j = 1 , dls1 % n call jac ( Neq , dls1 % tn , Y , S , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Savr ) kamax = Ia ( j + 1 ) - 1 if ( kamin <= kamax ) then do k = kamin , kamax i = Ja ( k ) Savr ( i ) = 0.0D0 if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 enddo endif kamin = kamax + 1 do i = 1 , dls1 % n if ( Savr ( i ) /= 0.0D0 ) then Savr ( i ) = 0.0D0 if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 endif enddo Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan enddo goto 500 ! !  MOSS = 4. Compute structure from user's IA/JA and N + 1 RES calls. --- 400 continue knew = dlss % ipjan kamin = Ia ( 1 ) Iwk ( dlss % ipian ) = 1 ier = - 1 if ( dls1 % miter == 1 ) ier = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ier ) if ( ier > 1 ) goto 1000 do j = 1 , dls1 % n yj = Y ( j ) erwt = 1.0D0 / Ewt ( j ) Y ( j ) = yj + sign ( erwt , yj ) call res ( Neq , dls1 % tn , Y , S , Rtem , ier ) if ( ier > 1 ) return Y ( j ) = yj kamax = Ia ( j + 1 ) - 1 if ( kamin <= kamax ) then do k = kamin , kamax i = Ja ( k ) Rtem ( i ) = Savr ( i ) if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 enddo endif kamin = kamax + 1 do i = 1 , dls1 % n if ( Rtem ( i ) /= Savr ( i ) ) then if ( knew > liwk ) goto 600 Iwk ( knew ) = i knew = knew + 1 endif enddo Iwk ( dlss % ipian + j ) = knew + 1 - dlss % ipjan enddo ! 500 continue if ( dlss % moss /= 0 . and . dlss % istatc /= 3 ) then !  If ISTATE = 0 or 1 and MOSS .ne. 0, restore Y from YH. --------------- do i = 1 , dls1 % n Y ( i ) = Yh ( i ) enddo endif dlss % nnz = Iwk ( dlss % ipian + dls1 % n ) - 1 Ipper = 0 dlss % ngp = 0 lenigp = 0 dlss % ipigp = dlss % ipjan + dlss % nnz if ( dls1 % miter == 2 ) then ! !  Compute grouping of column indices (MITER = 2). ---------------------- ! maxg = np1 dlss % ipjgp = dlss % ipjan + dlss % nnz dlss % ibjgp = dlss % ipjgp - 1 dlss % ipigp = dlss % ipjgp + dls1 % n iptt1 = dlss % ipigp + np1 iptt2 = iptt1 + dls1 % n dlss % lreq = iptt2 + dls1 % n - 1 if ( dlss % lreq > liwk ) goto 700 call jgroup ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), maxg , dlss % ngp , Iwk ( dlss % ipigp ), Iwk ( dlss % ipjgp ), Iwk ( iptt1 ), Iwk ( iptt2 ), ier ) if ( ier /= 0 ) goto 700 lenigp = dlss % ngp + 1 endif ! !  Compute new ordering of rows/columns of Jacobian. -------------------- dlss % ipr = dlss % ipigp + lenigp dlss % ipc = dlss % ipr dlss % ipic = dlss % ipc + dls1 % n dlss % ipisp = dlss % ipic + dls1 % n dlss % iprsp = ( dlss % ipisp - 2 ) / dlss % lrat + 2 dlss % iesp = dlss % lenwk + 1 - dlss % iprsp if ( dlss % iesp < 0 ) goto 800 ibr = dlss % ipr - 1 do i = 1 , dls1 % n Iwk ( ibr + i ) = i enddo dlss % nsp = liwk + 1 - dlss % ipisp call odrv ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk , Iwk ( dlss % ipr ), Iwk ( dlss % ipic ), dlss % nsp , Iwk ( dlss % ipisp ), 1 , dlss % iys ) if ( dlss % iys == 11 * dls1 % n + 1 ) then ! Ipper = - 4 return else if ( dlss % iys /= 0 ) goto 800 ! !  Reorder JAN and do symbolic LU factorization of matrix. -------------- dlss % ipa = dlss % lenwk + 1 - dlss % nnz dlss % nsp = dlss % ipa - dlss % iprsp dlss % lreq = max ( 12 * dls1 % n / dlss % lrat , 6 * dls1 % n / dlss % lrat + 2 * dls1 % n + dlss % nnz ) + 3 dlss % lreq = dlss % lreq + dlss % iprsp - 1 + dlss % nnz if ( dlss % lreq > dlss % lenwk ) goto 900 dlss % iba = dlss % ipa - 1 do i = 1 , dlss % nnz Wk ( dlss % iba + i ) = 0.0D0 enddo dlss % ipisp = dlss % lrat * ( dlss % iprsp - 1 ) + 1 call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), & & Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Wk ( dlss % ipa ), & & Wk ( dlss % ipa ), dlss % nsp , Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 5 , dlss % iys ) dlss % lreq = dlss % lenwk - dlss % iesp if ( dlss % iys == 10 * dls1 % n + 1 ) goto 900 if ( dlss % iys /= 0 ) then ! Ipper = - 6 dlss % lreq = dlss % lenwk return else ipil = dlss % ipisp ipiu = ipil + 2 * dls1 % n + 1 dlss % nzu = Iwk ( ipil + dls1 % n ) - Iwk ( ipil ) dlss % nzl = Iwk ( ipiu + dls1 % n ) - Iwk ( ipiu ) if ( dlss % lrat <= 1 ) then call adjlr ( dls1 % n , Iwk ( dlss % ipisp ), ldif ) dlss % lreq = dlss % lreq + ldif endif if ( dlss % lrat == 2 . and . dlss % nnz == dls1 % n ) dlss % lreq = dlss % lreq + 1 dlss % nsp = dlss % nsp + dlss % lreq - dlss % lenwk dlss % ipa = dlss % lreq + 1 - dlss % nnz dlss % iba = dlss % ipa - 1 Ipper = 0 return endif endif ! 600 continue Ipper = - 1 dlss % lreq = 2 + ( 2 * dls1 % n + 1 ) / dlss % lrat dlss % lreq = max ( dlss % lenwk + 1 , dlss % lreq ) return ! 700 continue Ipper = - 2 dlss % lreq = ( dlss % lreq - 1 ) / dlss % lrat + 1 return ! 800 continue Ipper = - 3 call cntnzu ( dls1 % n , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), nzsut ) dlss % lreq = dlss % lenwk - dlss % iesp + ( 3 * dls1 % n + 4 * nzsut - 1 ) / dlss % lrat + 1 return ! 900 continue Ipper = - 5 return ! 1000 continue Ipper = - ier - 5 dlss % lreq = 2 + ( 2 * dls1 % n + 1 ) / dlss % lrat end subroutine dprepi","tags":"","loc":"sourcefile/dprepi.inc.html"},{"title":"dcfode.inc – odepack","text":"Contents Subroutines dcfode Source Code dcfode.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dcfode(3f) - [M_odepack] Set ODE integrator coefficients. !! !!### SYNOPSIS !!         subroutine dcfode (meth, elco, tesco) !!         integer          :: meth !!         double precision :: elco(13,12) !!         double precision :: tesco(3,12) !! !!### DESCRIPTION !!   DCFODE is called by the integrator routine to set coefficients !!   needed there. !! !!   DCFODE is called once at the beginning of the problem, !!   and is not called again unless and until METH is changed. !! !!### OPTIONS !! !!   METH !! !!   : The coefficients for the current method, as !!   given by the value of METH, are set for all orders and saved. !!   The maximum order assumed here is 12 if METH = 1 and 5 if METH = 2. !!   (A smaller value of the maximum order is also allowed.) !! !!   ELCO !! !!   : The ELCO array contains the basic method coefficients. !!   The coefficients el(i), 1 .le. i .le. nq+1, for the method of !!   order nq are stored in ELCO(i,nq).  They are given by a genetrating !!   polynomial, i.e., !!       l(x) = el(1) + el(2)*x + ... + el(nq+1)*x**nq. !!   For the implicit Adams methods, l(x) is given by !!       dl/dx = (x+1)*(x+2)*...*(x+nq-1)/factorial(nq-1),    l(-1) = 0. !!   For the BDF methods, l(x) is given by !!       l(x) = (x+1)*(x+2)* ... *(x+nq)/K, !!   where !!       K = factorial(nq)*(1 + 1/2 + ... + 1/nq). !! !!   TESCO !! !!   : The TESCO array contains test constants used for the !!   local error test and the selection of step size and/or order. !!   At order nq, TESCO(k,nq) is used for the selection of step !!   size at order nq - 1 if k = 1, at order nq if k = 2, and at order !!   nq + 1 if k = 3. !! ! ### BEGIN PROLOGUE  DCFODE ! ### SUBSIDIARY ! ### PURPOSE  Set ODE integrator coefficients. ! ### TYPE      DOUBLE PRECISION (SCFODE-S, DCFODE-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### DESCRIPTION ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     791129  DATE WRITTEN !     890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     890503  Minor cosmetic changes.  (FNF) !     930809  Renamed to allow single/double precision versions. (ACH) ! ### END PROLOGUE  DCFODE !----------------------------------------------------------------------- subroutine dcfode ( meth , elco , tesco ) integer , intent ( in ) :: meth real ( kind = dp ), intent ( inout ) :: elco ( 13 , 12 ) real ( kind = dp ), intent ( out ) :: tesco ( 3 , 12 ) integer :: i , ib , nq , nqm1 , nqp1 double precision :: agamq , fnq , fnqm1 , pc ( 12 ), pint , ragq , rqfac , rq1fac , tsign , xpin select case ( meth ) case ( 1 ) elco ( 1 , 1 ) = 1.0d0 elco ( 2 , 1 ) = 1.0d0 tesco ( 1 , 1 ) = 0.0d0 tesco ( 2 , 1 ) = 2.0d0 tesco ( 1 , 2 ) = 1.0d0 tesco ( 3 , 12 ) = 0.0d0 pc ( 1 ) = 1.0d0 rqfac = 1.0d0 do nq = 2 , 12 !----------------------------------------------------------------------- ! The PC array will contain the coefficients of the polynomial !     p(x) = (x+1)*(x+2)*...*(x+nq-1). ! Initially, p(x) = 1. !----------------------------------------------------------------------- rq1fac = rqfac rqfac = rqfac / nq nqm1 = nq - 1 fnqm1 = nqm1 nqp1 = nq + 1 ! Form coefficients of p(x)*(x+nq-1). ---------------------------------- pc ( nq ) = 0.0d0 do ib = 1 , nqm1 i = nqp1 - ib pc ( i ) = pc ( i - 1 ) + fnqm1 * pc ( i ) enddo pc ( 1 ) = fnqm1 * pc ( 1 ) ! Compute integral, -1 to 0, of p(x) and x*p(x). ----------------------- pint = pc ( 1 ) xpin = pc ( 1 ) / 2.0d0 tsign = 1.0d0 do i = 2 , nq tsign = - tsign pint = pint + tsign * pc ( i ) / i xpin = xpin + tsign * pc ( i ) / ( i + 1 ) enddo ! Store coefficients in ELCO and TESCO. -------------------------------- elco ( 1 , nq ) = pint * rq1fac elco ( 2 , nq ) = 1.0d0 do i = 2 , nq elco ( i + 1 , nq ) = rq1fac * pc ( i ) / i enddo agamq = rqfac * xpin ragq = 1.0d0 / agamq tesco ( 2 , nq ) = ragq if ( nq . lt . 12 ) tesco ( 1 , nqp1 ) = ragq * rqfac / nqp1 tesco ( 3 , nqm1 ) = ragq enddo case ( 2 ) pc ( 1 ) = 1.0d0 rq1fac = 1.0d0 do nq = 1 , 5 !----------------------------------------------------------------------- ! The PC array will contain the coefficients of the polynomial !     p(x) = (x+1)*(x+2)*...*(x+nq). ! Initially, p(x) = 1. !----------------------------------------------------------------------- fnq = nq nqp1 = nq + 1 ! Form coefficients of p(x)*(x+nq). ------------------------------------ pc ( nqp1 ) = 0.0d0 do ib = 1 , nq i = nq + 2 - ib pc ( i ) = pc ( i - 1 ) + fnq * pc ( i ) enddo pc ( 1 ) = fnq * pc ( 1 ) ! Store coefficients in ELCO and TESCO. -------------------------------- do i = 1 , nqp1 elco ( i , nq ) = pc ( i ) / pc ( 2 ) enddo elco ( 2 , nq ) = 1.0d0 tesco ( 1 , nq ) = rq1fac tesco ( 2 , nq ) = nqp1 / elco ( 1 , nq ) tesco ( 3 , nq ) = ( nq + 2 ) / elco ( 1 , nq ) rq1fac = rq1fac / fnq enddo case default stop '*dcfode* unknown value for meth' end select end subroutine dcfode","tags":"","loc":"sourcefile/dcfode.inc.html"},{"title":"dsetpk.inc – odepack","text":"Contents Subroutines dsetpk Source Code dsetpk.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DSETPK is called by DSTOKA to interface with the user-supplied !! routine JAC, to compute and process relevant parts of !! the matrix P = I - H*EL(1)*J, where J is the Jacobian df/dy, !! as need for preconditioning matrix operations later. !! !! In addition to variables described previously, communication !! with DSETPK uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! YSV !! !! : array containing predicted y, to be saved (YH1 in DSTOKA). !! !! FTEM !! !! : work array of length N (ACOR in DSTOKA). !! !! SAVF !! !! : array containing f evaluated at predicted y. !! !! JOK !! !! : input flag showing whether it was judged that Jacobian matrix !! data need not be recomputed (JOK = 1) or needs to be (JOK = -1). !! !! WM !! !! : real work space for matrices. !! Space for preconditioning data starts at WM(LOCWP). !! !! IWM !! !! : integer work space. !! Space for preconditioning data starts at IWM(LOCIWP). !! !! IERPJ !! !! : output error flag,  = 0 if no trouble, .gt. 0 if !! JAC returned an error flag. !! !! JCUR !! !! : output flag to indicate whether the matrix data involved !! is now current (JCUR = 1) or not (JCUR = 0). !! !! This routine also uses Common variables EL0, H, TN, IERPJ, JCUR, NJE. !----------------------------------------------------------------------- subroutine dsetpk ( Neq , Y , Ysv , Ewt , Ftem , Savf , Jok , Wm , Iwm , f , jac ) integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ysv ( * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) integer :: Jok real ( kind = dp ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: jac real ( kind = dp ) :: hl0 integer :: ier dls1 % ierpj = 0 dls1 % jcur = 0 if ( Jok ==- 1 ) dls1 % jcur = 1 hl0 = dls1 % el0 * dls1 % h call jac ( f , Neq , dls1 % tn , Y , Ysv , Ewt , Savf , Ftem , hl0 , Jok , Wm ( dlpk % locwp ), Iwm ( dlpk % lociwp ), ier ) dls1 % nje = dls1 % nje + 1 if ( ier == 0 ) return dls1 % ierpj = 1 end subroutine dsetpk","tags":"","loc":"sourcefile/dsetpk.inc.html"},{"title":"diprepi.inc – odepack","text":"Contents Subroutines diprepi Source Code diprepi.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine serves as an interface between the driver and !! Subroutine DPREPI.  Tasks performed here are: !! !!  * call DPREPI, !!  * reset the required WM segment length LENWK, !!  * move YH back to its final location (following WM in RWORK), !!  * reset pointers for YH, SAVR, EWT, and ACOR, and !!  * move EWT to its new position if ISTATE = 0 or 1. !! !! IPFLAG is an output error indication flag.  IPFLAG = 0 if there was !! no trouble, and IPFLAG is the value of the DPREPI error flag IPPER !! if there was trouble in Subroutine DPREPI. !----------------------------------------------------------------------- subroutine diprepi ( Neq , Y , S , Rwork , Ia , Ja , Ic , Jc , Ipflag , res , jac , adda ) ! integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: S ( * ) real ( kind = dp ), intent ( inout ) :: Rwork ( * ) integer :: Ia ( * ) integer :: Ja ( * ) integer :: Ic ( * ) integer :: Jc ( * ) integer , intent ( inout ) :: Ipflag external :: res external :: jac external :: adda integer :: i , imax , lewtn , lyhd , lyhn Ipflag = 0 !  Call DPREPI to do matrix preprocessing operations. ------------------- call dprepi ( Neq , Y , S , Rwork ( dls1 % lyh ), Rwork ( dls1 % lsavf ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lacor ), Ia , Ja , Ic , Jc , Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), & & Ipflag , res , jac , adda ) dlss % lenwk = max ( dlss % lreq , dlss % lwmin ) if ( Ipflag < 0 ) return !  If DPREPI was successful, move YH to end of required space for WM. --- lyhn = dls1 % lwm + dlss % lenwk if ( lyhn > dls1 % lyh ) return lyhd = dls1 % lyh - lyhn if ( lyhd /= 0 ) then imax = lyhn - 1 + dlss % lenyhm do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo dls1 % lyh = lyhn endif !  Reset pointers for SAVR, EWT, and ACOR. ------------------------------ dls1 % lsavf = dls1 % lyh + dlss % lenyh lewtn = dls1 % lsavf + dls1 % n dls1 % lacor = lewtn + dls1 % n if ( dlss % istatc /= 3 ) then !  If ISTATE = 1, move EWT (left) to its new position. ------------------ if ( lewtn > dls1 % lewt ) return do i = 1 , dls1 % n Rwork ( i + lewtn - 1 ) = Rwork ( i + dls1 % lewt - 1 ) enddo endif dls1 % lewt = lewtn end subroutine diprepi","tags":"","loc":"sourcefile/diprepi.inc.html"},{"title":"dprepj.inc – odepack","text":"Contents Subroutines dprepj Source Code dprepj.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!    dprepj(3f) - [M_odepack] Compute and process Newton iteration matrix. !! !!### DESCRIPTION !!  DPREPJ is called by DSTODE to compute and process the matrix !!  P = I - h*el(1)*J , where J is an approximation to the Jacobian. !! !!  Here J is computed by the user-supplied routine JAC if !!  MITER = 1 or 4, or by finite differencing if MITER = 2, 3, or 5. !! !!  If MITER = 3, a diagonal approximation to J is used. !! !!  J is stored in WM and replaced by P.  If MITER .ne. 3, P is then !!  subjected to LU decomposition in preparation for later solution !!  of linear systems with P as coefficient matrix.  This is done !!  by DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. !! !!  In addition to variables described in DSTODE and DLSODE prologues, !!  communication with DPREPJ uses the following: !! !!  Y !! !!  : array containing predicted values on entry. !! !!  FTEM !! !!  : work array of length N (ACOR in DSTODE). !! !!  SAVF !! !!  : array containing f evaluated at predicted y. !! !!  WM !! !!  : real work space for matrices.  On output it contains the !!    inverse diagonal matrix if MITER = 3 and the LU decomposition !!    of P if MITER is 1, 2 , 4, or 5. !!    Storage of matrix elements starts at WM(3). !!    WM also contains the following matrix-related data: !!    WM(1) = SQRT(UROUND), used in numerical Jacobian increments. !!    WM(2) = H*EL0, saved for later use if MITER = 3. !! !!  IWM !! !!  : integer work space containing pivot information, starting at !!    IWM(21), if MITER is 1, 2, 4, or 5.  IWM also contains band !!    parameters ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. !! !!  EL0 !! !!  : EL(1) (input). !! !!  IERPJ !! !!  : output error flag,  = 0 if no trouble, .gt. 0 if !!    P matrix found to be singular. !! !!  JCUR !! !!  : output flag = 1 to indicate that the Jacobian matrix !!    (or approximation) is now current. !! !!  This routine also uses the COMMON variables EL0, H, TN, UROUND, !!  MITER, N, NFE, and NJE. !! ! ### BEGIN PROLOGUE  DPREPJ ! ### SUBSIDIARY ! ### TYPE      DOUBLE PRECISION (SPREPJ-S, DPREPJ-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  DGBFA, DGEFA, DVNORM ! ### COMMON BLOCKS    DLS001 ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890504  Minor cosmetic changes.  (FNF) !     19930809  Renamed to allow single/double precision versions. (ACH) !     19010418  Reduced size of Common block /DLS001/. (ACH) !     19031105  Restored 'own' variables to Common block /DLS001/, to !               enable interrupt/restart feature. (ACH) ! ### END PROLOGUE  DPREPJ ! **End !----------------------------------------------------------------------- subroutine dprepj ( Neq , Y , Yh , Nyh , Ewt , Ftem , Savf , Wm , Iwm , f , jac ) ! integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Y ( * ) integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ) :: Yh ( Nyh , * ) real ( kind = dp ) :: Ewt ( * ) real ( kind = dp ) :: Ftem ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: Wm ( * ) integer :: Iwm ( * ) external :: f external :: jac ! real ( kind = dp ) :: con , di , fac , hl0 , r , r0 , srur , yi , yj , yjj integer :: i , i1 , i2 , ier , ii , j , j1 , jj , lenp , mba , mband , meb1 , meband , ml , ml3 , mu , np1 ! dls1 % nje = dls1 % nje + 1 dls1 % ierpj = 0 dls1 % jcur = 1 hl0 = dls1 % h * dls1 % el0 select case ( dls1 % miter ) case ( 2 ) !  If MITER = 2, make N calls to F to approximate J. -------------------- fac = dvnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 srur = Wm ( 1 ) j1 = 2 do j = 1 , dls1 % n yj = Y ( j ) r = max ( srur * abs ( yj ), r0 / Ewt ( j )) Y ( j ) = Y ( j ) + r fac = - hl0 / r call f ( Neq , dls1 % tn , Y , Ftem ) do i = 1 , dls1 % n Wm ( i + j1 ) = ( Ftem ( i ) - Savf ( i )) * fac enddo Y ( j ) = yj j1 = j1 + dls1 % n enddo dls1 % nfe = dls1 % nfe + dls1 % n case ( 3 ) !  If MITER = 3, construct a diagonal approximation to J and P. --------- Wm ( 2 ) = hl0 r = dls1 % el0 * 0.1D0 do i = 1 , dls1 % n Y ( i ) = Y ( i ) + r * ( dls1 % h * Savf ( i ) - Yh ( i , 2 )) enddo call f ( Neq , dls1 % tn , Y , Wm ( 3 )) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n r0 = dls1 % h * Savf ( i ) - Yh ( i , 2 ) di = 0.1D0 * r0 - dls1 % h * ( Wm ( i + 2 ) - Savf ( i )) Wm ( i + 2 ) = 1.0D0 if ( abs ( r0 ) >= dls1 % uround / Ewt ( i ) ) then if ( abs ( di ) == 0.0D0 ) then dls1 % ierpj = 1 return else Wm ( i + 2 ) = 0.1D0 * r0 / di endif endif enddo return case ( 4 ) !  If MITER = 4, call JAC and multiply by scalar. ----------------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) ml3 = ml + 3 mband = ml + mu + 1 meband = mband + ml lenp = meband * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , ml , mu , Wm ( ml3 ), meband ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo call wrapup () return case ( 5 ) !  If MITER = 5, make MBAND calls to F to approximate J. ---------------- ml = Iwm ( 1 ) mu = Iwm ( 2 ) mband = ml + mu + 1 mba = min ( mband , dls1 % n ) meband = mband + ml meb1 = meband - 1 srur = Wm ( 1 ) fac = dvnorm ( dls1 % n , Savf , Ewt ) r0 = 100 0.0D0 * abs ( dls1 % h ) * dls1 % uround * dls1 % n * fac if ( r0 == 0.0D0 ) r0 = 1.0D0 do j = 1 , mba do i = j , dls1 % n , mband yi = Y ( i ) r = max ( srur * abs ( yi ), r0 / Ewt ( i )) Y ( i ) = Y ( i ) + r enddo call f ( Neq , dls1 % tn , Y , Ftem ) do jj = j , dls1 % n , mband Y ( jj ) = Yh ( jj , 1 ) yjj = Y ( jj ) r = max ( srur * abs ( yjj ), r0 / Ewt ( jj )) fac = - hl0 / r i1 = max ( jj - mu , 1 ) i2 = min ( jj + ml , dls1 % n ) ii = jj * meb1 - ml + 2 do i = i1 , i2 Wm ( ii + i ) = ( Ftem ( i ) - Savf ( i )) * fac enddo enddo enddo dls1 % nfe = dls1 % nfe + mba call wrapup () return case default !  If MITER = 1, call JAC and multiply by scalar. ----------------------- lenp = dls1 % n * dls1 % n do i = 1 , lenp Wm ( i + 2 ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , 0 , 0 , Wm ( 3 ), dls1 % n ) con = - hl0 do i = 1 , lenp Wm ( i + 2 ) = Wm ( i + 2 ) * con enddo endselect !  Add identity matrix. ------------------------------------------------- j = 3 np1 = dls1 % n + 1 do i = 1 , dls1 % n Wm ( j ) = Wm ( j ) + 1.0D0 j = j + np1 enddo !  Do LU decomposition on P. -------------------------------------------- call dgefa ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 contains subroutine wrapup () !  Add identity matrix. ------------------------------------------------- ii = mband + 2 do i = 1 , dls1 % n Wm ( ii ) = Wm ( ii ) + 1.0D0 ii = ii + meband enddo !  Do LU decomposition of P. -------------------------------------------- call dgbfa ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), ier ) if ( ier /= 0 ) dls1 % ierpj = 1 end subroutine wrapup end subroutine dprepj","tags":"","loc":"sourcefile/dprepj.inc.html"},{"title":"dspigmr.inc – odepack","text":"Contents Subroutines dspigmr Source Code dspigmr.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine solves the linear system A * x = b using a scaled !! preconditioned version of the Generalized Minimal Residual method. !! An initial guess of x = 0 is assumed. !! !!### On entry !! !! NEQ !! !! : problem size, passed to F and PSOL (NEQ(1) = N). !! !! TN !! !! : current value of t. !! !! Y !! !! : array containing current dependent variable vector. !! !! SAVF !! !! : array containing current value of f(t,y). !! !! B !! !! : the right hand side of the system A*x = b. !! !! B is also used as work space when computing !! !! the final approximation. !! (B is the same as V(*,MAXL+1) in the call to DSPIGMR.) !! !! WGHT !! !! : the vector of length N containing the nonzero !! elements of the diagonal scaling matrix. !! !! N !! !! : the order of the matrix A, and the lengths !! of the vectors WGHT, B and X. !! !! MAXL !! !! : the maximum allowable order of the matrix HES. !! !! MAXLP1 !! !! : MAXLP1 = MAXL + 1, used for dynamic dimensioning of HES. !! !! KMP !! !! : the number of previous vectors the new vector VNEW !! must be made orthogonal to.  KMP .le. MAXL. !! !! DELTA !! !! : tolerance on residuals b - A*x in weighted RMS-norm. !! !! HL0 !! !! : current value of (step size h) * (coefficient l0). !! !! JPRE !! !! : preconditioner type flag. !! !! MNEWT !! !! : Newton iteration counter (.ge. 0). !! !! WK !! !! : real work array used by routine DATV and PSOL. !! !! DL !! !! : real work array used for calculation of the residual !! norm RHO when the method is incomplete (KMP .lt. MAXL). !! Not needed or referenced in complete case (KMP = MAXL). !! !! WP !! !! : real work array used by preconditioner PSOL. !! !! IWP !! !! : integer work array used by preconditioner PSOL. !! !!### On return !! !! X !! !! : the final computed approximation to the solution !! of the system A*x = b. !! !! LGMR !! !! : the number of iterations performed and !! the current order of the upper Hessenberg !! matrix HES. !! !! NPSL !! !! : the number of calls to PSOL. !! !! V !! !! : the N by (LGMR+1) array containing the LGMR !! orthogonal vectors V(*,1) to V(*,LGMR). !! !! HES !! !! : the upper triangular factor of the QR decomposition !! of the (LGMR+1) by lgmr upper Hessenberg matrix whose !! entries are the scaled inner-products of A*V(*,i) !! and V(*,k). !! !! Q !! !! : real array of length 2*MAXL containing the components !! of the Givens rotations used in the QR decomposition !! of HES.  It is loaded in DHEQR and used in DHELS. !! !! IFLAG !! !! : integer error flag: !! !!  value | description !!  ----- | ----------------------------------------------------- !!      0 | means convergence in LGMR iterations, LGMR .le. MAXL. !!      1 | means the convergence test did not pass in MAXL !!        | iterations, but the residual norm is .lt. 1, !!        | or .lt. norm(b) if MNEWT = 0, and so x is computed. !!      2 | means the convergence test did not pass in MAXL !!        | iterations, residual .gt. 1, and X is undefined. !!      3 | means there was a recoverable error in PSOL !!        | caused by the preconditioner being out of date. !!     -1 | means there was a nonrecoverable error in PSOL. !! !----------------------------------------------------------------------- subroutine dspigmr ( Neq , Tn , Y , Savf , B , Wght , N , Maxl , Maxlp1 , Kmp , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , V , Hes , Q , Lgmr , Wp , Iwp , Wk , Dl , Iflag ) ! integer :: Neq ( * ) real ( kind = dp ) :: Tn real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) real ( kind = dp ) :: Wght ( * ) integer :: N integer , intent ( in ) :: Maxl integer :: Maxlp1 integer :: Kmp real ( kind = dp ), intent ( inout ) :: Delta real ( kind = dp ) :: Hl0 integer :: Jpre integer , intent ( in ) :: Mnewt external :: f external :: psol integer , intent ( out ) :: Npsl real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ), intent ( inout ) :: V ( N , * ) real ( kind = dp ) :: Hes ( Maxlp1 , * ) real ( kind = dp ), intent ( inout ) :: Q ( * ) integer , intent ( out ) :: Lgmr real ( kind = dp ), intent ( inout ) :: Wp ( * ) integer :: Iwp ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) real ( kind = dp ), intent ( inout ) :: Dl ( * ) integer , intent ( out ) :: Iflag ! real ( kind = dp ) :: bnrm , bnrm0 , c , dlnrm , prod , rho , s , snormw , tem integer :: i , i2 , ier , info , ip1 , j , k , ll , llp1 ! Iflag = 0 Lgmr = 0 Npsl = 0 !----------------------------------------------------------------------- !  The initial residual is the vector b.  Apply scaling to b, and test !  for an immediate return with X = 0 or X = b. !----------------------------------------------------------------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm0 = dnrm2 ( N , V , 1 ) bnrm = bnrm0 if ( bnrm0 > Delta ) then !  Apply inverse of left preconditioner to vector b. -------------------- ier = 0 if ( Jpre /= 0 . and . Jpre /= 2 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , B , 1 , ier ) Npsl = 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif !  Calculate norm of scaled vector V(*,1) and normalize it. ------------- do i = 1 , N V ( i , 1 ) = B ( i ) * Wght ( i ) enddo bnrm = dnrm2 ( N , V , 1 ) Delta = Delta * ( bnrm / bnrm0 ) endif tem = 1.0D0 / bnrm call dscal ( N , tem , V ( 1 , 1 ), 1 ) !  Zero out the HES array. ---------------------------------------------- do j = 1 , Maxl do i = 1 , Maxlp1 Hes ( i , j ) = 0.0D0 enddo enddo !----------------------------------------------------------------------- !  Main loop to compute the vectors V(*,2) to V(*,MAXL). !  The running product PROD is needed for the convergence test. !----------------------------------------------------------------------- prod = 1.0D0 do ll = 1 , Maxl Lgmr = ll !----------------------------------------------------------------------- !  Call routine DATV to compute VNEW = Abar*v(ll), where Abar is !  the matrix A with scaling and inverse preconditioner factors applied. !  Call routine DORTHOG to orthogonalize the new vector VNEW = V(*,LL+1). !  Call routine DHEQR to update the factors of HES. !----------------------------------------------------------------------- call datv ( Neq , Y , Savf , V ( 1 , ll ), Wght , X , f , psol , V ( 1 , ll + 1 ), Wk , Wp , Iwp , Hl0 , Jpre , ier , Npsl ) if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif call dorthog ( V ( 1 , ll + 1 ), V , Hes , N , ll , Maxlp1 , Kmp , snormw ) Hes ( ll + 1 , ll ) = snormw call dheqr ( Hes , Maxlp1 , ll , Q , info , ll ) if ( info == ll ) then Iflag = 2 return endif !----------------------------------------------------------------------- !  Update RHO, the estimate of the norm of the residual b - A*xl. !  If KMP .lt. MAXL, then the vectors V(*,1),...,V(*,LL+1) are not !  necessarily orthogonal for LL .gt. KMP.  The vector DL must then !  be computed, and its norm used in the calculation of RHO. !----------------------------------------------------------------------- prod = prod * Q ( 2 * ll ) rho = abs ( prod * bnrm ) if ( ( ll > Kmp ) . and . ( Kmp < Maxl ) ) then if ( ll == Kmp + 1 ) then !X!call dcopy(N,V(1,1),1,Dl,1) Dl ( 1 : N ) = V ( 1 : N , 1 ) do i = 1 , Kmp ip1 = i + 1 i2 = i * 2 s = Q ( i2 ) c = Q ( i2 - 1 ) do k = 1 , N Dl ( k ) = s * Dl ( k ) + c * V ( k , ip1 ) enddo enddo endif s = Q ( 2 * ll ) c = Q ( 2 * ll - 1 ) / snormw llp1 = ll + 1 do k = 1 , N Dl ( k ) = s * Dl ( k ) + c * V ( k , llp1 ) enddo dlnrm = dnrm2 ( N , Dl , 1 ) rho = rho * dlnrm endif !----------------------------------------------------------------------- !  Test for convergence.  If passed, compute approximation xl. !  if failed and LL .lt. MAXL, then continue iterating. !----------------------------------------------------------------------- if ( rho <= Delta ) then call approximate () return endif if ( ll == Maxl ) exit !----------------------------------------------------------------------- !  Rescale so that the norm of V(1,LL+1) is one. !----------------------------------------------------------------------- tem = 1.0D0 / snormw call dscal ( N , tem , V ( 1 , ll + 1 ), 1 ) enddo if ( rho <= 1.0D0 ) then Iflag = 1 call approximate () return elseif ( rho <= bnrm . and . Mnewt == 0 ) then Iflag = 1 call approximate () return endif elseif ( Mnewt > 0 ) then do i = 1 , N X ( i ) = 0.0D0 enddo return else !X!call dcopy(N,B,1,X,1) X ( 1 : N ) = B ( 1 : N ) return endif Iflag = 2 contains subroutine approximate !----------------------------------------------------------------------- !  Compute the approximation xl to the solution. !  Since the vector X was used as work space, and the initial guess !  of the Newton correction is zero, X must be reset to zero. !----------------------------------------------------------------------- integer :: ll ll = Lgmr llp1 = ll + 1 do k = 1 , llp1 B ( k ) = 0.0D0 enddo B ( 1 ) = bnrm call dhels ( Hes , Maxlp1 , ll , Q , B ) do k = 1 , N X ( k ) = 0.0D0 enddo do i = 1 , ll call daxpy ( N , B ( i ), V ( 1 , i ), 1 , X , 1 ) enddo do i = 1 , N X ( i ) = X ( i ) / Wght ( i ) enddo if ( Jpre <= 1 ) return call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , X , 2 , ier ) Npsl = Npsl + 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns forced by routine PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif end subroutine approximate end subroutine dspigmr","tags":"","loc":"sourcefile/dspigmr.inc.html"},{"title":"mdm.inc – odepack","text":"Contents Subroutines mdm Source Code mdm.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!  mdm -- form element from uneliminated neighbors of vk !! !----------------------------------------------------------------------- subroutine mdm ( Vk , Tail , V , L , Last , Next , Mark ) integer , intent ( in ) :: Vk integer , intent ( inout ) :: Tail integer , intent ( in ) :: V ( * ) integer , intent ( inout ) :: L ( * ) integer , intent ( in ) :: Last ( * ) integer , intent ( in ) :: Next ( * ) integer , intent ( inout ) :: Mark ( * ) integer :: b , blp , blpmax , es , lb , ls , s , tag , vb , vs equivalence ( vs , es ) ! !----initialize tag and list of uneliminated neighbors tag = Mark ( Vk ) Tail = Vk ! !----for each vertex/element vs/es in element list of vk ls = L ( Vk ) do s = ls if ( s == 0 ) then ! !----terminate list of uneliminated neighbors L ( Tail ) = 0 exit else ls = L ( s ) vs = V ( s ) if ( Next ( vs ) < 0 ) then ! !------if es is active element, then ... !--------for each vertex vb in boundary list of element es lb = L ( es ) blpmax = Last ( es ) do blp = 1 , blpmax b = lb lb = L ( b ) vb = V ( b ) ! !----------if vb is untagged vertex, then tag and append to list of !----------uneliminated neighbors if ( Mark ( vb ) < tag ) then Mark ( vb ) = tag L ( Tail ) = b Tail = b endif enddo ! !--------mark es inactive ! Mark ( es ) = tag else ! !------if vs is uneliminated vertex, then tag and append to list of !------uneliminated neighbors Mark ( vs ) = tag L ( Tail ) = s Tail = s endif endif enddo end subroutine mdm","tags":"","loc":"sourcefile/mdm.inc.html"},{"title":"dstoka.inc – odepack","text":"Contents Subroutines dstoka Source Code dstoka.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DSTOKA performs one step of the integration of an initial value !! problem for a system of Ordinary Differential Equations. !! !! This routine was derived from Subroutine DSTODPK in the DLSODPK !! package by the addition of automatic functional/Newton iteration !! switching and logic for re-use of Jacobian data. !! !! Note: DSTOKA is independent of the value of the iteration method !! indicator MITER, when this is .ne. 0, and hence is independent !! of the type of chord method used, or the Jacobian structure. !! !! Communication with DSTOKA is done with the following variables: !! !! NEQ !! !! : integer array containing problem size in NEQ(1), and !! passed as the NEQ argument in all calls to F and JAC. !! !! Y !! !! : an array of length .ge. N used as the Y argument in !! all calls to F and JAC. !! !! YH !! !! : an NYH by LMAX array containing the dependent variables !! and their approximate scaled derivatives, where !! LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate !! j-th derivative of y(i), scaled by H**j/factorial(j) !! (j = 0,1,...,NQ).  On entry for the first step, the first !! two columns of YH must be set from the initial values. !! !! NYH !! !! : a constant integer .ge. N, the first dimension of YH. !! !! YH1 !! !! : a one-dimensional array occupying the same space as YH. !! !! EWT !! !! : an array of length N containing multiplicative weights !! for local error measurements.  Local errors in y(i) are !! compared to 1.0/EWT(i) in various error tests. !! !! SAVF !! !! : an array of working storage, of length N. !! Also used for input of YH(*,MAXORD+2) when JSTART = -1 !! and MAXORD .lt. the current order NQ. !! !! SAVX !! !! : an array of working storage, of length N. !! !! ACOR !! !! : a work array of length N, used for the accumulated !! corrections.  On a successful return, ACOR(i) contains !! the estimated one-step local error in y(i). !! !! WM,IWM !! !! : real and integer work arrays associated with matrix !! operations in chord iteration (MITER .ne. 0). !! !! CCMAX !! !! : maximum relative change in H*EL0 before DSETPK is called. !! !! H !! !! : the step size to be attempted on the next step. !! H is altered by the error control algorithm during the !! problem.  H can be either positive or negative, but its !! sign must remain constant throughout the problem. !! !! HMIN !! !! : the minimum absolute value of the step size H to be used. !! !! HMXI !! !! : inverse of the maximum absolute value of H to be used. !! !! !! HMXI = 0.0 is allowed and corresponds to an infinite HMAX. !! !! !! HMIN and HMXI may be changed at any time, but will not !! take effect until the next change of H is considered. !! !! TN !! !! : the independent variable. TN is updated on each step taken. !! !! JSTART !! !! : an integer used for input only, with the following !! values and meanings: !! !!               0  perform the first step. !!           .gt.0  take a new step continuing from the last. !!              -1  take the next step with a new value of H, MAXORD, !!                  N, METH, MITER, and/or matrix parameters. !!              -2  take the next step with a new value of H, !!                  but with other inputs unchanged. !! !! On return, JSTART is set to 1 to facilitate continuation. !! !! KFLAG !! !! : a completion code with the following meanings: !! !!                0  the step was succesful. !!               -1  the requested error could not be achieved. !!               -2  corrector convergence could not be achieved. !!               -3  fatal error in DSETPK or DSOLPK. !! !! A return with KFLAG = -1 or -2 means either !! ABS(H) = HMIN or 10 consecutive failures occurred. !! On a return with KFLAG negative, the values of TN and !! the YH array are as of the beginning of the last !! step, and H is the last step size attempted. !! !! MAXORD !! !! : the maximum order of integration method to be allowed. !! !! MAXCOR !! !! : the maximum number of corrector iterations allowed. !! !! MSBP !! !! : maximum number of steps between DSETPK calls (MITER .gt. 0). !! !! MXNCF !! !! : maximum number of convergence failures allowed. !! METH/MITER = the method flags.  See description in driver. !! !! N !! !! : the number of first-order differential equations. !----------------------------------------------------------------------- subroutine dstoka ( Neq , Y , Yh , Nyh , Yh1 , Ewt , Savf , Savx , Acor , Wm , Iwm , f , jac , psol ) integer , dimension ( * ) :: Neq real ( kind = dp ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( inout ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( inout ), dimension ( * ) :: Yh1 real ( kind = dp ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savf real ( kind = dp ), intent ( inout ), dimension ( * ) :: Savx real ( kind = dp ), intent ( inout ), dimension ( * ) :: Acor real ( kind = dp ), dimension ( * ) :: Wm integer , dimension ( * ) :: Iwm external f external jac external psol real ( kind = dp ) :: dcon , ddn , del , delp , dfnrm , drc , dsm , dup , exdn , exsm , exup , r , rh , rhdn , rhsm , rhup , roc , stiff , told integer :: i , i1 , iredo , iret , j , jb , jok , m , ncf , newq , nslow dls1 % kflag = 0 told = dls1 % tn ncf = 0 dls1 % ierpj = 0 dls1 % iersl = 0 dls1 % jcur = 0 dls1 % icf = 0 delp = 0.0D0 if ( dls1 % jstart > 0 ) goto 400 if ( dls1 % jstart ==- 1 ) then !----------------------------------------------------------------------- !  The following block handles preliminaries needed when JSTART = -1. !  IPUP is set to MITER to force a matrix update. !  If an order increase is about to be considered (IALTH = 1), !  IALTH is reset to 2 to postpone consideration one more step. !  If the caller has changed METH, DCFODE is called to reset !  the coefficients of the method. !  If the caller has changed MAXORD to a value less than the current !  order NQ, NQ is reduced to MAXORD, and a new H chosen accordingly. !  If H is to be changed, YH must be rescaled. !  If H or METH is being changed, IALTH is reset to L = NQ + 1 !  to prevent further changes in H for that many steps. !----------------------------------------------------------------------- dls1 % ipup = dls1 % miter dls1 % lmax = dls1 % maxord + 1 if ( dls1 % ialth == 1 ) dls1 % ialth = 2 if ( dls1 % meth /= dls1 % meo ) then call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) dls1 % meo = dls1 % meth if ( dls1 % nq <= dls1 % maxord ) then dls1 % ialth = dls1 % l iret = 1 goto 100 endif elseif ( dls1 % nq <= dls1 % maxord ) then goto 200 endif dls1 % nq = dls1 % maxord dls1 % l = dls1 % lmax do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) ddn = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 1 , dls1 % l ) exdn = 1.0D0 / dls1 % l rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) rh = min ( rhdn , 1.0D0 ) iredo = 3 if ( dls1 % h == dls1 % hold ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) else rh = min ( rh , abs ( dls1 % h / dls1 % hold )) dls1 % h = dls1 % hold endif goto 300 else if ( dls1 % jstart ==- 2 ) goto 200 !----------------------------------------------------------------------- !  On the first call, the order is set to 1, and other variables are !  initialized.  RMAX is the maximum ratio by which H can be increased !  in a single step.  It is initially 1.E4 to compensate for the small !  initial H, but then is normally equal to 10.  If a failure !  occurs (in corrector convergence or error test), RMAX is set at 2 !  for the next increase. !----------------------------------------------------------------------- dls1 % lmax = dls1 % maxord + 1 dls1 % nq = 1 dls1 % l = 2 dls1 % ialth = 2 dls1 % rmax = 1000 0.0D0 dls1 % rc = 0.0D0 dls1 % el0 = 1.0D0 dls1 % crate = 0.7D0 dls1 % hold = dls1 % h dls1 % meo = dls1 % meth dls1 % nslp = 0 dls % nslj = 0 dls1 % ipup = 0 iret = 3 dls % newt = 0 dls % stifr = 0.0D0 !----------------------------------------------------------------------- !  DCFODE is called to get all the integration coefficients for the !  current METH.  Then the EL vector and related constants are reset !  whenever the order NQ is changed, or at the start of the problem. !----------------------------------------------------------------------- call dcfode ( dls1 % meth , dls1 % elco , dls1 % tesco ) endif 100 continue do i = 1 , dls1 % l dls1 % el ( i ) = dls1 % elco ( i , dls1 % nq ) enddo dls1 % nqnyh = dls1 % nq * Nyh dls1 % rc = dls1 % rc * dls1 % el ( 1 ) / dls1 % el0 dls1 % el0 = dls1 % el ( 1 ) dls1 % conit = 0.5D0 / ( dls1 % nq + 2 ) dlpk % epcon = dls1 % conit * dls1 % tesco ( 2 , dls1 % nq ) select case ( iret ) case ( 2 ) rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 case ( 3 ) goto 400 case default endselect !----------------------------------------------------------------------- !  If H is being changed, the H ratio RH is checked against !  RMAX, HMIN, and HMXI, and the YH array rescaled.  IALTH is set to !  L = NQ + 1 to prevent a change of H for that many steps, unless !  forced by a convergence or error test failure. !----------------------------------------------------------------------- 200 continue if ( dls1 % h == dls1 % hold ) goto 400 rh = dls1 % h / dls1 % hold dls1 % h = dls1 % hold iredo = 3 300 continue rh = min ( rh , dls1 % rmax ) rh = rh / max ( 1.0D0 , abs ( dls1 % h ) * dls1 % hmxi * rh ) r = 1.0D0 do j = 2 , dls1 % l r = r * rh do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) * r enddo enddo dls1 % h = dls1 % h * rh dls1 % rc = dls1 % rc * rh dls1 % ialth = dls1 % l if ( iredo == 0 ) then dls1 % rmax = 1 0.0D0 goto 1200 endif !----------------------------------------------------------------------- !  This section computes the predicted values by effectively !  multiplying the YH array by the Pascal triangle matrix. !  The flag IPUP is set according to whether matrix data is involved !  (NEWT .gt. 0 .and. JACFLG .ne. 0) or not, to trigger a call to DSETPK. !  IPUP is set to MITER when RC differs from 1 by more than CCMAX, !  and at least every MSBP steps, when JACFLG = 1. !  RC is the ratio of new to old values of the coefficient  H*EL(1). !----------------------------------------------------------------------- 400 continue if ( dls % newt == 0 . or . dlpk % jacflg == 0 ) then drc = 0.0D0 dls1 % ipup = 0 dls1 % crate = 0.7D0 else drc = abs ( dls1 % rc - 1.0D0 ) if ( drc > dls1 % ccmax ) dls1 % ipup = dls1 % miter if ( dls1 % nst >= dls1 % nslp + dls1 % msbp ) dls1 % ipup = dls1 % miter endif dls1 % tn = dls1 % tn + dls1 % h i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) + Yh1 ( i + Nyh ) enddo enddo !----------------------------------------------------------------------- !  Up to MAXCOR corrector iterations are taken.  A convergence test is !  made on the RMS-norm of each correction, weighted by the error !  weight vector EWT.  The sum of the corrections is accumulated in the !  vector ACOR(i).  The YH array is not altered in the corrector loop. !  Within the corrector loop, an estimated rate of convergence (ROC) !  and a stiffness ratio estimate (STIFF) are kept.  Corresponding !  global estimates are kept as CRATE and dls%stifr. !----------------------------------------------------------------------- 500 continue m = 0 dlpk % mnewt = 0 stiff = 0.0D0 roc = 0.05D0 nslow = 0 do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 if ( dls % newt /= 0 . and . dls1 % ipup > 0 ) then !----------------------------------------------------------------------- !  If indicated, DSETPK is called to update any matrix data needed, !  before starting the corrector iteration. !  JOK is set to indicate if the matrix data need not be recomputed. !  IPUP is set to 0 as an indicator that the matrix data is up to date. !----------------------------------------------------------------------- jok = 1 if ( dls1 % nst == 0 . or . dls1 % nst > dls % nslj + 50 ) jok = - 1 if ( dls1 % icf == 1 . and . drc < 0.2D0 ) jok = - 1 if ( dls1 % icf == 2 ) jok = - 1 if ( jok ==- 1 ) then dls % nslj = dls1 % nst dls % njev = dls % njev + 1 endif call dsetpk ( Neq , Y , Yh1 , Ewt , Acor , Savf , jok , Wm , Iwm , f , jac ) dls1 % ipup = 0 dls1 % rc = 1.0D0 drc = 0.0D0 dls1 % nslp = dls1 % nst dls1 % crate = 0.7D0 if ( dls1 % ierpj /= 0 ) goto 800 endif do i = 1 , dls1 % n Acor ( i ) = 0.0D0 enddo 600 continue if ( dls % newt /= 0 ) then !----------------------------------------------------------------------- !  In the case of the chord method, compute the corrector error, !  and solve the linear system with that as right-hand side and !  P as coefficient matrix.  STIFF is set to the ratio of the norms !  of the residual and the correction vector. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savx ( i ) = dls1 % h * Savf ( i ) - ( Yh ( i , 2 ) + Acor ( i )) enddo dfnrm = dvnorm ( dls1 % n , Savx , Ewt ) call dsolpk ( Neq , Y , Savf , Savx , Ewt , Wm , Iwm , f , psol ) if ( dls1 % iersl < 0 ) goto 800 if ( dls1 % iersl > 0 ) goto 700 del = dvnorm ( dls1 % n , Savx , Ewt ) if ( del > 1.0D-8 ) stiff = max ( stiff , dfnrm / del ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) + Savx ( i ) Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Acor ( i ) enddo else !----------------------------------------------------------------------- !  In the case of functional iteration, update Y directly from !  the result of the last function evaluation, and STIFF is set to 1.0. !----------------------------------------------------------------------- do i = 1 , dls1 % n Savf ( i ) = dls1 % h * Savf ( i ) - Yh ( i , 2 ) Y ( i ) = Savf ( i ) - Acor ( i ) enddo del = dvnorm ( dls1 % n , Y , Ewt ) do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) + dls1 % el ( 1 ) * Savf ( i ) Acor ( i ) = Savf ( i ) enddo stiff = 1.0D0 endif !----------------------------------------------------------------------- !  Test for convergence.  If M .gt. 0, an estimate of the convergence !  rate constant is made for the iteration switch, and is also used !  in the convergence test.   If the iteration seems to be diverging or !  converging at a slow rate (.gt. 0.8 more than once), it is stopped. !----------------------------------------------------------------------- if ( m /= 0 ) then roc = max ( 0.05D0 , del / delp ) dls1 % crate = max ( 0.2D0 * dls1 % crate , roc ) endif dcon = del * min ( 1.0D0 , 1.5D0 * dls1 % crate ) / dlpk % epcon if ( dcon <= 1.0D0 ) then !----------------------------------------------------------------------- !  The corrector has converged.  JCUR is set to 0 to signal that the !  preconditioner involved may need updating later. !  The stiffness ratio STIFR is updated using the latest STIFF value. !  The local error test is made and control passes to statement 500 !  if it fails. !----------------------------------------------------------------------- dls1 % jcur = 0 if ( dls % newt > 0 ) dls % stifr = 0.5D0 * ( dls % stifr + stiff ) if ( m == 0 ) dsm = del / dls1 % tesco ( 2 , dls1 % nq ) if ( m > 0 ) dsm = dvnorm ( dls1 % n , Acor , Ewt ) / dls1 % tesco ( 2 , dls1 % nq ) if ( dsm > 1.0D0 ) then !----------------------------------------------------------------------- !  The error test failed.  KFLAG keeps track of multiple failures. !  Restore TN and the YH array to their previous values, and prepare !  to try the step again.  Compute the optimum step size for this or !  one lower order.  After 2 or more failures, H is forced to decrease !  by a factor of 0.2 or less. !----------------------------------------------------------------------- dls1 % kflag = dls1 % kflag - 1 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo dls1 % rmax = 2.0D0 if ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then !----------------------------------------------------------------------- !  All returns are made through this section.  H is saved in HOLD !  to allow the caller to change H on the next step. !----------------------------------------------------------------------- dls1 % kflag = - 1 goto 1300 elseif ( dls1 % kflag <=- 3 ) then !----------------------------------------------------------------------- !  Control reaches this section if 3 or more failures have occured. !  If 10 failures have occurred, exit with KFLAG = -1. !  It is assumed that the derivatives that have accumulated in the !  YH array have errors of the wrong order.  Hence the first !  derivative is recomputed, and the order is set to 1.  Then !  H is reduced by a factor of 10, and the step is retried, !  until it succeeds or H reaches HMIN. !----------------------------------------------------------------------- if ( dls1 % kflag ==- 10 ) then dls1 % kflag = - 1 goto 1300 else rh = 0.1D0 rh = max ( dls1 % hmin / abs ( dls1 % h ), rh ) dls1 % h = dls1 % h * rh do i = 1 , dls1 % n Y ( i ) = Yh ( i , 1 ) enddo call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 do i = 1 , dls1 % n Yh ( i , 2 ) = dls1 % h * Savf ( i ) enddo dls1 % ipup = dls1 % miter dls1 % ialth = 5 if ( dls1 % nq == 1 ) goto 400 dls1 % nq = 1 dls1 % l = 2 iret = 3 goto 100 endif else iredo = 2 rhup = 0.0D0 goto 900 endif else !----------------------------------------------------------------------- !  After a successful step, update the YH array. !  If Newton iteration is being done and STIFR is less than 1.5, !  then switch to functional iteration. !  Consider changing H if IALTH = 1.  Otherwise decrease IALTH by 1. !  If IALTH is then 1 and NQ .lt. MAXORD, then ACOR is saved for !  use in a possible order increase on the next step. !  If a change in H is considered, an increase or decrease in order !  by one is considered also.  A change in H is made only if it is by a !  factor of at least 1.1.  If not, IALTH is set to 3 to prevent !  testing for that many steps. !----------------------------------------------------------------------- dls1 % kflag = 0 iredo = 0 dls1 % nst = dls1 % nst + 1 if ( dls % newt == 0 ) dls % nsfi = dls % nsfi + 1 if ( dls % newt > 0 . and . dls % stifr < 1.5D0 ) dls % newt = 0 dls1 % hu = dls1 % h dls1 % nqu = dls1 % nq do j = 1 , dls1 % l do i = 1 , dls1 % n Yh ( i , j ) = Yh ( i , j ) + dls1 % el ( j ) * Acor ( i ) enddo enddo dls1 % ialth = dls1 % ialth - 1 if ( dls1 % ialth == 0 ) then !----------------------------------------------------------------------- !  Regardless of the success or failure of the step, factors !  RHDN, RHSM, and RHUP are computed, by which H could be multiplied !  at order NQ - 1, order NQ, or order NQ + 1, respectively. !  in the case of failure, RHUP = 0.0 to avoid an order increase. !  the largest of these is determined and the new order chosen !  accordingly.  If the order is to be increased, we compute one !  additional scaled derivative. !----------------------------------------------------------------------- rhup = 0.0D0 if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Savf ( i ) = Acor ( i ) - Yh ( i , dls1 % lmax ) enddo dup = dvnorm ( dls1 % n , Savf , Ewt ) / dls1 % tesco ( 3 , dls1 % nq ) exup = 1.0D0 / ( dls1 % l + 1 ) rhup = 1.0D0 / ( 1.4D0 * dup ** exup + 0.0000014D0 ) endif goto 900 else if ( dls1 % ialth <= 1 ) then if ( dls1 % l /= dls1 % lmax ) then do i = 1 , dls1 % n Yh ( i , dls1 % lmax ) = Acor ( i ) enddo endif endif goto 1200 endif endif else m = m + 1 if ( m /= dls1 % maxcor ) then if ( m < 2 . or . del <= 2.0D0 * delp ) then if ( roc <= 1 0.0D0 ) then if ( roc > 0.8D0 ) nslow = nslow + 1 if ( nslow < 2 ) then dlpk % mnewt = m delp = del call f ( Neq , dls1 % tn , Y , Savf ) dls1 % nfe = dls1 % nfe + 1 goto 600 endif endif endif endif endif !----------------------------------------------------------------------- !  The corrector iteration failed to converge. !  If functional iteration is being done (NEWT = 0) and MITER .gt. 0 !  (and this is not the first step), then switch to Newton !  (NEWT = MITER), and retry the step.  (Setting STIFR = 1023 insures !  that a switch back will not occur for 10 step attempts.) !  If Newton iteration is being done, but using a preconditioner that !  is out of date (JACFLG .ne. 0 .and. JCUR = 0), then signal for a !  re-evalutation of the preconditioner, and retry the step. !  In all other cases, the YH array is retracted to its values !  before prediction, and H is reduced, if possible.  If H cannot be !  reduced or MXNCF failures have occurred, exit with KFLAG = -2. !----------------------------------------------------------------------- 700 continue dls1 % icf = 1 if ( dls % newt == 0 ) then if ( dls1 % nst == 0 ) goto 800 if ( dls1 % miter == 0 ) goto 800 dls % newt = dls1 % miter dls % stifr = 102 3.0D0 dls1 % ipup = dls1 % miter goto 500 endif if ( dls1 % jcur /= 1 . and . dlpk % jacflg /= 0 ) then dls1 % ipup = dls1 % miter goto 500 endif 800 continue dls1 % icf = 2 ncf = ncf + 1 dlpk % ncfn = dlpk % ncfn + 1 dls1 % rmax = 2.0D0 dls1 % tn = told i1 = dls1 % nqnyh + 1 do jb = 1 , dls1 % nq i1 = i1 - Nyh ! DIR$ IVDEP do i = i1 , dls1 % nqnyh Yh1 ( i ) = Yh1 ( i ) - Yh1 ( i + Nyh ) enddo enddo if ( dls1 % ierpj < 0 . or . dls1 % iersl < 0 ) then dls1 % kflag = - 3 goto 1300 elseif ( abs ( dls1 % h ) <= dls1 % hmin * 1.00001D0 ) then dls1 % kflag = - 2 goto 1300 elseif ( ncf == dls1 % mxncf ) then dls1 % kflag = - 2 goto 1300 else rh = 0.5D0 dls1 % ipup = dls1 % miter iredo = 1 rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif 900 continue exsm = 1.0D0 / dls1 % l rhsm = 1.0D0 / ( 1.2D0 * dsm ** exsm + 0.0000012D0 ) rhdn = 0.0D0 if ( dls1 % nq /= 1 ) then ddn = dvnorm ( dls1 % n , Yh ( 1 , dls1 % l ), Ewt ) / dls1 % tesco ( 1 , dls1 % nq ) exdn = 1.0D0 / dls1 % nq rhdn = 1.0D0 / ( 1.3D0 * ddn ** exdn + 0.0000013D0 ) endif if ( rhsm >= rhup ) then if ( rhsm >= rhdn ) then newq = dls1 % nq rh = rhsm goto 1000 endif elseif ( rhup > rhdn ) then newq = dls1 % l rh = rhup if ( rh < 1.1D0 ) then dls1 % ialth = 3 goto 1200 else r = dls1 % el ( dls1 % l ) / dls1 % l do i = 1 , dls1 % n Yh ( i , newq + 1 ) = Acor ( i ) * r enddo goto 1100 endif endif newq = dls1 % nq - 1 rh = rhdn if ( dls1 % kflag < 0 . and . rh > 1.0D0 ) rh = 1.0D0 1000 continue if ( ( dls1 % kflag == 0 ) . and . ( rh < 1.1D0 ) ) then dls1 % ialth = 3 goto 1200 else if ( dls1 % kflag <=- 2 ) rh = min ( rh , 0.2D0 ) !----------------------------------------------------------------------- !  If there is a change of order, reset NQ, L, and the coefficients. !  In any case H is reset according to RH and the YH array is rescaled. !  Then exit from 690 if the step was OK, or redo the step otherwise. !----------------------------------------------------------------------- if ( newq == dls1 % nq ) then rh = max ( rh , dls1 % hmin / abs ( dls1 % h )) goto 300 endif endif 1100 continue dls1 % nq = newq dls1 % l = dls1 % nq + 1 iret = 2 goto 100 1200 continue r = 1.0D0 / dls1 % tesco ( 2 , dls1 % nqu ) do i = 1 , dls1 % n Acor ( i ) = Acor ( i ) * r enddo 1300 continue dls1 % hold = dls1 % h dls1 % jstart = 1 end subroutine dstoka","tags":"","loc":"sourcefile/dstoka.inc.html"},{"title":"dprjis.inc – odepack","text":"Contents Subroutines dprjis Source Code dprjis.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! DPRJIS is called to compute and process the matrix !! P = A - H*EL(1)*J, where J is an approximation to the Jacobian dr/dy, !! where r = g(t,y) - A(t,y)*s. !! !! J is computed by columns, either by !! the user-supplied routine JAC if MITER = 1, or by finite differencing !! if MITER = 2. !! !! J is stored in WK, rescaled, and ADDA is called to !! generate P. !! !! The matrix P is subjected to LU decomposition in CDRV. !! P and its LU decomposition are stored separately in WK. !! !! In addition to variables described previously, communication !! with DPRJIS uses the following: !! !! Y !! !! : array containing predicted values on entry. !! !! RTEM !! !! : work array of length N (ACOR in DSTODI). !! !! SAVR !! !! : array containing r evaluated at predicted y. On output it !! contains the residual evaluated at current values of t and y. !! !! S !! !! : array containing predicted values of dy/dt (SAVF in DSTODI). !! !! WK !! !! : real work space for matrices.  On output it contains P and !! its sparse LU decomposition.  Storage of matrix elements !! starts at WK(3). !! WK also contains the following matrix-related data. !! WK(1) = SQRT(UROUND), used in numerical Jacobian increments. !! !! IWK !! !! : integer work space for matrix-related data, assumed to be !! equivalenced to WK.  In addition,  WK(IPRSP) and IWK(IPISP) !! are assumed to have identical locations. !! !! EL0 !! !! : EL(1) (input). !! !! IERPJ !! !! : output error flag (in COMMON). !!         =  0 if no error. !!         =  1 if zero pivot found in CDRV. !!         = IRES (= 2 or 3) if RES returned IRES = 2 or 3. !!         = -1 if insufficient storage for CDRV (should not occur). !!         = -2 if other error found in CDRV (should not occur here). !! !! JCUR !! !! : output flag = 1 to indicate that the Jacobian matrix !! (or approximation) is now current. !! !! This routine also uses other variables in global structures. !----------------------------------------------------------------------- subroutine dprjis ( Neq , Y , Yh , Nyh , Ewt , Rtem , Savr , S , Wk , Iwk , res , jac , adda ) ! integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( * ) :: Y integer , intent ( in ) :: Nyh real ( kind = dp ), intent ( in ), dimension ( Nyh , * ) :: Yh real ( kind = dp ), intent ( in ), dimension ( * ) :: Ewt real ( kind = dp ), intent ( inout ), dimension ( * ) :: Rtem real ( kind = dp ), dimension ( * ) :: Savr real ( kind = dp ), dimension ( * ) :: S real ( kind = dp ), intent ( inout ), dimension ( * ) :: Wk integer , dimension ( * ) :: Iwk external :: res external :: jac external :: adda ! real ( kind = dp ) :: con , fac , hl0 , r , srur integer :: i , imul , ires , j , jj , jmax , jmin , k , kmax , kmin , ng ! hl0 = dls1 % h * dls1 % el0 con = - hl0 dls1 % jcur = 1 dls1 % nje = dls1 % nje + 1 if ( dls1 % miter == 2 ) then ! !  If MITER = 2, make NGP + 1 calls to RES to approximate J and P. ------ ires = - 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then !  Error return for IRES = 2 or IRES = 3 return from RES. --------------- dls1 % ierpj = ires return else srur = Wk ( 1 ) jmin = Iwk ( dlss % ipigp ) do ng = 1 , dlss % ngp jmax = Iwk ( dlss % ipigp + ng ) - 1 do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) r = max ( srur * abs ( Y ( jj )), 0.01D0 / Ewt ( jj )) Y ( jj ) = Y ( jj ) + r enddo call res ( Neq , dls1 % tn , Y , S , Rtem , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else do j = jmin , jmax jj = Iwk ( dlss % ibjgp + j ) Y ( jj ) = Yh ( jj , 1 ) r = max ( srur * abs ( Y ( jj )), 0.01D0 / Ewt ( jj )) fac = - hl0 / r kmin = Iwk ( dlss % ibian + jj ) kmax = Iwk ( dlss % ibian + jj + 1 ) - 1 do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Rtem ( i ) = ( Rtem ( i ) - Savr ( i )) * fac enddo call adda ( Neq , dls1 % tn , Y , jj , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Rtem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Rtem ( i ) enddo enddo jmin = jmax + 1 endif enddo ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return endif endif else ! !  If MITER = 1, call RES, then call JAC and ADDA for each column. ------ ires = 1 call res ( Neq , dls1 % tn , Y , S , Savr , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then dls1 % ierpj = ires return else kmin = Iwk ( dlss % ipian ) do j = 1 , dls1 % n kmax = Iwk ( dlss % ipian + j ) - 1 do i = 1 , dls1 % n Rtem ( i ) = 0.0D0 enddo call jac ( Neq , dls1 % tn , Y , S , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Rtem ) do i = 1 , dls1 % n Rtem ( i ) = Rtem ( i ) * con enddo call adda ( Neq , dls1 % tn , Y , j , Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Rtem ) do k = kmin , kmax i = Iwk ( dlss % ibjan + k ) Wk ( dlss % iba + k ) = Rtem ( i ) enddo kmin = kmax + 1 enddo endif endif ! !  Do numerical factorization of P matrix. ------------------------------ dlss % nlu = dlss % nlu + 1 dls1 % ierpj = 0 do i = 1 , dls1 % n Rtem ( i ) = 0.0D0 enddo call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), & & Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), Rtem , Rtem , dlss % nsp , & & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 2 , dlss % iys ) if ( dlss % iys == 0 ) return imul = ( dlss % iys - 1 ) / dls1 % n dls1 % ierpj = - 2 if ( imul == 8 ) dls1 % ierpj = 1 if ( imul == 10 ) dls1 % ierpj = - 1 end subroutine dprjis","tags":"","loc":"sourcefile/dprjis.inc.html"},{"title":"dsolss.inc – odepack","text":"Contents Subroutines dsolss Source Code dsolss.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine manages the solution of the linear system arising from !! a chord iteration.  It is called if MITER .ne. 0. !! !! If MITER is 1 or 2, it calls CDRV to accomplish this. !! !! If MITER = 3 it updates the coefficient H*EL0 in the diagonal !! matrix, and then computes the solution. !! communication with DSOLSS uses the following variables: !! !! WK !! !! : real work space containing the inverse diagonal matrix if !! MITER = 3 and the LU decomposition of the matrix otherwise. !! Storage of matrix elements starts at WK(3). !! WK also contains the following matrix-related data: !! !!         WK(1) = SQRT(UROUND) (not used here), !!         WK(2) = HL0, the previous value of H*EL0, used if MITER = 3. !! !! IWK !! !! : integer work space for matrix-related data, assumed to !! be equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP) !! are assumed to have identical locations. !! !! X !! !! : the right-hand side vector on input, and the solution vector !! on output, of length N. !! !! TEM !! !! : vector of work space of length N, not used in this version. !! !! IERSL !! !! : output flag (in Common). !! !!            IERSL = 0  if no trouble occurred. !!            IERSL = -1 if CDRV returned an error flag (MITER = 1 or 2). !!                       This should never occur and is considered fatal. !!            IERSL = 1  if a singular matrix arose with MITER = 3. !! !----------------------------------------------------------------------- ! This routine also uses other variables in global structures !----------------------------------------------------------------------- subroutine dsolss ( Wk , Iwk , X , Tem ) ! real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer :: Iwk ( * ) real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ) :: Tem ( * ) ! real ( kind = dp ) :: di , hl0 , phl0 , r integer :: i ! dls1 % iersl = 0 select case ( dls1 % miter ) case ( 3 ) ! phl0 = Wk ( 2 ) hl0 = dls1 % h * dls1 % el0 Wk ( 2 ) = hl0 if ( hl0 /= phl0 ) then r = hl0 / phl0 do i = 1 , dls1 % n di = 1.0D0 - r * ( 1.0D0 - 1.0D0 / Wk ( i + 2 )) if ( abs ( di ) == 0.0D0 ) then dls1 % iersl = 1 return else Wk ( i + 2 ) = 1.0D0 / di endif enddo endif case default call cdrv ( dls1 % n , Iwk ( dlss % ipr ), Iwk ( dlss % ipc ), Iwk ( dlss % ipic ), Iwk ( dlss % ipian ), Iwk ( dlss % ipjan ), Wk ( dlss % ipa ), X , X , dlss % nsp ,& & Iwk ( dlss % ipisp ), Wk ( dlss % iprsp ), dlss % iesp , 4 , dls1 % iersl ) if ( dls1 % iersl /= 0 ) dls1 % iersl = - 1 return endselect do i = 1 , dls1 % n X ( i ) = Wk ( i + 2 ) * X ( i ) enddo end subroutine dsolss","tags":"","loc":"sourcefile/dsolss.inc.html"},{"title":"dpcg.inc – odepack","text":"Contents Subroutines dpcg Source Code dpcg.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !! This routine computes the solution to the system A*x = b using a !! preconditioned version of the Conjugate Gradient algorithm. !! It is assumed here that the matrix A and the preconditioner !! matrix M are symmetric positive definite or nearly so. !! !!### On entry !! !! NEQ !! !! : problem size, passed to F and PSOL (NEQ(1) = N). !! !! TN !! !! : current value of t. !! !! Y !! !! : array containing current dependent variable vector. !! !! SAVF !! !! : array containing current value of f(t,y). !! !! R !! !! : the right hand side of the system A*x = b. !! !! WGHT !! !! : array of length N containing scale factors. !! 1/WGHT(i) are the diagonal elements of the diagonal !! scaling matrix D. !! !! N !! !! : the order of the matrix A, and the lengths !! of the vectors Y, SAVF, R, WGHT, P, W, Z, WK, and X. !! !! MAXL !! !! : the maximum allowable number of iterates. !! !! DELTA !! !! : tolerance on residuals b - A*x in weighted RMS-norm. !! !! HL0 !! !! : current value of (step size h) * (coefficient l0). !! !! JPRE !! !! : preconditioner type flag. !! !! MNEWT !! !! : Newton iteration counter (.ge. 0). !! !! WK !! !! : real work array used by routine DATP. !! !! WP !! !! : real work array used by preconditioner PSOL. !! !! IWP !! !! : integer work array used by preconditioner PSOL. !! !!#### On return !! !! X !! !! : the final computed approximation to the solution !! of the system A*x = b. !! !! LPCG !! !! : the number of iterations performed, and current !! order of the upper Hessenberg matrix HES. !! !! NPSL !! !! : the number of calls to PSOL. !! !! IFLAG !! !! : integer error flag: !! !!                0 means convergence in LPCG iterations, LPCG .le. MAXL. !!                1 means the convergence test did not pass in MAXL !!                  iterations, but the residual norm is .lt. 1, !!                  or .lt. norm(b) if MNEWT = 0, and so X is computed. !!                2 means the convergence test did not pass in MAXL !!                  iterations, residual .gt. 1, and X is undefined. !!                3 means there was a recoverable error in PSOL !!                  caused by the preconditioner being out of date. !!                4 means there was a zero denominator in the algorithm. !!                  The system matrix or preconditioner matrix is not !!                  sufficiently close to being symmetric pos. definite. !!               -1 means there was a nonrecoverable error in PSOL. !! !----------------------------------------------------------------------- subroutine dpcg ( Neq , Tn , Y , Savf , R , Wght , N , Maxl , Delta , Hl0 , Jpre , Mnewt , f , psol , Npsl , X , P , W , Z , Lpcg , Wp , Iwp , Wk , Iflag ) ! integer :: Neq ( * ) real ( kind = dp ) :: Tn real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Savf ( * ) real ( kind = dp ) :: R ( * ) real ( kind = dp ) :: Wght ( * ) integer :: N integer , intent ( in ) :: Maxl real ( kind = dp ), intent ( in ) :: Delta real ( kind = dp ) :: Hl0 integer , intent ( in ) :: Jpre integer , intent ( in ) :: Mnewt external :: f external :: psol integer , intent ( out ) :: Npsl real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ), intent ( inout ) :: P ( * ) real ( kind = dp ), intent ( inout ) :: W ( * ) real ( kind = dp ), intent ( inout ) :: Z ( * ) integer , intent ( out ) :: Lpcg real ( kind = dp ), intent ( inout ) :: Wp ( * ) integer :: Iwp ( * ) real ( kind = dp ), intent ( inout ) :: Wk ( * ) integer , intent ( out ) :: Iflag ! real ( kind = dp ) :: alpha , beta , bnrm , ptw , rnrm , ztr , ztr0 integer :: i , ier ! Iflag = 0 Npsl = 0 Lpcg = 0 do i = 1 , N X ( i ) = 0.0D0 enddo bnrm = dvnorm ( N , R , Wght ) !  Test for immediate return with X = 0 or X = b. ----------------------- if ( bnrm > Delta ) then ! ztr = 0.0D0 else if ( Mnewt > 0 ) return !X!call dcopy(N,R,1,X,1) X ( 1 : N ) = R ( 1 : N ) return endif !  Loop point for PCG iterations. --------------------------------------- INFINITE : do Lpcg = Lpcg + 1 !X!call dcopy(N,R,1,Z,1) Z ( 1 : N ) = R ( 1 : N ) ier = 0 if ( Jpre /= 0 ) then call psol ( Neq , Tn , Y , Savf , Wk , Hl0 , Wp , Iwp , Z , 3 , ier ) Npsl = Npsl + 1 if ( ier /= 0 ) then !----------------------------------------------------------------------- !  This block handles error returns from PSOL. !----------------------------------------------------------------------- if ( ier < 0 ) Iflag = - 1 if ( ier > 0 ) Iflag = 3 return endif endif ztr0 = ztr ztr = ddot ( N , Z , 1 , R , 1 ) if ( Lpcg == 1 ) then !X!call dcopy(N,Z,1,P,1) P ( 1 : N ) = Z ( 1 : N ) elseif ( ztr0 == 0.0D0 ) then !----------------------------------------------------------------------- !  This block handles division by zero errors. !----------------------------------------------------------------------- Iflag = 4 return else beta = ztr / ztr0 do i = 1 , N P ( i ) = Z ( i ) + beta * P ( i ) enddo endif !----------------------------------------------------------------------- !   Call DATP to compute A*p and return the answer in W. !----------------------------------------------------------------------- call datp ( Neq , Y , Savf , P , Wght , Hl0 , Wk , f , W ) ! ptw = ddot ( N , P , 1 , W , 1 ) if ( ptw == 0.0D0 ) then Iflag = 4 exit INFINITE else alpha = ztr / ptw call daxpy ( N , alpha , P , 1 , X , 1 ) alpha = - alpha call daxpy ( N , alpha , W , 1 , R , 1 ) rnrm = dvnorm ( N , R , Wght ) if ( rnrm <= Delta ) return if ( Lpcg < Maxl ) cycle INFINITE Iflag = 2 if ( rnrm <= 1.0D0 ) Iflag = 1 if ( rnrm <= bnrm . and . Mnewt == 0 ) Iflag = 1 exit INFINITE endif enddo INFINITE end subroutine dpcg","tags":"","loc":"sourcefile/dpcg.inc.html"},{"title":"dsolsy.inc – odepack","text":"Contents Subroutines dsolsy Source Code dsolsy.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### DESCRIPTION !! !!  This routine manages the solution of the linear system arising from !!  a chord iteration.  It is called if MITER .ne. 0. !! !!  If MITER is 1 or 2, it calls DGESL to accomplish this. !! !!  If MITER = 3 it updates the coefficient h*EL0 in the diagonal !!  matrix, and then computes the solution. !! !!  If MITER is 4 or 5, it calls DGBSL. !! !!### OPTIONS !! !!  Communication with DSOLSY uses the following variables: !! !!  WM !! !!  : real work space containing the inverse diagonal matrix if !!  MITER = 3 and the LU decomposition of the matrix otherwise. !!  Storage of matrix elements starts at WM(3). !!  WM also contains the following matrix-related data: !! !!          WM(1) = SQRT(UROUND) (not used here), !!          WM(2) = HL0, the previous value of h*EL0, used if MITER = 3. !! !!  IWM !! !!  : integer work space containing pivot information, starting at !!  IWM(21), if MITER is 1, 2, 4, or 5. !! !!  IWM also contains band parameters ML = IWM(1) !!  and MU = IWM(2) if MITER is 4 or 5. !! !!  X !! !!  : the right-hand side vector on input, and the solution vector !!  on output, of length N. !! !!  TEM !! !!  : vector of work space of length N, not used in this version. !! !!  IERSL !! !!  : output flag (in COMMON).  IERSL = 0 if no trouble occurred. !! !!  IERSL !! !!  : 1 if a singular matrix arose with MITER = 3. !! !----------------------------------------------------------------------- ! ### SUBSIDIARY ! ### PURPOSE  ODEPACK linear system solver. ! ### TYPE      DOUBLE PRECISION (SSOLSY-S, DSOLSY-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### SEE ALSO  DLSODE ! ### ROUTINES CALLED  DGBSL, DGESL ! ### COMMON BLOCKS    DLS001 ! ### REVISION HISTORY  (YYMMDD) !     19791129  DATE WRITTEN !     19890501  Modified prologue to SLATEC/LDOC format.  (FNF) !     19890503  Minor cosmetic changes.  (FNF) !     19930809  Renamed to allow single/double precision versions. (ACH) !     20010418  Reduced size of Common block /DLS001/. (ACH) !     20031105  Restored 'own' variables to Common block /DLS001/, to !             enable interrupt/restart feature. (ACH) ! ### END PROLOGUE  DSOLSY !----------------------------------------------------------------------- !  This routine also uses the COMMON variables EL0, H, MITER, and N. !----------------------------------------------------------------------- subroutine dsolsy ( Wm , Iwm , X , Tem ) real ( kind = dp ), intent ( inout ) :: Wm ( * ) integer :: Iwm ( * ) real ( kind = dp ), intent ( inout ) :: X ( * ) real ( kind = dp ) :: Tem ( * ) real ( kind = dp ) :: di , hl0 , phl0 , r integer :: i , meband , ml , mu dls1 % iersl = 0 select case ( dls1 % miter ) case ( 3 ) phl0 = Wm ( 2 ) hl0 = dls1 % h * dls1 % el0 Wm ( 2 ) = hl0 if ( hl0 /= phl0 ) then r = hl0 / phl0 do i = 1 , dls1 % n di = 1.0D0 - r * ( 1.0D0 - 1.0D0 / Wm ( i + 2 )) if ( abs ( di ) == 0.0D0 ) then dls1 % iersl = 1 return else Wm ( i + 2 ) = 1.0D0 / di endif enddo endif do i = 1 , dls1 % n X ( i ) = Wm ( i + 2 ) * X ( i ) enddo case ( 4 , 5 ) ml = Iwm ( 1 ) mu = Iwm ( 2 ) meband = 2 * ml + mu + 1 call dgbsl ( Wm ( 3 ), meband , dls1 % n , ml , mu , Iwm ( 21 ), X , 0 ) case default call dgesl ( Wm ( 3 ), dls1 % n , dls1 % n , Iwm ( 21 ), X , 0 ) endselect end subroutine dsolsy","tags":"","loc":"sourcefile/dsolsy.inc.html"},{"title":"dlhin.inc – odepack","text":"Contents Subroutines dlhin Source Code dlhin.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### Name !!   dlhin(3f) - [M_odepack] compute step size H0 to be attempted on !!   the first step, when the user supplied value is absent !! !!### Synopsis !! !!        subroutine dlhin(Neq,N,T0,Y0,Ydot,f,Tout,Uround,Ewt,Itol,Atol,Y,Temp,H0,Niter,Ier) !! !!        integer                     :: Neq(*) !!        integer                     :: N !!        real(kind=dp),intent(in)    :: T0 !!        real(kind=dp)               :: Y0(*) !!        real(kind=dp),intent(in)    :: Ydot(*) !!        external                    :: f !!        real(kind=dp),intent(in)    :: Tout !!        real(kind=dp),intent(in)    :: Uround !!        real(kind=dp)               :: Ewt(*) !!        integer,intent(in)          :: Itol !!        real(kind=dp),intent(in)    :: Atol(*) !!        real(kind=dp)               :: Y(*) !!        real(kind=dp)               :: Temp(*) !!        real(kind=dp),intent(inout) :: H0 !!        integer, intent(out)        :: Niter !!        integer, intent(out)        :: Ier !! !!### Description !! !! This routine computes the step size, H0, to be attempted on the !! first step, when the user has not supplied a value for this. !! !! First we check that TOUT - T0 differs significantly from zero.  Then !! an iteration is done to approximate the initial second derivative !! and this is used to define H from WRMS-norm(H**2 * yddot / 2) = 1. !! A bias factor of 1/2 is applied to the resulting h. !! The sign of H0 is inferred from the initial values of TOUT and T0. !! !! Communication with DLHIN is done with the following variables: !! !! Call DLHIN(NEQ,N,T0,Y0,YDOT,F,TOUT,UROUND,EWT,ITOL,ATOL,Y,TEMP & !! & H0,NITER,IER !! !! Subroutines called by DLHIN: F !! Function routines called by DLHIN: DVNORM !! !!### INPUT OPTIONS !! !! NEQ !! !! : NEQ array of solver, passed to F. !! !! N !! !! : size of ODE system, input. !! !! T0 !! !! : initial value of independent variable, input. !! !! Y0 !! !! : vector of initial conditions, input. !! !! YDOT !! !! : vector of initial first derivatives, input. !! !! F !! !! : name of subroutine for right-hand side f(t,y), input. !! !! TOUT !! !! : first output value of independent variable !! !! UROUND !! !! : machine unit roundoff !! !! EWT, ITOL, ATOL !! !! : error weights and tolerance parameters !! as described in the driver routine, input. !! !! Y, TEMP !! !! : work arrays of length N. !! !!### RETURNS !! !! H0 !! !! : step size to be attempted, output. !! !! NITER !! !! : number of iterations (and of f evaluations) to compute H0, !! output. !! !! IER !! !! : the error flag, returned with the value !!       IER = 0  if no trouble occurred, or !!       IER = -1 if TOUT and t0 are considered too close to proceed. !----------------------------------------------------------------------- subroutine dlhin ( Neq , N , T0 , Y0 , Ydot , f , Tout , Uround , Ewt , Itol , Atol , Y , Temp , H0 , Niter , Ier ) real ( kind = dp ), parameter :: HALF = 0.50D0 , TWO = 2.0D0 , HUN = 10 0.0D0 , PT1 = 0.1D0 ! integer :: Neq ( * ) integer :: N real ( kind = dp ), intent ( in ) :: T0 real ( kind = dp ) :: Y0 ( * ) real ( kind = dp ), intent ( in ) :: Ydot ( * ) external :: f real ( kind = dp ), intent ( in ) :: Tout real ( kind = dp ), intent ( in ) :: Uround real ( kind = dp ) :: Ewt ( * ) integer , intent ( in ) :: Itol real ( kind = dp ), intent ( in ) :: Atol ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Temp ( * ) real ( kind = dp ), intent ( inout ) :: H0 integer , intent ( out ) :: Niter integer , intent ( out ) :: Ier real ( kind = dp ) :: afi , atoli , delyi , hg , hlb , hnew , hrat , hub , t1 , tdist , tround , yddnrm integer :: i , iter Niter = 0 tdist = abs ( Tout - T0 ) tround = Uround * max ( abs ( T0 ), abs ( Tout )) if ( tdist < TWO * tround ) then !  Error return for TOUT - T0 too small. -------------------------------- Ier = - 1 return else ! !  Set a lower bound on H based on the roundoff level in T0 and TOUT. --- hlb = HUN * tround !  Set an upper bound on H based on TOUT-T0 and the initial Y and YDOT. - hub = PT1 * tdist atoli = Atol ( 1 ) do i = 1 , N if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) delyi = PT1 * abs ( Y0 ( i )) + atoli afi = abs ( Ydot ( i )) if ( afi * hub > delyi ) hub = delyi / afi enddo ! !  Set initial guess for H as geometric mean of upper and lower bounds. - iter = 0 hg = sqrt ( hlb * hub ) !  If the bounds have crossed, exit with the mean value. ---------------- if ( hub < hlb ) then H0 = hg else do ! !  Looping point for iteration. ----------------------------------------- !  Estimate the second derivative as a difference quotient in f. -------- t1 = T0 + hg do i = 1 , N Y ( i ) = Y0 ( i ) + hg * Ydot ( i ) enddo call f ( Neq , t1 , Y , Temp ) do i = 1 , N Temp ( i ) = ( Temp ( i ) - Ydot ( i )) / hg enddo yddnrm = dvnorm ( N , Temp , Ewt ) !  Get the corresponding new value of H. -------------------------------- if ( yddnrm * hub * hub > TWO ) then hnew = sqrt ( TWO / yddnrm ) else hnew = sqrt ( hg * hub ) endif iter = iter + 1 !----------------------------------------------------------------------- !  Test the stopping conditions. !  Stop if the new and previous H values differ by a factor of .lt. 2. !  Stop if four iterations have been done.  Also, stop with previous H !  if hnew/hg .gt. 2 after first iteration, as this probably means that !  the second derivative value is bad because of cancellation error. !----------------------------------------------------------------------- if ( iter >= 4 ) exit hrat = hnew / hg if ( ( hrat > HALF ) . and . ( hrat < TWO ) ) exit if ( ( iter >= 2 ) . and . ( hnew > TWO * hg ) ) then hnew = hg exit endif hg = hnew enddo ! !  Iteration done.  Apply bounds, bias factor, and sign. ---------------- H0 = hnew * HALF if ( H0 < hlb ) H0 = hlb if ( H0 > hub ) H0 = hub endif endif H0 = sign ( H0 , Tout - T0 ) !  Restore Y array from Y0, then exit. ---------------------------------- Y ( 1 : N ) = Y0 ( 1 : N ) Niter = iter Ier = 0 end subroutine dlhin","tags":"","loc":"sourcefile/dlhin.inc.html"},{"title":"dhefa.inc – odepack","text":"Contents Subroutines dhefa Source Code dhefa.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### DESCRIPTION !!   This routine is a modification of the LINPACK routine DGEFA and !!   performs an LU decomposition of an upper Hessenberg matrix A. !!   There are two options available: !! !!          (1)  performing a fresh factorization !!          (2)  updating the LU factors by adding a row and a !!               column to the matrix A. !! !!   DHEFA factors an upper Hessenberg matrix by elimination. !! !!### ON ENTRY !! !!   A !! !!   : the matrix to be factored. !! !!   LDA !! !!   : the leading dimension of the array  A . !! !!   N !! !!   : the order of the matrix  A . !! !!   JOB !! !!       JOB = 1    means that a fresh factorization of the !!                  matrix A is desired. !!       JOB .ge. 2 means that the current factorization of A !!                  will be updated by the addition of a row !!                  and a column. !! !!### ON RETURN !! !!   A !! !!   : an upper triangular matrix and the multipliers !!     which were used to obtain it. !! !!     The factorization can be written  A = L*U  where !!     L is a product of permutation and unit lower !!     triangular matrices and U is upper triangular. !! !!   IPVT !! !!   : an integer vector of pivot indices. !! !!   INFO !! !!            = 0  normal value. !!            = k  if  U(k,k) .eq. 0.0 .  This is not an error !!                 condition for this subroutine, but it does !!                 indicate that DHESL will divide by zero if called. !! !----------------------------------------------------------------------- !      Modification of LINPACK, by Peter Brown, LLNL. !      Written 7/20/83.  This version dated 6/20/2001. ! !      BLAS called: DAXPY, IDAMAX !----------------------------------------------------------------------- subroutine dhefa ( A , Lda , N , Ipvt , Info , Job ) ! integer , intent ( in ) :: Lda real ( kind = dp ) , intent ( inout ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( inout ) :: Ipvt ( * ) integer , intent ( out ) :: Info integer , intent ( in ) :: Job ! integer :: j , k , km1 , kp1 , l , nm1 real ( kind = dp ) :: t ! if ( Job > 1 ) then ! !  The old factorization of A will be updated.  A row and a column !  has been added to the matrix A. !  N-1 is now the old order of the matrix. ! nm1 = N - 1 ! !  Perform row interchanges on the elements of the new column, and !  perform elimination operations on the elements using the multipliers. ! if ( nm1 > 1 ) then do k = 2 , nm1 km1 = k - 1 l = Ipvt ( km1 ) t = A ( l , N ) if ( l /= km1 ) then A ( l , N ) = A ( km1 , N ) A ( km1 , N ) = t endif A ( k , N ) = A ( k , N ) + A ( k , km1 ) * t enddo endif ! !  Complete update of factorization by decomposing last 2x2 block. ! Info = 0 ! !         Find L = pivot index ! l = idamax ( 2 , A ( nm1 , nm1 ), 1 ) + nm1 - 1 Ipvt ( nm1 ) = l ! !         Zero pivot implies this column already triangularized ! if ( A ( l , nm1 ) == 0.0D0 ) then Info = nm1 else ! !            Interchange if necessary ! if ( l /= nm1 ) then t = A ( l , nm1 ) A ( l , nm1 ) = A ( nm1 , nm1 ) A ( nm1 , nm1 ) = t endif ! !            Compute multipliers ! t = - 1.0D0 / A ( nm1 , nm1 ) A ( N , nm1 ) = A ( N , nm1 ) * t ! !            Row elimination with column indexing ! t = A ( l , N ) if ( l /= nm1 ) then A ( l , N ) = A ( nm1 , N ) A ( nm1 , N ) = t endif A ( N , N ) = A ( N , N ) + t * A ( N , nm1 ) endif Ipvt ( N ) = N if ( A ( N , N ) == 0.0D0 ) Info = N else ! !  A new facorization is desired.  This is essentially the LINPACK !  code with the exception that we know there is only one nonzero !  element below the main diagonal. ! !      Gaussian elimination with partial pivoting ! Info = 0 nm1 = N - 1 if ( nm1 >= 1 ) then do k = 1 , nm1 kp1 = k + 1 ! !         Find L = pivot index ! l = idamax ( 2 , A ( k , k ), 1 ) + k - 1 Ipvt ( k ) = l ! !         Zero pivot implies this column already triangularized ! if ( A ( l , k ) == 0.0D0 ) then Info = k else ! !            Interchange if necessary ! if ( l /= k ) then t = A ( l , k ) A ( l , k ) = A ( k , k ) A ( k , k ) = t endif ! !            Compute multipliers ! t = - 1.0D0 / A ( k , k ) A ( k + 1 , k ) = A ( k + 1 , k ) * t ! !            Row elimination with column indexing ! do j = kp1 , N t = A ( l , j ) if ( l /= k ) then A ( l , j ) = A ( k , j ) A ( k , j ) = t endif call daxpy ( N - k , t , A ( k + 1 , k ), 1 , A ( k + 1 , j ), 1 ) enddo endif enddo endif Ipvt ( N ) = N if ( A ( N , N ) == 0.0D0 ) Info = N return endif end subroutine dhefa","tags":"","loc":"sourcefile/dhefa.inc.html"},{"title":"dgbfa.inc – odepack","text":"Contents Subroutines dgbfa Source Code dgbfa.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dgbfa(3f) - [M_odepack::matrix] Factor a band matrix using Gaussian !!   elimination. !! !!    subroutine dgbfa(Abd,Lda,N,Ml,Mu,Ipvt,Info) !!    real(kind=dp),intent(inout) :: Abd(Lda,*) !!    integer,intent(in)    :: Lda !!    integer,intent(in)    :: N !!    integer,intent(in)    :: Ml !!    integer,intent(in)    :: Mu !!    integer,intent(inout) :: Ipvt(*) !!    integer,intent(out)   :: Info !! !!### DESCRIPTION !! !!   DGBFA factors a double precision band matrix by elimination. !! !!   DGBFA is usually called by DGBCO, but it can be called !!   directly with a saving in time if  RCOND  is not needed. !! !!### On Entry !! !!   ABD !! !!   :   contains the matrix in band storage.  The columns !!   of the matrix are stored in the columns of  ABD  and !!   the diagonals of the matrix are stored in rows !!   ML+1 through 2*ML+MU+1 of  ABD . !!   See the comments below for details. !! !!   LDA !! !!   :   the leading dimension of the array  ABD . !!   LDA must be .GE. 2*ML + MU + 1 . !! !!   N !! !!   :   the order of the original matrix. !! !!   ML !! !!   :   number of diagonals below the main diagonal. !!   0 .LE. ML .LT.  N . !! !!   MU !! !!   :   number of diagonals above the main diagonal. !!   0 .LE. MU .LT.  N . !!   More efficient if  ML .LE. MU . !! !!### On Return !! !!   ABD !! !!   :   an upper triangular matrix in band storage and !!   the multipliers which were used to obtain it. !!   The factorization can be written  A = L*U  where !!   L  is a product of permutation and unit lower !!   triangular matrices and  U  is upper triangular. !! !!   IPVT !! !!   :   an integer vector of pivot indices. !! !!   INFO !! !!        = 0  normal value. !!        = K  if  U(K,K) .EQ. 0.0 .  This is not an error !!             condition for this subroutine, but it does !!             indicate that DGBSL will divide by zero if !!             called.  Use  RCOND  in DGBCO for a reliable !!             indication of singularity. !! !!#### Band Storage !! !!   If  A  is a band matrix, the following program segment !!   will set up the input. !! !!       ML = (band width below the diagonal) !!       MU = (band width above the diagonal) !!       M = ML + MU + 1 !!       DO J = 1, N !!            I1 = MAX(1, J-MU) !!            I2 = MIN(N, J+ML) !!            DO I = I1, I2 !!                K = I - J + M !!                ABD(K,J) = A(I,J) !!            ENDDO !!       ENDDO !! !!   This uses rows ML+1 through 2*ML+MU+1 of ABD. !!   In addition, the first ML rows in ABD are used for !!   elements generated during the triangularization. !!   The total number of rows needed in ABD is 2*ML+MU+1. !!   The ML+MU by ML+MU upper left triangle and the !!   ML by ML lower right triangle are not referenced. !! !!### REFERENCES !!   J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. !!   Stewart, LINPACK Users' Guide, SIAM, 1979. !! ! ### CATEGORY  D2A2 ! ### TYPE      DOUBLE PRECISION (SGBFA-S, DGBFA-D, CGBFA-C) ! ### KEYWORDS  BANDED, LINEAR ALGEBRA, LINPACK, MATRIX FACTORIZATION ! ### AUTHOR  Moler, C. B., (U. of New Mexico) ! ### ROUTINES CALLED  DAXPY, DSCAL, IDAMAX ! ### REVISION HISTORY  (YYMMDD) !     19780814  DATE WRITTEN !     19890531  Changed all specific intrinsics to generic.  (WRB) !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19900326  Removed duplicate information from DESCRIPTION section. !               (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! subroutine dgbfa ( Abd , Lda , N , Ml , Mu , Ipvt , Info ) ! integer , intent ( in ) :: Lda real ( kind = dp ) , intent ( inout ) :: Abd ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ml integer , intent ( in ) :: Mu integer , intent ( inout ) :: Ipvt ( * ) integer , intent ( out ) :: Info ! integer :: i , i0 , j , j0 , j1 , ju , jz , k , kp1 , l , lm , m , mm , nm1 real ( kind = dp ) :: t ! m = Ml + Mu + 1 Info = 0 ! !      ZERO INITIAL FILL-IN COLUMNS ! j0 = Mu + 2 j1 = min ( N , m ) - 1 if ( j1 >= j0 ) then do jz = j0 , j1 i0 = m + 1 - jz do i = i0 , Ml Abd ( i , jz ) = 0.0D0 enddo enddo endif jz = j1 ju = 0 ! !      GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING ! nm1 = N - 1 if ( nm1 >= 1 ) then do k = 1 , nm1 kp1 = k + 1 ! !         ZERO NEXT FILL-IN COLUMN ! jz = jz + 1 if ( jz <= N ) then if ( Ml >= 1 ) then do i = 1 , Ml Abd ( i , jz ) = 0.0D0 enddo endif endif ! !         FIND L = PIVOT INDEX ! lm = min ( Ml , N - k ) l = idamax ( lm + 1 , Abd ( m , k ), 1 ) + m - 1 Ipvt ( k ) = l + k - m ! !         ZERO PIVOT IMPLIES THIS COLUMN ALREADY TRIANGULARIZED ! if ( Abd ( l , k ) == 0.0D0 ) then Info = k else ! !            INTERCHANGE IF NECESSARY ! if ( l /= m ) then t = Abd ( l , k ) Abd ( l , k ) = Abd ( m , k ) Abd ( m , k ) = t endif ! !            COMPUTE MULTIPLIERS ! t = - 1.0D0 / Abd ( m , k ) call dscal ( lm , t , Abd ( m + 1 , k ), 1 ) ! !            ROW ELIMINATION WITH COLUMN INDEXING ! ju = min ( max ( ju , Mu + Ipvt ( k )), N ) mm = m if ( ju >= kp1 ) then do j = kp1 , ju l = l - 1 mm = mm - 1 t = Abd ( l , j ) if ( l /= mm ) then Abd ( l , j ) = Abd ( mm , j ) Abd ( mm , j ) = t endif call daxpy ( lm , t , Abd ( m + 1 , k ), 1 , Abd ( mm + 1 , j ), 1 ) enddo endif endif enddo endif Ipvt ( N ) = N if ( Abd ( m , N ) == 0.0D0 ) Info = N end subroutine dgbfa","tags":"","loc":"sourcefile/dgbfa.inc.html"},{"title":"dgesl.inc – odepack","text":"Contents Subroutines dgesl Source Code dgesl.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dgesl(3f) - [M_odepack::matrix] Solve the real system A*X=B or TRANS(A)*X=B !!               using the factors computed by DGECO or DGEFA. !!### SYNOPSIS !!    subroutine dgesl(A,Lda,N,Ipvt,B,Job) !!    integer,intent(in)          :: Lda !!    real(kind=dp)               :: A(Lda,*) !!    integer,intent(in)          :: N !!    integer,intent(in)          :: Ipvt(*) !!    real(kind=dp),intent(inout) :: B(*) !!    integer,intent(in)          :: Job !! !!### DESCRIPTION !! !!   DGESL solves the double precision system !! !!        A * X = B  or  TRANS(A) * X = B !! !!   using the factors computed by DGECO or DGEFA. !! !!#### Error Condition !! !!        A division by zero will occur if the input factor contains a !!        zero on the diagonal.  Technically this indicates singularity !!        but it is often caused by improper arguments or improper !!        setting of LDA .  It will not occur if the subroutines are !!        called correctly and if DGECO has set RCOND .GT. 0.0 !!        or DGEFA has set INFO .EQ. 0 . !! !!   To compute  INVERSE(A) * C  where  C  is a matrix !!   with  P  columns !! !!           CALL DGECO(A,LDA,N,IPVT,RCOND,Z) !!           IF (RCOND is too small) GO TO ... !!           DO J = 1, P !!              CALL DGESL(A,LDA,N,IPVT,C(1,J),0) !!           ENDDO !! !!### ON ENTRY !! !!   A !! !!   :   the output from DGECO or DGEFA. !! !!   LDA !! !!   :   the leading dimension of the array  A . !! !!   N !! !!   :   the order of the matrix  A . !! !!   IPVT !! !!   :   the pivot vector from DGECO or DGEFA. !! !!   B !! !!   :   the right hand side vector. !! !!   JOB !!   : !!        = 0         to solve  A*X = B , !!        = nonzero   to solve  TRANS(A)*X = B  where !!                    TRANS(A)  is the transpose. !! !!### ON RETURN !! !!   B !! !!   :   the solution vector  X . !! !!### REFERENCES !!   J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. !!   Stewart, LINPACK Users' Guide, SIAM, 1979. !! ! ! ### CATEGORY  D2A1 ! ### TYPE      DOUBLE PRECISION (SGESL-S, DGESL-D, CGESL-C) ! ### KEYWORDS  LINEAR ALGEBRA, LINPACK, MATRIX, SOLVE ! ### AUTHOR  Moler, C. B., (U. of New Mexico) ! ### ROUTINES CALLED  DAXPY, DDOT ! ### REVISION HISTORY  (YYMMDD) !     19780814  DATE WRITTEN !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19900326  Removed duplicate information from DESCRIPTION section. !               (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! subroutine dgesl ( A , Lda , N , Ipvt , B , Job ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ipvt ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) integer , intent ( in ) :: Job ! integer :: k , kb , l , nm1 real ( kind = dp ) :: t ! nm1 = N - 1 if ( Job == 0 ) then ! ! JOB = 0 , SOLVE  A * X = B ! FIRST SOLVE  L*Y = B ! if ( nm1 >= 1 ) then do k = 1 , nm1 l = Ipvt ( k ) t = B ( l ) if ( l /= k ) then B ( l ) = B ( k ) B ( k ) = t endif call daxpy ( N - k , t , A ( k + 1 , k ), 1 , B ( k + 1 ), 1 ) enddo endif ! ! NOW SOLVE  U*X = Y ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / A ( k , k ) t = - B ( k ) call daxpy ( k - 1 , t , A ( 1 , k ), 1 , B ( 1 ), 1 ) enddo else ! ! JOB = NONZERO, SOLVE  TRANS(A) * X = B ! FIRST SOLVE  TRANS(U)*Y = B ! do k = 1 , N t = ddot ( k - 1 , A ( 1 , k ), 1 , B ( 1 ), 1 ) B ( k ) = ( B ( k ) - t ) / A ( k , k ) enddo ! ! NOW SOLVE TRANS(L)*X = Y ! if ( nm1 >= 1 ) then do kb = 1 , nm1 k = N - kb B ( k ) = B ( k ) + ddot ( N - k , A ( k + 1 , k ), 1 , B ( k + 1 ), 1 ) l = Ipvt ( k ) if ( l == k ) cycle t = B ( l ) B ( l ) = B ( k ) B ( k ) = t enddo endif endif end subroutine dgesl","tags":"","loc":"sourcefile/dgesl.inc.html"},{"title":"dgbsl.inc – odepack","text":"Contents Subroutines dgbsl Source Code dgbsl.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!  dgbsl(3f) - [M_odepack::Matrix] Solve the real band system A*X=B or !!              TRANS(A)*X=B using the factors computed by DGBCO(3f) or DGBFA(). !!### SYNOPSIS !!         subroutine dgbsl(Abd,Lda,N,Ml,Mu,Ipvt,B,Job) !! !!         integer,intent(in)          :: Lda !!         real(kind=dp)               :: Abd(Lda,*) !!         integer,intent(in)          :: N !!         integer,intent(in)          :: Ml !!         integer,intent(in)          :: Mu !!         integer,intent(in)          :: Ipvt(*) !!         real(kind=dp),intent(inout) :: B(*) !!         integer,intent(in)          :: Job !! !!### DESCRIPTION !! !!     DGBSL solves the double precision band system !! !!          A * X = B  or  TRANS(A) * X = B !! !!     using the factors computed by DGBCO or DGBFA. !! !!     To compute  INVERSE(A) * C  where  C  is a matrix !!     with  P  columns !! !!           CALL DGBCO(ABD,LDA,N,ML,MU,IPVT,RCOND,Z) !!           IF (RCOND is too small) GO TO ... !!           DO J = 1, P !!              CALL DGBSL(ABD,LDA,N,ML,MU,IPVT,C(1,J),0) !!           ENDDO !! !!### Error Condition !! !!     A division by zero will occur if the input factor contains a !!     zero on the diagonal.  Technically this indicates singularity !!     but it is often caused by improper arguments or improper !!     setting of LDA .  It will not occur if the subroutines are !!     called correctly and if DGBCO has set RCOND .GT. 0.0 !!     or DGBFA has set INFO .EQ. 0 . !! !!### ON ENTRY !! !!   ABD !! !!   :   the output from DGBCO(3f) or DGBFA(3f). !! !!   LDA !! !!   :   the leading dimension of the array ABD . !! !!   N !! !!   :   the order of the original matrix. !! !!   ML !! !!   :   number of diagonals below the main diagonal. !! !!   MU !! !!   :   number of diagonals above the main diagonal. !! !!   IPVT !! !!   :   the pivot vector from DGBCO(3f) or DGBFA(3f). !! !!   B !! !!   :   the right hand side vector. !! !!   JOB !!   : !!        = 0         to solve  A*X = B , !!        = nonzero   to solve  TRANS(A)*X = B , where !!                            TRANS(A)  is the transpose. !! !!### ON RETURN !! !!   B !! !!   :   the solution vector  X . !! !!### REFERENCES !!   J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. !!   Stewart, LINPACK Users' Guide, SIAM, 1979. !! ! ### PURPOSE  Solve the real band system A*X=B or TRANS(A)*X=B using !             the factors computed by DGBCO or DGBFA. ! ### CATEGORY  D2A2 ! ### TYPE      DOUBLE PRECISION (SGBSL-S, DGBSL-D, CGBSL-C) ! ### KEYWORDS  BANDED, LINEAR ALGEBRA, LINPACK, MATRIX, SOLVE ! ### AUTHOR  Moler, C. B., (U. of New Mexico) ! ### ROUTINES CALLED  DAXPY, DDOT ! ### REVISION HISTORY  (YYMMDD) !     19780814  DATE WRITTEN !     19890531  Changed all specific intrinsics to generic.  (WRB) !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19900326  Removed duplicate information from DESCRIPTION section. !               (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! subroutine dgbsl ( Abd , Lda , N , Ml , Mu , Ipvt , B , Job ) ! integer , intent ( in ) :: Lda real ( kind = dp ) :: Abd ( Lda , * ) integer , intent ( in ) :: N integer , intent ( in ) :: Ml integer , intent ( in ) :: Mu integer , intent ( in ) :: Ipvt ( * ) real ( kind = dp ), intent ( inout ) :: B ( * ) integer , intent ( in ) :: Job ! integer :: k , kb , l , la , lb , lm , m , nm1 real ( kind = dp ) :: t ! m = Mu + Ml + 1 nm1 = N - 1 if ( Job /= 0 ) then ! !         JOB = NONZERO, SOLVE  TRANS(A) * X = B !         FIRST SOLVE  TRANS(U)*Y = B ! do k = 1 , N lm = min ( k , m ) - 1 la = m - lm lb = k - lm t = ddot ( lm , Abd ( la , k ), 1 , B ( lb ), 1 ) B ( k ) = ( B ( k ) - t ) / Abd ( m , k ) enddo ! !         NOW SOLVE TRANS(L)*X = Y ! if ( Ml /= 0 ) then if ( nm1 >= 1 ) then do kb = 1 , nm1 k = N - kb lm = min ( Ml , N - k ) B ( k ) = B ( k ) + ddot ( lm , Abd ( m + 1 , k ), 1 , B ( k + 1 ), 1 ) l = Ipvt ( k ) if ( l == k ) cycle t = B ( l ) B ( l ) = B ( k ) B ( k ) = t enddo endif endif else ! !         JOB = 0 , SOLVE  A * X = B !         FIRST SOLVE L*Y = B ! if ( Ml /= 0 ) then if ( nm1 >= 1 ) then do k = 1 , nm1 lm = min ( Ml , N - k ) l = Ipvt ( k ) t = B ( l ) if ( l /= k ) then B ( l ) = B ( k ) B ( k ) = t endif call daxpy ( lm , t , Abd ( m + 1 , k ), 1 , B ( k + 1 ), 1 ) enddo endif endif ! !         NOW SOLVE  U*X = Y ! do kb = 1 , N k = N + 1 - kb B ( k ) = B ( k ) / Abd ( m , k ) lm = min ( k , m ) - 1 la = m - lm lb = k - lm t = - B ( k ) call daxpy ( lm , t , Abd ( la , k ), 1 , B ( lb ), 1 ) enddo endif end subroutine dgbsl","tags":"","loc":"sourcefile/dgbsl.inc.html"},{"title":"xerrwd.inc – odepack","text":"Contents Subroutines xerrwd Source Code xerrwd.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> ! ### NAME !! xerrwd(3f) - [M_odepack::Matrix] Write error message with values. !! ! ### SYNOPSIS !!      subroutine xerrwd(Msg,Nmes,Nerr,Level,Ni,I1,I2,Nr,R1,R2) !! !!      character(len=*),intent(in) :: Msg !!      integer                     :: Nmes !!      integer                     :: Nerr !!      integer,intent(in)          :: Level !!      integer,intent(in)          :: Ni !!      integer,intent(in)          :: I1 !!      integer,intent(in)          :: I2 !!      integer,intent(in)          :: Nr !!      real(kind=dp),intent(in)    :: R1 !!      real(kind=dp),intent(in)    :: R2 !! !!### DESCRIPTION !! !!  Subroutines XERRWD, XSETF, XSETUN, and the function routine IXSAV, !!  as given here, constitute a simplified version of the SLATEC error !!  handling package. !! !!### OPTIONS !!  All arguments are input arguments. !! !!   MSG !! !!   :   The message (character array). !! !!   NMES !! !!   :   The length of MSG (number of characters). !! !!   NERR !! !!   :   The error number (not used). !! !!   LEVEL !! !!   :   The error level.. !!            0 or 1 means recoverable (control returns to caller). !!            2 means fatal (run is aborted--see note below). !! !!   NI !! !!   :   Number of integers (0, 1, or 2) to be printed with message. !! !!   I1,I2 !! !!   :   Integers to be printed, depending on NI. !! !!   NR !! !!   :   Number of reals (0, 1, or 2) to be printed with message. !! !!   R1,R2 !! !!   :   Reals to be printed, depending on NR. !! !!   Note..  this routine is machine-dependent and specialized for use !!   in limited context, in the following ways.. !! !!   1. The argument MSG is assumed to be of type CHARACTER, and !!      the message is printed with a format of (1X,A). !!   2. The message is assumed to take only one line. !!      Multi-line messages are generated by repeated calls. !!   3. If LEVEL = 2, control passes to the statement   STOP !!      to abort the run.  This statement may be machine-dependent. !!   4. R1 and R2 are assumed to be in double precision and are printed !!      in D21.13 format. !! ! ### SUBSIDIARY ! ### CATEGORY  R3C ! ### TYPE      DOUBLE PRECISION (XERRWV-S, XERRWD-D) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### ROUTINES CALLED  IXSAV ! ### REVISION HISTORY  (YYMMDD) !     19920831  DATE WRITTEN !     19921118  Replaced MFLGSV/LUNSAV by IXSAV. (ACH) !     19930329  Modified prologue to SLATEC format. (FNF) !     19930407  Changed MSG from CHARACTER*1 array to variable. (FNF) !     19930922  Minor cosmetic change. (FNF) ! ! *Internal Notes: ! !  For a different default logical unit number, IXSAV (or a subsidiary !  routine that it calls) will need to be modified. !  For a different run-abort command, change the STOP statement ! ----------------------------------------------------------------------- !  Subroutines called by XERRWD.. None !  Function routine called by XERRWD.. IXSAV ! ----------------------------------------------------------------------- ! subroutine xerrwd ( Msg , Nmes , Nerr , Level , Ni , I1 , I2 , Nr , R1 , R2 ) character ( len =* ), intent ( in ) :: Msg integer :: Nmes integer :: Nerr integer , intent ( in ) :: Level integer , intent ( in ) :: Ni integer , intent ( in ) :: I1 integer , intent ( in ) :: I2 integer , intent ( in ) :: Nr real ( kind = dp ), intent ( in ) :: R1 real ( kind = dp ), intent ( in ) :: R2 integer :: lunit , mesflg !   Get LUN (logical unit number) and message print flag. lunit = ixsav ( 1 , 0 ,. false .) mesflg = ixsav ( 2 , 0 ,. false .) if ( mesflg /= 0 ) then !  Write the message. write ( lunit , '(1x,a)' ) Msg if ( Ni == 1 ) write ( lunit , \"(6x,'In above message,  I1 =',i10)\" ) I1 if ( Ni == 2 ) write ( lunit , \"(6x,'In above message,  I1 =',i10,3x,'I2 =',i10)\" ) I1 , I2 if ( Nr == 1 ) write ( lunit , \"(6x,'In above message,  R1 =',d21.13)\" ) R1 if ( Nr == 2 ) write ( lunit , \"(6x,'In above,  R1 =',d21.13,3x,'R2 =',d21.13)\" ) R1 , R2 endif !  Abort the run if LEVEL = 2. if ( Level == 2 ) stop end subroutine xerrwd","tags":"","loc":"sourcefile/xerrwd.inc.html"},{"title":"dscal.inc – odepack","text":"Contents Subroutines dscal Source Code dscal.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dscal(3f) - [M_odepack::matrix] Multiply a vector by a constant. !! !!### SYNOPSIS !!    subroutine dscal(N,Da,Dx,Incx) !!    integer , intent(in) :: N !!    real(kind=dp) , intent(in) :: Da !!    real(kind=dp) , intent(inout) , dimension(*) :: Dx !!    integer , intent(in) :: Incx !! !!### DESCRIPTION !! !!   Replace double precision DX by double precision DA*DX. !!   For I = 0 to N-1, replace DX(IX+I*INCX) with  DA * DX(IX+I*INCX), !!   where IX = 1 if INCX .GE. 0, else IX = 1+(1-N)*INCX. !! !!### OPTIONS !! !!   N !!   :   number of elements in input vector(s) !! !!   DA !!   :   double precision scale factor !! !!   DX !!   :   double precision vector with N elements !! !!   INCX !!   :   storage spacing between elements of DX !! !!### RETURNS !! !!   DX !!   :   double precision result (unchanged if N.LE.0) !! !!### REFERENCES !!#### B L A S  Subprogram !! !!   C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T. !!   Krogh, Basic linear algebra subprograms for Fortran !!   usage, Algorithm No. 539, Transactions on Mathematical !!   Software 5, 3 (September 1979), pp. 308-323. !! ! ### CATEGORY  D1A6 ! ### TYPE      DOUBLE PRECISION (SSCAL-S, DSCAL-D, CSCAL-C) ! ### KEYWORDS  BLAS, LINEAR ALGEBRA, SCALE, VECTOR ! ### AUTHOR  Lawson, C. L., (JPL) !             Hanson, R. J., (SNLA) !             Kincaid, D. R., (U. of Texas) !             Krogh, F. T., (JPL) ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791001  DATE WRITTEN !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19900821  Modified to correct problem with a negative increment. !               (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! subroutine dscal ( N , Da , Dx , Incx ) ! integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Da real ( kind = dp ), intent ( inout ) :: Dx ( * ) integer , intent ( in ) :: Incx ! integer :: i , ix , m , mp1 ! if ( N <= 0 ) return if ( Incx == 1 ) then ! !     Code for increment equal to 1. ! !     Clean-up loop so remaining vector length is a multiple of 5. ! m = mod ( N , 5 ) if ( m /= 0 ) then do i = 1 , m Dx ( i ) = Da * Dx ( i ) enddo if ( N < 5 ) return endif mp1 = m + 1 do i = mp1 , N , 5 Dx ( i ) = Da * Dx ( i ) Dx ( i + 1 ) = Da * Dx ( i + 1 ) Dx ( i + 2 ) = Da * Dx ( i + 2 ) Dx ( i + 3 ) = Da * Dx ( i + 3 ) Dx ( i + 4 ) = Da * Dx ( i + 4 ) enddo else ! !     Code for increment not equal to 1. ! ix = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 do i = 1 , N Dx ( ix ) = Da * Dx ( ix ) ix = ix + Incx enddo return endif end subroutine dscal","tags":"","loc":"sourcefile/dscal.inc.html"},{"title":"dgefa.inc – odepack","text":"Contents Subroutines dgefa Source Code dgefa.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> ! ### NAME !!   dgefa(3f) - [M_odepack::matrix] Factor a matrix using Gaussian elimination. !! !!      subroutine dgefa(A,Lda,N,Ipvt,Info) !!      real(kind=dp),intent(inout) :: A(Lda,*) !!      integer,intent(in)          :: Lda !!      integer,intent(in)          :: N !!      integer,intent(out)         :: Ipvt(*) !!      integer,intent(out)         :: Info !! !!### DESCRIPTION !! !!   DGEFA factors a double precision matrix by Gaussian elimination. !! !!   DGEFA is usually called by DGECO, but it can be called !!   directly with a saving in time if  RCOND  is not needed. !!   (Time for DGECO) = (1 + 9/N)*(Time for DGEFA) . !! !!### OPTIONS !! !!   A !! !!   :   the matrix to be factored. !! !!   LDA !! !!   :   the leading dimension of the array  A . !! !!   N !! !!   :   the order of the matrix  A . !! !!### RETURNS !! !!   A !! !!   :   an upper triangular matrix and the multipliers !!       which were used to obtain it. !!       The factorization can be written  A = L*U  where !! !!   L !! !!   :   is a product of permutation and unit lower !!       triangular matrices and  U  is upper triangular. !! !!   IPVT !! !!   :   an integer vector of pivot indices. !! !!   INFO !! !!   : !!        = 0  normal value. !!        = K  if  U(K,K) .EQ. 0.0 .  This is not an error !!             condition for this subroutine, but it does !!             indicate that DGESL or DGEDI will divide by zero !!             if called.  Use  RCOND  in DGECO for a reliable !!             indication of singularity. !! !!### REFERENCES !!   J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. !!   Stewart, LINPACK Users' Guide, SIAM, 1979. !! ! ### CATEGORY  D2A1 ! ### TYPE      DOUBLE PRECISION (SGEFA-S, DGEFA-D, CGEFA-C) ! ### KEYWORDS  GENERAL MATRIX, LINEAR ALGEBRA, LINPACK, !              MATRIX FACTORIZATION ! ### AUTHOR  Moler, C. B., (U. of New Mexico) ! ### ROUTINES CALLED  DAXPY, DSCAL, IDAMAX ! ### REVISION HISTORY  (YYMMDD) !     19780814  DATE WRITTEN !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19900326  Removed duplicate information from DESCRIPTION section. !             (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! subroutine dgefa ( A , Lda , N , Ipvt , Info ) ! integer , intent ( in ) :: Lda real ( kind = dp ), intent ( inout ) :: A ( Lda , * ) integer , intent ( in ) :: N integer , intent ( out ) :: Ipvt ( * ) integer , intent ( out ) :: Info ! integer :: j , k , kp1 , l , nm1 real ( kind = dp ) :: t ! !      GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING ! Info = 0 nm1 = N - 1 if ( nm1 >= 1 ) then do k = 1 , nm1 kp1 = k + 1 ! !         FIND L = PIVOT INDEX ! l = idamax ( N - k + 1 , A ( k , k ), 1 ) + k - 1 Ipvt ( k ) = l ! !         ZERO PIVOT IMPLIES THIS COLUMN ALREADY TRIANGULARIZED ! if ( A ( l , k ) == 0.0D0 ) then Info = k else ! !            INTERCHANGE IF NECESSARY ! if ( l /= k ) then t = A ( l , k ) A ( l , k ) = A ( k , k ) A ( k , k ) = t endif ! !            COMPUTE MULTIPLIERS ! t = - 1.0D0 / A ( k , k ) call dscal ( N - k , t , A ( k + 1 , k ), 1 ) ! !            ROW ELIMINATION WITH COLUMN INDEXING ! do j = kp1 , N t = A ( l , j ) if ( l /= k ) then A ( l , j ) = A ( k , j ) A ( k , j ) = t endif call daxpy ( N - k , t , A ( k + 1 , k ), 1 , A ( k + 1 , j ), 1 ) enddo endif enddo endif Ipvt ( N ) = N if ( A ( N , N ) == 0.0D0 ) Info = N end subroutine dgefa","tags":"","loc":"sourcefile/dgefa.inc.html"},{"title":"daxpy.inc – odepack","text":"Contents Subroutines daxpy Source Code daxpy.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   daxpy(3f) - [M_odepack::matrix] Compute a constant times a vector plus a vector. !! !!### SYNOPSIS !!    subroutine daxpy(N,Da,Dx,Incx,Dy,Incy) !!    integer,intent(in)          :: N !!    real(kind=dp),intent(in)    :: Da !!    real(kind=dp),intent(in)    :: Dx(*) !!    integer,intent(in)          :: Incx !!    real(kind=dp),intent(inout) :: Dy(*) !!    integer,intent(in)          :: Incy !! !!### DESCRIPTION !! !!   daxpy(3f) computes a constant times a vector plus a vector. !!   It uses unrolled loops for increments equal to one. !! !!   Overwrite double precision DY with double precision DA*DX + DY. !!   For I = 0 to N-1, replace  DY(LY+I*INCY) with !!   DA*DX(LX+I*INCX) + DY(LY+I*INCY), !! !!   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is !!   defined in a similar way using INCY. !! !!### INPUT OPTIONS !! !!   N !! !!   :   number of elements in input vector(s) !! !!   DA !! !!   :   double precision scalar multiplier !! !!   DX !! !!   :   double precision vector with N elements !! !!   INCX !! !!   :   storage spacing between elements of DX !! !!   DY !! !!   :   double precision vector with N elements !! !!   INCY !! !!   :   storage spacing between elements of DY !! !!### RETURNS !!   DY !! !!   :   double precision result (unchanged if N .LE. 0) !! !!### REFERENCES !!####  B L A S  Subprogram !!   C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T. !!   Krogh, Basic linear algebra subprograms for Fortran !!   usage, Algorithm No. 539, Transactions on Mathematical !!   Software 5, 3 (September 1979), pp. 308-323. !! ! ### BEGIN PROLOGUE  DAXPY ! ### CATEGORY  D1A7 ! ### TYPE      DOUBLE PRECISION (SAXPY-S, DAXPY-D, CAXPY-C) ! ### KEYWORDS  BLAS, LINEAR ALGEBRA, TRIAD, VECTOR ! ### AUTHOR  Lawson, C. L., (JPL) !             Hanson, R. J., (SNLA) !             Kincaid, D. R., (U. of Texas) !             Krogh, F. T., (JPL) ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791001  DATE WRITTEN !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19920310  Corrected definition of LX in DESCRIPTION.  (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) subroutine daxpy ( N , Da , Dx , Incx , Dy , Incy ) ! integer , intent ( in ) :: N real ( kind = dp ) , intent ( in ) :: Da real ( kind = dp ) , intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx real ( kind = dp ) , intent ( inout ) :: Dy ( * ) integer , intent ( in ) :: Incy ! integer :: i , ix , iy , m , mp1 , ns ! if ( N <= 0 . or . Da == 0.0D0 ) return if ( Incx == Incy ) then if ( Incx < 1 ) then elseif ( Incx == 1 ) then ! !      Code for both increments equal to 1. ! !      Clean-up loop so remaining vector length is a multiple of 4. ! m = mod ( N , 4 ) if ( m /= 0 ) then do i = 1 , m Dy ( i ) = Dy ( i ) + Da * Dx ( i ) enddo if ( N < 4 ) return endif mp1 = m + 1 do i = mp1 , N , 4 Dy ( i ) = Dy ( i ) + Da * Dx ( i ) Dy ( i + 1 ) = Dy ( i + 1 ) + Da * Dx ( i + 1 ) Dy ( i + 2 ) = Dy ( i + 2 ) + Da * Dx ( i + 2 ) Dy ( i + 3 ) = Dy ( i + 3 ) + Da * Dx ( i + 3 ) enddo return else ! !      Code for equal, positive, non-unit increments. ! ns = N * Incx do i = 1 , ns , Incx Dy ( i ) = Da * Dx ( i ) + Dy ( i ) enddo return endif endif ! !      Code for unequal or nonpositive increments. ! ix = 1 iy = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 if ( Incy < 0 ) iy = ( - N + 1 ) * Incy + 1 do i = 1 , N Dy ( iy ) = Dy ( iy ) + Da * Dx ( ix ) ix = ix + Incx iy = iy + Incy enddo end subroutine daxpy","tags":"","loc":"sourcefile/daxpy.inc.html"},{"title":"xsetun.inc – odepack","text":"Contents Subroutines xsetun Source Code xsetun.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### Name !!   xsetun(3f) - [M_odepack::matrix] Reset the logical unit number for error messages. !! !!### Synopsis !!    subroutine xsetun (lun) !!    integer,intent(in) :: lun !! !!### Description !!   XSETUN sets the logical unit number for error messages to LUN. !! !!### Options !! !!   LUN !! !!   :   logical unit number used for error messages !! !------------------------------------------------------------------------- ! ### CATEGORY  R3B ! ### TYPE      ALL (XSETUN-A) ! ### KEYWORDS  ERROR CONTROL ! ### DESCRIPTION ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### SEE ALSO  XERRWD, XERRWV ! ### REFERENCES  (NONE) ! ### ROUTINES CALLED  IXSAV ! ### REVISION HISTORY  (YYMMDD) !     19921118  DATE WRITTEN !     19930329  Added SLATEC format prologue. (FNF) !     19930407  Corrected SEE ALSO section. (FNF) !     19930922  Made user-callable, and other cosmetic changes. (FNF) !------------------------------------------------------------------------- !  Subroutines called by XSETUN.. None !  Function routine called by XSETUN ... IXSAV !------------------------------------------------------------------------- subroutine xsetun ( lun ) integer , intent ( in ) :: lun integer :: junk if ( lun > 0 ) junk = ixsav ( 1 , lun , . true . ) end subroutine xsetun","tags":"","loc":"sourcefile/xsetun.inc.html"},{"title":"dcopy.inc – odepack","text":"Contents Subroutines dcopy Source Code dcopy.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dcopy(3f) - [M_odepack::matrix] copy a vector !! !!### SYNOPSIS !!        subroutine dcopy(N,Dx,Incx,Dy,Incy) !! !!        integer,intent(in)        :: N !!        real(kind=dp),intent(in)  :: Dx(*) !!        integer,intent(in)        :: Incx !!        real(kind=dp),intent(out) :: Dy(*) !!        integer,intent(in)        :: Incy !! !!### DESCRIPTION !! !!   Copy double precision DX to double precision DY. !!   For I = 0 to N-1, copy DX(LX+I*INCX) to DY(LY+I*INCY), !!   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is !!   defined in a similar way using INCY. !! !!### INPUT OPTIONS !! !!   N !! !!   :   number of elements in input vector(s) !! !!   DX !! !!   :   double precision vector with N elements !! !!   INCX !! !!   :   storage spacing between elements of DX !! !!   DY !! !!   :   double precision vector with N elements !! !!   INCY !! !!   :   storage spacing between elements of DY !! !!### RETURNS !! !!   DY !! !!   :   copy of vector DX (unchanged if N .LE. 0) !! !!### REFERENCES !!#### B L A S  Subprogram !!    C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T. !!    Krogh, Basic linear algebra subprograms for Fortran !!    usage, Algorithm No. 539, Transactions on Mathematical !!    Software 5, 3 (September 1979), pp. 308-323. !! ! ### BEGIN PROLOGUE  DCOPY ! ### PURPOSE  Copy a vector. ! ### CATEGORY  D1A5 ! ### TYPE      DOUBLE PRECISION (SCOPY-S, DCOPY-D, CCOPY-C, ICOPY-I) ! ### KEYWORDS  BLAS, COPY, LINEAR ALGEBRA, VECTOR ! ### AUTHOR  Lawson, C. L., (JPL) !            Hanson, R. J., (SNLA) !            Kincaid, D. R., (U. of Texas) !            Krogh, F. T., (JPL) ! ### DESCRIPTION ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791001  DATE WRITTEN !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19920310  Corrected definition of LX in DESCRIPTION.  (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! ### END PROLOGUE  DCOPY subroutine dcopy ( N , Dx , Incx , Dy , Incy ) ! integer , intent ( in ) :: N real ( kind = dp ) , intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx real ( kind = dp ) , intent ( out ) :: Dy ( * ) integer , intent ( in ) :: Incy ! integer :: i , ix , iy , m , mp1 , ns ! if ( N <= 0 ) return if ( Incx == Incy ) then if ( Incx < 1 ) then elseif ( Incx == 1 ) then ! !      Code for both increments equal to 1. ! !      Clean-up loop so remaining vector length is a multiple of 7. ! m = mod ( N , 7 ) if ( m /= 0 ) then do i = 1 , m Dy ( i ) = Dx ( i ) enddo if ( N < 7 ) return endif mp1 = m + 1 do i = mp1 , N , 7 Dy ( i ) = Dx ( i ) Dy ( i + 1 ) = Dx ( i + 1 ) Dy ( i + 2 ) = Dx ( i + 2 ) Dy ( i + 3 ) = Dx ( i + 3 ) Dy ( i + 4 ) = Dx ( i + 4 ) Dy ( i + 5 ) = Dx ( i + 5 ) Dy ( i + 6 ) = Dx ( i + 6 ) enddo return else ! !      Code for equal, positive, non-unit increments. ! ns = N * Incx do i = 1 , ns , Incx Dy ( i ) = Dx ( i ) enddo return endif endif ! !      Code for unequal or nonpositive increments. ! ix = 1 iy = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 if ( Incy < 0 ) iy = ( - N + 1 ) * Incy + 1 do i = 1 , N Dy ( iy ) = Dx ( ix ) ix = ix + Incx iy = iy + Incy enddo end subroutine dcopy","tags":"","loc":"sourcefile/dcopy.inc.html"},{"title":"idamax.inc – odepack","text":"Contents Functions idamax Source Code idamax.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !! idamax(3f) - [M_odepack::matrix] Find the smallest index of that !! component of a vector having the maximum magnitude. !! !!### SYNOPSIS !!    function idamax(n,dx,incx) !!    integer                  :: idamax !!    integer,intent(in)       :: n !!    real(kind=dp),intent(in) :: dx(*) !!    integer , intent(in)     :: incx !! !!### DESCRIPTION !! !!  Find smallest index of maximum magnitude of double precision DX. !!  IDAMAX = first I, I = 1 to N, to maximize ABS(DX(IX+(I-1)*INCX)), !!  where IX = 1 if INCX .GE. 0, else IX = 1+(1-N)*INCX. !! !!### OPTIONS !! !!   N !!   :   number of elements in input vector(s) !! !!   DX !!   :   double precision vector with N elements !! !!   INCX !!   :   storage spacing between elements of DX !! !!### RETURNS !! !!   IDAMAX !!   :   smallest index (zero if N .LE. 0) !! !!### REFERENCES !!#### B L A S  Subprogram !! !!   C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T. !!   Krogh, Basic linear algebra subprograms for Fortran !!   usage, Algorithm No. 539, Transactions on Mathematical !!   Software 5, 3 (September 1979), pp. 308-323. !! ! ### CATEGORY  D1A2 ! ### TYPE      DOUBLE PRECISION (ISAMAX-S, IDAMAX-D, ICAMAX-C) ! ### KEYWORDS  BLAS, LINEAR ALGEBRA, MAXIMUM COMPONENT, VECTOR ! ### AUTHOR  Lawson, C. L., (JPL) !            Hanson, R. J., (SNLA) !            Kincaid, D. R., (U. of Texas) !            Krogh, F. T., (JPL) ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791001  DATE WRITTEN !     19890531  Changed all specific intrinsics to generic.  (WRB) !     19890531  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19900821  Modified to correct problem with a negative increment. !               (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! function idamax ( N , Dx , Incx ) ! integer :: idamax integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx ! real ( kind = dp ) :: dmax , xmag integer :: i , ix ! idamax = 0 if ( n . le . 0 ) return idamax = 1 if ( n . eq . 1 ) return if ( incx . ne . 1 ) then ! !     Code for increments not equal to 1. ! ix = 1 if ( incx . lt . 0 ) ix = ( - n + 1 ) * incx + 1 dmax = abs ( dx ( ix )) ix = ix + incx do i = 2 , n xmag = abs ( dx ( ix )) if ( xmag . gt . dmax ) then idamax = i dmax = xmag endif ix = ix + incx enddo else ! !     Code for increments equal to 1. ! dmax = abs ( dx ( 1 )) do i = 2 , n xmag = abs ( dx ( i )) if ( xmag . gt . dmax ) then idamax = i dmax = xmag endif enddo endif end function idamax","tags":"","loc":"sourcefile/idamax.inc.html"},{"title":"ddot.inc – odepack","text":"Contents Functions ddot Source Code ddot.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   ddot(3f) - [M_odepack::matrix] Compute the inner product of two vectors. !! !!### DESCRIPTION !!   Returns the dot product of double precision DX and DY. !!   DDOT = sum for I = 0 to N-1 of  DX(LX+I*INCX) * DY(LY+I*INCY), !!   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is !!   defined in a similar way using INCY. !! !!   Description of Parameters !! !!### INPUT !!   N !! !!   :   number of elements in input vector(s) !! !!   DX !! !!   :   double precision vector with N elements !!   INCX !! !!   :   storage spacing between elements of DX !! !!   DY !!   :   double precision vector with N elements !! !!   INCY !!   :   storage spacing between elements of DY !! !!### OUTPUT !! !!   DDOT !!   :   double precision dot product (zero if N .LE. 0) !! !!### REFERENCES !!#### B L A S  Subprogram !!   C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T. !!   Krogh, Basic linear algebra subprograms for Fortran !!   usage, Algorithm No. 539, Transactions on Mathematical !!   Software 5, 3 (September 1979), pp. 308-323. !! ! ### BEGIN PROLOGUE  DDOT ! ### PURPOSE  Compute the inner product of two vectors. ! ### CATEGORY  D1A4 ! ### TYPE      DOUBLE PRECISION (SDOT-S, DDOT-D, CDOTU-C) ! ### KEYWORDS  BLAS, INNER PRODUCT, LINEAR ALGEBRA, VECTOR ! ### AUTHOR  Lawson, C. L., (JPL) !            Hanson, R. J., (SNLA) !            Kincaid, D. R., (U. of Texas) !            Krogh, F. T., (JPL) ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791001  DATE WRITTEN !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19920310  Corrected definition of LX in DESCRIPTION.  (WRB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! ### END PROLOGUE  DDOT pure function ddot ( N , Dx , Incx , Dy , Incy ) ! real ( kind = dp ) :: ddot integer , intent ( in ) :: N real ( kind = dp ), intent ( in ) :: Dx ( * ) integer , intent ( in ) :: Incx real ( kind = dp ), intent ( in ) :: Dy ( * ) integer , intent ( in ) :: Incy ! integer :: i , ix , iy , m , mp1 , ns ! ddot = 0.0D0 if ( N <= 0 ) return if ( Incx == Incy ) then if ( Incx < 1 ) then elseif ( Incx == 1 ) then ! !      Code for both increments equal to 1. ! !      Clean-up loop so remaining vector length is a multiple of 5. ! m = mod ( N , 5 ) if ( m /= 0 ) then do i = 1 , m ddot = ddot + Dx ( i ) * Dy ( i ) enddo if ( N < 5 ) return endif mp1 = m + 1 do i = mp1 , N , 5 ddot = ddot + Dx ( i ) * Dy ( i ) + Dx ( i + 1 ) * Dy ( i + 1 ) + Dx ( i + 2 ) * Dy ( i + 2 ) + Dx ( i + 3 ) * Dy ( i + 3 ) + Dx ( i + 4 ) * Dy ( i + 4 ) enddo return else ! !      Code for equal, positive, non-unit increments. ! ns = N * Incx do i = 1 , ns , Incx ddot = ddot + Dx ( i ) * Dy ( i ) enddo return endif endif ! !      Code for unequal or nonpositive increments. ! ix = 1 iy = 1 if ( Incx < 0 ) ix = ( - N + 1 ) * Incx + 1 if ( Incy < 0 ) iy = ( - N + 1 ) * Incy + 1 do i = 1 , N ddot = ddot + Dx ( ix ) * Dy ( iy ) ix = ix + Incx iy = iy + Incy enddo end function ddot","tags":"","loc":"sourcefile/ddot.inc.html"},{"title":"xsetf.inc – odepack","text":"Contents Subroutines xsetf Source Code xsetf.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   xsetf(3f) - [M_odepack::matrix] Reset the error print control flag. !! !!### SYNOPSIS !!    subroutine xsetf (mflag) !!    integer mflag !! !!### DESCRIPTION !!   XSETF sets the error print control flag to MFLAG: !!### OPTIONS !! !!   MFLAG !! !!   : MFLAG=1 means print all messages (the default). !! !!   MFLAG=0 means no printing. !! ! ### BEGIN PROLOGUE  XSETF ! ### CATEGORY  R3A ! ### TYPE      ALL (XSETF-A) ! ### KEYWORDS  ERROR CONTROL ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### DESCRIPTION ! ### SEE ALSO  XERRWD, XERRWV ! ### REFERENCES  (NONE) ! ### ROUTINES CALLED  IXSAV ! ### REVISION HISTORY  (YYMMDD) !     19921118  DATE WRITTEN !     19930329  Added SLATEC format prologue. (FNF) !     19930407  Corrected SEE ALSO section. (FNF) !     19930922  Made user-callable, and other cosmetic changes. (FNF) ! !  Subroutines called by XSETF.. None !  Function routine called by XSETF.. IXSAV subroutine xsetf ( mflag ) integer mflag , junk !! if ( mflag . eq . 0 . or . mflag . eq . 1 ) junk = ixsav ( 2 , mflag ,. true .) end subroutine xsetf","tags":"","loc":"sourcefile/xsetf.inc.html"},{"title":"dnrm2.inc – odepack","text":"Contents Functions DNRM2 Source Code dnrm2.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### NAME !!   dnrm2(3f) - [M_odepack::matrix] Compute the Euclidean length (L2 norm) of a vector. !! !!### SYNOPSIS !!      double precision function dnrm2(n,x,incx) !!      integer,intent(in) :: incx,n !!      double precision,intent(in) :: x(*) !! !!### DESCRIPTION !! !!   Euclidean norm of the N-vector stored in DX with storage !!   increment INCX, so that !! !!        DNRM2 := sqrt( x'*x ) !! !!### INPUT !! !!  N !!  :   number of elements in input vector(s) !! !!  DX !!  :   double precision vector with N elements !>  dimensioned to at least ( 1 + ( N - 1 )*abs( INCX ) ) !! !!  INCX !!  :   storage spacing between elements of DX !! !!      + If INCX > 0, X(1+(i-1)*INCX) = x(i) for 1 <= i <= n !!      + If INCX < 0, X(1-(n-i)*INCX) = x(i) for 1 <= i <= n !!      + If INCX = 0, x isn't a vector so there is no need to call !!        this subroutine.  If you call it anyway, it will count x(1) !!        in the vector norm N times. !! !!### OUTPUT !! !!  DNRM2 !!  :   double precision result (zero if N .LE. 0) !----------------------------------------------------------------------------------------------------------------------------------- ! ### REFERENCES ! #### B L A S  Subprogram !    C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T. !    Krogh, Basic linear algebra subprograms for Fortran !    usage, Algorithm No. 539, Transactions on Mathematical !    Software 5, 3 (September 1979), pp. 308-323. ! ! ### CATEGORY  D1A3B ! ### TYPE      DOUBLE PRECISION (SNRM2-S, DNRM2-D, SCNRM2-C) ! ### KEYWORDS  BLAS, EUCLIDEAN LENGTH, EUCLIDEAN NORM, L2, !               LINEAR ALGEBRA, UNITARY, VECTOR ! ### AUTHOR  Lawson, C. L., (JPL) !             Hanson, R. J., (SNLA) !             Kincaid, D. R., (U. of Texas) !             Krogh, F. T., (JPL) ! ### ROUTINES CALLED  (NONE) ! ### REVISION HISTORY  (YYMMDD) !     19791001  DATE WRITTEN !     19890531  Changed all specific intrinsics to generic.  (WRB) !     19890831  Modified array declarations.  (WRB) !     19890831  REVISION DATE from Version 3.2 !     19891214  Prologue converted to Version 4.0 format.  (BAB) !     19920501  Reformatted the REFERENCES section.  (WRB) ! !  Authors: !  ======== ! !   author Edward Anderson, Lockheed Martin !   date August 2016 ! !   ingroup single_blas_level1 ! !  Contributors: !  ================== ! !  Weslley Pereira, University of Colorado Denver, USA ! !  Further Details: !  ===================== ! !   Anderson E. (2017) !   Algorithm 978: Safe Scaling in the Level 1 BLAS !   ACM Trans Math Softw 44:1--28 !   https://doi.org/10.1145/3061665 ! !   Blue, James L. (1978) !   A Portable Fortran Program to Find the Euclidean Norm of a Vector !   ACM Trans Math Softw 4:15--23 !   https://doi.org/10.1145/355769.355771 ! !----------------------------------------------------------------------------------------------------------------------------------- pure function DNRM2 ( n , x , incx ) real ( dp ) :: DNRM2 ! !  -- Reference BLAS level1 routine (version 3.9.1) -- !  -- Reference BLAS is a software package provided by Univ. of Tennessee,    -- !  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..-- !     March 2021 ! !  .. Constants .. real ( dp ), parameter :: zero = 0.0_dp real ( dp ), parameter :: one = 1.0_dp real ( dp ), parameter :: maxN = huge ( 0.0_dp ) !  .. !  .. Blue's ccaling constants .. real ( dp ), parameter :: tsml = real ( radix ( 0._dp ), dp ) ** ceiling ( & ( minexponent ( 0._dp ) - 1 ) * 0.5_dp ) real ( dp ), parameter :: tbig = real ( radix ( 0._dp ), dp ) ** floor ( & ( maxexponent ( 0._dp ) - digits ( 0._dp ) + 1 ) * 0.5_dp ) real ( dp ), parameter :: ssml = real ( radix ( 0._dp ), dp ) ** ( - floor ( & ( minexponent ( 0._dp ) - 1 ) * 0.5_dp )) real ( dp ), parameter :: sbig = real ( radix ( 0._dp ), dp ) ** ( - ceiling ( & ( maxexponent ( 0._dp ) - digits ( 0._dp ) + 1 ) * 0.5_dp )) !  .. !  .. Scalar Arguments .. integer , intent ( in ) :: incx , n !  .. !  .. Array Arguments .. real ( dp ), intent ( in ) :: x ( * ) !  .. !  .. Local Scalars .. integer :: i , ix logical :: notbig real ( dp ) :: abig , amed , asml , ax , scl , sumsq , ymax , ymin ! !  Quick return if possible ! DNRM2 = zero if ( n <= 0 ) return ! scl = one sumsq = zero ! !  Compute the sum of squares in 3 accumulators: !     abig -- sums of squares scaled down to avoid overflow !     asml -- sums of squares scaled up to avoid underflow !     amed -- sums of squares that do not require scaling !  The thresholds and multipliers are !     tbig -- values bigger than this are scaled down by sbig !     tsml -- values smaller than this are scaled up by ssml ! notbig = . true . asml = zero amed = zero abig = zero ix = 1 if ( incx < 0 ) ix = 1 - ( n - 1 ) * incx do i = 1 , n ax = abs ( x ( ix )) if ( ax > tbig ) then abig = abig + ( ax * sbig ) ** 2 notbig = . false . else if ( ax < tsml ) then if ( notbig ) asml = asml + ( ax * ssml ) ** 2 else amed = amed + ax ** 2 end if ix = ix + incx end do ! !  Combine abig and amed or amed and asml if more than one !  accumulator was used. ! if ( abig > zero ) then ! !     Combine abig and amed if abig > 0. ! if ( ( amed > zero ) . or . ( amed > maxN ) . or . ( amed /= amed ) ) then abig = abig + ( amed * sbig ) * sbig end if scl = one / sbig sumsq = abig else if ( asml > zero ) then ! !     Combine amed and asml if asml > 0. ! if ( ( amed > zero ) . or . ( amed > maxN ) . or . ( amed /= amed ) ) then amed = sqrt ( amed ) asml = sqrt ( asml ) / ssml if ( asml > amed ) then ymin = amed ymax = asml else ymin = asml ymax = amed end if scl = one sumsq = ymax ** 2 * ( one + ( ymin / ymax ) ** 2 ) else scl = one / ssml sumsq = asml end if else ! !     Otherwise all values are mid-range ! scl = one sumsq = amed end if DNRM2 = scl * sqrt ( sumsq ) return end function !-----------------------------------------------------------------------------------------------------------------------------------","tags":"","loc":"sourcefile/dnrm2.inc.html"},{"title":"ixsav.inc – odepack","text":"Contents Functions ixsav Source Code ixsav.inc Source Code !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !> !!### Name !! ixsav(3f) - [M_odesave::matrix] Save and recall error message control parameters. !! !!### Synopsis !!    function ixsav(Ipar,Ivalue,Iset) !!    integer            :: ixsav !! !!    integer,intent(in) :: Ipar !!    integer,intent(in) :: Ivalue !!    logical,intent(in) :: Iset !! !!### Description !!   IXSAV always recalls the _current_ value of one of two error message !!   control flags. !! !!   It also can set new values to return for subsequent queries if !!   Iset=.true. !! !!   This is a modification of the SLATEC library routine J4SAVE. !! !!### Saved local variables.. !! !!   LUNIT !! !!   :   Logical unit number for messages. !! !!   MESFLG !! !!   :   Print control flag.. !! !!           1 means print all messages (the default). !!           0 means no message printing. !! !!### Options !! !!   IPAR !! !!   :   Parameter indicator (1 for LUNIT, 2 for MESFLG). !! !!   IVALUE !! !!   :   The value to be set for the parameter, if ISET = .TRUE. !! !!   ISET !! !!   :   Logical flag to indicate whether to read or write. !!       If ISET = .TRUE., the parameter will be given !!       the value IVALUE.  If ISET = .FALSE., the parameter !!       will be unchanged, and IVALUE is a dummy argument. !! !!### Returns !! !!   IXSAV !!   : The (old) value of the parameter. !! ! ----------------------------------------------------------------------- ! ### SUBSIDIARY ! ### PURPOSE  Save and recall error message control parameters. ! ### CATEGORY  R3C ! ### TYPE      ALL (IXSAV-A) ! ### AUTHOR  Hindmarsh, Alan C., (LLNL) ! ### DESCRIPTION ! ### SEE ALSO  XERRWD, XERRWV ! ### REVISION HISTORY  (YYMMDD) !     19921118   DATE WRITTEN !     19930329   Modified prologue to SLATEC format. (FNF) !     19930922   Minor cosmetic changes. (FNF) !     20220125   Changed to use ISO_FORTRAN_ENV (JSU) ! !  Subroutines called by IXSAV.. None !  Function routine called by IXSAV.. None ! ----------------------------------------------------------------------- function ixsav ( Ipar , Ivalue , Iset ) use , intrinsic :: iso_fortran_env , only : stdin => input_unit , & stdout => output_unit , & stderr => error_unit integer :: ixsav integer , intent ( in ) :: Ipar integer , intent ( in ) :: Ivalue logical , intent ( in ) :: Iset integer , save :: lunit = stdout integer , save :: mesflg = 1 select case ( Ipar ) case ( 1 ) ! lunit ixsav = lunit if ( Iset ) lunit = Ivalue case ( 2 ) ! mesflg ixsav = mesflg if ( Iset ) mesflg = Ivalue case default stop '*ixsav* unknown value for Ipar' end select end function ixsav","tags":"","loc":"sourcefile/ixsav.inc.html"},{"title":"dlsodar.inc – odepack","text":"Contents Subroutines dlsodar Source Code dlsodar.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! _DLSODAR_ solves the initial value problem for stiff or nonstiff !! systems of first order ODEs of the form !!```text !!     dy/dt = f(t,y),  or, in component form, !!     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). !!``` !! with Automatic method switching for stiff and nonstiff problems, !! and with Root-finding. !! !! At the same time, it locates the roots of any of a set of functions !!```text !!     g(i) = g(i,t,y(1),...,y(NEQ))  (i = 1,...,ng). !!``` !! This a variant version of the _DLSODE_ package.  It differs from it !! in two ways: !! !! (a) It switches automatically between stiff and nonstiff methods. !! This means that the user does not have to determine whether the !! problem is stiff or not, and the solver will automatically choose the !! appropriate method.  It always starts with the nonstiff method. !! !! (b) It finds the root of at least one of a set of constraint !! functions g(i) of the independent and dependent variables. !! It finds only those roots for which some g(i), as a function !! of t, changes sign in the interval of integration. !! It then returns the solution at the root, if that occurs !! sooner than the specified stop condition, and otherwise returns !! the solution according the specified stop condition. !! !!----------------------------------------------------------------------- !!#### Summary of Usage. !! !! Communication between the user and the DLSODAR package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including alternative treatment of the Jacobian matrix, !! optional inputs and outputs, nonstandard options, and !! instructions for special situations.  See also the example !! problem (with program and output) following this summary. !! !!#### Step A. !! !! First provide a subroutine of the form: !!```fortran !!      SUBROUTINE F (NEQ, T, Y, YDOT) !!      INTEGER NEQ !!      DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! which supplies the vector function f by loading YDOT(i) with f(i). !! !!#### Step B. !! !! Provide a subroutine of the form: !!```fortran !!      SUBROUTINE G (NEQ, T, Y, NG, GOUT) !!      INTEGER NEQ !!      DOUBLE PRECISION T, Y(*), GOUT(NG) !!``` !! which supplies the vector function g by loading GOUT(i) with !! g(i), the i-th constraint function whose root is sought. !! !!#### Step C. !! !! Write a main program which calls Subroutine DLSODAR once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages by !! DLSODAR. !! !!#### On the first call to DLSODAR, supply arguments as follows: !! !! F !! !! : name of subroutine for right-hand side vector f. !! This name must be declared External in calling program. !! NEQ !! !! : number of first order ODEs. !! Y !! !! : array of initial values, of length NEQ. !! T !! !! : the initial value of the independent variable. !! TOUT !! !! : first point where output is desired (.ne. T). !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! RTOL !! !! : relative tolerance parameter (scalar). !! ATOL !! !! : absolute tolerance parameter (scalar or array). !! the estimated local error in y(i) will be controlled so as !! to be less than !!```text !!       EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! Thus the local error test passes if, in each component, !! either the absolute error is less than ATOL (or ATOL(i)), !! or the relative error is less than RTOL. !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !! control.  _Caution_: actual (global) errors may exceed these !! local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!      22 + NEQ * MAX(16, NEQ + 9) + 3*NG. !!``` !! See also Paragraph F below. !! !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least  20 + NEQ. !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! JAC !! !! : name of subroutine for Jacobian matrix. !! Use a dummy name to a noop function.  See also Paragraph F below. !! !! JT !! !! : Jacobian type indicator.  Set JT = 2. !! See also Paragraph F below. !! !! G !! !! : name of subroutine for constraint functions, whose !! roots are desired during the integration. !! This name must be declared External in calling program. !! !! NG !! !! : number of constraint functions g(i).  If there are none, !! set NG = 0, and pass a dummy name for G. !! !! JROOT !! !! : integer array of length NG for output of root information. !! See next paragraph. !! Note that the main program must declare arrays Y, RWORK, IWORK, !! JROOT, and possibly ATOL. !! !!#### Step D. !! !! The output from the first call (or any call) is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable.  This is !! TOUT if ISTATE = 2, or the root location if ISTATE = 3, !! or the farthest point reached if DLSODAR was unsuccessful. !! ISTATE = 2 or 3  if DLSODAR was successful, negative otherwise. !! !! ISTATE | Description !! ------ | -------------------------------------------------------------- !!      2 | means no root was found, and TOUT was reached as desired. !!      3 | means a root was found prior to reaching TOUT. !!     -1 | means excess work done on this call (perhaps wrong JT). !!     -2 | means excess accuracy requested (tolerances too small). !!     -3 | means illegal input detected (see printed message). !!     -4 | means repeated error test failures (check all inputs). !!     -5 | means repeated convergence failures (perhaps bad Jacobian !!        | supplied or wrong choice of JT or tolerances). !!     -6 | means error weight became zero during problem. (Solution !!        | component i vanished, and ATOL or ATOL(i) = 0.) !!     -7 | means work space insufficient to finish (see messages). !!        | !! !! JROOT !! !! : array showing roots found if ISTATE = 3 on return. !! JROOT(i) = 1 if g(i) has a root at t, or 0 otherwise. !! !!#### Step E. !! !! To continue the integration after a successful return, proceed as follows: !! !! (a)  If ISTATE = 2 on return, reset TOUT and call DLSODAR again. !! (b)  If ISTATE = 3 on return, reset ISTATE to 2, call DLSODAR again. !! !! In either case, no other parameters need be reset. !! !!#### Step F. !! !! **Notes:** !! !! If and when DLSODAR regards the problem as stiff, and !! switches methods accordingly, it must make use of the NEQ by NEQ !! Jacobian matrix, J = df/dy.  For the sake of simplicity, the !! inputs to DLSODAR recommended in Paragraph C above cause DLSODAR to !! treat J as a full matrix, and to approximate it internally by !! difference quotients. !! !! Alternatively, J can be treated as a band !! matrix (with great potential reduction in the size of the RWORK !! array). !! !! Also, in either the full or banded case, the user can supply !! J in closed form, with a routine whose name is passed as the JAC !! argument.  These alternatives are described in the paragraphs on !! RWORK, JAC, and JT in the full description of the call sequence below. !! !!----------------------------------------------------------------------- !!### Example Problem. !! !! The following is a simple example problem, with the coding !! needed for its solution by DLSODAR.  The problem is from chemical !! kinetics, and consists of the following three rate equations: !!```text !!     dy1/dt = -.04*y1 + 1.e4*y2*y3 !!     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2 !!     dy3/dt = 3.e7*y2**2 !!``` !! on the interval from t = 0.0 to t = 4.e10, with initial conditions !! y1 = 1.0, y2 = y3 = 0.  The problem is stiff. !! !! In addition, we want to find the values of t, y1, y2, and y3 at which !! !!   1.  y1 reaches the value 1.e-4, and !!   2.  y3 reaches the value 1.e-2. !! !! The following coding solves this problem with DLSODAR, !! printing results at t = .4, 4., ..., 4.e10, and at the computed !! roots.  It uses ITOL = 2 and ATOL much smaller for y2 than y1 or y3 !! because y2 has much smaller values. !! !! At the end of the run, statistical quantities of interest are !! printed (see optional outputs in the full description below). !! !!```fortran !!program dlsodar_ex !!use m_odepack !!implicit none !!external fex !!external gex !!external jdum !!integer,parameter :: dp=kind(0.0d0) !! !!real(kind=dp),dimension(3)   ::  atol,y !!integer                      ::  iopt,iout,istate,itask,itol,jt,liw,lrw,neq,ng !!integer,dimension(23)        ::  iwork !!integer,dimension(2)         ::  jroot !!real(kind=dp)                ::  rtol,t,tout !!real(kind=dp),dimension(76)  ::  rwork !! !!   neq = 3 !!   y(1) = 1. !!   y(2) = 0. !!   y(3) = 0. !!   t = 0. !!   tout = .4 !!   itol = 2 !!   rtol = 1.D-4 !!   atol(1) = 1.D-6 !!   atol(2) = 1.D-10 !!   atol(3) = 1.D-6 !!   itask = 1 !!   istate = 1 !!   iopt = 0 !!   lrw = 76 !!   liw = 23 !!   jt = 2 !!   ng = 2 !!   do iout = 1,12 !!      do !!         call dlsodar(fex,[neq],y,t,tout,itol,[rtol],atol,itask,istate,    & !!                    & iopt,rwork,lrw,iwork,liw,jdum,jt,gex,ng,jroot) !!         write (6,99010) t,y(1),y(2),y(3) !!   99010 format (' At t =',d12.4,'   Y =',3D14.6) !!         if ( istate<0 ) then !!            write (6,99020) istate !!   99020    format (///' Error halt.. ISTATE =',i3) !!            stop 1 !!         elseif ( istate==2 ) then !!            tout = tout*10. !!            exit !!         else !!            write (6,99030) jroot(1),jroot(2) !!   99030    format (5x,' The above line is a root,  JROOT =',2I5) !!            istate = 2 !!         endif !!      enddo !!   enddo !!   write (6,99040) iwork(11),iwork(12),iwork(13),iwork(10),        & !!                 & iwork(19),rwork(15) !!   99040 format (/' No. steps =',i4,'  No. f-s =',i4,'  No. J-s =',i4,     & !!                &'  No. g-s =',i4/' Method last used =',i2,                & !!                &'   Last switch was at t =',d12.4) !! !!end program dlsodar_ex !! !!subroutine jdum() !!implicit none !!end subroutine jdum !! !!subroutine fex(Neq,T,Y,Ydot) !!implicit none !!integer,parameter                         ::  dp=kind(0.0d0) !!integer                                   ::  Neq !!real(kind=dp)                             ::  T !!real(kind=dp),intent(in),dimension(3)     ::  Y !!real(kind=dp),intent(inout),dimension(3)  ::  Ydot !! !!   Ydot(1) = -.04*Y(1) + 1.D4*Y(2)*Y(3) !!   Ydot(3) = 3.D7*Y(2)*Y(2) !!   Ydot(2) = -Ydot(1) - Ydot(3) !!end subroutine fex !! !!subroutine gex(Neq,T,Y,Ng,Gout) !!implicit none !! !!integer                                 ::  Neq !!integer,parameter                       ::  dp=kind(0.0d0) !!real(kind=dp)                           ::  T !!real(kind=dp),intent(in),dimension(3)   ::  Y !!integer                                 ::  Ng !!real(kind=dp),intent(out),dimension(2)  ::  Gout !!   Gout(1) = Y(1) - 1.D-4 !!   Gout(2) = Y(3) - 1.D-2 !!end subroutine gex !!``` !! !! The output of this program (on a CDC-7600 in single precision) !! is as follows: !!```text !!   At t =  2.6400e-01   y =  9.899653e-01  3.470563e-05  1.000000e-02 !!        The above line is a root,  JROOT =    0    1 !!   At t =  4.0000e-01   Y =  9.851712e-01  3.386380e-05  1.479493e-02 !!   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02 !!   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01 !!   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01 !!   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01 !!   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01 !!   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01 !!   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01 !!   At t =  2.0745e+07   Y =  1.000000e-04  4.000395e-10  9.999000e-01 !!        The above line is a root,  JROOT =    1    0 !!   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01 !!   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01 !!   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01 !!   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00 !! !!   No. steps = 361  No. f-s = 693  No. J-s =  64  No. g-s = 390 !!   Method last used = 2   Last switch was at t =  6.0092e-03 !!``` !!----------------------------------------------------------------------- !!### Full Description of User Interface to DLSODAR. !! !! The user interface to DLSODAR consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSODAR, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSODAR package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of a subroutine in the DLSODAR package, !!      which the user may replace with his/her own version, if desired. !!      this relates to the measurement of errors. !! !!----------------------------------------------------------------------- !!### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !! F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, !! JT, G, and NG. !! !! Used only for output is JROOT, !! !! Those used for both input and output are Y, T, ISTATE. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSODAR to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !!## Arguments !! The descriptions of the call arguments are as follows. !! !! F !! !! : the name of the user-supplied subroutine defining the !! ODE system.  The system must be put in the first-order !! form dy/dt = f(t,y), where f is a vector-valued function !! of the scalar t and the vector y.  Subroutine F is to !! compute the function f.  It is to have the form !!```fortran !!       SUBROUTINE F (NEQ, T, Y, YDOT) !!       DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! where NEQ, T, and Y are input, and the array YDOT = f(t,y) !! is output.  Y and YDOT are arrays of length NEQ. !! Subroutine F should not alter Y(1),...,Y(NEQ). !! F must be declared External in the calling program. !! !! Subroutine F may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in F) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y below. !! !! If quantities computed in the F routine are needed !! externally to DLSODAR, an extra call to F should be made !! for this purpose, for consistent and accurate results. !! If only the derivative dy/dt is needed, use DINTDY instead. !! !! NEQ !! !! : the size of the ODE system (number of first order !! ordinary differential equations).  Used only for input. !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in F and/or JAC. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! (The DLSODAR package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to F, JAC, and G.  Hence, if it is an array, locations !! NEQ(2),... may be used to store other integer data and pass !! it to F, JAC, and G.  Each such subroutine must include !! NEQ in a Dimension statement in that case. !! !! Y !! !! : = a real array for the vector of dependent variables, of !! NEQ or more.  Used for both input and output on the !! first call (ISTATE = 1), and only for output on other calls. !! On the first call, Y must contain the vector of initial !! values.  On output, Y contains the computed solution vector, !! evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to F, !! JAC, and G.  Hence its length may exceed NEQ, and locations !! Y(NEQ+1),... may be used to store other real data and !! pass it to F, JAC, and G.  (The DLSODAR package accesses only !! Y(1),...,Y(NEQ).) !! !! T !! !! : = the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! On output, after each call, T is the value at which a !! computed solution y is evaluated (usually the same as TOUT). !! If a root was found, T is the computed location of the !! root reached first, on output. !! !! On an error return, T is the farthest point reached. !! !! TOUT !! !! : = the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 1), TOUT may be equal !! to T for one call, then should .ne. T for the next call. !! For the initial T, an input value of TOUT .ne. T is used !! in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!      max-norm of ( E(i)/EWT(i) )   .le.   1, !! where EWT = (EWT(i)) is a vector of positive error weights. !! The values of RTOL and ATOL should all be non-negative. !! The following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL   |   ATOL   |      EWT(i) !!  ---- |-------- | -------- | ----------------------------- !!   1   | scalar  |  scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | scalar  |  array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array   |  array   |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting a !! user-supplied routine for the setting of EWT. !! See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! input only.  ITASK has the following values and meanings. !! !! value |description !! ----- |--------------------------------------------------------------- !!     1 |means normal computation of output values of y(t) at !!       |t = TOUT (by overshooting and interpolating). !!       | !!     2 |means take one step only and return. !!       | !!     3 |means stop at the first internal mesh point at or !!       |beyond t = TOUT and return. !!       | !!     4 |means normal computation of output values of y(t) at !!       |t = TOUT but without overshooting t = TCRIT. !!       |TCRIT must be input as RWORK(1).  TCRIT may be equal to !!       |or beyond TOUT, but not behind it in the direction of !!       |integration.  This option is useful if the problem !!       |has a singularity at or beyond t = TCRIT. !!       | !!     5 |means take one step, without passing TCRIT, and return. !!       |TCRIT must be input as RWORK(1). !!       | !!       |  Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !!       |  (within roundoff), it will return T = TCRIT (exactly) to !!       |  indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !!       |  in which case answers at t = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! the state of the calculation. !! !!#### On input, the values of ISTATE are as follows. !! !! value | description !! ----- |--------------------------------------------------------------- !!     1 | means this is the first call for the problem !!       | (initializations will be done).  See note below. !!       | !!     2 | means this is not the first call, and the calculation !!       | is to continue normally, with no change in any input !!       | parameters except possibly TOUT and ITASK. !!       | (If ITOL, RTOL, and/or ATOL are changed between calls !!       | with ISTATE = 2, the new values will be used but not !!       | tested for legality.) !!       | !!     3 | means this is not the first call, and the !!       | calculation is to continue normally, but with !!       | a change in input parameters other than !!       | TOUT and ITASK.  Changes are allowed in !!       | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, !!       | and any optional inputs except H0, MXORDN, and MXORDS. !!       | (See IWORK description for ML and MU.) !!       | In addition, immediately following a return with !!       | ISTATE = 3 (root found), NG and G may be changed. !!       | (But changing NG from 0 to .gt. 0 is not allowed.) !! !! Note:  A preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value    | description !!  -------- | -------------------------------------------------------- !!         1 | means nothing was done; TOUT = t and ISTATE = 1 on input. !!           | !!         2 | means the integration was performed successfully, and !!           | no roots were found. !!           | !!         3 | means the integration was successful, and one or more !!           | roots were found before satisfying the stop condition !!           | specified by ITASK.  See JROOT. !!           | !!        -1 | means an excessive amount of work (more than MXSTEP !!           | steps) was done on this call, before completing the !!           | requested task, but the integration was otherwise !!           | successful as far as T.  (MXSTEP is an optional input !!           | and is normally 500.)  To continue, the user may !!           | simply reset ISTATE to a value .gt. 1 and call again !!           | (the excess work step counter will be reset to 0). !!           | In addition, the user may increase MXSTEP to avoid !!           | this error return (see below on optional inputs). !!           | !!        -2 | means too much accuracy was requested for the precision !!           | of the machine being used.  This was detected before !!           | completing the requested task, but the integration !!           | was successful as far as T.  To continue, the tolerance !!           | parameters must be reset, and ISTATE must be set !!           | to 3.  The optional output TOLSF may be used for this !!           | purpose.  (Note: If this condition is detected before !!           | taking any steps, then an illegal input return !!           | (ISTATE = -3) occurs instead.) !!           | !!        -3 | means illegal input was detected, before taking any !!           | integration steps.  See written message for details. !!           | Note:  If the solver detects an infinite loop of calls !!           | to the solver with illegal input, it will cause !!           | the run to stop. !!           | !!        -4 | means there were repeated error test failures on !!           | one attempted step, before completing the requested !!           | task, but the integration was successful as far as T. !!           | The problem may have a singularity, or the input !!           | may be inappropriate. !!           | !!        -5 | means there were repeated convergence test failures on !!           | one attempted step, before completing the requested !!           | task, but the integration was successful as far as T. !!           | This may be caused by an inaccurate Jacobian matrix, !!           | if one is being used. !!           | !!        -6 | means EWT(i) became zero for some i during the !!           | integration.  Pure relative error control (ATOL(i)=0.0) !!           | was requested on a variable which has now vanished. !!           | The integration was successful as far as T. !!           | !!        -7 | means the length of RWORK and/or IWORK was too small to !!           | proceed, but the integration was successful as far as T. !!           | This happens when DLSODAR chooses to switch methods !!           | but LRW and/or LIW is too small for the new method. !!           | !! !!   Note:  Since the normal output value of ISTATE is 2, !!   it does not need to be reset for normal continuation. !!   Also, since a negative input value of ISTATE will be !!   regarded as illegal, a negative output value requires the !!   user to change it, and possibly other inputs, before !!   calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !! !!          IOPT = 0 means no optional inputs are being used. !!                   Default values will be used in all cases. !!          IOPT = 1 means one or more optional inputs are being used. !! !! RWORK !! !! : a real array (double precision) for work space, and (in the !! first 20 words) for conditional and optional inputs and !! optional outputs. !! !! As DLSODAR switches automatically between stiff and nonstiff !! methods, the required length of RWORK can change during the !! problem.  Thus the RWORK array passed to DLSODAR can either !! have a static (fixed) length large enough for both methods, !! or have a dynamic (changing) length altered by the calling !! program in response to output from DLSODAR. !! !!#### Fixed Length Case !! !!   If the RWORK length is to be fixed, it should be at least !!   max (LRN, LRS), !!   where LRN and LRS are the RWORK lengths required when the !!   current method is nonstiff or stiff, respectively. !! !!   The separate RWORK length requirements LRN and LRS are !!   as follows: !! !!   If NEQ is constant and the maximum method orders have !!   their default values, then !!```text !!             LRN = 20 + 16*NEQ + 3*NG, !!             LRS = 22 + 9*NEQ + NEQ**2 + 3*NG           (JT = 1 or 2), !!             LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ + 3*NG   (JT = 4 or 5). !!          Under any other conditions, LRN and LRS are given by: !!             LRN = 20 + NYH*(MXORDN+1) + 3*NEQ + 3*NG, !!             LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT + 3*NG, !!          where !!             NYH    = the initial value of NEQ, !!             MXORDN = 12, unless a smaller value is given as an !!                      optional input, !!             MXORDS = 5, unless a smaller value is given as an !!                      optional input, !!             LMAT   = length of matrix work space: !!             LMAT   = NEQ**2 + 2              if JT = 1 or 2, !!             LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. !!``` !!#### Dynamic Length Case !! If the length of RWORK is to be dynamic, then it should !! be at least LRN or LRS, as defined above, depending on the !! current method.  Initially, it must be at least LRN (since !! DLSODAR starts with the nonstiff method).  On any return !! from DLSODAR, the optional output MCUR indicates the current !! method.  If MCUR differs from the value it had on the !! previous return, or if there has only been one call to !! DLSODAR and MCUR is now 2, then DLSODAR has switched !! methods during the last call, and the length of RWORK !! should be reset (to LRN if MCUR = 1, or to LRS if !! MCUR = 2).  (An increase in the RWORK length is required !! if DLSODAR returned ISTATE = -7, but not otherwise.) !! After resetting the length, call DLSODAR with ISTATE = 3 !! to signal that change. !! !! LRW !! !! : the length of the array RWORK, as declared by the user. !!          (This will be checked by the solver.) !! !! IWORK !! !! : an integer array for work space. !! As DLSODAR switches automatically between stiff and nonstiff !! methods, the required length of IWORK can change during !! problem, between !!             LIS = 20 + NEQ   and   LIN = 20, !! respectively.  Thus the IWORK array passed to DLSODAR can !! either have a fixed length of at least 20 + NEQ, or have a !! dynamic length of at least LIN or LIS, depending on the !! current method.  The comments on dynamic length under !! RWORK above apply here.  Initially, this length need !! only be at least LIN = 20. !! !! The first few words of IWORK are used for conditional and !! optional inputs and optional outputs. !! !! The following 2 words in IWORK are conditional inputs: !!```text !!            IWORK(1) = ML !!            IWORK(2) = MU !!``` !! These are the lower and upper half-bandwidths, respectively, of the !! banded Jacobian, excluding the main diagonal.  The band is defined by !! the matrix locations (i,j) with i-ML .le. j .le. i+MU.  ML and MU must !! satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are required if JT is 4 or 5, !! and ignored otherwise.  ML and MU may in fact be the band parameters !! for a matrix to which df/dy is only approximately equal. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! **Note**: The base addresses of the work arrays must not be !! altered between calls to DLSODAR for the same problem. !! The contents of the work arrays must not be altered !! between calls, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSODAR between calls, if !! desired (but not for use by F, JAC, or G). !! !! JAC !! !! : the name of the user-supplied routine to compute the !! Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine !! is optional, but if the problem is expected to be stiff much !! of the time, you are encouraged to supply JAC, for the sake !! of efficiency.  (Alternatively, set JT = 2 or 5 to have !! DLSODAR compute df/dy internally by difference quotients.) !! If and when DLSODAR uses df/dy, it treats this NEQ by NEQ !! matrix either as full (JT = 1 or 2), or as banded (JT = !! 4 or 5) with half-bandwidths ML and MU (discussed under !! IWORK above).  In either case, if JT = 1 or 4, the JAC !! routine must compute df/dy as a function of the scalar t !! and the vector y.  It is to have the form !!```fortran !!       SUBROUTINE JAC (NEQ, T, Y, ML, MU, PD, NROWPD) !!       DOUBLE PRECISION T, Y(*), PD(NROWPD,*) !!``` !! where NEQ, T, Y, ML, MU, and NROWPD are input and the array !! PD is to be loaded with partial derivatives (elements of !! the Jacobian matrix) on output.  PD must be given a first !! dimension of NROWPD.  T and Y have the same meaning as in !! Subroutine F. !! !! In the full matrix case (JT = 1), ML and MU are !! ignored, and the Jacobian is to be loaded into PD in !! columnwise manner, with df(i)/dy(j) loaded into pd(i,j). !! !! In the band matrix case (JT = 4), the elements !! within the band are to be loaded into PD in columnwise !! manner, with diagonal lines of df/dy loaded into the rows !! of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j). !! ML and MU are the half-bandwidth parameters (see IWORK). !! The locations in PD in the two triangular areas which !! correspond to nonexistent matrix elements can be ignored !! or loaded arbitrarily, as they are overwritten by DLSODAR. !! !! JAC need not provide df/dy exactly.  A crude !! approximation (possibly with a smaller bandwidth) will do. !! !! In either case, PD is preset to zero by the solver, !! so that only the nonzero elements need be loaded by JAC. !! Each call to JAC is preceded by a call to F with the same !! arguments NEQ, T, and Y.  Thus to gain some efficiency, !! intermediate quantities shared by both calculations may be !! saved in a user Common block by F and not recomputed by JAC, !! if desired.  Also, JAC may alter the Y array, if desired. !! JAC must be declared External in the calling program. !! !! Subroutine JAC may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in JAC) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! JT !! !! : Jacobian type indicator.  Used only for input. !! !! JT specifies how the Jacobian matrix df/dy will be !! treated, if and when DLSODAR requires this matrix. !! JT has the following values and meanings: !! !! value | description !! ----- | -------------------------------------------------------------- !!    1  | means a user-supplied full (NEQ by NEQ) Jacobian. !!    2  | means an internally generated (difference quotient) full !!       | Jacobian (using NEQ extra calls to F per df/dy value). !!    4  | means a user-supplied banded Jacobian. !!    5  | means an internally generated banded Jacobian (using !!       | ML+MU+1 extra calls to F per df/dy evaluation). !! !! If JT = 1 or 4, the user must supply a Subroutine JAC !! (the name is arbitrary) as described above under JAC. !! If JT = 2 or 5, a dummy argument can be used. !! !! G !! !! : the name of subroutine for constraint functions, whose !! roots are desired during the integration.  It is to have !! the form !!```fortran !!       SUBROUTINE G (NEQ, T, Y, NG, GOUT) !!       DOUBLE PRECISION T, Y(*), GOUT(NG) !!``` !! where NEQ, T, Y, and NG are input, and the array GOUT !! is output.  NEQ, T, and Y have the same meaning as in !! the F routine, and GOUT is an array of length NG. !! For i = 1,...,NG, this routine is to load into GOUT(i) !! the value at (T,Y) of the i-th constraint function g(i). !! DLSODAR will find roots of the g(i) of odd multiplicity !! (i.e. sign changes) as they occur during the integration. !! G must be declared External in the calling program. !! !! Caution:  Because of numerical errors in the functions !! g(i) due to roundoff and integration error, DLSODAR may !! return false roots, or return the same root at two or more !! nearly equal values of t.  If such false roots are !! suspected, the user should consider smaller error tolerances !! and/or higher precision in the evaluation of the g(i). !! !! If a root of some g(i) defines the end of the problem, !! the input to DLSODAR should nevertheless allow integration !! to a point slightly past that root, so that DLSODAR can !! locate the root by interpolation. !! !! Subroutine G may access user-defined quantities in !! NEQ(2),... and Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in G) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! NG !! !! : number of constraint functions g(i).  If there are none, !! set NG = 0, and pass a dummy name for G. !! !! JROOT !! !! : integer array of length NG.  Used only for output. !! On a return with ISTATE = 3 (one or more roots found), !! JROOT(i) = 1 if g(i) has a root at T, or JROOT(i) = 0 if not. !! !!----------------------------------------------------------------------- !! !!### Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !! Name  | Location |     Meaning and Default Value !! ----- | -------- | --------------------------------------------------- !! H0    | RWORK(5) | the step size to be attempted on the first step. !!       |          | The default value is determined by the solver. !!       |          | !! HMAX  | RWORK(6) | the maximum absolute step size allowed. !!       |          | The default value is infinite. !!       |          | !! HMIN  | RWORK(7) | the minimum absolute step size allowed. !!       |          | The default value is 0.  (This lower bound is not !!       |          | enforced on the final step before reaching TCRIT !!       |          | when ITASK = 4 or 5.) !!       |          | !! IXPR  | IWORK(5) | flag to generate extra printing at method switches. !!       |          | IXPR = 0 means no extra printing (the default). !!       |          | IXPR = 1 means print data on each switch. !!       |          | T, H, and NST will be printed on the same logical !!       |          | unit as used for error messages. !!       |          | !! MXSTEP| IWORK(6) | maximum number of (internally defined) steps !!       |          | allowed during one call to the solver. !!       |          | The default value is 500. !!       |          | !! MXHNIL| IWORK(7) | maximum number of messages printed (per problem) !!       |          | warning that T + H = T on a step (H = step size). !!       |          | This must be positive to result in a non-default !!       |          | value.  The default value is 10. !!       |          | !! MXORDN| IWORK(8) | the maximum order to be allowed for the nonstiff !!       |          | (Adams) method.  The default value is 12. !!       |          | If MXORDN exceeds the default value, it will !!       |          | be reduced to the default value. !!       |          | MXORDN is held constant during the problem. !!       |          | !! MXORDS| IWORK(9) | the maximum order to be allowed for the stiff !!       |          | (BDF) method.  The default value is 5. !!       |          | If MXORDS exceeds the default value, it will !!       |          | be reduced to the default value. !!       |          | MXORDS is held constant during the problem. !! !!----------------------------------------------------------------------- !! !!### Optional Outputs. !! !! As optional additional output from DLSODAR, the variables listed !! below are quantities related to the performance of DLSODAR !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSODAR, and on any return with !! ISTATE = -1, -2, -4, -5, or -6. !! !! On an illegal input return !! (ISTATE = -3), they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !! Name  | Location |     Meaning !! ----- |--------- | --------------------------------------------------- !! HU    | RWORK(11)| the step size in t last used (successfully). !!       |          | !! HCUR  | RWORK(12)| the step size to be attempted on the next step. !!       |          | !! TCUR  | RWORK(13)| the current value of the independent variable !!       |          | which the solver has actually reached, i.e. the !!       |          | current internal mesh point in t.  On output, TCUR !!       |          | will always be at least as far as the argument !!       |          | T, but may be farther (if interpolation was done). !!       |          | !! TOLSF | RWORK(14)| a tolerance scale factor, greater than 1.0, !!       |          | computed when a request for too much accuracy was !!       |          | detected (ISTATE = -3 if detected at the start of !!       |          | the problem, ISTATE = -2 otherwise).  If ITOL is !!       |          | left unaltered but RTOL and ATOL are uniformly !!       |          | scaled up by a factor of TOLSF for the next call, !!       |          | then the solver is deemed likely to succeed. !!       |          | (The user may also ignore TOLSF and alter the !!       |          | tolerance parameters in any other way appropriate.) !!       |          | !! TSW   | RWORK(15)| the value of t at the time of the last method !!       |          | switch, if any. !!       |          | !! NGE   | IWORK(10)| the number of g evaluations for the problem so far. !!       |          | !! NST   | IWORK(11)| the number of steps taken for the problem so far. !!       |          | !! NFE   | IWORK(12)| the number of f evaluations for the problem so far. !!       |          | !! NJE   | IWORK(13)| the number of Jacobian evaluations (and of matrix !!       |          | LU decompositions) for the problem so far. !!       |          | !! NQU   | IWORK(14)| the method order last used (successfully). !!       |          | !! NQCUR | IWORK(15)| the order to be attempted on the next step. !!       |          | !! IMXER | IWORK(16)| the index of the component of largest magnitude in !!       |          | the weighted local error vector ( E(i)/EWT(i) ), !!       |          | on an error return with ISTATE = -4 or -5. !!       |          | !! LENRW | IWORK(17)| the length of RWORK actually required, assuming !!       |          | that the length of RWORK is to be fixed for the !!       |          | rest of the problem, and that switching may occur. !!       |          | This is defined on normal returns and on an illegal !!       |          | input return for insufficient storage. !!       |          | !! LENIW | IWORK(18)| the length of IWORK actually required, assuming !!       |          | that the length of IWORK is to be fixed for the !!       |          | rest of the problem, and that switching may occur. !!       |          | This is defined on normal returns and on an illegal !!       |          | input return for insufficient storage. !!       |          | !! MUSED | IWORK(19)| the method indicator for the last successful step: !!       |          | 1 means Adams (nonstiff), 2 means BDF (stiff). !!       |          | !! MCUR  | IWORK(20)| the current method indicator: !!       |          | 1 means Adams (nonstiff), 2 means BDF (stiff). !!       |          | This is the method to be attempted !!       |          | on the next step.  Thus it differs from MUSED !!       |          | only if a method switch has just been made. !! !! The following two arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address in RWORK, and its description. !! !! Name  | Base Address |    Description !! ----- | ------------ | --------------------------------------------------- !!       |              | !! YH    | 21 + 3\\*NG   |  the Nordsieck history array, of size NYH by !!       |              | (NQCUR + 1), where NYH is the initial value !!       |              | of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!       |              | of YH contains HCUR\\*\\*j/factorial(j) times !!       |              | the j-th derivative of the interpolating !!       |              | polynomial currently representing the solution, !!       |              | evaluated at t = TCUR. !!       |              | !! ACOR  |  LACOR       | array of size NEQ used for the accumulated !!       | (from Common | corrections on each step, scaled on output !!       |   as noted)  | to represent the estimated local error in y !!       |              | on the last step.  This is the vector E in !!       |              | the description of the error control.  It is !!       |              | defined only on a successful return from !!       |              | DLSODAR.  The base address LACOR is obtained by !!       |              | including in the user's program the !!       |              | following 2 lines: !!       |              |    COMMON /DLS001/ RLS(218), ILS(37) !!       |              |    LACOR = ILS(22) !! !!### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSODAR. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !! Form of Call                | Function !! --------------------------- | ----------------------------------------- !!  CALL XSETUN(LUN)           | Set the logical unit number, LUN, for !!                             | output of messages from DLSODAR, if !!                             | the default is not desired. !!                             | The default value of LUN is 6. !!                             | !!  CALL XSETF(MFLAG)          | Set a flag to control the printing of !!                             | messages by DLSODAR. !!                             | MFLAG = 0 means do not print. (Danger: !!                             | This risks losing valuable information.) !!                             | MFLAG = 1 means print (the default). !!                             | !!                             | Either of the above calls may be made at !!                             | any time and will take effect immediately. !!                             | !!  CALL DSRCAR(RSAV,ISAV,JOB) | saves and restores the contents of !!                             | the internal Common blocks used by !!                             | DLSODAR (see Part 3 below). !!                             | RSAV must be a real array of length 245 !!                             | or more, and ISAV must be an integer !!                             | array of length 55 or more. !!                             | JOB=1 means save Common into RSAV/ISAV. !!                             | JOB=2 means restore Common from RSAV/ISAV. !!                             | !!                             |    DSRCAR is useful if one is !!                             | interrupting a run and restarting !!                             | later, or alternating between two or !!                             | more problems solved with DLSODAR. !!                             | !!  CALL DINTDY(,,,,,)         | Provide derivatives of y, of various !!       (see below)           | orders, at a specified point t, if !!                             | desired.  It may be called only after !!                             | a successful return from DLSODAR. !! !! The detailed instructions for using DINTDY are as follows. !! The form of the call is: !!```fortran !!   LYH = 21 + 3*NG !!   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by DLSODAR). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(t), is already provided !! by DLSODAR directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! LYH !! !! : 21 + 3\\*NG = base address in RWORK of the history array YH. !! !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !!----------------------------------------------------------------------- !!### Part 3.  Save and Restore Program State !! !! If the solution of a given problem by DLSODAR is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSODAR call prior to the !! interruption, the contents of the call sequence variables and the !! internal state variables, and later restore these values before the !! next DLSODAR call for that problem.  To save and restore, !! use Subroutine DSRCAR (see Part 2 above). !! !!----------------------------------------------------------------------- !!### Part 4.  Optionally Replaceable Solver Routines. !! !! Below is a description of a routine in the DLSODAR package which !! relates to the measurement of errors, and can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !! (a) DEWSET. !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSODAR call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the !! DMNORM routine, and also used by DLSODAR in the computation !! of the optional output IMXER, and the increments for difference !! quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !!----------------------------------------------------------------------- !!### Pedigree: !! !! _DLSODAR_ is derived from the Livermore Solver for Ordinary !! Differential Equations package ODEPACK, and is in double precision. !! !!### Authors !!                Alan C. Hindmarsh, !!                Center for Applied Scientific Computing, L-561 !!                Lawrence Livermore National Laboratory !!                Livermore, CA 94551 !! and !!                Linda R. Petzold !!                Univ. of California at Santa Barbara !!                Dept. of Computer Science !!                Santa Barbara, CA 93106 !! !!### References !! 1.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !! 2.  Linda R. Petzold, Automatic Selection of Methods for Solving !!     Stiff and Nonstiff Systems of Ordinary Differential Equations, !!     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. !! 3.  Kathie L. Hiebert and Lawrence F. Shampine, Implicitly Defined !!     Output Points for Solutions of ODEs, Sandia Report SAND80-0180, !!     February 1980. !!----------------------------------------------------------------------- !! Other routines in the DLSODAR package. !! !! In addition to Subroutine DLSODAR, the DLSODAR package includes the !! following subroutines and function routines: !! !!  DRCHEK !! !!  : does preliminary checking for roots, and serves as an !!  interface between Subroutine DLSODAR and Subroutine DROOTS. !! !!  DROOTS !! !!  : finds the leftmost root of a set of functions. !! !!  DINTDY !! !!  : computes an interpolated value of the y vector at t = TOUT. !! !!  DSTODA !! !!  : is the core integrator, which does one step of the !!  integration and the associated error control. !! !!  DCFODE !! !!  : sets all method coefficients and test constants. !! !!  DPRJA !! !!  : computes and preprocesses the Jacobian matrix J = df/dy !!  and the Newton iteration matrix P = I - h\\*l0\\*J. !! !!  DSOLSY !! !!  : manages solution of linear system in chord iteration. !! !!  DEWSET !! !!  : sets the error weight vector EWT before each step. !! !!  DMNORM !! !!  : computes the weighted max-norm of a vector. !! !!  DFNORM !! !!  : computes the norm of a full matrix consistent with the !!  weighted max-norm on vectors. !! !!  DBNORM !! !!  : computes the norm of a band matrix consistent with the !!  weighted max-norm on vectors. !! !!  DSRCAR !! !!  : is a user-callable routine to save and restore !!  the contents of the internal Common blocks. !! !!  DGEFA and DGESL !! !!  : are routines from LINPACK for solving full !!  systems of linear algebraic equations. !! !!  DGBFA and DGBSL !! !!  : are routines from LINPACK for solving banded !!  linear systems. !!  DCOPY !! !!  : is one of the basic linear algebra modules (BLAS). !! !!  DUMACH !! !!  : computes the unit roundoff in a machine-independent manner. !! !!  XERRWD, XSETUN, XSETF, and IXSAV !! !!  : handle the printing of all !!  error messages and warnings.  XERRWD is machine-dependent. !! !! Note:  DMNORM, DFNORM, DBNORM, DUMACH, and IXSAV are !! function routines.  All the others are subroutines. !! !!----------------------------------------------------------------------- ! ! ### REVISION HISTORY  (YYYYMMDD) !  19811102  DATE WRITTEN !  19820126  Fixed bug in tests of work space lengths; !            minor corrections in main prologue and comments. !  19820507  Fixed bug in RCHEK in setting HMING. !  19870330  Major update: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODA; !            in STODA, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  19970225  Fixed lines setting JSTART = -2 in Subroutine LSODAR. !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20010613  Revised excess accuracy test (to match rest of ODEPACK). !  20010808  Fixed bug in DPRJA (matrix in DBNORM call). !  20020502  Corrected declarations in descriptions of user routines. !  20031105  Restored 'own' variables to Common blocks, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. ! !!----------------------------------------------------------------------- subroutine dlsodar ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Jt , g , Ng , Jroot ) ! external f external g external jac real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , irfp , irt , kgo , len1 , len1c , len1n , len1s , len2 , leniw , leniwc , lenrw , lenrwc , & & lenwm , lenyh , lf0 , lyhnew , ml , mu logical :: ihit integer :: Iopt , Istate , Itask , Itol , Jt , Liw , Lrw , Ng integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( Ng ) :: Jroot integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following three internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODAR, DINTDY, DSTODA, !  DPRJA, and DSOLSY. !  The type(DLSA01)::DLSA is declared in subroutines DLSODAR, DSTODA, DPRJA. !  The block DLSR01 is declared in subroutines DLSODAR, DRCHEK, DROOTS. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Ng . gt . 0 ) Jroot ( ng ) = 0 if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODAR-  ISTATE(=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1200 ! msg = 'DLSODAR-  Run aborted.. apparent infinite loop.   ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODAR-  ITASK (=I1) illegal.' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else dlsr % itaskc = Itask if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODAR-  ISTATE.gt.1 but DLSODAR not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  JT, ML, MU, and NG. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODAR-  NEQ (=I1) .lt. 1    ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODAR-  ISTATE = 3 and NEQ increased (I1 to I2).' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1200 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODAR-  ITOL (=I1) illegal. ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODAR-  IOPT (=I1) illegal. ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Jt == 3 . or . Jt < 1 . or . Jt > 5 ) then msg = 'DLSODAR-  JT (=I1) illegal.   ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Jt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else dlsa % jtyp = Jt if ( Jt > 2 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODAR-  ML (=I1) illegal: .lt.0 or .ge.NEQ (=I2)' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODAR-  MU (=I1) illegal: .lt.0 or .ge.NEQ (=I2)' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1200 endif endif if ( Ng < 0 ) then msg = 'DLSODAR-  NG (=I1) .lt. 0     ' call xerrwd ( msg , 30 , 30 , 0 , 1 , Ng , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( Istate /= 1 ) then if ( dlsr % irfnd == 0 . and . Ng /= dlsr % ngc ) then msg = 'DLSODAR-  NG changed (from I1 to I2) illegally,   ' call xerrwd ( msg , 50 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      i.e. not immediately after a root was found.' call xerrwd ( msg , 50 , 31 , 0 , 2 , dlsr % ngc , Ng , 0 , 0.0D0 , 0.0D0 ) goto 1200 endif endif dlsr % ngc = Ng !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dlsa % ixpr = Iwork ( 5 ) if ( dlsa % ixpr < 0 . or . dlsa % ixpr > 1 ) then msg = 'DLSODAR-  IXPR (=I1) illegal. ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dlsa % ixpr , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODAR-  MXSTEP (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODAR-  MXHNIL (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) dlsa % mxordn = Iwork ( 8 ) if ( dlsa % mxordn < 0 ) then msg = 'DLSODAR-  MXORDN (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 28 , 0 , 1 , dlsa % mxordn , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dlsa % mxordn == 0 ) dlsa % mxordn = 100 dlsa % mxordn = min ( dlsa % mxordn , mord ( 1 )) dlsa % mxords = Iwork ( 9 ) if ( dlsa % mxords < 0 ) then msg = 'DLSODAR-  MXORDS (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 29 , 0 , 1 , dlsa % mxords , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( dlsa % mxords == 0 ) dlsa % mxords = 100 dlsa % mxords = min ( dlsa % mxords , mord ( 2 )) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODAR-  TOUT (=R1) behind T (=R2)     ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1200 endif endif endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODAR-  HMAX (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1200 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODAR-  HMIN (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1200 endif endif endif endif endif else dlsa % ixpr = 0 dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 if ( Istate == 1 ) then h0 = 0.0D0 dlsa % mxordn = mord ( 1 ) dlsa % mxords = mord ( 2 ) endif endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  If ISTATE = 1, METH is initialized to 1 here to facilitate the !  checking of work space lengths. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  G0, G1, GX, YH, WM, !  EWT, SAVF, ACOR. !  If the lengths provided are insufficient for the current method, !  an error return occurs.  This is treated as illegal input on the !  first call, but as a problem interruption with ISTATE = -7 on a !  continuation call.  If the lengths are sufficient for the current !  method but not for both methods, a warning message is sent. ! ----------------------------------------------------------------------- if ( Istate == 1 ) dls1 % meth = 1 if ( Istate == 1 ) dls1 % nyh = dls1 % n dlsr % lg0 = 21 dlsr % lg1 = dlsr % lg0 + Ng dlsr % lgx = dlsr % lg1 + Ng lyhnew = dlsr % lgx + Ng if ( Istate == 1 ) dls1 % lyh = lyhnew if ( lyhnew /= dls1 % lyh ) then !  If ISTATE = 3 and NG was changed, shift YH to its new location. ------ lenyh = dls1 % l * dls1 % nyh if ( Lrw >= lyhnew - 1 + lenyh ) then i1 = 1 if ( lyhnew > dls1 % lyh ) i1 = - 1 call dcopy ( lenyh , Rwork ( dls1 % lyh ), i1 , Rwork ( lyhnew ), i1 ) dls1 % lyh = lyhnew endif endif len1n = lyhnew - 1 + ( dlsa % mxordn + 1 ) * dls1 % nyh len1s = lyhnew - 1 + ( dlsa % mxords + 1 ) * dls1 % nyh dls1 % lwm = len1s + 1 lenwm = 0 if ( Jt <= 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( Jt >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 len1s = len1s + lenwm len1c = len1n if ( dls1 % meth == 2 ) len1c = len1s len1 = max ( len1n , len1s ) len2 = 3 * dls1 % n lenrw = len1 + len2 lenrwc = len1c + len2 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n leniwc = 20 if ( dls1 % meth == 2 ) leniwc = leniw Iwork ( 18 ) = leniw if ( Istate == 1 . and . Lrw < lenrwc ) then msg = 'DLSODAR-  RWORK length needed, LENRW(=I1), exceeds LRW(=I2) ' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1200 elseif ( Istate == 1 . and . Liw < leniwc ) then msg = 'DLSODAR-  IWORK length needed, LENIW(=I1), exceeds LIW(=I2) ' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1200 else if ( Istate == 3 . and . Lrw < lenrwc ) goto 500 if ( Istate == 3 . and . Liw < leniwc ) goto 600 dls1 % lewt = len1 + 1 dlsa % insufr = 0 if ( Lrw < lenrw ) then dlsa % insufr = 2 dls1 % lewt = len1c + 1 msg = 'DLSODAR-  Warning.. RWORK length is sufficient for now, but ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENRW = I1, while LRW = I2.' call xerrwd ( msg , 50 , 103 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) endif dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n dlsa % insufi = 0 if ( Liw < leniw ) then dlsa % insufi = 2 msg = 'DLSODAR-  Warning.. IWORK length is sufficient for now, but ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENIW = I1, while LIW = I2.' call xerrwd ( msg , 50 , 104 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODAR-  RTOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1200 elseif ( atoli < 0.0D0 ) then msg = 'DLSODAR-  ATOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1200 endif enddo if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T dlsa % tsw = T dls1 % maxord = dlsa % mxordn if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1000 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dlsa % mused = 0 dls1 % miter = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODAR-  EWT(I1) is R1 .le. 0.0        ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1200 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by: ! !    H0**(-2)  =  1./(TOL * w0**2)  +  TOL * (norm(F))**2 ! !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          F      = the initial value of the vector f(t,y), and !          norm() = the weighted vector norm used throughout, given by !                   the DMNORM function routine, and weighted by the !                   tolerances initially loaded into the EWT array. !  The sign of H0 is inferred from the initial values of TOUT and T. !  ABS(H0) is made .le. ABS(TOUT-T) in any case. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODAR- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1200 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dmnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo ! !  Check for a zero of g at T. ------------------------------------------ dlsr % irfnd = 0 dlsr % toutc = Tout if ( dlsr % ngc == 0 ) goto 200 call drchek ( 1 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 0 ) goto 200 msg = 'DLSODAR-  One or more components of g has a root  ' call xerrwd ( msg , 50 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      too near to the initial point.    ' call xerrwd ( msg , 40 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1200 else !  if ISTATE = 3, set flag to signal parameter changes to DSTODA. ------- dls1 % jstart = - 1 if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  zero part of yh to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. !  First, DRCHEK is called to check for a root within the dlsr%last step !  taken, other than the dlsr%last root found there, if any. !  If ITASK = 2 or 5, and y(TN) has not yet been returned to the user !  because of an intervening root, return through Block G. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst ! irfp = dlsr % irfnd if ( dlsr % ngc /= 0 ) then if ( Itask == 1 . or . Itask == 4 ) dlsr % toutc = Tout call drchek ( 2 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif dlsr % irfnd = 0 if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 2 ) goto 300 ! select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODAR-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2) ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1200 else if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 T = dls1 % tn goto 300 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 900 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1000 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1100 T = Tout Istate = 2 goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 900 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1100 T = Tout Istate = 2 goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) T = tcrit if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 5 ) goto 300 if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 . and . dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODA. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( dls1 % meth /= dlsa % mused ) then if ( dlsa % insufr == 1 ) goto 500 if ( dlsa % insufi == 1 ) goto 600 endif if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODAR-  At current T (=R1), MXSTEP (=I1) steps  ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 800 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODAR-  At T(=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 800 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dmnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODAR-  Warning..Internal T(=R1) and H(=R2) are ' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODAR-  Above warning has been issued I1 times. ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !    CALL DSTODA(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,f,JAC,DPRJA,DSOLSY) ! ----------------------------------------------------------------------- call dstoda ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), & & Iwork ( dls1 % liwm ), f , jac , dprja , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODAR-  At T(=R1), step size H(=R2), the error  ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 700 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODAR-  At T (=R1) and step size H (=R2), the   ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 700 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0). !  If a method switch was just made, record TSW, reset MAXORD, !  set JSTART to -1 to signal DSTODA to complete the switch, !  and do extra printing of data if IXPR = 1. !  Then call DRCHEK to check for a root within the dlsr%last step. !  Then, if no root was found, check for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 if ( dls1 % meth /= dlsa % mused ) then dlsa % tsw = dls1 % tn dls1 % maxord = dlsa % mxordn if ( dls1 % meth == 2 ) dls1 % maxord = dlsa % mxords if ( dls1 % meth == 2 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dlsa % insufr = min ( dlsa % insufr , 1 ) dlsa % insufi = min ( dlsa % insufi , 1 ) dls1 % jstart = - 1 if ( dlsa % ixpr /= 0 ) then if ( dls1 % meth == 2 ) then msg = 'DLSODAR- A switch to the BDF (stiff) method has occurred    ' call xerrwd ( msg , 60 , 105 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( dls1 % meth == 1 ) then msg = 'DLSODAR- A switch to the Adams (nonstiff) method occurred   ' call xerrwd ( msg , 60 , 106 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif msg = '     at T = R1,  tentative step size H = R2,  step NST = I1 ' call xerrwd ( msg , 60 , 107 , 0 , 1 , dls1 % nst , 0 , 2 , dls1 % tn , dls1 % h ) endif endif ! if ( dlsr % ngc /= 0 ) then call drchek ( 3 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif ! select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODAR-  At start of problem, too much accuracy  ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1200 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODAR-  At T (=R1), too much accuracy requested ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 800 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODAR. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif Istate = 2 400 continue Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return !  RWORK length too small to proceed. ----------------------------------- 500 continue msg = 'DLSODAR- At current T(=R1), RWORK length too small' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 800 !  IWORK length too small to proceed. ----------------------------------- 600 continue msg = 'DLSODAR- At current T(=R1), IWORK length too small' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 800 !  Compute IMXER if relevant. ------------------------------------------- 700 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 800 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return 900 continue msg = 'DLSODAR-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)  ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1200 1000 continue msg = 'DLSODAR-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)  ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1200 1100 continue msg = 'DLSODAR-  Trouble in DINTDY. ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1200 continue Istate = - 3 return 99999 continue end subroutine dlsodar","tags":"","loc":"sourcefile/dlsodar.inc.html"},{"title":"dlsoibt.inc – odepack","text":"Contents Subroutines dlsoibt Source Code dlsoibt.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! DLSOIBT: Livermore Solver for Ordinary differential equations given !!          in Implicit form, with Block-Tridiagonal Jacobian treatment. !! !! DLSOIBT solves the initial value problem for linearly implicit !! systems of first order ODEs, !!```text !!     A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, !!``` !! or, in component form, !!```text !!     ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  = !!        i,1      1                     i,NEQ      NEQ !! !!      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ ) !!           i      1   2       NEQ !!``` !! If A is singular, this is a differential-algebraic system. !! !! DLSOIBT is a variant version of the DLSODI package, for the case where !! the matrices A, dg/dy, and d(A*s)/dy are all block-tridiagonal. !! !! This version is in double precision. !! !!----------------------------------------------------------------------- !!### Summary of Usage. !! !! Communication between the user and the DLSOIBT package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including optional communication, nonstandard options, !! and instructions for special situations.  See also the example !! problem (with program and output) following this summary. !! !! **A.** First, provide a subroutine of the form: !!```fortran !!               SUBROUTINE RES (NEQ, T, Y, S, R, IRES) !!               DOUBLE PRECISION T, Y(*), S(*), R(*) !!``` !! which computes the residual function !!```text !!     r = g(t,y)  -  A(t,y) * s !!``` !! as a function of t and the vectors y and s.  (s is an internally !! generated approximation to dy/dt.)  The arrays Y and S are inputs !! to the RES routine and should not be altered.  The residual !! vector is to be stored in the array R.  The argument IRES should be !! ignored for casual use of DLSOIBT.  (For uses of IRES, see the !! paragraph on RES in the full description below.) !! !! **B.** Next, identify the block structure of the matrices A = A(t,y) and !! dr/dy.  DLSOIBT must deal internally with a linear combination, P, of !! these two matrices.  The matrix P (hence both A and dr/dy) must have !! a block-tridiagonal form with fixed structure parameters !! !!        MB = block size, MB .ge. 1, and !!        NB = number of blocks in each direction, NB .ge. 4, !! !! with MB\\*NB = NEQ.  In each of the NB block-rows of the matrix P !! (each consisting of MB consecutive rows), the nonzero elements are !! to lie in three consecutive MB by MB blocks.  In block-rows !! 2 through NB - 1, these are centered about the main diagonal. !! !! in block-rows 1 and NB, they are the diagonal blocks and the two !! blocks adjacent to the diagonal block.  (Thus block positions (1,3) !! and (NB,NB-2) can be nonzero.) !! !! Alternatively, P (hence A and dr/dy) may be only approximately !! equal to matrices with this form, and DLSOIBT should still succeed. !! The block-tridiagonal matrix P is described by three arrays, !! each of size MB by MB by NB: !! !!         PA = array of diagonal blocks, !!         PB = array of superdiagonal (and one subdiagonal) blocks, and !!         PC = array of subdiagonal (and one superdiagonal) blocks. !! !! Specifically, the three MB by MB blocks in the k-th block-row of P !! are stored in (reading across): !! !!         PC(*,*,k) = block to the left of the diagonal block, !!         PA(*,*,k) = diagonal block, and !!         PB(*,*,k) = block to the right of the diagonal block, !! !! except for k = 1, where the three blocks (reading across) are !! !!         PA(*,*,1) (= diagonal block), PB(*,*,1), and PC(*,*,1), !! !! and k = NB, where they are !! !!         PB(*,*,NB), PC(*,*,NB), and PA(*,*,NB) (= diagonal block). !! !! (Each asterisk \\* stands for an index that ranges from 1 to MB.) !! !! **C.** You must also provide a subroutine of the form: !!```fortran !!     SUBROUTINE ADDA (NEQ, T, Y, MB, NB, PA, PB, PC) !!     DOUBLE PRECISION T, Y(*), PA(MB,MB,NB), PB(MB,MB,NB), PC(MB,MB,NB) !!``` !! which adds the nonzero blocks of the matrix A = A(t,y) to the !! contents of the arrays PA, PB, and PC, following the structure !! description in Paragraph B above. !! T and the Y array are input and should not be altered. !! Thus the affect of ADDA should be the following: !!```fortran !!     DO K = 1,NB !!       DO J = 1,MB !!         DO I = 1,MB !!           PA(I,J,K) = PA(I,J,K) + !!             ( (I,J) element of K-th diagonal block of A) !!           PB(I,J,K) = PB(I,J,K) + !!             ( (I,J) element of block in block position (K,K+1) of A, !!             or in block position (NB,NB-2) if K = NB) !!           PC(I,J,K) = PC(I,J,K) + !!             ( (I,J) element of block in block position (K,K-1) of A, !!             or in block position (1,3) if K = 1) !!         ENDDO !!       ENDDO !!     ENDDO !!``` !! !! **D.** For the sake of efficiency, you are encouraged to supply the !! Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)\\*s !! (s = a fixed vector) as above.  If dr/dy is being supplied, !! use MF = 21, and provide a subroutine of the form: !!```fortran !!     SUBROUTINE JAC (NEQ, T, Y, S, MB, NB, PA, PB, PC) !!     DOUBLE PRECISION T, Y(*), S(*), PA(MB,MB,NB), PB(MB,MB,NB), & !!    &                 PC(MB,MB,NB) !!``` !! which computes dr/dy as a function of t, y, and s.  Here T, Y, and !! S are inputs, and the routine is to load dr/dy into PA, PB, PC, !! according to the structure description in Paragraph B above. !! !! That is, load the diagonal blocks into PA, the superdiagonal blocks !! (and block (NB,NB-2) ) into PB, and the subdiagonal blocks (and !! block (1,3) ) into PC.  The blocks in block-row k of dr/dy are to !! be loaded into PA(\\*,\\*,k), PB(\\*,\\*,k), and PC(\\*,\\*,k). !! !! Only nonzero elements need be loaded, and the indexing !! of PA, PB, and PC is the same as in the ADDA routine. !! !! Note that if A is independent of Y (or this dependence !! is weak enough to be ignored) then JAC is to compute dg/dy. !! !! If it is not feasible to provide a JAC routine, use !! MF = 22, and DLSOIBT will compute an approximate Jacobian !! internally by difference quotients. !! !! **E.** Next decide whether or not to provide the initial value of the !! derivative vector dy/dt.  If the initial value of A(t,y) is !! nonsingular (and not too ill-conditioned), you may let DLSOIBT compute !! this vector (ISTATE = 0).  (DLSOIBT will solve the system A\\*s = g for !! s, with initial values of A and g.)  If A(t,y) is initially !! singular, then the system is a differential-algebraic system, and !! you must make use of the particular form of the system to compute the !! initial values of y and dy/dt.  In that case, use ISTATE = 1 and !! load the initial value of dy/dt into the array YDOTI. !! !! The input array YDOTI and the initial Y array must be consistent with !! the equations A\\*dy/dt = g.  This implies that the initial residual !! r = g(t,y) - A(t,y)\\*YDOTI  must be approximately zero. !! !! **F.** Write a main program which calls Subroutine DLSOIBT once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages by !! DLSOIBT.  on the first call to DLSOIBT, supply arguments as follows: !! !! RES !! !! : name of user subroutine for residual function r. !! !! ADDA !! !! : name of user subroutine for computing and adding A(t,y). !! !! JAC !! !! : name of user subroutine for Jacobian matrix dr/dy !! (MF = 21).  If not used, pass a dummy name. !! !! Note: the names for the RES and ADDA routines and (if used) the !! JAC routine must be declared External in the calling program. !! !! NEQ !! !! : number of scalar equations in the system. !! !! Y !! !! : array of initial values, of length NEQ. !! !! YDOTI !! !! : array of length NEQ (containing initial dy/dt if ISTATE = 1). !! !! T !! !! : the initial value of the independent variable. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (scalar or array). !! the estimated local error in y(i) will be controlled so as !! to be roughly less (in magnitude) than !!```text !!             EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! Thus the local error test passes if, in each component, !! either the absolute error is less than ATOL (or ATOL(i)), !! or the relative error is less than RTOL. !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !! control.  Caution: Actual (global) errors may exceed these !! local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1 if the !! initial dy/dt is supplied, and 0 otherwise. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !! !!             22 + 9*NEQ + 3*MB*MB*NB        for MF = 21 or 22. !! !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least 20 + NEQ. !! Input in IWORK(1) the block size MB and in IWORK(2) the !! number NB of blocks in each direction along the matrix A. !! These must satisfy  MB .ge. 1, NB .ge. 4, and MB\\*NB = NEQ. !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! MF !! !! : method flag.  Standard values are: !! !!          21 for a user-supplied Jacobian. !!          22 for an internally generated Jacobian. !! !!  For other choices of MF, see the paragraph on MF in !!  the full description below. !! !! Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK, !! and possibly ATOL. !! !! **G.** The output from the first call (or any call) is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable (normally TOUT). !! !! ISTATE !! !! : ISTATE values: !! !!  value | description !!  ----- | ----------------------------------------------------------- !!     2  | if DLSOIBT was successful, negative otherwise. !!    -1  | means excess work done on this call (check all inputs). !!    -2  | means excess accuracy requested (tolerances too small). !!    -3  | means illegal input detected (see printed message). !!    -4  | means repeated error test failures (check all inputs). !!    -5  | means repeated convergence failures (perhaps bad Jacobian !!        | supplied or wrong choice of tolerances). !!    -6  | means error weight became zero during problem. (Solution !!        | component i vanished, and ATOL or ATOL(i) = 0.) !!    -7  | cannot occur in casual use. !!    -8  | means DLSOIBT was unable to compute the initial dy/dt. !!        | In casual use, this means A(t,y) is initially singular. !!        | Supply YDOTI and use ISTATE = 1 on the first call. !! !! If DLSOIBT returns ISTATE = -1, -4, or -5, then the output of !! DLSOIBT also includes YDOTI = array containing residual vector !! r = g - A \\* dy/dt  evaluated at the current t, y, and dy/dt. !! !! **H.** To continue the integration after a successful return, simply !! reset TOUT and call DLSOIBT again.  No other parameters need be reset. !! !!----------------------------------------------------------------------- !!### Example Problem. !! !! The following is an example problem, with the coding needed !! for its solution by DLSOIBT.  The problem comes from the partial !! differential equation (the Burgers equation) !!```text !!   du/dt  =  - u * du/dx  +  eta * d**2 u/dx**2,   eta = .05, !! on -1 .le. x .le. 1.  The boundary conditions are !!   du/dx = 0  at x = -1 and at x = 1. !! The initial profile is a square wave, !!   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere. !! The PDE is discretized in x by a simplified Galerkin method, !! using piecewise linear basis functions, on a grid of 40 intervals. !! The equations at x = -1 and 1 use a 3-point difference approximation !! for the right-hand side.  The result is a system A * dy/dt = g(y), !! of size NEQ = 41, where y(i) is the approximation to u at x = x(i), !! with x(i) = -1 + (i-1)*delx, delx = 2/(NEQ-1) = .05.  The individual !! equations in the system are !!   dy(1)/dt = ( y(3) - 2*y(2) + y(1) ) * eta / delx**2, !!   dy(NEQ)/dt = ( y(NEQ-2) - 2*y(NEQ-1) + y(NEQ) ) * eta / delx**2, !! and for i = 2, 3, ..., NEQ-1, !!   (1/6) dy(i-1)/dt + (4/6) dy(i)/dt + (1/6) dy(i+1)/dt !!       = ( y(i-1)**2 - y(i+1)**2 ) / (4*delx) !!         + ( y(i+1) - 2*y(i) + y(i-1) ) * eta / delx**2. !!``` !! The following coding solves the problem with MF = 21, with output !! of solution statistics at t = .1, .2, .3, and .4, and of the !! solution vector at t = .4.  Here the block size is just MB = 1. !! !!```fortran !!program dlsoibt_ex !!use m_odepack !!implicit none !!external addabt !!external jacbt !!external resid !! !!integer,parameter :: dp=kind(0.0d0) !!real(kind=dp) :: atol,rtol,t,tout !!integer :: i,io,iopt,istate,itask,itol,liw,lrw,mf,neq !!integer,dimension(61) :: iwork !!real(kind=dp),dimension(514) :: rwork !!real(kind=dp),dimension(41) :: y,ydoti !! !!   neq = 41 !!   do i = 1,neq !!      y(i) = 0.0 !!   enddo !!   y(11) = 0.5 !!   do i = 12,30 !!      y(i) = 1.0 !!   enddo !!   y(31) = 0.5 !!   t = 0.0 !!   tout = 0.1 !!   itol = 1 !!   rtol = 1.0D-4 !!   atol = 1.0D-5 !!   itask = 1 !!   istate = 0 !!   iopt = 0 !!   lrw = 514 !!   liw = 61 !!   iwork(1) = 1 !!   iwork(2) = neq !!   mf = 21 !!   do io = 1,4 !!      call dlsoibt(resid,addabt,jacbt,[neq],y,ydoti,t,tout,itol,[rtol],    & !!                 & [atol],itask,istate,iopt,rwork,lrw,iwork,liw,mf) !!      write (6,99010) t,iwork(11),iwork(12),iwork(13) !!   99010 format (' At t =',f5.2,'   No. steps =',i4,'  No. r-s =',i4,      & !!                &'  No. J-s =',i3) !!      if ( istate/=2 ) then !!         write (6,99020) istate !!   99020 format (///' Error halt.. ISTATE =',i3) !!         stop 1 !!      else !!         tout = tout + 0.1 !!      endif !!   enddo !!   write (6,99030) (y(i),i=1,neq) !!   99030 format (/' Final solution values..'/9(5D12.4/)) !! !!end program dlsoibt_ex !! !!subroutine resid(N,T,Y,S,R,Ires) !!implicit none !!integer,parameter                       ::  dp=kind(0.0d0) !! !!integer,intent(in)                      ::  N !!real(kind=dp)                           ::  T !!real(kind=dp),intent(in),dimension(N)   ::  Y !!real(kind=dp),intent(in),dimension(N)   ::  S !!real(kind=dp),intent(out),dimension(N)  ::  R !!integer                                 ::  Ires !! !!real(kind=dp),save                      ::  delx,eta !!real(kind=dp)                           ::  eodsq !!integer                                 ::  i,nm1 !! !!data eta/0.05/,delx/0.05/ !!   eodsq = eta/delx**2 !!   R(1) = eodsq*(Y(3)-2.0*Y(2)+Y(1)) - S(1) !!   nm1 = N - 1 !!   do i = 2,nm1 !!      R(i) = (Y(i-1)**2-Y(i+1)**2)/(4.0*delx)                              & !!           & + eodsq*(Y(i+1)-2.0*Y(i)+Y(i-1)) - (S(i-1)+4.0*S(i)+S(i+1))   & !!           & /6.0 !!   enddo !!   R(N) = eodsq*(Y(N-2)-2.0*Y(nm1)+Y(N)) - S(N) !!end subroutine resid !! !!subroutine addabt(N,T,Y,Mb,Nb,Pa,Pb,Pc) !!implicit                                         none !!integer,parameter                                ::    dp=kind(0.0d0) !! !!integer,intent(in)                               ::    N !!real(kind=dp)                                    ::    T !!real(kind=dp),dimension(N)                       ::    Y !!integer,intent(in)                               ::    Mb !!integer,intent(in)                               ::    Nb !!real(kind=dp),intent(inout),dimension(Mb,Mb,Nb)  ::    Pa !!real(kind=dp),intent(inout),dimension(Mb,Mb,Nb)  ::    Pb !!real(kind=dp),intent(inout),dimension(Mb,Mb,Nb)  ::    Pc !! !!integer                                          ::    k,nm1 !! !!   Pa(1,1,1) = Pa(1,1,1) + 1.0 !!   nm1 = N - 1 !!   do k = 2,nm1 !!      Pa(1,1,k) = Pa(1,1,k) + (4.0/6.0) !!      Pb(1,1,k) = Pb(1,1,k) + (1.0/6.0) !!      Pc(1,1,k) = Pc(1,1,k) + (1.0/6.0) !!   enddo !!   Pa(1,1,N) = Pa(1,1,N) + 1.0 !!end subroutine addabt !! !!subroutine jacbt(N,T,Y,S,Mb,Nb,Pa,Pb,Pc) !!implicit none !!integer,parameter                              ::    dp=kind(0.0d0) !!integer,intent(in)                             ::    N !!real(kind=dp)                                  ::    T !!real(kind=dp),intent(in),dimension(N)          ::    Y !!real(kind=dp),dimension(N)                     ::    S !!integer,intent(in)                             ::    Mb !!integer,intent(in)                             ::    Nb !!real(kind=dp),intent(out),dimension(Mb,Mb,Nb)  ::    Pa !!real(kind=dp),intent(out),dimension(Mb,Mb,Nb)  ::    Pb !!real(kind=dp),intent(out),dimension(Mb,Mb,Nb)  ::    Pc !!real(kind=dp),save                             ::    delx,eta !!real(kind=dp)                                  ::    eodsq !!integer                                        ::    k !! !!data eta/0.05/,delx/0.05/ !!   eodsq = eta/delx**2 !!   Pa(1,1,1) = eodsq !!   Pb(1,1,1) = -2.0*eodsq !!   Pc(1,1,1) = eodsq !!   do k = 2,N !!      Pa(1,1,k) = -2.0*eodsq !!      Pb(1,1,k) = -Y(k+1)*(0.5/delx) + eodsq !!      Pc(1,1,k) = Y(k-1)*(0.5/delx) + eodsq !!   enddo !!   Pb(1,1,N) = eodsq !!   Pc(1,1,N) = -2.0*eodsq !!   Pa(1,1,N) = eodsq !!end subroutine jacbt !!``` !! !! The output of this program (on a CDC-7600 in single precision) !! is as follows: !!```text !! At t = 0.10   No. steps =  35  No. r-s =  45  No. J-s =  9 !! At t = 0.20   No. steps =  43  No. r-s =  54  No. J-s = 10 !! At t = 0.30   No. steps =  48  No. r-s =  60  No. J-s = 11 !! At t = 0.40   No. steps =  51  No. r-s =  64  No. J-s = 12 !! !! Final solution values.. !!  1.2747e-02  1.1997e-02  1.5560e-02  2.3767e-02  3.7224e-02 !!  5.6646e-02  8.2645e-02  1.1557e-01  1.5541e-01  2.0177e-01 !!  2.5397e-01  3.1104e-01  3.7189e-01  4.3530e-01  5.0000e-01 !!  5.6472e-01  6.2816e-01  6.8903e-01  7.4612e-01  7.9829e-01 !!  8.4460e-01  8.8438e-01  9.1727e-01  9.4330e-01  9.6281e-01 !!  9.7632e-01  9.8426e-01  9.8648e-01  9.8162e-01  9.6617e-01 !!  9.3374e-01  8.7535e-01  7.8236e-01  6.5321e-01  5.0003e-01 !!  3.4709e-01  2.1876e-01  1.2771e-01  7.3671e-02  5.0642e-02 !!  5.4496e-02 !!``` !!----------------------------------------------------------------------- !!#### Full Description of User Interface to DLSOIBT. !! !! The user interface to DLSOIBT consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSOIBT, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSOIBT package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of two routines in the DLSOIBT package, either of !!      which the user may replace with his/her own version, if desired. !!      These relate to the measurement of errors. !! !!----------------------------------------------------------------------- !!#### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !!     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, !!     IOPT, LRW, LIW, MF, !! !! and those used for both input and output are !!     Y, T, ISTATE, YDOTI. !! !! The work arrays RWORK and IWORK are also used for additional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSOIBT to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows. !! !! RES !! !! : the name of the user-supplied subroutine which supplies !! the residual vector for the ODE system, defined by !!```text !!            r = g(t,y) - A(t,y) * s !!``` !! as a function of the scalar t and the vectors !! s and y (s approximates dy/dt).  This subroutine !! is to have the form !!```fortran !!              SUBROUTINE RES (NEQ, T, Y, S, R, IRES) !!              DOUBLE PRECISION T, Y(*), S(*), R(*) !!``` !! where NEQ, T, Y, S, and IRES are input, and R and !! IRES are output. Y, S, and R are arrays of length NEQ. !! !! On input, IRES indicates how DLSOIBT will use the !! returned array R, as follows: !! !!             IRES = 1  means that DLSOIBT needs the full residual, !!                       r = g - A\\*s, exactly. !!             IRES = -1 means that DLSOIBT is using R only to compute !!                       the Jacobian dr/dy by difference quotients. !! !! The RES routine can ignore IRES, or it can omit some terms !! if IRES = -1.  If A does not depend on y, then RES can !! just return R = g when IRES = -1.  If g - A\\*s contains other !! additive terms that are independent of y, these can also be !! dropped, if done consistently, when IRES = -1. !! !! The subroutine should set the flag IRES if it !! encounters a halt condition or illegal input. !! Otherwise, it should not reset IRES.  On output, !! !! IRES = 1 or -1 represents a normal return, and !! DLSOIBT continues integrating the ODE.  Leave IRES !! unchanged from its input value. !! !! IRES = 2 tells DLSOIBT to immediately return control !! to the calling program, with ISTATE = 3.  This lets !! the calling program change parameters of the problem !! if necessary. !! !! IRES = 3 represents an error condition (for example, an !! illegal value of y).  DLSOIBT tries to integrate the system !! without getting IRES = 3 from RES.  If it cannot, DLSOIBT !! returns with ISTATE = -7 or -1. !! !! On an DLSOIBT return with ISTATE = 3, -1, or -7, the !! values of T and Y returned correspond to the last point !! reached successfully without getting the flag IRES = 2 or 3. !! !! The flag values IRES = 2 and 3 should not be used to !! handle switches or root-stop conditions.  This is better !! done by calling DLSOIBT in a one-step mode and checking the !! stopping function for a sign change at each step. !! !! If quantities computed in the RES routine are needed !! externally to DLSOIBT, an extra call to RES should be made !! for this purpose, for consistent and accurate results. !! To get the current dy/dt for the S argument, use DINTDY. !! !! RES must be declared External in the calling !! program. See note below for more about RES. !! !! ADDA !! !! : the name of the user-supplied subroutine which adds the !! matrix A = A(t,y) to another matrix, P, stored in !! block-tridiagonal form.  This routine is to have the form !!```fortran !!         SUBROUTINE ADDA (NEQ, T, Y, MB, NB, PA, PB, PC) !!         DOUBLE PRECISION T, Y(*), PA(MB,MB,NB), PB(MB,MB,NB), & !!        &                 PC(MB,MB,NB) !!``` !! where NEQ, T, Y, MB, NB, and the arrays PA, PB, and PC !! are input, and the arrays PA, PB, and PC are output. !! Y is an array of length NEQ, and the arrays PA, PB, PC !! are all MB by MB by NB. !! !! Here a block-tridiagonal structure is assumed for A(t,y), !! and also for the matrix P to which A is added here, !! as described in Paragraph B of the Summary of Usage above. !! Thus the affect of ADDA should be the following: !!```fortran !!         DO K = 1,NB !!           DO J = 1,MB !!             DO I = 1,MB !!               PA(I,J,K) = PA(I,J,K) + !!                 ( (I,J) element of K-th diagonal block of A) !!               PB(I,J,K) = PB(I,J,K) + !!                 ( (I,J) element of block (K,K+1) of A, !!                 or block (NB,NB-2) if K = NB) !!               PC(I,J,K) = PC(I,J,K) + !!                 ( (I,J) element of block (K,K-1) of A, !!                 or block (1,3) if K = 1) !!             ENDDO !!           ENDDO !!         ENDDO !!``` !! ADDA must be declared External in the calling program. !! See note below for more information about ADDA. !! !! JAC !! !! : the name of the user-supplied subroutine which supplies !! the Jacobian matrix, dr/dy, where r = g - A\\*s.  JAC is !! required if MITER = 1.  Otherwise a dummy name can be !! passed.  This subroutine is to have the form !!```fortran !!         SUBROUTINE JAC (NEQ, T, Y, S, MB, NB, PA, PB, PC) !!         DOUBLE PRECISION T, Y(*), S(*), PA(MB,MB,NB), !!        &                 PB(MB,MB,NB), PC(MB,MB,NB) !!``` !! where NEQ, T, Y, S, MB, NB, and the arrays PA, PB, and PC !! are input, and the arrays PA, PB, and PC are output. !! Y and S are arrays of length NEQ, and the arrays PA, PB, PC !! are all MB by MB by NB. !! !! PA, PB, and PC are to be loaded with partial derivatives !! (elements of the Jacobian matrix) on output, in terms of the !! block-tridiagonal structure assumed, as described !! in Paragraph B of the Summary of Usage above. !! !! That is, load the diagonal blocks into PA, the !! superdiagonal blocks (and block (NB,NB-2) ) into PB, and !! the subdiagonal blocks (and block (1,3) ) into PC. !! !! The blocks in block-row k of dr/dy are to be loaded into !! PA(\\*,\\*,k), PB(\\*,\\*,k), and PC(\\*,\\*,k). !! !! Thus the affect of JAC should be the following: !! !!```fortran !!          DO K = 1,NB !!            DO J = 1,MB !!              DO I = 1,MB !!                PA(I,J,K) = ( (I,J) element of !!                  K-th diagonal block of dr/dy) !!                PB(I,J,K) = ( (I,J) element of block (K,K+1) !!                  of dr/dy, or block (NB,NB-2) if K = NB) !!                PC(I,J,K) = ( (I,J) element of block (K,K-1) !!                  of dr/dy, or block (1,3) if K = 1) !!              ENDDO !!            ENDDO !!          ENDDO !!``` !! PA, PB, and PC are preset to zero by the solver, !! so that only the nonzero elements need be loaded by JAC. !! Each call to JAC is preceded by a call to RES with the same !! arguments NEQ, T, Y, and S.  Thus to gain some efficiency, !! intermediate quantities shared by both calculations may be !! saved in a user Common block by RES and not recomputed by JAC !! if desired.  Also, JAC may alter the Y array, if desired. !! !! JAC need not provide dr/dy exactly.  A crude !! approximation will do, so that DLSOIBT may be used when !! A and dr/dy are not really block-tridiagonal, but are close !! to matrices that are. !! !! JAC must be declared External in the calling program. !! See note below for more about JAC. !! !! Note on RES, ADDA, and JAC: !! !! These subroutines may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in the subroutines) and/or Y has length !! exceeding NEQ(1).  However, these routines should not alter !! NEQ(1), Y(1),...,Y(NEQ) or any other input variables. !! See the descriptions of NEQ and Y below. !! !! NEQ !! !! : the size of the system (number of first order ordinary !! differential equations or scalar algebraic equations). !! Used only for input. !! !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in RES, ADDA, or JAC. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! !! (The DLSOIBT package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to RES, ADDA, and JAC.  Hence, if it is an array, !! !! locations NEQ(2),... may be used to store other integer data !! and pass it to RES, ADDA, or JAC.  Each such subroutine !! must include NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 0 or 1), and only for output on other !! calls.  On the first call, Y must contain the vector of !! initial values.  On output, Y contains the computed solution !! vector, evaluated at t.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to RES, !! ADDA, and JAC.  Hence its length may exceed NEQ, !! and locations Y(NEQ+1),... may be used to store other real !! data and pass it to RES, ADDA, or JAC.  (The DLSOIBT !! package accesses only Y(1),...,Y(NEQ). ) !! !! YDOTI !! !! : a real array for the initial value of the vector !! dy/dt and for work space, of dimension at least NEQ. !! !! On input: !! !! If ISTATE = 0 then DLSOIBT will compute the initial value !! of dy/dt, if A is nonsingular.  Thus YDOTI will !! serve only as work space and may have any value. !! !! If ISTATE = 1 then YDOTI must contain the initial value !! of dy/dt. !! !! If ISTATE = 2 or 3 (continuation calls) then YDOTI !! may have any value. !! !! Note: If the initial value of A is singular, then !! DLSOIBT cannot compute the initial value of dy/dt, so !! it must be provided in YDOTI, with ISTATE = 1. !! !! On output, when DLSOIBT terminates abnormally with ISTATE = !! -1, -4, or -5, YDOTI will contain the residual !! r = g(t,y) - A(t,y)\\*(dy/dt).  If r is large, t is near !! its initial value, and YDOTI is supplied with ISTATE = 1, !! there may have been an incorrect input value of !! YDOTI = dy/dt, or the problem (as given to DLSOIBT) !! may not have a solution. !! !! If desired, the YDOTI array may be used for other !! purposes between calls to the solver. !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! !! On output, after each call, T is the value at which a !! computed solution y is evaluated (usually the same as TOUT). !! On an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 0 or 1), TOUT may be !! equal to T for one call, then should .ne. T for the next !! call.  For the initial T, an input value of TOUT .ne. T is !! used in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!```text !!                      RMS-norm of ( E(i)/EWT(i) )   .le.   1, !!          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), !!``` !! and the RMS-norm (root-mean-square norm) here is !! RMS-norm(v) = SQRT(sum v(i)**2 / NEQ).  Here EWT = (EWT(i)) !! is a vector of weights which must always be positive, and !! the values of RTOL and ATOL should all be non-negative. !! The following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL   |   ATOL   |      EWT(i) !!  ---- | ------- | -------- | ----------------------------- !!   1   | scalar  |  scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | scalar  |  array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting !! user-supplied routines for the setting of EWT and/or for !! the norm calculation.  See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! Input only.  ITASK has the following values and meanings. !! !!  value | description !!  ----- | --------------------------------------------------------- !!      1 | means normal computation of output values of y(t) at !!        | t = TOUT (by overshooting and interpolating). !!      2 | means take one step only and return. !!      3 | means stop at the first internal mesh point at or !!        | beyond t = TOUT and return. !!      4 | means normal computation of output values of y(t) at !!        | t = TOUT but without overshooting t = TCRIT. !!        | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!        | or beyond TOUT, but not behind it in the direction of !!        | integration.  This option is useful if the problem !!        | has a singularity at or beyond t = TCRIT. !!      5 | means take one step, without passing TCRIT, and return. !!        | TCRIT must be input as RWORK(1). !! !! **Note**:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at t = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! state of the calculation. !! !! On input, the values of ISTATE are as follows. !! !!  value | description !!  ----- | --------------------------------------------------------- !!      0 | means this is the first call for the problem, and !!        | DLSOIBT is to compute the initial value of dy/dt !!        | (while doing other initializations).  See note below. !!      1 | means this is the first call for the problem, and !!        | the initial value of dy/dt has been supplied in !!        | YDOTI (DLSOIBT will do other initializations). !!        | See note below. !!      2 | means this is not the first call, and the calculation !!        | is to continue normally, with no change in any input !!        | parameters except possibly TOUT and ITASK. !!        | (If ITOL, RTOL, and/or ATOL are changed between calls !!        | with ISTATE = 2, the new values will be used but not !!        | tested for legality.) !!      3 | means this is not the first call, and the !!        | calculation is to continue normally, but with !!        | a change in input parameters other than !!        | TOUT and ITASK.  Changes are allowed in !!        | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, MB, NB, !!        | and any of the optional inputs except H0. !!        | (See IWORK description for MB and NB.) !! !! Note:  A preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 0 or 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value | description !!  ----- | --------------------------------------------------------- !!      0 | or 1  means nothing was done; TOUT = t and !!        | ISTATE = 0 or 1 on input. !!      2 | means that the integration was performed successfully. !!      3 | means that the user-supplied Subroutine RES signalled !!        | DLSOIBT to halt the integration and return (IRES = 2). !!        | Integration as far as T was achieved with no occurrence !!        | of IRES = 2, but this flag was set on attempting the !!        | next step. !!     -1 | means an excessive amount of work (more than MXSTEP !!        | steps) was done on this call, before completing the !!        | requested task, but the integration was otherwise !!        | successful as far as T.  (MXSTEP is an optional input !!        | and is normally 500.)  To continue, the user may !!        | simply reset ISTATE to a value .gt. 1 and call again !!        | (the excess work step counter will be reset to 0). !!        | In addition, the user may increase MXSTEP to avoid !!        | this error return (see below on optional inputs). !!     -2 | means too much accuracy was requested for the precision !!        | of the machine being used.  This was detected before !!        | completing the requested task, but the integration !!        | was successful as far as T.  To continue, the tolerance !!        | parameters must be reset, and ISTATE must be set !!        | to 3.  The optional output TOLSF may be used for this !!        | purpose.  (Note: If this condition is detected before !!        | taking any steps, then an illegal input return !!        | (ISTATE = -3) occurs instead.) !!     -3 | means illegal input was detected, before taking any !!        | integration steps.  See written message for details. !!        | Note:  If the solver detects an infinite loop of calls !!        | to the solver with illegal input, it will cause !!        | the run to stop. !!     -4 | means there were repeated error test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | The problem may have a singularity, or the input !!        | may be inappropriate. !!     -5 | means there were repeated convergence test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | This may be caused by an inaccurate Jacobian matrix. !!     -6 | means EWT(i) became zero for some i during the !!        | integration.  Pure relative error control (ATOL(i) = 0.0) !!        | was requested on a variable which has now vanished. !!        | The integration was successful as far as T. !!     -7 | means that the user-supplied Subroutine RES set !!        | its error flag (IRES = 3) despite repeated tries by !!        | DLSOIBT to avoid that condition. !!     -8 | means that ISTATE was 0 on input but DLSOIBT was unable !!        | to compute the initial value of dy/dt.  See the !!        | printed message for details. !! !! Note:  Since the normal output value of ISTATE is 2, !! it does not need to be reset for normal continuation. !! Similarly, ISTATE (= 3) need not be reset if RES told !! DLSOIBT to return because the calling program must change !! the parameters of the problem. !! !! Also, since a negative input value of ISTATE will be !! regarded as illegal, a negative output value requires the !! user to change it, and possibly other inputs, before !! calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !! !!       IOPT = 0 means no optional inputs are being used. !!                Default values will be used in all cases. !!       IOPT = 1 means one or more optional inputs are being used. !! !! RWORK !! !! : a real working array (double precision). !! The length of RWORK must be at least !!```text !!             20 + NYH*(MAXORD + 1) + 3*NEQ + LENWM    where !!          NYH    = the initial value of NEQ, !!          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!                   smaller value is given as an optional input), !!          LENWM  = 3*MB*MB*NB + 2. !!          (See MF description for the definition of METH.) !! Thus if MAXORD has its default value and NEQ is constant, !! this length is !!             22 + 16*NEQ + 3*MB*MB*NB     for MF = 11 or 12, !!             22 + 9*NEQ + 3*MB*MB*NB      for MF = 21 or 22. !!```text !! The first 20 words of RWORK are reserved for conditional !! and optional inputs and optional outputs. !! !! The following word in RWORK is a conditional input: !!```text !!            RWORK(1) = TCRIT = critical value of t which the solver !!                       is not to overshoot.  Required if ITASK is !!                       4 or 5, and ignored otherwise.  (See ITASK.) !!``` !! LRW !! !! : the length of the array RWORK, as declared by the user. !! (This will be checked by the solver.) !! !! IWORK !! !! : an integer work array.  The length of IWORK must be at least !! 20 + NEQ .  The first few words of IWORK are used for !! additional and optional inputs and optional outputs. !! !! The following 2 words in IWORK are additional required !! inputs to DLSOIBT: !!            IWORK(1) = MB = block size !!            IWORK(2) = NB = number of blocks in the main diagonal !! These must satisfy  MB .ge. 1, NB .ge. 4, and MB\\*NB = NEQ. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! Note:  The work arrays must not be altered between calls to DLSOIBT !! for the same problem, except possibly for the additional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSOIBT between calls, if !! desired (but not for use by RES, ADDA, or JAC). !! !! MF !! !! : the method flag.  used only for input.  The legal values of !! MF are 11, 12, 21, and 22. !! !! MF has decimal digits METH and MITER: MF = 10\\*METH + MITER. !! METH indicates the basic linear multistep method: !! !!  METH | description !!  ---- | ------------------------------------- !!     1 | means the implicit Adams method. !!     2 | means the method based on Backward !!       | Differentiation Formulas (BDFS). !! !! The BDF method is strongly preferred for stiff !! problems, while the Adams method is preferred when the !! problem is not stiff.  If the matrix A(t,y) is !! nonsingular, stiffness here can be taken to mean that of !! the explicit ODE system dy/dt = A-inverse \\* g.  If A is !! singular, the concept of stiffness is not well defined. !! !! If you do not know whether the problem is stiff, we !! recommend using METH = 2.  If it is stiff, the advantage !! of METH = 2 over METH = 1 will be great, while if it is !! not stiff, the advantage of METH = 1 will be slight. !! If maximum efficiency is important, some experimentation !! with METH may be necessary. !! !! MITER indicates the corrector iteration method: !! !!  MITER | description !!  ----- | ------------------------------------- !!      1 | means chord iteration with a user-supplied !!        | block-tridiagonal Jacobian. !!        | !!      2 | means chord iteration with an internally !!        | generated (difference quotient) block- !!        | tridiagonal Jacobian approximation, using !!        | 3\\*MB+1 extra calls to RES per dr/dy evaluation. !! !! If MITER = 1, the user must supply a Subroutine JAC !! (the name is arbitrary) as described above under JAC. !! !! For MITER = 2, a dummy argument can be used. !! !!----------------------------------------------------------------------- !!#### Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !!  Name   | Location |     Meaning and Default Value !!  ------ | -------- | ------------------------------------------------- !!  H0     | RWORK(5) | the step size to be attempted on the first step. !!         |          | The default value is determined by the solver. !!         |          | !!  HMAX   | RWORK(6) | the maximum absolute step size allowed. !!         |          | The default value is infinite. !!         |          | !!  HMIN   | RWORK(7) | the minimum absolute step size allowed. !!         |          | The default value is 0.  (This lower bound is not !!         |          | enforced on the final step before reaching TCRIT !!         |          | when ITASK = 4 or 5.) !!         |          | !!  MAXORD | IWORK(5) | the maximum order to be allowed.  The default !!         |          | value is 12 if METH = 1, and 5 if METH = 2. !!         |          | If MAXORD exceeds the default value, it will !!         |          | be reduced to the default value. !!         |          | If MAXORD is changed during the problem, it may !!         |          | cause the current order to be reduced. !!         |          | !!  MXSTEP | IWORK(6) | maximum number of (internally defined) steps !!         |          | allowed during one call to the solver. !!         |          | The default value is 500. !!         |          | !!  MXHNIL | IWORK(7) | maximum number of messages printed (per problem) !!         |          | warning that T + H = T on a step (H = step size). !!         |          | This must be positive to result in a non-default !!         |          | value.  The default value is 10. !! !!----------------------------------------------------------------------- !! Optional Outputs. !! !! As optional additional output from DLSOIBT, the variables listed !! below are quantities related to the performance of DLSOIBT !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSOIBT, and on any return with !! ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal !! input) or -8, they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !!  Name  | Location |     Meaning !!  ----- | -------- | --------------------------------------------------- !!  HU    | RWORK(11)| the step size in t last used (successfully). !!        |          | !!  HCUR  | RWORK(12)| the step size to be attempted on the next step. !!        |          | !!  TCUR  | RWORK(13)| the current value of the independent variable !!        |          | which the solver has actually reached, i.e. the !!        |          | current internal mesh point in t.  On output, TCUR !!        |          | will always be at least as far as the argument !!        |          | T, but may be farther (if interpolation was done). !!        |          | !!  TOLSF | RWORK(14)| a tolerance scale factor, greater than 1.0, !!        |          | computed when a request for too much accuracy was !!        |          | detected (ISTATE = -3 if detected at the start of !!        |          | the problem, ISTATE = -2 otherwise).  If ITOL is !!        |          | left unaltered but RTOL and ATOL are uniformly !!        |          | scaled up by a factor of TOLSF for the next call, !!        |          | then the solver is deemed likely to succeed. !!        |          | (The user may also ignore TOLSF and alter the !!        |          | tolerance parameters in any other way appropriate.) !!        |          | !!  NST   | IWORK(11)| the number of steps taken for the problem so far. !!        |          | !!  NRE   | IWORK(12)| the number of residual evaluations (RES calls) !!        |          | for the problem so far. !!        |          | !!  NJE   | IWORK(13)| the number of Jacobian evaluations (each involving !!        |          | an evaluation of a and dr/dy) for the problem so !!        |          | far.  This equals the number of calls to ADDA and !!        |          | (if MITER = 1) to JAC, and the number of matrix !!        |          | LU decompositions. !!        |          | !!  NQU   | IWORK(14)| the method order last used (successfully). !!        |          | !!  NQCUR | IWORK(15)| the order to be attempted on the next step. !!        |          | !!  IMXER | IWORK(16)| the index of the component of largest magnitude in !!        |          | the weighted local error vector ( E(i)/EWT(i) ), !!        |          | on an error return with ISTATE = -4 or -5. !!        |          | !!  LENRW | IWORK(17)| the length of RWORK actually required. !!        |          | This is defined on normal returns and on an illegal !!        |          | input return for insufficient storage. !!        |          | !!  LENIW | IWORK(18)| the length of IWORK actually required. !!        |          | This is defined on normal returns and on an illegal !!        |          | input return for insufficient storage. !!        |          | !! !! The following two arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address in RWORK, and its description. !! !! Name  | Base Address |    Description !! ----- | ------------ | ------------------------------------------------ !! YH    | 21           | the Nordsieck history array, of size NYH by !!       |              | (NQCUR + 1), where NYH is the initial value !!       |              | of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!       |              | of YH contains HCUR\\*\\*j/factorial(j) times !!       |              | the j-th derivative of the interpolating !!       |              | polynomial currently representing the solution, !!       |              | evaluated at t = TCUR. !!       |              | !! ACOR  |  LENRW-NEQ+1 | array of size NEQ used for the accumulated !!       |              | corrections on each step, scaled on output to !!       |              | represent the estimated local error in y on !!       |              | the last step.  This is the vector E in the !!       |              | description of the error control.  It is !!       |              | defined only on a return from DLSOIBT with !!       |              | ISTATE = 2. !! !!----------------------------------------------------------------------- !!#### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSOIBT. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !!  Form of Call                |    Function !!  --------------------------- | ------------------------------------------ !!   CALL XSETUN(LUN)           | Set the logical unit number, LUN, for !!                              | output of messages from DLSOIBT, if !!                              | the default is not desired. !!                              | The default value of LUN is 6. !!                              | !!   CALL XSETF(MFLAG)          | Set a flag to control the printing of !!                              | messages by DLSOIBT. !!                              | MFLAG = 0 means do not print. (Danger: !!                              | This risks losing valuable information.) !!                              | MFLAG = 1 means print (the default). !!                              | !!                              | Either of the above calls may be made at !!                              | any time and will take effect immediately. !!                              | !!   CALL DSRCOM(RSAV,ISAV,JOB) | saves and restores the contents of !!                              | the internal Common blocks used by !!                              | DLSOIBT (see Part 3 below). !!                              | RSAV must be a real array of length 218 !!                              | or more, and ISAV must be an integer !!                              | array of length 37 or more. !!                              |      JOB=1 means save Common into RSAV/ISAV. !!                              |      JOB=2 means restore Common from RSAV/ISAV. !!                              | DSRCOM is useful if one is !!                              | interrupting a run and restarting !!                              | later, or alternating between two or !!                              | more problems solved with DLSOIBT. !!                              | !!   CALL DINTDY(,,,,,)         | Provide derivatives of y, of various !!        (see below)           | orders, at a specified point t, if !!                              | desired.  It may be called only after !!                              | a successful return from DLSOIBT. !! !! The detailed instructions for using DINTDY are as follows. !! The form of the call is: !!```fortran !!   CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the t last returned by DLSOIBT). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(t), is already provided !! by DLSOIBT directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! RWORK(21) !! !! : the base address of the history array YH. !! !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !! !!----------------------------------------------------------------------- !!#### Part 3.  Save and Restore Program State !! !! If the solution of a given problem by DLSOIBT is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSOIBT call prior to the !! interruption, the contents of the call sequence variables and the !! internal state variables, and later restore these values before the !! next DLSOIBT call for that problem.  To save and restore the values !! , use Subroutine DSRCOM (see Part 2 above). !! !!----------------------------------------------------------------------- !!#### Part 4.  Optionally Replaceable Solver Routines. !! !! Below are descriptions of two routines in the DLSOIBT package which !! relate to the measurement of errors.  Either routine can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !!#### (a) DEWSET() !! !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !! !!         SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !! !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSOIBT call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM !! routine (see below), and also used by DLSOIBT in the computation !! of the optional output IMXER, the diagonal Jacobian approximation, !! and the increments for difference quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!      DOUBLE PRECISION RLS !!      COMMON /DLS001/ RLS(218),ILS(37) !!      NQ = ILS(33) !!      NST = ILS(34) !!      H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !!#### (b) DVNORM() !! !! The following is a real function routine which computes the weighted !! root-mean-square norm of a vector v: !!```text !!     D = DVNORM (N, V, W) !!``` !! where: !!```text !!   N = the length of the vector, !!   V = real array of length N containing the vector, !!   W = real array of length N containing weights, !!   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). !!``` !! DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where !! EWT is as set by Subroutine DEWSET. !! !! If the user supplies this function, it should return a non-negative !! value of DVNORM suitable for use in the error control in DLSOIBT. !! None of the arguments should be altered by DVNORM. !! For example, a user-supplied DVNORM routine might: !!  - substitute a max-norm of (V(i)\\*W(i)) for the RMS-norm, or !!  - ignore some components of V in the norm, with the effect of !!    suppressing the error control on those components of y. !! !!----------------------------------------------------------------------- !!### Pedigree: !! !! Reference: !!     Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing,  R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !! This is based on the the 18 November 2003 version of ODEPACK !!----------------------------------------------------------------------- !! !! Authors:       Alan C. Hindmarsh and Jeffrey F. Painter !!                Center for Applied Scientific Computing, L-561 !!                Lawrence Livermore National Laboratory !!                Livermore, CA 94551 !! and !!                Charles S. Kenney !! formerly at:   Naval Weapons Center !!                China Lake, CA 93555 !! ! ----------------------------------------------------------------------- ! ### REVISION HISTORY  (YYYYMMDD) !  19840625  DATE WRITTEN !  19870330  Major update: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODI; !            in STODI, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            converted arithmetic IF statements to logical IF statements; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20020502  Corrected declarations in descriptions of user routines. !  20031105  Restored 'own' variables to Common block, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. !  20031117  Changed internal names NRE, LSAVR to NFE, LSAVF resp. ! ! ----------------------------------------------------------------------- !  Other routines in the DLSOIBT package. ! !  In addition to Subroutine DLSOIBT, the DLSOIBT package includes the !  following subroutines and function routines: !   DAIGBT   computes the initial value of the vector !              dy/dt = A-inverse * g !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DSTODI   is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted RMS-norm of a vector. !   DSRCOM   is a user-callable routine to save and restore !            the contents of the internal Common blocks. !   DPJIBT   computes and preprocesses the Jacobian matrix !            and the Newton iteration matrix P. !   DSLSBT   manages solution of linear system in chord iteration. !   DDECBT and DSOLBT   are routines for solving block-tridiagonal !            systems of linear algebraic equations. !   DGEFA and DGESL   are routines from LINPACK for solving full !            systems of linear algebraic equations. !   DDOT     is one of the basic linear algebra modules (BLAS). !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note:  DVNORM, DDOT, DUMACH, and IXSAV are function routines. !  All the others are subroutines. ! !!----------------------------------------------------------------------- subroutine dlsoibt ( res , adda , jac , Neq , Y , Ydoti , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , Mf ) external adda external jac external res real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y , Ydoti real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , ier , iflag , imxer , ires , kgo , leniw , lenrw , lenwm , lp , lyd0 , mb , nb logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following internal Common block contains !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSOIBT, DINTDY, DSTODI, !  DPJIBT, and DSLSBT. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 0 or 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 0 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSOIBT- ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1400 ! msg = 'DLSOIBT- Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSOIBT- ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( Istate <= 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSOIBT- ISTATE.gt.1 but DLSOIBT not initialized. ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 0 or 1) !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, MB, and NB. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSOIBT- NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( Istate > 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSOIBT- ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1400 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSOIBT- ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSOIBT- IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 900 if ( dls1 % miter < 1 . or . dls1 % miter > 2 ) goto 900 mb = Iwork ( 1 ) nb = Iwork ( 2 ) if ( mb < 1 . or . mb > dls1 % n ) goto 1000 if ( nb < 4 ) then msg = 'DLSOIBT- NB (=I1) .lt. 4 illegal.       ' call xerrwd ( msg , 40 , 10 , 0 , 1 , nb , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( mb * nb /= dls1 % n ) goto 1000 !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSOIBT- MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSOIBT- MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSOIBT- MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSOIBT- TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1400 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSOIBT- HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1400 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSOIBT- HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1400 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted YH, WM, EWT, SAVR, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate <= 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh lenwm = 3 * mb * mb * nb + 2 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSOIBT- RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1400 elseif ( leniw > Liw ) then msg = 'DLSOIBT- IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1400 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSOIBT- RTOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1400 elseif ( atoli < 0.0D0 ) then msg = 'DLSOIBT- ATOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1400 endif enddo if ( Istate <= 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 0 or 1). !  It contains all remaining initializations, the call to DAIGBT !  (if ISTATE = 1), and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1200 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nfe = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Compute initial dy/dt, if necessary, and load it and initial Y into YH lyd0 = dls1 % lyh + dls1 % nyh lp = dls1 % lwm + 1 if ( Istate == 1 ) then !  Initial dy/dt was supplied.  Load into YH (LYD0 points to YH(*,2).). - do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) Rwork ( i + lyd0 - 1 ) = Ydoti ( i ) enddo else !  DLSOIBT must compute initial dy/dt (LYD0 points to YH(*,2)). --------- call daigbt ( res , adda , Neq , T , Y , Rwork ( lyd0 ), mb , nb , Rwork ( lp ), Iwork ( 21 ), ier ) dls1 % nfe = dls1 % nfe + 1 if ( ier < 0 ) then !  DAIGBT failed because a diagonal block of A matrix was singular. ----- ier = - ier msg = 'DLSOIBT- Attempt to initialize dy/dt failed:  Matrix A has a' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      singular diagonal block, block no. = (I1)   ' call xerrwd ( msg , 50 , 207 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return elseif ( ier > 0 ) then !  DAIGBT failed because RES set IRES to 2 or 3. ------------------------ msg = 'DLSOIBT- Attempt to initialize dy/dt failed       ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      because residual routine set its error flag ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to IRES = (I1)' call xerrwd ( msg , 20 , 208 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return else do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo endif endif !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSOIBT- EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1400 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( YDOT(i)/ywt(i) )**2  ) !                                        1 !  where   w0      = MAX ( ABS(T), ABS(TOUT) ), !          YDOT(i) = i-th component of initial value of dy/dt, !          ywt(i)  = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSOIBT- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1400 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lyd0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = h0 * Rwork ( i + lyd0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODI. ------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into YDOTI.--------- do i = 1 , dls1 % n Ydoti ( i ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif !  Reload WM(1) = RWORK(lWM), since lWM may have changed. --------------- Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSOIBT- ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1400 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1200 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODI. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSOIBT- At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSOIBT- At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 700 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSOIBT- Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSOIBT- Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODI(NEQ,Y,YH,NYH,YH1,EWT,SAVF,SAVR,ACOR,WM,IWM,RES, !                  ADDA,JAC,DPJIBT,DSLSBT) !  Note: SAVF in DSTODI occupies the same space as YDOTI in DLSOIBT. ! ----------------------------------------------------------------------- call dstodi ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Ydoti , Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), res , adda , jac , dpjibt , dslsbt ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSOIBT- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = 'error test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSOIBT- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) case ( 5 ) !  IRES = 3 returned by RES, despite retries by DSTODI.------------------ msg = 'DLSOIBT- At T (=R1) residual routine returned     ' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error IRES = 3 repeatedly.        ' call xerrwd ( msg , 40 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 700 case default ! !  KGO = 1:success; 2:error test failure; 3:convergence failure; !        4:RES ordered return; 5:RES returned error. ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  see if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSOIBT- At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1400 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSOIBT- At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 700 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSOIBT. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 if ( dls1 % kflag ==- 3 ) Istate = 3 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Compute residual if relevant. ---------------------------------------- 600 continue lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + lyd0 - 1 ) / dls1 % h Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo ires = 1 call res ( Neq , dls1 % tn , Y , Rwork ( dls1 % lsavf ), Ydoti , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then msg = 'DLSOIBT- Residual routine set its flag IRES       ' call xerrwd ( msg , 50 , 210 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to (I1) when called for final output.       ' call xerrwd ( msg , 50 , 210 , 0 , 1 , ires , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 800 !  Set Y vector, T, and optional outputs. ------------------------------- 700 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo 800 continue T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return 900 continue msg = 'DLSOIBT- MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1400 1000 continue msg = 'DLSOIBT- MB (=I1) or NB (=I2) illegal.  ' call xerrwd ( msg , 40 , 9 , 0 , 2 , mb , nb , 0 , 0.0D0 , 0.0D0 ) goto 1400 1100 continue msg = 'DLSOIBT- ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1400 1200 continue msg = 'DLSOIBT- ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1400 1300 continue msg = 'DLSOIBT- Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1400 continue Istate = - 3 return 99999 continue end subroutine dlsoibt","tags":"","loc":"sourcefile/dlsoibt.inc.html"},{"title":"dlsode.inc – odepack","text":"Contents Subroutines dlsode Source Code dlsode.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !!  _DLSODE_ solves the initial-value problem for stiff or !!  nonstiff systems of first-order ODE's, !!```text !!   dy/dt = f(t,y),   or, in component form, !!   dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(N)),  i=1,...,N. !!``` !! !!  **NOTE**: The \"Usage\" and \"Arguments\" sections treat only a subset of !!  available options, in condensed fashion.  The options !!  covered and the information supplied will support most !!  standard uses of DLSODE. !! !!  For more sophisticated uses, full details on all options are !!  given in the concluding section, headed \"Long Description.\" !!  A synopsis of the DLSODE Long Description is provided at the !!  beginning of that section; general topics covered are: !! !!  + Elements of the call sequence; optional input and output !!  + Optional supplemental routines in the DLSODE package !!  + internal COMMON block !! !!------------------------------------------------------------------------ !!### Usage !!  Communication between the user and the DLSODE package, for normal !!  situations, is summarized here.  This summary describes a subset !!  of the available options.  See \"Long Description\" for complete !!  details, including optional communication, nonstandard options, !!  and instructions for special situations. !! !!  A sample program is given in the \"Examples\" section. !! !!  Refer to the argument descriptions for the definitions of the !!  quantities that appear in the following sample declarations. !! !!  For MF = 10, !!```fortran !!        PARAMETER  (LRW = 20 + 16*NEQ,           LIW = 20) !!``` !!  For MF = 21 or 22, !!```fortran !!        PARAMETER  (LRW = 22 +  9*NEQ + NEQ**2,  LIW = 20 + NEQ) !!``` !!  For MF = 24 or 25, !!```fortran !!        PARAMETER  (LRW = 22 + 10*NEQ + (2*ML+MU)*NEQ, !!       &                                         LIW = 20 + NEQ) !! !!        EXTERNAL F, JAC !!        INTEGER  NEQ, ITOL, ITASK, ISTATE, IOPT, LRW, IWORK(LIW), !!       &         LIW, MF !!        DOUBLE PRECISION Y(NEQ), T, TOUT, RTOL, ATOL(ntol), RWORK(LRW) !! !!        CALL DLSODE (F, NEQ, Y, T, TOUT, ITOL, RTOL, ATOL, ITASK, !!       &            ISTATE, IOPT, RWORK, LRW, IWORK, LIW, JAC, MF) !!``` !!### Arguments !! !! F (external) !! !! ; Name of subroutine for right-hand-side vector f. !! This name must be declared EXTERNAL in calling !! program.  The form of F must be: !!```fortran !!     SUBROUTINE  F (NEQ, T, Y, YDOT) !!     INTEGER  NEQ !!     DOUBLE PRECISION  T, Y(*), YDOT(*) !!``` !! The inputs are NEQ, T, Y.  F is to set !!```text !!      YDOT(i) = f(i,T,Y(1),Y(2),...,Y(NEQ)), i = 1, ..., NEQ . !!``` !! !! NEQ (intent IN) !! !! : Number of first-order ODE's. !! !! Y (intent INOUT) !! !! : Array of values of the y(t) vector, of length NEQ. !! !! Input:  For the first call, Y should contain the !!         values of y(t) at t = T. (Y is an input !!         variable only if ISTATE = 1.) !! !! Output: On return, Y will contain the values at the !!         new t-value. !! !! T (intent INOUT) !! !! : Value of the independent variable.  On return it !! will be the current value of t (normally TOUT). !! !! TOUT  (intent IN) !! !! : Next point where output is desired (.NE. T). !! !! ITOL  (intent IN) !! !! : 1 or 2 according as ATOL (below) is a scalar or !! an array. !! !! RTOL  (intent IN) !! !! : Relative tolerance parameter (scalar). !! !! ATOL  (intent IN) !! !! : Absolute tolerance parameter (scalar or array). !!```text !!    If ITOL = 1, ATOL need not be dimensioned. !!    If ITOL = 2, ATOL must be dimensioned at least NEQ. !!``` !! !! The estimated local error in Y(i) will be controlled !! so as to be roughly less (in magnitude) than !!```text !!    EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!    EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! !! Thus the local error test passes if, in each !! component, either the absolute error is less than !! ATOL (or ATOL(i)), or the relative error is less !! than RTOL. !! !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative !! error control.  Caution:  Actual (global) errors may !! exceed these local tolerances, so choose them !! conservatively. !! !! ITASK (intent IN) !! !! : Flag indicating the task DLSODE is to perform. !! Use ITASK = 1 for normal computation of output !! values of y at t = TOUT. !! !! ISTATE (intent INOUT) !! !! : Index used for input and output to specify the state !! of the calculation. !! !! Input: !! !!  value | description !! ------ | ----------- !!      1 | This is the first call for a problem. !!      2 | This is a subsequent call. !! !! Output: !! !!  value | description !! ------ | ----------- !!      1 | Nothing was done, because TOUT was equal to T. !!      2 | DLSODE was successful (otherwise, negative). !!        | Note that ISTATE need not be modified after a !!        | successful return. !!     -1 | Excess work done on this call (perhaps wrong !!        | MF). !!     -2 | Excess accuracy requested (tolerances too !!        | small). !!     -3 | Illegal input detected (see printed message). !!     -4 | Repeated error test failures (check all !!        | inputs). !!     -5 | Repeated convergence failures (perhaps bad !!        | Jacobian supplied or wrong choice of MF or !!        | tolerances). !!     -6 | Error weight became zero during problem !!        | (solution component i vanished, and ATOL or !!        | ATOL(i) = 0.). !! !! IOPT (intent IN) !! !! : Flag indicating whether optional inputs are used: !! !!  value | description !!  ----- | ----------- !!      0 | No. !!      1 | Yes.  (See \"Optional inputs\" under \"Long !!        | Description,\" Part 1.) !! !! RWORK (WORK) !! !! : Real work array of length at least: !!```text !!       20 + 16*NEQ                    for MF = 10, !!       22 +  9*NEQ + NEQ**2           for MF = 21 or 22, !!       22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. !!``` !! !! LRW (intent IN) !! !! : Declared length of RWORK (in user's DIMENSION !! statement). !! !! IWORK (WORK) !! !! : Integer work array of length at least: !!```text !!       20        for MF = 10, !!       20 + NEQ  for MF = 21, 22, 24, or 25. !!``` !! !! If MF = 24 or 25, input in IWORK(1),IWORK(2) the !! lower and upper Jacobian half-bandwidths ML,MU. !! !! On return, IWORK contains information that may be !! of interest to the user: !! !!  Name  | Location  | Meaning !!  ----- | --------- | ----------------------------------------- !!  NST   | IWORK(11) | Number of steps taken for the problem so !!        |           | far. !!  NFE   | IWORK(12) | Number of f evaluations for the problem !!        |           | so far. !!  NJE   | IWORK(13) | Number of Jacobian evaluations (and of !!        |           | matrix LU decompositions) for the problem !!        |           | so far. !!  NQU   | IWORK(14) | Method order last used (successfully). !!  LENRW | IWORK(17) | Length of RWORK actually required.  This !!        |           | is defined on normal returns and on an !!        |           | illegal input return for insufficient !!        |           | storage. !!  LENIW | IWORK(18) | Length of IWORK actually required.  This !!        |           | is defined on normal returns and on an !!        |           | illegal input return for insufficient !!        |           | storage. !! !! LIW (intent IN) !! !! : Declared length of IWORK (in user's DIMENSION !! statement). !! !! JAC (external) !! !! : Name of subroutine for Jacobian matrix (MF = !! 21 or 24).  If used, this name must be declared !! EXTERNAL in calling program.  If not used, pass a !! dummy name.  The form of JAC must be: !!```fortran !!    SUBROUTINE JAC (NEQ, T, Y, ML, MU, PD, NROWPD) !!    INTEGER  NEQ, ML, MU, NROWPD !!    DOUBLE PRECISION  T, Y(*), PD(NROWPD,*) !!``` !! !! See item c, under \"Description\" below for more !! information about JAC. !! !! MF (intent IN) !! !! : Method flag.  Standard values are: !! !!   value | definition !!   ----- | ---------- !!      10 | Nonstiff (Adams) method, no Jacobian used. !!      21 | Stiff (BDF) method, user-supplied full Jacobian. !!      22 | Stiff method, internally generated full !!         | Jacobian. !!      24 | Stiff method, user-supplied banded Jacobian. !!      25 | Stiff method, internally generated banded !!         | Jacobian. !! !!### Long Description !!   DLSODE solves the initial value problem for stiff or nonstiff !!   systems of first-order ODE's, !!```text !!        dy/dt = f(t,y) , !!``` !!   or, in component form, !!```text !!        dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) !!                                                  (i = 1, ..., NEQ) . !!``` !!   DLSODE is a package based on the GEAR and GEARB packages, and on !!   the October 23, 1978, version of the tentative ODEPACK user !!   interface standard, with minor modifications. !! !!   The steps in solving such a problem are as follows. !! !!   **(a)** First write a subroutine of the form !!```fortran !!           SUBROUTINE  F (NEQ, T, Y, YDOT) !!           INTEGER  NEQ !!           DOUBLE PRECISION  T, Y(*), YDOT(*) !!``` !!   which supplies the vector function f by loading YDOT(i) with !!   f(i). !! !!   **(b)** Next determine (or guess) whether or not the problem is stiff. !!   Stiffness occurs when the Jacobian matrix df/dy has an !!   eigenvalue whose real part is negative and large in magnitude !!   compared to the reciprocal of the t span of interest.  If the !!   problem is nonstiff, use method flag MF = 10.  If it is stiff, !!   there are four standard choices for MF, and DLSODE requires the !!   Jacobian matrix in some form.  This matrix is regarded either !!   as full (MF = 21 or 22), or banded (MF = 24 or 25).  In the !!   banded case, DLSODE requires two half-bandwidth parameters ML !!   and MU. These are, respectively, the widths of the lower and !!   upper parts of the band, excluding the main diagonal.  Thus the !!   band consists of the locations (i,j) with !! !!           i - ML <= j <= i + MU , !! !!   and the full bandwidth is ML + MU + 1 . !! !!   **(c)** If the problem is stiff, you are encouraged to supply the !!   Jacobian directly (MF = 21 or 24), but if this is not feasible, !!   DLSODE will compute it internally by difference quotients (MF = !!   22 or 25).  If you are supplying the Jacobian, write a !!   subroutine of the form !!```fortran !!           SUBROUTINE  JAC (NEQ, T, Y, ML, MU, PD, NROWPD) !!           INTEGER  NEQ, ML, MU, NRWOPD !!           DOUBLE PRECISION  T, Y(*), PD(NROWPD,*) !!``` !!   which provides df/dy by loading PD as follows: !!     - For a full Jacobian (MF = 21), load PD(i,j) with df(i)/dy(j), !!       the partial derivative of f(i) with respect to y(j).  (Ignore !!       the ML and MU arguments in this case.) !!     - For a banded Jacobian (MF = 24), load PD(i-j+MU+1,j) with !!          df(i)/dy(j); i.e., load the diagonal lines of df/dy into the !!       rows of PD from the top down. !!     - In either case, only nonzero elements need be loaded. !! !!   **(d)** Write a main program that calls subroutine DLSODE once for each !!   point at which answers are desired.  This should also provide !!   for possible use of logical unit 6 for output of error messages !!   by DLSODE. !! !!   Before the first call to DLSODE, set ISTATE = 1, set Y and T to !!   the initial values, and set TOUT to the first output point.  To !!   continue the integration after a successful return, simply !!   reset TOUT and call DLSODE again.  No other parameters need be !!   reset. !! !!### Examples !!   The following is a simple example problem, with the coding needed !!   for its solution by DLSODE. The problem is from chemical kinetics, !!   and consists of the following three rate equations: !!```text !!        dy1/dt = -.04*y1 + 1.E4*y2*y3 !!        dy2/dt = .04*y1 - 1.E4*y2*y3 - 3.E7*y2**2 !!        dy3/dt = 3.E7*y2**2 !!``` !!   on the interval from t = 0.0 to t = 4.E10, with initial conditions !!   y1 = 1.0, y2 = y3 = 0. The problem is stiff. !! !!   The following coding solves this problem with DLSODE, using !!   MF = 21 and printing results at t = .4, 4., ..., 4.E10.  It uses !!   ITOL = 2 and ATOL much smaller for y2 than for y1 or y3 because y2 !!   has much smaller values.  At the end of the run, statistical !!   quantities of interest are printed. !! !!```fortran !!program dlsode_ex !!use m_odepack !!implicit none !!external fex !!external jex !! !!integer,parameter            ::  dp=kind(0.0d0) !!real(kind=dp),dimension(3)   ::  atol,y !!integer                      ::  iopt,iout,istate,itask,itol,liw,lrw,mf,neq !!integer,dimension(23)        ::  iwork !!real(kind=dp)                ::  rtol,t,tout !!real(kind=dp),dimension(58)  ::  rwork !! !!   neq = 3 !!   y(1) = 1.D0 !!   y(2) = 0.D0 !!   y(3) = 0.D0 !!   t = 0.D0 !!   tout = .4D0 !!   itol = 2 !!   rtol = 1.D-4 !!   atol(1) = 1.D-6 !!   atol(2) = 1.D-10 !!   atol(3) = 1.D-6 !!   itask = 1 !!   istate = 1 !!   iopt = 0 !!   lrw = 58 !!   liw = 23 !!   mf = 21 !!   do iout = 1,12 !!      call dlsode(fex,[neq],y,t,tout,itol,[rtol],atol,itask,istate,iopt,   & !!                & rwork,lrw,iwork,liw,jex,mf) !!      write (6,99010) t,y(1),y(2),y(3) !!   99010 format (' At t =',d12.4,'   y =',3D14.6) !!      if ( istate<0 ) then !!         write (6,99020) istate !!   99020 format (///' Error halt.. ISTATE =',i3) !!         stop 1 !!      else !!         tout = tout*10.D0 !!      endif !!   enddo !!   write (6,99030) iwork(11),iwork(12),iwork(13) !!   99030 format (/' No. steps =',i4,',  No. f-s =',i4,',  No. J-s =',i4) !! !!end program dlsode_ex !! !!subroutine fex(Neq,T,Y,Ydot) !!implicit none !!integer,parameter                         ::  dp=kind(0.0d0) !! !!integer                                   ::  Neq !!real(kind=dp)                             ::  T !!real(kind=dp),intent(in),dimension(3)     ::  Y !!real(kind=dp),intent(inout),dimension(3)  ::  Ydot !! !!   Ydot(1) = -.04D0*Y(1) + 1.D4*Y(2)*Y(3) !!   Ydot(3) = 3.D7*Y(2)*Y(2) !!   Ydot(2) = -Ydot(1) - Ydot(3) !!end subroutine fex !! !!subroutine jex(Neq,T,Y,Ml,Mu,Pd,Nrpd) !!implicit none !! !!integer,parameter                              ::  dp=kind(0.0d0) !!integer                                        ::  Neq !!real(kind=dp)                                  ::  T !!real(kind=dp),intent(in),dimension(3)          ::  Y !!integer                                        ::  Ml !!integer                                        ::  Mu !!real(kind=dp),intent(inout),dimension(Nrpd,3)  ::  Pd !!integer,intent(in)                             ::  Nrpd !! !!   Pd(1,1) = -.04D0 !!   Pd(1,2) = 1.D4*Y(3) !!   Pd(1,3) = 1.D4*Y(2) !!   Pd(2,1) = .04D0 !!   Pd(2,3) = -Pd(1,3) !!   Pd(3,2) = 6.D7*Y(2) !!   Pd(2,2) = -Pd(1,2) - Pd(3,2) !!end subroutine jex !!``` !! !!   The output from this program (on a Cray-1 in single precision) !!   is as follows. !!```text !!     At t =  4.0000e-01   y =  9.851726e-01  3.386406e-05  1.479357e-02 !!     At t =  4.0000e+00   y =  9.055142e-01  2.240418e-05  9.446344e-02 !!     At t =  4.0000e+01   y =  7.158050e-01  9.184616e-06  2.841858e-01 !!     At t =  4.0000e+02   y =  4.504846e-01  3.222434e-06  5.495122e-01 !!     At t =  4.0000e+03   y =  1.831701e-01  8.940379e-07  8.168290e-01 !!     At t =  4.0000e+04   y =  3.897016e-02  1.621193e-07  9.610297e-01 !!     At t =  4.0000e+05   y =  4.935213e-03  1.983756e-08  9.950648e-01 !!     At t =  4.0000e+06   y =  5.159269e-04  2.064759e-09  9.994841e-01 !!     At t =  4.0000e+07   y =  5.306413e-05  2.122677e-10  9.999469e-01 !!     At t =  4.0000e+08   y =  5.494530e-06  2.197825e-11  9.999945e-01 !!     At t =  4.0000e+09   y =  5.129458e-07  2.051784e-12  9.999995e-01 !!     At t =  4.0000e+10   y = -7.170603e-08 -2.868241e-13  1.000000e+00 !! !!     No. steps = 330,  No. f-s = 405,  No. J-s = 69 !!``` !! !!#### Accuracy: !!   The accuracy of the solution depends on the choice of tolerances !!   RTOL and ATOL.  Actual (global) errors may exceed these local !!   tolerances, so choose them conservatively. !! !!#### Cautions: !!   The work arrays should not be altered between calls to DLSODE for !!   the same problem, except possibly for the conditional and optional !!   inputs. !! !!#### Portability: !!   Since NEQ is dimensioned inside DLSODE, some compilers may object !!   to a call to DLSODE with NEQ a scalar variable.  In this event, !!   use DIMENSION NEQ(1).  Similar remarks apply to RTOL and ATOL. !! !!   Note to Cray users: !!   For maximum efficiency, use the CFT77 compiler.  Appropriate !!   compiler optimization directives have been inserted for CFT77. !! !!#### Reference: !!   Alan C. Hindmarsh, \"ODEPACK, A Systematized Collection of ODE !!   Solvers,\" in Scientific Computing, R. S. Stepleman, et al., Eds. !!   (North-Holland, Amsterdam, 1983), pp. 55-64. !! !!### Long Description: !!   The following complete description of the user interface to !!   DLSODE consists of four parts: !! !!   1.  The call sequence to subroutine DLSODE, which is a driver !!       routine for the solver.  This includes descriptions of both !!       the call sequence arguments and user-supplied routines. !!       Following these descriptions is a description of optional !!       inputs available through the call sequence, and then a !!       description of optional outputs in the work arrays. !! !!   2.  Descriptions of other routines in the DLSODE package that may !!       be (optionally) called by the user.  These provide the ability !!       to alter error message handling, save and restore the internal !!       COMMON, and obtain specified derivatives of the solution y(t). !! !!   3.  Descriptions of COMMON block to be declared in overlay or !!       similar environments, or to be saved when doing an interrupt !!       of the problem and continued solution later. !! !!   4.  Description of two routines in the DLSODE package, either of !!       which the user may replace with his own version, if desired. !!       These relate to the measurement of errors. !! !! !!### Part 1.  Call Sequence !! !!#### Arguments !! !!  The call sequence parameters used for input only are !! !!     F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF, !! !!  and those used for both input and output are !! !!     Y, T, ISTATE. !! !!  The work arrays RWORK and IWORK are also used for conditional and !!  optional inputs and optional outputs.  (The term output here !!  refers to the return from subroutine DLSODE to the user's calling !!  program.) !! !!  The legality of input parameters will be thoroughly checked on the !!  initial call for the problem, but not checked thereafter unless a !!  change in input parameters is flagged by ISTATE = 3 on input. !! !!  The descriptions of the call arguments are as follows. !! !!  F !! !!  : name of the user-supplied subroutine defining the ODE !!  system.  The system must be put in the first-order form !!  dy/dt = f(t,y), where f is a vector-valued function of !!  the scalar t and the vector y. Subroutine F is to compute !!  the function f. It is to have the form !!```fortran !!                SUBROUTINE F (NEQ, T, Y, YDOT) !!                DOUBLE PRECISION  T, Y(*), YDOT(*) !!``` !!  where NEQ, T, and Y are input, and the array YDOT = !!  f(T,Y) is output.  Y and YDOT are arrays of length NEQ. !!  Subroutine F should not alter Y(1),...,Y(NEQ).  F must be !!  declared EXTERNAL in the calling program. !! !!  Subroutine F may access user-defined quantities in !!  NEQ(2),... and/or in Y(NEQ(1)+1),..., if NEQ is an array !!  (dimensioned in F) and/or Y has length exceeding NEQ(1). !!  See the descriptions of NEQ and Y below. !! !!  If quantities computed in the F routine are needed !!  externally to DLSODE, an extra call to F should be made !!  for this purpose, for consistent and accurate results. !!  If only the derivative dy/dt is needed, use DINTDY !!  instead. !! !!  NEQ !! !!  : size of the ODE system (number of first-order !!  ordinary differential equations).  Used only for input. !!  NEQ may be decreased, but not increased, during the !!  problem.  If NEQ is decreased (with ISTATE = 3 on input), !!  the remaining components of Y should be left undisturbed, !!  if these are to be accessed in F and/or JAC. !! !!  Normally, NEQ is a scalar, and it is generally referred !!  to as a scalar in this user interface description. !!  However, NEQ may be an array, with NEQ(1) set to the !!  system size.  (The DLSODE package accesses only NEQ(1).) !!  In either case, this parameter is passed as the NEQ !!  argument in all calls to F and JAC.  Hence, if it is an !!  array, locations NEQ(2),... may be used to store other !!  integer data and pass it to F and/or JAC.  Subroutines !!  F and/or JAC must include NEQ in a DIMENSION statement !!  in that case. !! !!  Y !! !!  : real array for the vector of dependent variables, of !!  length NEQ or more.  Used for both input and output on !!  the first call (ISTATE = 1), and only for output on !!  other calls.  On the first call, Y must contain the !!  vector of initial values.  On output, Y contains the !!  computed solution vector, evaluated at T. If desired, !!  the Y array may be used for other purposes between !!  calls to the solver. !! !!  This array is passed as the Y argument in all calls to F !!  and JAC.  Hence its length may exceed NEQ, and locations !!  Y(NEQ+1),... may be used to store other real data and !!  pass it to F and/or JAC.  (The DLSODE package accesses !!  only Y(1),...,Y(NEQ).) !! !!  T !! !!  : independent variable.  On input, T is used only on !!  the first call, as the initial point of the integration. !!  On output, after each call, T is the value at which a !!  computed solution Y is evaluated (usually the same as !!  TOUT).  On an error return, T is the farthest point !!  reached. !! !!  TOUT !! !!  : next value of T at which a computed solution is !!  desired.  Used only for input. !! !!  When starting the problem (ISTATE = 1), TOUT may be equal !!  to T for one call, then should not equal T for the next !!  call.  For the initial T, an input value of TOUT .NE. T !!  is used in order to determine the direction of the !!  integration (i.e., the algebraic sign of the step sizes) !!  and the rough scale of the problem.  Integration in !!  either direction (forward or backward in T) is permitted. !! !!  If ITASK = 2 or 5 (one-step modes), TOUT is ignored !!  after the first call (i.e., the first call with !!  TOUT .NE. T).  Otherwise, TOUT is required on every call. !! !!  If ITASK = 1, 3, or 4, the values of TOUT need not be !!  monotone, but a value of TOUT which backs up is limited !!  to the current internal T interval, whose endpoints are !!  TCUR - HU and TCUR.  (See \"Optional Outputs\" below for !!  TCUR and HU.) !! !! !!  ITOL !! !!  : indicator for the type of error control.  See !!  description below under ATOL.  Used only for input. !! !!  RTOL !! !!  : relative error tolerance parameter, either a scalar or !!  an array of length NEQ.  See description below under !!  ATOL.  Input only. !! !!  ATOL !! !!  : absolute error tolerance parameter, either a scalar or !!  an array of length NEQ.  Input only. !! !!  The input parameters ITOL, RTOL, and ATOL determine the !!  error control performed by the solver.  The solver will !!  control the vector e = (e(i)) of estimated local errors !!  in Y, according to an inequality of the form !! !!         rms-norm of ( e(i)/EWT(i) ) <= 1, !! !!  where !! !!         EWT(i) = RTOL(i)\\*ABS(Y(i)) + ATOL(i), !! !!  and the rms-norm (root-mean-square norm) here is !! !!         rms-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ). !! !!  Here EWT = (EWT(i)) is a vector of weights which must !!  always be positive, and the values of RTOL and ATOL !!  should all be nonnegative.  The following table gives the !!  types (scalar/array) of RTOL and ATOL, and the !!  corresponding form of EWT(i). !! !!   ITOL  | RTOL   |  ATOL   |  EWT(i) !!   ----  | ------ |  ------ |  ----------------------------- !!   1     | scalar |  scalar |  RTOL\\*ABS(Y(i)) + ATOL !!   2     | scalar |  array  |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3     | array  |  scalar |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4     | array  |  array  |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !!  When either of these parameters is a scalar, it need not !!  be dimensioned in the user's calling program. !! !!  If none of the above choices (with ITOL, RTOL, and ATOL !!  fixed throughout the problem) is suitable, more general !!  error controls can be obtained by substituting !!  user-supplied routines for the setting of EWT and/or for !!  the norm calculation.  See Part 4 below. !! !!  If global errors are to be estimated by making a repeated !!  run on the same problem with smaller tolerances, then all !!  components of RTOL and ATOL (i.e., of EWT) should be !!  scaled down uniformly. !! !!  ITASK !! !!  : index specifying the task to be performed.  Input !!  only.  ITASK has the following values and meanings: !! !!   value  | description !!   ------ | ----------- !!        1 | Normal computation of output values of y(t) at !!          | t = TOUT (by overshooting and interpolating). !!        2 | Take one step only and return. !!        3 | Stop at the first internal mesh point at or beyond !!          | t = TOUT and return. !!        4 | Normal computation of output values of y(t) at !!          | t = TOUT but without overshooting t = TCRIT.  TCRIT !!          | must be input as RWORK(1).  TCRIT may be equal to or !!          | beyond TOUT, but not behind it in the direction of !!          | integration.  This option is useful if the problem !!          | has a singularity at or beyond t = TCRIT. !!        5 | Take one step, without passing TCRIT, and return. !!          | TCRIT must be input as RWORK(1). !! !!  Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !!  (within roundoff), it will return T = TCRIT (exactly) to !!  indicate this (unless ITASK = 4 and TOUT comes before !!  TCRIT, in which case answers at T = TOUT are returned !!  first). !! !!  ISTATE !! !!  : index used for input and output to specify the state !!  of the calculation. !! !!  On input, the values of ISTATE are as follows: !! !!   value  | description !!   ------ | ----------- !!        1 | This is the first call for the problem !!          | (initializations will be done).  See \"Note\" below. !!        2 | This is not the first call, and the calculation is to !!          | continue normally, with no change in any input !!          | parameters except possibly TOUT and ITASK.  (If ITOL, !!          | RTOL, and/or ATOL are changed between calls with !!          | ISTATE = 2, the new values will be used but not !!          | tested for legality.) !!        3 | This is not the first call, and the calculation is to !!          | continue normally, but with a change in input !!          | parameters other than TOUT and ITASK.  Changes are !!          | allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, !!          | ML, MU, and any of the optional inputs except H0. !!          | (See IWORK description for ML and MU.) !! !!  Note:  A preliminary call with TOUT = T is not counted as !!  a first call here, as no initialization or checking of !!  input is done.  (Such a call is sometimes useful for the !!  purpose of outputting the initial conditions.)  Thus the !!  first call for which TOUT .NE. T requires ISTATE = 1 on !!  input. !! !!  On output, ISTATE has the following values and meanings: !! !!   value  | description !!   ------ | ----------- !!        1 | Nothing was done, as TOUT was equal to T with !!          | ISTATE = 1 on input. !!        2 | The integration was performed successfully. !!       -1 | An excessive amount of work (more than MXSTEP steps) !!          | was done on this call, before completing the !!          | requested task, but the integration was otherwise !!          | successful as far as T. (MXSTEP is an optional input !!          | and is normally 500.)  To continue, the user may !!          | simply reset ISTATE to a value >1 and call again (the !!          | excess work step counter will be reset to 0).  In !!          | addition, the user may increase MXSTEP to avoid this !!          | error return; see \"Optional Inputs\" below. !!       -2 | Too much accuracy was requested for the precision of !!          | the machine being used.  This was detected before !!          | completing the requested task, but the integration !!          | was successful as far as T. To continue, the !!          | tolerance parameters must be reset, and ISTATE must !!          | be set to 3. The optional output TOLSF may be used !!          | for this purpose.  (Note:  If this condition is !!          | detected before taking any steps, then an illegal !!          | input return (ISTATE = -3) occurs instead.) !!       -3 | Illegal input was detected, before taking any !!          | integration steps.  See written message for details. !!          | (Note:  If the solver detects an infinite loop of !!          | calls to the solver with illegal input, it will cause !!          | the run to stop.) !!       -4 | There were repeated error-test failures on one !!          | attempted step, before completing the requested task, !!          | but the integration was successful as far as T.  The !!          | problem may have a singularity, or the input may be !!          | inappropriate. !!       -5 | There were repeated convergence-test failures on one !!          | attempted step, before completing the requested task, !!          | but the integration was successful as far as T. This !!          | may be caused by an inaccurate Jacobian matrix, if !!          | one is being used. !!       -6 | EWT(i) became zero for some i during the integration. !!          | Pure relative error control (ATOL(i)=0.0) was !!          | requested on a variable which has now vanished.  The !!          | integration was successful as far as T. !! !!  Note:  Since the normal output value of ISTATE is 2, it !!  does not need to be reset for normal continuation.  Also, !!  since a negative input value of ISTATE will be regarded !!  as illegal, a negative output value requires the user to !!  change it, and possibly other inputs, before calling the !!  solver again. !! !!  IOPT !! !!  : integer flag to specify whether any optional inputs !!  are being used on this call.  Input only.  The optional !!  inputs are listed under a separate heading below. !!              0   No optional inputs are being used.  Default values !!                  will be used in all cases. !!              1   One or more optional inputs are being used. !! !!  RWORK !! !!  : real working array (double precision).  The length of !!  RWORK must be at least !!```text !!        20 + NYH*(MAXORD + 1) + 3*NEQ + LWM !!``` !!  where !!```text !!          NYH = the initial value of NEQ, !!       MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!                smaller value is given as an optional input), !!          LWM = 0           if MITER = 0, !!          LWM = NEQ**2 + 2  if MITER = 1 or 2, !!          LWM = NEQ + 2     if MITER = 3, and !!          LWM = (2*ML + MU + 1)*NEQ + 2 !!                                   if MITER = 4 or 5. !!          (See the MF description below for METH and MITER.) !!``` !! !!  Thus if MAXORD has its default value and NEQ is constant, !!  this length is: !!```text !!              20 + 16*NEQ                    for MF = 10, !!              22 + 16*NEQ + NEQ**2           for MF = 11 or 12, !!              22 + 17*NEQ                    for MF = 13, !!              22 + 17*NEQ + (2*ML + MU)*NEQ  for MF = 14 or 15, !!              20 +  9*NEQ                    for MF = 20, !!              22 +  9*NEQ + NEQ**2           for MF = 21 or 22, !!              22 + 10*NEQ                    for MF = 23, !!              22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. !!``` !! !!  The first 20 words of RWORK are reserved for conditional !!  and optional inputs and optional outputs. !! !!  The following word in RWORK is a conditional input: !! !!  RWORK(1) = TCRIT, the critical value of t which the !!  solver is not to overshoot.  Required if ITASK !!  is 4 or 5, and ignored otherwise.  See ITASK. !! !!  LRW !! !!  : length of the array RWORK, as declared by the user. !!  (This will be checked by the solver.) !! !!  IWORK !! !!  : integer work array.  Its length must be at least !!  20       if MITER = 0 or 3 (MF = 10, 13, 20, 23), or !!  20 + NEQ otherwise (MF = 11, 12, 14, 15, 21, 22, 24, 25). !!  (See the MF description below for MITER.)  The first few !!  words of IWORK are used for conditional and optional !!  inputs and optional outputs. !! !!  The following two words in IWORK are conditional inputs: !!          IWORK(1) = ML   These are the lower and upper half- !!          IWORK(2) = MU   bandwidths, respectively, of the banded !!                          Jacobian, excluding the main diagonal. !! !!  The band is defined by the matrix locations !!  (i,j) with i - ML <= j <= i + MU. ML and MU !!  must satisfy 0 <= ML,MU <= NEQ - 1. These are !!  required if MITER is 4 or 5, and ignored !!  otherwise.  ML and MU may in fact be the band !!  parameters for a matrix to which df/dy is only !!  approximately equal. !! !!  LIW !! !!  : The length of the array IWORK, as declared by the user. !!  (This will be checked by the solver.) !! !!  Note:  The work arrays must not be altered between calls to DLSODE !!  for the same problem, except possibly for the conditional and !!  optional inputs, and except for the last 3\\*NEQ words of RWORK. !!  The latter space is used for internal scratch space, and so is !!  available for use by the user outside DLSODE between calls, if !!  desired (but not for use by F or JAC). !! !!  JAC !! !!  : The name of the user-supplied routine (MITER = 1 or 4) to !!  compute the Jacobian matrix, df/dy, as a function of the !!  scalar t and the vector y.  (See the MF description below !!  for MITER.)  It is to have the form !!```fortran !!                 SUBROUTINE JAC (NEQ, T, Y, ML, MU, PD, NROWPD) !!                 DOUBLE PRECISION T, Y(*), PD(NROWPD,*) !!``` !!  where NEQ, T, Y, ML, MU, and NROWPD are input and the !!  array PD is to be loaded with partial derivatives !!  (elements of the Jacobian matrix) on output.  PD must be !!  given a first dimension of NROWPD.  T and Y have the same !!  meaning as in subroutine F. !! !!  In the full matrix case (MITER = 1), ML and MU are !!  ignored, and the Jacobian is to be loaded into PD in !!  columnwise manner, with df(i)/dy(j) loaded into PD(i,j). !! !!  In the band matrix case (MITER = 4), the elements within !!  the band are to be loaded into PD in columnwise manner, !!  with diagonal lines of df/dy loaded into the rows of PD. !!  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).  ML !!  and MU are the half-bandwidth parameters (see IWORK). !!  The locations in PD in the two triangular areas which !!  correspond to nonexistent matrix elements can be ignored !!  or loaded arbitrarily, as they are overwritten by DLSODE. !! !!  JAC need not provide df/dy exactly. A crude approximation !!  (possibly with a smaller bandwidth) will do. !! !!  In either case, PD is preset to zero by the solver, so !!  that only the nonzero elements need be loaded by JAC. !!  Each call to JAC is preceded by a call to F with the same !!  arguments NEQ, T, and Y. Thus to gain some efficiency, !!  intermediate quantities shared by both calculations may !!  be saved in a user COMMON block by F and not recomputed !!  by JAC, if desired.  Also, JAC may alter the Y array, if !!  desired.  JAC must be declared EXTERNAL in the calling !!  program. !! !!  Subroutine JAC may access user-defined quantities in !!  NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !!  (dimensioned in JAC) and/or Y has length exceeding !!  NEQ(1).  See the descriptions of NEQ and Y above. !! !!  MF !! !!  : The method flag.  Used only for input.  The legal values !!  of MF are 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, !!  and 25.  MF has decimal digits METH and MITER: !!```text !!         MF = 10*METH + MITER . !!``` !!  METH indicates the basic linear multistep method: !! !!   value  | description !!   ------ | ----------- !!        1 | Implicit Adams method. !!        2 | Method based on backward differentiation formulas !!          | (BDF's). !! !!  MITER indicates the corrector iteration method: !! !!   value  | description !!   ------ | ----------- !!        0 | Functional iteration (no Jacobian matrix is !!          | involved). !!        1 | Chord iteration with a user-supplied full (NEQ by !!          | NEQ) Jacobian. !!        2 | Chord iteration with an internally generated !!          | (difference quotient) full Jacobian (using NEQ !!          | extra calls to F per df/dy value). !!        3 | Chord iteration with an internally generated !!          | diagonal Jacobian approximation (using one extra call !!          | to F per df/dy evaluation). !!        4 | Chord iteration with a user-supplied banded Jacobian. !!        5 | Chord iteration with an internally generated banded !!          | Jacobian (using ML + MU + 1 extra calls to F per !!          | df/dy evaluation). !! !!  If MITER = 1 or 4, the user must supply a subroutine JAC !!  (the name is arbitrary) as described above under JAC. !!  For other values of MITER, a dummy argument can be used. !! !!#### Optional Inputs !! !!  The following is a list of the optional inputs provided for in the !!  call sequence.  (See also Part 2.)  For each such input variable, !!  this table lists its name as used in this documentation, its !!  location in the call sequence, its meaning, and the default value. !!  The use of any of these inputs requires IOPT = 1, and in that case !!  all of these inputs are examined.  A value of zero for any of !!  these optional inputs will cause the default value to be used. !!  Thus to use a subset of the optional inputs, simply preload !!  locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, !!  and then set those of interest to nonzero values. !! !!   Name  | Location | Meaning and default value !!   ------| ---------| ----------------------------------------------- !!   H0    | RWORK(5) | Step size to be attempted on the first step. !!         |          | The default value is determined by the solver. !!   HMAX  | RWORK(6) | Maximum absolute step size allowed.  The !!         |          | default value is infinite. !!   HMIN  | RWORK(7) | Minimum absolute step size allowed.  The !!         |          | default value is 0.  (This lower bound is not !!         |          | enforced on the final step before reaching !!         |          | TCRIT when ITASK = 4 or 5.) !!   MAXORD| IWORK(5) | Maximum order to be allowed.  The default value !!         |          | is 12 if METH = 1, and 5 if METH = 2. (See the !!         |          | MF description above for METH.)  If MAXORD !!         |          | exceeds the default value, it will be reduced !!         |          | to the default value.  If MAXORD is changed !!         |          | during the problem, it may cause the current !!         |          | order to be reduced. !!   MXSTEP| IWORK(6) | Maximum number of (internally defined) steps !!         |          | allowed during one call to the solver.  The !!         |          | default value is 500. !!   MXHNIL| IWORK(7) | Maximum number of messages printed (per !!         |          | problem) warning that T + H = T on a step !!         |          | (H = step size).  This must be positive to !!         |          | result in a nondefault value.  The default !!         |          | value is 10. !! !!#### Optional Outputs !! !! As optional additional output from DLSODE, the variables listed !! below are quantities related to the performance of DLSODE which !! are available to the user.  These are communicated by way of the !! work arrays, but also have internal mnemonic names as shown. !! Except where stated otherwise, all of these outputs are defined on !! any successful return from DLSODE, and on any return with ISTATE = !! -1, -2, -4, -5, or -6.  On an illegal input return (ISTATE = -3), !! they will be unchanged from their existing values (if any), except !! possibly for TOLSF, LENRW, and LENIW.  On any error return, !! outputs relevant to the error will be defined, as noted below. !! !!  Name  | Location  | Meaning !!  ----- | --------- | ------------------------------------------------ !!  HU    | RWORK(11) | Step size in t last used (successfully). !!  HCUR  | RWORK(12) | Step size to be attempted on the next step. !!  TCUR  | RWORK(13) | Current value of the independent variable which !!        |           | the solver has actually reached, i.e., the !!        |           | current internal mesh point in t. On output, !!        |           | TCUR will always be at least as far as the !!        |           | argument T, but may be farther (if interpolation !!        |           | was done). !!  TOLSF | RWORK(14) | Tolerance scale factor, greater than 1.0, !!        |           | computed when a request for too much accuracy !!        |           | was detected (ISTATE = -3 if detected at the !!        |           | start of the problem, ISTATE = -2 otherwise). !!        |           | If ITOL is left unaltered but RTOL and ATOL are !!        |           | uniformly scaled up by a factor of TOLSF for the !!        |           | next call, then the solver is deemed likely to !!        |           | succeed.  (The user may also ignore TOLSF and !!        |           | alter the tolerance parameters in any other way !!        |           | appropriate.) !!  NST   | IWORK(11) | Number of steps taken for the problem so far. !!  NFE   | IWORK(12) | Number of F evaluations for the problem so far. !!  NJE   | IWORK(13) | Number of Jacobian evaluations (and of matrix LU !!        |           | decompositions) for the problem so far. !!  NQU   | IWORK(14) | Method order last used (successfully). !!  NQCUR | IWORK(15) | Order to be attempted on the next step. !!  IMXER | IWORK(16) | Index of the component of largest magnitude in !!        |           | the weighted local error vector ( e(i)/EWT(i) ), !!        |           | on an error return with ISTATE = -4 or -5. !!  LENRW | IWORK(17) | Length of RWORK actually required.  This is !!        |           | defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !!  LENIW | IWORK(18) | Length of IWORK actually required.  This is !!        |           | defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !! !!  The following two arrays are segments of the RWORK array which may !!  also be of interest to the user as optional outputs.  For each !!  array, the table below gives its internal name, its base address !!  in RWORK, and its description. !! !!   Name| Base address| Description !!   ----| ------------| ---------------------------------------------- !!   YH  | 21          | The Nordsieck history array, of size NYH by !!       |             | (NQCUR + 1), where NYH is the initial value of !!       |             | NEQ.  For j = 0,1,...,NQCUR, column j + 1 of !!       |             | YH contains HCUR\\*\\*j/factorial(j) times the jth !!       |             | derivative of the interpolating polynomial !!       |             | currently representing the solution, evaluated !!       |             | at t = TCUR. !!   ACOR| LENRW-NEQ+1 | Array of size NEQ used for the accumulated !!       |             | corrections on each step, scaled on output to !!       |             | represent the estimated local error in Y on !!       |             | the last step.  This is the vector e in the !!       |             | description of the error control.  It is !!       |             | defined only on successful return from DLSODE. !! !!#### Part 2.  Other Callable Routines !! !!  The following are optional calls which the user may make to gain !!  additional capabilities in conjunction with DLSODE. !! !!   Form of call              | Function !!   ------------------------- | --------------------------------------- !!   CALL XSETUN(LUN)          | Set the logical unit number, LUN, for !!                             | output of messages from DLSODE, if the !!                             | default is not desired.  The default !!                             | value of LUN is 6. This call may be made !!                             | at any time and will take effect !!                             | immediately. !!   CALL XSETF(MFLAG)         | Set a flag to control the printing of !!                             | messages by DLSODE.  MFLAG = 0 means do !!                             | not print.  (Danger:  this risks losing !!                             | valuable information.)  MFLAG = 1 means !!                             | print (the default).  This call may be !!                             | made at any time and will take effect !!                             | immediately. !!   CALL DSRCOM(RSAV,ISAV,JOB)|  Saves and restores the contents of the !!                             | internal COMMON blocks used by DLSODE !!                             | (see Part 3 below).  RSAV must be a !!                             | real array of length 218 or more, and !!                             | ISAV must be an integer array of length !!                             | 37 or more.  JOB = 1 means save COMMON !!                             | into RSAV/ISAV.  JOB = 2 means restore !!                             | COMMON from same.  DSRCOM is useful if !!                             | one is interrupting a run and restarting !!                             | later, or alternating between two or !!                             | more problems solved with DLSODE. !!   CALL DINTDY(,,,,,)        | Provide derivatives of y, of various !!   (see below)               | orders, at a specified point t, if !!                             | desired.  It may be called only after a !!                             | successful return from DLSODE.  Detailed !!                             | instructions follow. !! !!#### Detailed instructions for using DINTDY !! !!  The form of the CALL is: !! !!        CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) !! !!  The input parameters are: !! !!   value    | description !!   -------- | -------------------------------------------------------- !!   T        | Value of independent variable where answers are !!            | desired (normally the same as the T last returned by !!            | DLSODE).  For valid results, T must lie between !!            | TCUR - HU and TCUR.  (See \"Optional Outputs\" above !!            | for TCUR and HU.) !!   K        | Integer order of the derivative desired.  K must !!            | satisfy 0 <= K <= NQCUR, where NQCUR is the current !!            | order (see \"Optional Outputs\").  The capability !!            | corresponding to K = 0, i.e., computing y(t), is !!            | already provided by DLSODE directly.  Since !!            | NQCUR >= 1, the first derivative dy/dt is always !!            | available with DINTDY. !!   RWORK(21)| The base address of the history array YH. !!   NYH      | Column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !!   value    | description !!   -------- | -------------------------------------------------------- !!   DKY      | Real array of length NEQ containing the computed value !!            | of the Kth derivative of y(t). !!   IFLAG    | Integer flag, returned as 0 if K and T were legal, !!            | -1 if K was illegal, and -2 if T was illegal. !!            | On an error return, a message is also written. !! !!#### Part 3.  Save and Restore Current State !! !!  If the solution of a given problem by DLSODE is to be interrupted !!  and then later continued, as when restarting an interrupted run or !!  alternating between two or more problems, the user should save, !!  following the return from the last DLSODE call prior to the !!  interruption, the contents of the call sequence variables and the !!  internal state values, and later restore these values before the !!  next DLSODE call for that problem.   In addition, if XSETUN and/or !!  XSETF was called for non-default handling of error messages, then !!  these calls must be repeated.  To save and restore the current state !!  use subroutine DSRCOM (see Part 2 above). !! !! !!#### Part 4.  Optionally Replaceable Solver Routines !! !!  Below are descriptions of two routines in the DLSODE package which !!  relate to the measurement of errors.  Either routine can be !!  replaced by a user-supplied version, if desired.  However, since !!  such a replacement may have a major impact on performance, it !!  should be done only when absolutely necessary, and only with great !!  caution.  (Note:  The means by which the package version of a !!  routine is superseded by the user's version may be system- !!  dependent.) !! !!#### DEWSET() !! !!  The following subroutine is called just before each internal !!  integration step, and sets the array of error weights, EWT, as !!  described under ITOL/RTOL/ATOL above: !! !!           SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !! !!  where NEQ, ITOL, RTOL, and ATOL are as in the DLSODE call !!  sequence, YCUR contains the current dependent variable vector, !!  and EWT is the array of weights set by DEWSET. !! !!  If the user supplies this subroutine, it must return in EWT(i) !!  (i = 1,...,NEQ) a positive quantity suitable for comparing errors !!  in Y(i) to.  The EWT array returned by DEWSET is passed to the !!  DVNORM routine (see below), and also used by DLSODE in the !!  computation of the optional output IMXER, the diagonal Jacobian !!  approximation, and the increments for difference quotient !!  Jacobians. !! !!  In the user-supplied version of DEWSET, it may be desirable to use !!  the current values of derivatives of y. Derivatives up to order NQ !!  are available from the history array YH, described above under !!  optional outputs.  In DEWSET, YH is identical to the YCUR array, !!  extended to NQ + 1 columns with a column length of NYH and scale !!  factors of H\\*\\*j/factorial(j).  On the first call for the problem, !!  given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !!  NYH is the initial value of NEQ.  The quantities NQ, H, and NST !!  can be obtained by including in SEWSET the statements: !! !!           DOUBLE PRECISION RLS !!           COMMON /DLS001/ RLS(218),ILS(37) !!           NQ = ILS(33) !!           NST = ILS(34) !!           H = RLS(212) !!  Thus, for example, the current value of dy/dt can be obtained as !!  YCUR(NYH+i)/H (i=1,...,NEQ) (and the division by H is unnecessary !!  when NST = 0). !! !!#### DVNORM() !! !!  DVNORM is a real function routine which computes the weighted !!  root-mean-square norm of a vector v: !!```text !!        d = DVNORM (n, v, w) !! !!     where: !!     n = the length of the vector, !!     v = real array of length n containing the vector, !!     w = real array of length n containing weights, !!     d = SQRT( (1/n) * sum(v(i)*w(i))**2 ). !!``` !!  DVNORM is called with n = NEQ and with w(i) = 1.0/EWT(i), where !!  EWT is as set by subroutine DEWSET. !! !!  If the user supplies this function, it should return a nonnegative !!  value of DVNORM suitable for use in the error control in DLSODE. !!  None of the arguments should be altered by DVNORM.  For example, a !!  user-supplied DVNORM routine might: !! !!   - Substitute a max-norm of (v(i)\\*w(i)) for the rms-norm, or !!   - Ignore some components of v in the norm, with the effect of !!     suppressing the error control on those components of Y. !! !!  --------------------------------------------------------------------- !!### Pedigree: !! !!  DLSODE is derived from the Livermore Solver for Ordinary !!  Differential Equations package ODEPACK, !! !!#### AUTHOR !!          Hindmarsh, Alan C., (LLNL) !!          Center for Applied Scientific Computing, L-561 !!          Lawrence Livermore National Laboratory !!          Livermore, CA 94551. !!  --------------------------------------------------------------------- ! ### BEGIN PROLOGUE  DLSODE ! ### CATEGORY  I1A ! ### TYPE      DOUBLE PRECISION (SLSODE-S, DLSODE-D) ! ### KEYWORDS  ORDINARY DIFFERENTIAL EQUATIONS, INITIAL VALUE PROBLEM, !              STIFF, NONSTIFF ! ### ROUTINES CALLED  DEWSET, DINTDY, DUMACH, DSTODE, DVNORM, XERRWD ! ### COMMON BLOCKS    DLS001 ! ### REVISION HISTORY  (YYYYMMDD) !  19791129  DATE WRITTEN !  19791213  Minor changes to declarations; DELP init. in STODE. !  19800118  Treat NEQ as array; integer declarations added throughout; !            minor changes to prologue. !  19800306  Corrected TESCO(1,NQP1) setting in CFODE. !  19800519  Corrected access of YH on forced order reduction; !            numerous corrections to prologues and other comments. !  19800617  In main driver, added loading of SQRT(UROUND) in RWORK; !            minor corrections to main prologue. !  19800923  Added zero initialization of HU and NQU. !  19801218  Revised XERRWD routine; minor corrections to main prologue. !  19810401  Minor changes to comments and an error message. !  19810814  Numerous revisions: replaced EWT by 1/EWT; used flags !            JCUR, ICF, IERPJ, IERSL between STODE and subordinates; !            added tuning parameters CCMAX, MAXCOR, MSBP, MXNCF; !            reorganized returns from STODE; reorganized type decls.; !            fixed message length in XERRWD; changed default LUNIT to 6; !            changed Common lengths; changed comments throughout. !  19870330  Major update by ACH: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODE; !            in STODE, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  19890426  Modified prologue to SLATEC/LDOC format.  (FNF) !  19890501  Many improvements to prologue.  (FNF) !  19890503  A few final corrections to prologue.  (FNF) !  19890504  Minor cosmetic changes.  (FNF) !  19890510  Corrected description of Y in Arguments section.  (FNF) !  19890517  Minor corrections to prologue.  (FNF) !  19920514  Updated with prologue edited 891025 by G. Shaw for manual. !  19920515  Converted source lines to upper case.  (FNF) !  19920603  Revised XERRWD calls using mixed upper-lower case.  (ACH) !  19920616  Revised prologue comment regarding CFT.  (ACH) !  19921116  Revised prologue comments regarding Common.  (ACH). !  19930326  Added comment about non-reentrancy.  (FNF) !  19930723  Changed D1MACH to DUMACH. (FNF) !  19930801  Removed ILLIN and NTREP from Common (affects driver logic); !            minor changes to prologue and internal comments; !            changed Hollerith strings to quoted strings; !            changed internal comments to mixed case; !            replaced XERRWD with new version using character type; !            changed dummy dimensions from 1 to *. (ACH) !  19930809  Changed to generic intrinsic names; changed names of !            subprograms and Common blocks to DLSODE etc. (ACH) !  19930929  Eliminated use of REAL intrinsic; other minor changes. (ACH) !  20010412  Removed all 'own' variables from Common block /DLS001/ !            (affects declarations in 6 routines). (ACH) !  20010509  Minor corrections to prologue. (ACH) !  20031105  Restored 'own' variables to Common block /DLS001/, to !            enable interrupt/restart feature. (ACH) !  20031112  Added SAVE statements for data-loaded constants. ! ! ### END PROLOGUE  DLSODE ! ! *Internal Notes: ! !  Other Routines in the DLSODE Package. ! !  In addition to Subroutine DLSODE, the DLSODE package includes the !  following subroutines and function routines: !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DSTODE   is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DPREPJ   computes and preprocesses the Jacobian matrix J = df/dy !            and the Newton iteration matrix P = I - h*l0*J. !   DSOLSY   manages solution of linear system in chord iteration. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted R.M.S. norm of a vector. !   DSRCOM   is a user-callable routine to save and restore !            the contents of the internal Common block. !   DGEFA and DGESL   are routines from LINPACK for solving full !            systems of linear algebraic equations. !   DGBFA and DGBSL   are routines from LINPACK for solving banded !            linear systems. !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, IXSAV handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note: DVNORM, DUMACH, and IXSAV are function routines. !  All the others are subroutines. ! ! **End ! subroutine dlsode ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Mf ) ! real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y external f external jac real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , kgo , leniw , lenrw , lenwm , lf0 , ml , mu logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( 2 ), save :: mord character ( 80 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! !   Declare all other variables. ! ----------------------------------------------------------------------- !  The following internal Common block contains !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODE, DINTDY, DSTODE, !  DPREPJ, and DSOLSY. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .GT. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- ! ! ### FIRST EXECUTABLE STATEMENT  DLSODE if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODE-  ISTATE (=I1) illegal ' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1100 msg = 'DLSODE-  Run aborted.. apparent infinite loop     ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODE-  ITASK (=I1) illegal  ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODE-  ISTATE .GT. 1 but DLSODE not initialized ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODE-  NEQ (=I1) .LT. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODE-  ISTATE = 3 and NEQ increased (I1 to I2)  ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODE-  ITOL (=I1) illegal   ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODE-  IOPT (=I1) illegal   ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 700 if ( dls1 % miter < 0 . or . dls1 % miter > 5 ) goto 700 if ( dls1 % miter > 3 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODE-  ML (=I1) illegal.. .LT.0 or .GE.NEQ (=I2)' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODE-  MU (=I1) illegal.. .LT.0 or .GE.NEQ (=I2)' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 endif endif !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODE-  MAXORD (=I1) .LT. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODE-  MXSTEP (=I1) .LT. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODE-  MXHNIL (=I1) .LT. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODE-  TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1100 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODE-  HMAX (=R1) .LT. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1100 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODE-  HMIN (=R1) .LT. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1100 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  YH, WM, EWT, SAVF, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate == 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh if ( dls1 % miter == 0 ) lenwm = 0 if ( dls1 % miter == 1 . or . dls1 % miter == 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( dls1 % miter == 3 ) lenwm = dls1 % n + 2 if ( dls1 % miter >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n if ( dls1 % miter == 0 . or . dls1 % miter == 3 ) leniw = 20 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODE-  RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( leniw > Liw ) then msg = 'DLSODE-  IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1100 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODE-  RTOL(I1) is R1 .LT. 0.0        ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1100 elseif ( atoli < 0.0D0 ) then msg = 'DLSODE-  ATOL(I1) is R1 .LT. 0.0        ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1100 endif enddo if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 900 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 if ( dls1 % miter > 0 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODE-  EWT(I1) is R1 .LE. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1100 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(I)) !  if this is positive, or MAX(ATOL(I)/ABS(Y(I))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * SUM ( f(i)/ywt(i) )**2  ) !                                        1 !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          f(i)   = i-th component of initial value of f, !          ywt(i) = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODE-  TOUT (=R1) too close to T(=R2) to start integration' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1100 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODE. ------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into SAVF. --------- do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif !  Reload WM(1) = RWORK(LWM), since LWM may have changed. --------------- if ( dls1 % miter > 0 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODE-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1100 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 900 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODE. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN.  The optional outputs !  are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODE-  At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(I) .LE. 0.0 for some I (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODE-  At T (=R1), EWT(I1) has become R2 .LE. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 600 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODE-  Warning..internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      (H = step size). Solver will continue anyway' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODE-  Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      It will not be issued again for this problem' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !   CALL DSTODE(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,f,JAC,DPREPJ,DSOLSY) ! ----------------------------------------------------------------------- call dstode ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), & & Iwork ( dls1 % liwm ), f , jac , dprepj , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODE-  At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODE-  At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODE-  At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1100 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODE-  At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  see TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 600 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODE. !  If ITASK .NE. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 600 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return 700 continue msg = 'DLSODE-  MF (=I1) illegal     ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 800 continue msg = 'DLSODE-  ITASK = 4 OR 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1100 900 continue msg = 'DLSODE-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1100 1000 continue msg = 'DLSODE-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1100 continue Istate = - 3 return 99999 continue end subroutine dlsode","tags":"","loc":"sourcefile/dlsode.inc.html"},{"title":"dlsodes.inc – odepack","text":"Contents Subroutines dlsodes Source Code dlsodes.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! DLSODES solves the initial value problem for stiff or nonstiff !! systems of first order ODEs, !!```text !!     dy/dt = f(t,y),  or, in component form, !!     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). !!``` !! DLSODES is a variant of the DLSODE package, and is intended for !! problems in which the Jacobian matrix df/dy has an arbitrary !! sparse structure (when the problem is stiff). !! !!----------------------------------------------------------------------- !! Summary of Usage. !! !! Communication between the user and the DLSODES package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including optional communication, nonstandard options, !! and instructions for special situations.  See also the example !! problem (with program and output) following this summary. !! !! A. First provide a subroutine of the form: !!```fortran !!               SUBROUTINE F (NEQ, T, Y, YDOT) !!               DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! which supplies the vector function f by loading YDOT(i) with f(i). !! !! B. Next determine (or guess) whether or not the problem is stiff. !! Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue !! whose real part is negative and large in magnitude, compared to the !! reciprocal of the t span of interest.  If the problem is nonstiff, !! use a method flag MF = 10.  If it is stiff, there are two standard !! choices for the method flag, MF = 121 and MF = 222.  In both cases, !! DLSODES requires the Jacobian matrix in some form, and it treats this !! matrix in general sparse form, with sparsity structure determined !! internally.  (For options where the user supplies the sparsity !! structure, see the full description of MF below.) !! !! C. If the problem is stiff, you are encouraged to supply the Jacobian !! directly (MF = 121), but if this is not feasible, DLSODES will !! compute it internally by difference quotients (MF = 222). !! If you are supplying the Jacobian, provide a subroutine of the form: !!```fortran !!      SUBROUTINE JAC (NEQ, T, Y, J, IAN, JAN, PDJ) !!      DOUBLE PRECISION T, Y(*), IAN(*), JAN(*), PDJ(*) !!``` !! Here NEQ, T, Y, and J are input arguments, and the JAC routine is to !! load the array PDJ (of length NEQ) with the J-th column of df/dy. !! I.e., load PDJ(i) with df(i)/dy(J) for all relevant values of i. !! The arguments IAN and JAN should be ignored for normal situations. !! DLSODES will call the JAC routine with J = 1,2,...,NEQ. !! Only nonzero elements need be loaded.  Usually, a crude approximation !! to df/dy, possibly with fewer nonzero elements, will suffice. !! !! D. Write a main program which calls Subroutine DLSODES once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages by !! DLSODES.  On the first call to DLSODES, supply arguments as follows: !! !! F !! !! : name of subroutine for right-hand side vector f. !! This name must be declared External in calling program. !! !! NEQ !! !! : number of first order ODEs. !! !! Y !! !! : array of initial values, of length NEQ. !! !! T !! !! : the initial value of the independent variable t. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (scalar or array). !! The estimated local error in Y(i) will be controlled so as !! to be roughly less (in magnitude) than !!```text !!       EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! Thus the local error test passes if, in each component, !! either the absolute error is less than ATOL (or ATOL(i)), !! or the relative error is less than RTOL. !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !! control.  Caution: actual (global) errors may exceed these !! local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of Y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!     20 + 16*NEQ            for MF = 10, !!     20 + (2 + 1./LENRAT)*NNZ + (11 + 9./LENRAT)*NEQ !!                            for MF = 121 or 222, !!``` !!  where: !! !!   argument | description !!   -------- | ---------------------------------------------------- !!    NNZ     | the number of nonzero elements in the sparse !!            | Jacobian (if this is unknown, use an estimate), and !!    LENRAT  | the real to integer wordlength ratio (usually 1 in !!            | single precision and 2 in double precision). !!            | !! !!  In any case, the required size of RWORK cannot generally !!  be predicted in advance if MF = 121 or 222, and the value !!  above is a rough estimate of a crude lower bound.  Some !!  experimentation with this size may be necessary. !!  (When known, the correct required length is an optional !!  output, available in IWORK(17).) !! !! LRW !! !! : declared length of RWORK (in user dimension). !! !! IWORK !! !! : integer work array of length at least 30. !! !! LIW !! !! : declared length of IWORK (in user dimension). !! !! JAC !! !! : name of subroutine for Jacobian matrix (MF = 121). !! If used, this name must be declared External in calling !! program.  If not used, pass a dummy name. !! !! MF !! !! : method flag.  Standard values are: !! !!       value  | description !!       ------ | ------------------------------------------------------- !!          10  | for nonstiff (Adams) method, no Jacobian used !!          121 | for stiff (BDF) method, user-supplied sparse Jacobian !!          222 | for stiff method, internally generated sparse Jacobian !! !! Note that the main program must declare arrays Y, RWORK, IWORK, !! and possibly ATOL. !! !! E. The output from the first call (or any call) is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable (normally TOUT). !! !! ISTATE !! !! : the meaning of ISTATE values are as follows: !! !!   value  | description !!   ------ | ------------------------------------------------------- !!        2 | if DLSODES was successful, negative otherwise. !!       -1 | means excess work done on this call (perhaps wrong MF). !!       -2 | means excess accuracy requested (tolerances too small). !!       -3 | means illegal input detected (see printed message). !!       -4 | means repeated error test failures (check all inputs). !!       -5 | means repeated convergence failures (perhaps bad Jacobian !!          | supplied or wrong choice of MF or tolerances). !!       -6 | means error weight became zero during problem. (Solution !!          | component i vanished, and ATOL or ATOL(i) = 0.) !!       -7 | means a fatal error return flag came from sparse solver !!          | CDRV by way of DPRJS or DSOLSS.  Should never happen. !! !! A return with ISTATE = -1, -4, or -5 may result from using !! an inappropriate sparsity structure, one that is quite !! different from the initial structure.  Consider calling !! DLSODES again with ISTATE = 3 to force the structure to be !! reevaluated.  See the full description of ISTATE below. !! !! F. To continue the integration after a successful return, simply !! reset TOUT and call DLSODES again.  No other parameters need be reset. !! !!----------------------------------------------------------------------- !! Example Problem. !! !! The following is a simple example problem, with the coding !! needed for its solution by DLSODES.  The problem is from chemical !! kinetics, and consists of the following 12 rate equations: !!```text !!    dy1/dt  = -rk1*y1 !!    dy2/dt  = rk1*y1 + rk11*rk14*y4 + rk19*rk14*y5 !!                - rk3*y2*y3 - rk15*y2*y12 - rk2*y2 !!    dy3/dt  = rk2*y2 - rk5*y3 - rk3*y2*y3 - rk7*y10*y3 !!                + rk11*rk14*y4 + rk12*rk14*y6 !!    dy4/dt  = rk3*y2*y3 - rk11*rk14*y4 - rk4*y4 !!    dy5/dt  = rk15*y2*y12 - rk19*rk14*y5 - rk16*y5 !!    dy6/dt  = rk7*y10*y3 - rk12*rk14*y6 - rk8*y6 !!    dy7/dt  = rk17*y10*y12 - rk20*rk14*y7 - rk18*y7 !!    dy8/dt  = rk9*y10 - rk13*rk14*y8 - rk10*y8 !!    dy9/dt  = rk4*y4 + rk16*y5 + rk8*y6 + rk18*y7 !!    dy10/dt = rk5*y3 + rk12*rk14*y6 + rk20*rk14*y7 !!                + rk13*rk14*y8 - rk7*y10*y3 - rk17*y10*y12 !!                - rk6*y10 - rk9*y10 !!    dy11/dt = rk10*y8 !!    dy12/dt = rk6*y10 + rk19*rk14*y5 + rk20*rk14*y7 !!                - rk15*y2*y12 - rk17*y10*y12 !! !! with rk1 = rk5 = 0.1,  rk4 = rk8 = rk16 = rk18 = 2.5, !!      rk10 = 5.0,  rk2 = rk6 = 10.0,  rk14 = 30.0, !!      rk3 = rk7 = rk9 = rk11 = rk12 = rk13 = rk19 = rk20 = 50.0, !!      rk15 = rk17 = 100.0. !!``` !! !! The t interval is from 0 to 1000, and the initial conditions !! are y1 = 1, y2 = y3 = ... = y12 = 0.  The problem is stiff. !! !! The following coding solves this problem with DLSODES, using MF = 121 !! and printing results at t = .1, 1., 10., 100., 1000.  It uses !! ITOL = 1 and mixed relative/absolute tolerance controls. !! During the run and at the end, statistical quantities of interest !! are printed (see optional outputs in the full description below). !! !!```fortran !!program dlsodes_ex !!use m_odepack !!implicit none !!external fex !!external jex !! !!integer,parameter  ::  dp=kind(0.0d0) !!real(kind=dp)      ::  atol,rtol,t,tout !!integer            ::  i,iopt,iout,istate,itask,itol,leniw,lenrw,  & !!                       & mf,neq,nfe,nje,nlu,nnz,nnzlu,nst !!integer,dimension(30)         ::  iwork !!integer,save                  ::  liw,lrw !!real(kind=dp),dimension(500)  ::  rwork !!real(kind=dp),dimension(12)   ::  y !! !!data lrw/500/,liw/30/ !! !!   neq = 12 !!   do i = 1,neq !!      y(i) = 0.0D0 !!   enddo !!   y(1) = 1.0D0 !!   t = 0.0D0 !!   tout = 0.1D0 !!   itol = 1 !!   rtol = 1.0D-4 !!   atol = 1.0D-6 !!   itask = 1 !!   istate = 1 !!   iopt = 0 !!   mf = 121 !!   do iout = 1,5 !!      call dlsodes(fex,[neq],y,t,tout,itol,[rtol],[atol],itask,istate,iopt,& !!                 & rwork,lrw,iwork,liw,jex,mf) !!      write (6,99010) t,iwork(11),rwork(11),(y(i),i=1,neq) !!   99010 format (//' At t =',d11.3,4x,' No. steps =',i5,4x,' Last step =', & !!               & d11.3/'  Y array =  ',4D14.5/13x,4D14.5/13x,4D14.5) !!      if ( istate<0 ) then !!         write (6,99020) istate !!   99020 format (///' Error halt.. ISTATE =',i3) !!         stop 1 !!      else !!         tout = tout*10.0D0 !!      endif !!   enddo !!   lenrw = iwork(17) !!   leniw = iwork(18) !!   nst = iwork(11) !!   nfe = iwork(12) !!   nje = iwork(13) !!   nlu = iwork(21) !!   nnz = iwork(19) !!   nnzlu = iwork(25) + iwork(26) + neq !!   write (6,99030) lenrw,leniw,nst,nfe,nje,nlu,nnz,nnzlu !!   99030 format (//' Required RWORK size =',i4,'   IWORK size =',          & !!                &i4/' No. steps =',i4,'   No. f-s =',i4,'   No. J-s =',i4, & !!                &'   No. LU-s =',i4/' No. of nonzeros in J =',i5,          & !!                &'   No. of nonzeros in LU =',i5) !! !!end program dlsodes_ex !! !!subroutine fex(Neq,T,Y,Ydot) !!implicit none !! !!integer,parameter :: dp=kind(0.0d0) !!integer                                  ::  Neq !!real(kind=dp)                            ::  T !!real(kind=dp),intent(in),dimension(12)   ::  Y !!real(kind=dp),intent(out),dimension(12)  ::  Ydot !! !!real(kind=dp),save :: rk1,rk10,rk11,rk12,rk13,rk14,rk15, & !!                     & rk16,rk17,rk2,rk3,rk4,rk5,rk6,rk7 ,& !!                     & rk8,rk9 !!real,save          :: rk18,rk19,rk20 !! !!data rk1/0.1D0/,rk2/10.0D0/,rk3/50.0D0/,rk4/2.5D0/,rk5/0.1D0/,& !!   & rk6/10.0D0/,rk7/50.0D0/,rk8/2.5D0/,rk9/50.0D0/,            & !!   & rk10/5.0D0/,rk11/50.0D0/,rk12/50.0D0/,rk13/50.0D0/,        & !!   & rk14/30.0D0/,rk15/100.0D0/,rk16/2.5D0/,rk17/100.0D0/,      & !!   & rk18/2.5D0/,rk19/50.0D0/,rk20/50.0D0/ !!   Ydot(1) = -rk1*Y(1) !!   Ydot(2) = rk1*Y(1) + rk11*rk14*Y(4) + rk19*rk14*Y(5) - rk3*Y(2)*Y(3)    & !!           & - rk15*Y(2)*Y(12) - rk2*Y(2) !!   Ydot(3) = rk2*Y(2) - rk5*Y(3) - rk3*Y(2)*Y(3) - rk7*Y(10)*Y(3)          & !!           & + rk11*rk14*Y(4) + rk12*rk14*Y(6) !!   Ydot(4) = rk3*Y(2)*Y(3) - rk11*rk14*Y(4) - rk4*Y(4) !!   Ydot(5) = rk15*Y(2)*Y(12) - rk19*rk14*Y(5) - rk16*Y(5) !!   Ydot(6) = rk7*Y(10)*Y(3) - rk12*rk14*Y(6) - rk8*Y(6) !!   Ydot(7) = rk17*Y(10)*Y(12) - rk20*rk14*Y(7) - rk18*Y(7) !!   Ydot(8) = rk9*Y(10) - rk13*rk14*Y(8) - rk10*Y(8) !!   Ydot(9) = rk4*Y(4) + rk16*Y(5) + rk8*Y(6) + rk18*Y(7) !!   Ydot(10) = rk5*Y(3) + rk12*rk14*Y(6) + rk20*rk14*Y(7) + rk13*rk14*Y(8)  & !!            & - rk7*Y(10)*Y(3) - rk17*Y(10)*Y(12) - rk6*Y(10) - rk9*Y(10) !!   Ydot(11) = rk10*Y(8) !!   Ydot(12) = rk6*Y(10) + rk19*rk14*Y(5) + rk20*rk14*Y(7) - rk15*Y(2)*Y(12)& !!            & - rk17*Y(10)*Y(12) !!end subroutine fex !! !!subroutine jex(Neq,T,Y,J,Ia,Ja,Pdj) !!implicit none !!! !!integer,parameter                        ::  dp=kind(0.0d0) !!integer                                  ::  Neq !!real(kind=dp)                            ::  T !!real(kind=dp),intent(in),dimension(12)   ::  Y !!integer,intent(in)                       ::  J !!integer,dimension(*)                     ::  Ia !!integer,dimension(*)                     ::  Ja !!real(kind=dp),intent(out),dimension(12)  ::  Pdj !!! !!real(kind=dp),save :: rk1,rk10,rk11,rk12,rk13,rk14,rk15, & !!                     & rk16,rk17,rk2,rk3,rk4,rk5,rk6,rk7 ,& !!                     & rk8,rk9 !!real,save :: rk18,rk19,rk20 !!! !!data rk1/0.1D0/,rk2/10.0D0/,rk3/50.0D0/,rk4/2.5D0/,rk5/0.1D0/,& !!   & rk6/10.0D0/,rk7/50.0D0/,rk8/2.5D0/,rk9/50.0D0/,            & !!   & rk10/5.0D0/,rk11/50.0D0/,rk12/50.0D0/,rk13/50.0D0/,        & !!   & rk14/30.0D0/,rk15/100.0D0/,rk16/2.5D0/,rk17/100.0D0/,      & !!   & rk18/2.5D0/,rk19/50.0D0/,rk20/50.0D0/ !!   select case (J) !!   case (2) !!      Pdj(2) = -rk3*Y(3) - rk15*Y(12) - rk2 !!      Pdj(3) = rk2 - rk3*Y(3) !!      Pdj(4) = rk3*Y(3) !!      Pdj(5) = rk15*Y(12) !!      Pdj(12) = -rk15*Y(12) !!   case (3) !!      Pdj(2) = -rk3*Y(2) !!      Pdj(3) = -rk5 - rk3*Y(2) - rk7*Y(10) !!      Pdj(4) = rk3*Y(2) !!      Pdj(6) = rk7*Y(10) !!      Pdj(10) = rk5 - rk7*Y(10) !!   case (4) !!      Pdj(2) = rk11*rk14 !!      Pdj(3) = rk11*rk14 !!      Pdj(4) = -rk11*rk14 - rk4 !!      Pdj(9) = rk4 !!   case (5) !!      Pdj(2) = rk19*rk14 !!      Pdj(5) = -rk19*rk14 - rk16 !!      Pdj(9) = rk16 !!      Pdj(12) = rk19*rk14 !!   case (6) !!      Pdj(3) = rk12*rk14 !!      Pdj(6) = -rk12*rk14 - rk8 !!      Pdj(9) = rk8 !!      Pdj(10) = rk12*rk14 !!   case (7) !!      Pdj(7) = -rk20*rk14 - rk18 !!      Pdj(9) = rk18 !!      Pdj(10) = rk20*rk14 !!      Pdj(12) = rk20*rk14 !!   case (8) !!      Pdj(8) = -rk13*rk14 - rk10 !!      Pdj(10) = rk13*rk14 !!      Pdj(11) = rk10 !!   case (9) !!   case (10) !!      Pdj(3) = -rk7*Y(3) !!      Pdj(6) = rk7*Y(3) !!      Pdj(7) = rk17*Y(12) !!      Pdj(8) = rk9 !!      Pdj(10) = -rk7*Y(3) - rk17*Y(12) - rk6 - rk9 !!      Pdj(12) = rk6 - rk17*Y(12) !!   case (11) !!   case (12) !!      Pdj(2) = -rk15*Y(2) !!      Pdj(5) = rk15*Y(2) !!      Pdj(7) = rk17*Y(10) !!      Pdj(10) = -rk17*Y(10) !!      Pdj(12) = -rk15*Y(2) - rk17*Y(10) !!   case default !!      Pdj(1) = -rk1 !!      Pdj(2) = rk1 !!   endselect !! !!end subroutine jex !!``` !! !! The output of this program (on a Cray-1 in single precision) !! is as follows: !!```text !! At t =  1.000e-01     No. steps =   12     Last step =  1.515e-02 !!  Y array =     9.90050e-01   6.28228e-03   3.65313e-03   7.51934e-07 !!                1.12167e-09   1.18458e-09   1.77291e-12   3.26476e-07 !!                5.46720e-08   9.99500e-06   4.48483e-08   2.76398e-06 !! !! !! At t =  1.000e+00     No. steps =   33     Last step =  7.880e-02 !!  Y array =     9.04837e-01   9.13105e-03   8.20622e-02   2.49177e-05 !!                1.85055e-06   1.96797e-06   1.46157e-07   2.39557e-05 !!                3.26306e-05   7.21621e-04   5.06433e-05   3.05010e-03 !! !! !! At t =  1.000e+01     No. steps =   48     Last step =  1.239e+00 !!  Y array =     3.67876e-01   3.68958e-03   3.65133e-01   4.48325e-05 !!                6.10798e-05   4.33148e-05   5.90211e-05   1.18449e-04 !!                3.15235e-03   3.56531e-03   4.15520e-03   2.48741e-01 !! !! !! At t =  1.000e+02     No. steps =   91     Last step =  3.764e+00 !!  Y array =     4.44981e-05   4.42666e-07   4.47273e-04  -3.53257e-11 !!                2.81577e-08  -9.67741e-11   2.77615e-07   1.45322e-07 !!                1.56230e-02   4.37394e-06   1.60104e-02   9.52246e-01 !! !! !! At t =  1.000e+03     No. steps =  111     Last step =  4.156e+02 !!  Y array =    -2.65492e-13   2.60539e-14  -8.59563e-12   6.29355e-14 !!               -1.78066e-13   5.71471e-13  -1.47561e-12   4.58078e-15 !!                1.56314e-02   1.37878e-13   1.60184e-02   9.52719e-01 !! !! !! Required RWORK size = 442   IWORK size =  30 !! No. steps = 111   No. f-s = 142   No. J-s =   2   No. LU-s =  20 !! No. of nonzeros in J =   44   No. of nonzeros in LU =   50 !!``` !!----------------------------------------------------------------------- !!### Full Description of User Interface to DLSODES. !! !! The user interface to DLSODES consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSODES, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSODES package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of two routines in the DLSODES package, either of !!      which the user may replace with his/her own version, if desired. !!      These relate to the measurement of errors. !! !!----------------------------------------------------------------------- !!#### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !!      F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF, !! and those used for both input and output are !!      Y, T, ISTATE. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSODES to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows. !! !! F !! !! : the name of the user-supplied subroutine defining the !! ODE system.  The system must be put in the first-order !! form dy/dt = f(t,y), where f is a vector-valued function !! of the scalar t and the vector y.  Subroutine F is to !! compute the function f.  It is to have the form !!```fortran !!        SUBROUTINE F (NEQ, T, Y, YDOT) !!        DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! where NEQ, T, and Y are input, and the array YDOT = f(t,y) !! is output.  Y and YDOT are arrays of length NEQ. !! Subroutine F should not alter y(1),...,y(NEQ). !! F must be declared External in the calling program. !! !! Subroutine F may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in F) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y below. !! !! If quantities computed in the F routine are needed !! externally to DLSODES, an extra call to F should be made !! for this purpose, for consistent and accurate results. !! If only the derivative dy/dt is needed, use DINTDY instead. !! !! NEQ !! !! : the size of the ODE system (number of first order !! ordinary differential equations).  Used only for input. !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in F and/or JAC. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! (The DLSODES package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to F and JAC.  Hence, if it is an array, locations !! NEQ(2),... may be used to store other integer data and pass !! it to F and/or JAC.  Subroutines F and/or JAC must include !! NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 1), and only for output on other calls. !! on the first call, Y must contain the vector of initial !! values.  On output, Y contains the computed solution vector, !! evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to !! F and JAC.  Hence its length may exceed NEQ, and locations !! Y(NEQ+1),... may be used to store other real data and !! pass it to F and/or JAC.  (The DLSODES package accesses only !! Y(1),...,Y(NEQ).) !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! on output, after each call, T is the value at which a !! computed solution Y is evaluated (usually the same as TOUT). !! On an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 1), TOUT may be equal !! to T for one call, then should .ne. T for the next call. !! For the initial T, an input value of TOUT .ne. T is used !! in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!```text !!                      RMS-norm of ( E(i)/EWT(i) )   .le.   1, !!          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), !!``` !! and the RMS-norm (root-mean-square norm) here is !! RMS-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ).  Here EWT = (EWT(i)) !! is a vector of weights which must always be positive, and !! the values of RTOL and ATOL should all be non-negative. !! The following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL  |    ATOL   |      EWT(i) !!  ---- |------- |---------- |------------------------------ !!   1   | scalar |   scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | scalar |   array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array  |   scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array  |   array   |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting !! user-supplied routines for the setting of EWT and/or for !! the norm calculation.  See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! Input only.  ITASK has the following values and meanings. !! !!  value | description !!  ----- | ------------------------------------------------------- !!     1  | means normal computation of output values of y(t) at !!        | t = TOUT (by overshooting and interpolating). !!     2  | means take one step only and return. !!     3  | means stop at the first internal mesh point at or !!        | beyond t = TOUT and return. !!     4  | means normal computation of output values of y(t) at !!        | t = TOUT but without overshooting t = TCRIT. !!        | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!        | or beyond TOUT, but not behind it in the direction of !!        | integration.  This option is useful if the problem !!        | has a singularity at or beyond t = TCRIT. !!     5  | means take one step, without passing TCRIT, and return. !!        | TCRIT must be input as RWORK(1). !! !! Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at t = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! the state of the calculation. !! !! On input, the values of ISTATE are as follows. !! !!  value | description !!  ----- | ------------------------------------------------------- !!      1 | means this is the first call for the problem !!        | (initializations will be done).  See note below. !!      2 | means this is not the first call, and the calculation !!        | is to continue normally, with no change in any input !!        | parameters except possibly TOUT and ITASK. !!        | (If ITOL, RTOL, and/or ATOL are changed between calls !!        | with ISTATE = 2, the new values will be used but not !!        | tested for legality.) !!      3 | means this is not the first call, and the !!        | calculation is to continue normally, but with !!        | a change in input parameters other than !!        | TOUT and ITASK.  Changes are allowed in !!        | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, !!        | the conditional inputs IA and JA, !!        | and any of the optional inputs except H0. !!        | In particular, if MITER = 1 or 2, a call with ISTATE = 3 !!        | will cause the sparsity structure of the problem to be !!        | recomputed (or reread from IA and JA if MOSS = 0). !! !! Note:  a preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value | description !!  ----- | ------------------------------------------------------- !!      1 | means nothing was done; TOUT = T and ISTATE = 1 on input. !!      2 | means the integration was performed successfully. !!     -1 | means an excessive amount of work (more than MXSTEP !!        | steps) was done on this call, before completing the !!        | requested task, but the integration was otherwise !!        | successful as far as T.  (MXSTEP is an optional input !!        | and is normally 500.)  To continue, the user may !!        | simply reset ISTATE to a value .gt. 1 and call again !!        | (the excess work step counter will be reset to 0). !!        | In addition, the user may increase MXSTEP to avoid !!        | this error return (see below on optional inputs). !!     -2 | means too much accuracy was requested for the precision !!        | of the machine being used.  This was detected before !!        | completing the requested task, but the integration !!        | was successful as far as T.  To continue, the tolerance !!        | parameters must be reset, and ISTATE must be set !!        | to 3.  The optional output TOLSF may be used for this !!        | purpose.  (Note: If this condition is detected before !!        | taking any steps, then an illegal input return !!        | (ISTATE = -3) occurs instead.) !!     -3 | means illegal input was detected, before taking any !!        | integration steps.  See written message for details. !!        | Note:  If the solver detects an infinite loop of calls !!        | to the solver with illegal input, it will cause !!        | the run to stop. !!     -4 | means there were repeated error test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | The problem may have a singularity, or the input !!        | may be inappropriate. !!     -5 | means there were repeated convergence test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | This may be caused by an inaccurate Jacobian matrix, !!        | if one is being used. !!     -6 | means EWT(i) became zero for some i during the !!        | integration.  Pure relative error control (ATOL(i)=0.0) !!        | was requested on a variable which has now vanished. !!        | The integration was successful as far as T. !!     -7 | means a fatal error return flag came from the sparse !!        | solver CDRV by way of DPRJS or DSOLSS (numerical !!        | factorization or backsolve).  This should never happen. !!        | The integration was successful as far as T. !! !! Note: an error return with ISTATE = -1, -4, or -5 and with !! MITER = 1 or 2 may mean that the sparsity structure of the !! problem has changed significantly since it was last !! determined (or input).  In that case, one can attempt to !! complete the integration by setting ISTATE = 3 on the next !! call, so that a new structure determination is done. !! !! Note:  since the normal output value of ISTATE is 2, !! it does not need to be reset for normal continuation. !! Also, since a negative input value of ISTATE will be !! regarded as illegal, a negative output value requires the !! user to change it, and possibly other inputs, before !! calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !!```text !!          IOPT = 0 means no optional inputs are being used. !!                   Default values will be used in all cases. !!          IOPT = 1 means one or more optional inputs are being used. !!``` !! RWORK !! !! : a work array used for a mixture of real (double precision) !! and integer work space. !! The length of RWORK (in real words) must be at least !!```text !!             20 + NYH*(MAXORD + 1) + 3*NEQ + LWM    where !!          NYH    = the initial value of NEQ, !!          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!                   smaller value is given as an optional input), !!          LWM = 0                                    if MITER = 0, !!          LWM = 2*NNZ + 2*NEQ + (NNZ+9*NEQ)/LENRAT   if MITER = 1, !!          LWM = 2*NNZ + 2*NEQ + (NNZ+10*NEQ)/LENRAT  if MITER = 2, !!          LWM = NEQ + 2                              if MITER = 3. !!``` !! In the above formulas, !!```text !!          NNZ    = number of nonzero elements in the Jacobian matrix. !!          LENRAT = the real to integer wordlength ratio (usually 1 in !!                   single precision and 2 in double precision). !!          (See the MF description for METH and MITER.) !!``` !! Thus if MAXORD has its default value and NEQ is constant, !! the minimum length of RWORK is: !!```text !!             20 + 16*NEQ        for MF = 10, !!             20 + 16*NEQ + LWM  for MF = 11, 111, 211, 12, 112, 212, !!             22 + 17*NEQ        for MF = 13, !!             20 +  9*NEQ        for MF = 20, !!             20 +  9*NEQ + LWM  for MF = 21, 121, 221, 22, 122, 222, !!             22 + 10*NEQ        for MF = 23. !!``` !! If MITER = 1 or 2, the above formula for LWM is only a !! crude lower bound.  The required length of RWORK cannot !! be readily predicted in general, as it depends on the !! sparsity structure of the problem.  Some experimentation !! may be necessary. !! !! The first 20 words of RWORK are reserved for conditional !! and optional inputs and optional outputs. !! !! The following word in RWORK is a conditional input: !!```text !!            RWORK(1) = TCRIT = critical value of t which the solver !!                       is not to overshoot.  Required if ITASK is !!                       4 or 5, and ignored otherwise.  (See ITASK.) !!``` !! LRW !! !! : the length of the array RWORK, as declared by the user. !!          (This will be checked by the solver.) !! !! IWORK  = !! !! : integer work array.  The length of IWORK must be at least !! !!       31 + NEQ + NNZ   if MOSS = 0 and MITER = 1 or 2, or !!       30               otherwise. !! !! (NNZ is the number of nonzero elements in df/dy.) !! !! In DLSODES, IWORK is used only for conditional and !! optional inputs and optional outputs. !! !! The following two blocks of words in IWORK are conditional !! inputs, required if MOSS = 0 and MITER = 1 or 2, but not !! otherwise (see the description of MF for MOSS). !! !!       IWORK(30+j) = IA(j)     (j=1,...,NEQ+1) !!       IWORK(31+NEQ+k) = JA(k) (k=1,...,NNZ) !! !! The two arrays IA and JA describe the sparsity structure !! to be assumed for the Jacobian matrix.  JA contains the row !! indices where nonzero elements occur, reading in columnwise !! order, and IA contains the starting locations in JA of the !! descriptions of columns 1,...,NEQ, in that order, with !! IA(1) = 1.  Thus, for each column index j = 1,...,NEQ, the !! values of the row index i in column j where a nonzero !! element may occur are given by !! !!       i = JA(k),  where   IA(j) .le. k .lt. IA(j+1). !! !! If NNZ is the total number of nonzero locations assumed, !! then the length of the JA array is NNZ, and IA(NEQ+1) must !! be NNZ + 1.  Duplicate entries are not allowed. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !!   (This will be checked by the solver.) !! !! Note:  The work arrays must not be altered between calls to DLSODES !! for the same problem, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSODES between calls, if !! desired (but not for use by F or JAC). !! !! JAC !! !! : name of user-supplied routine (MITER = 1 or MOSS = 1) to !! compute the Jacobian matrix, df/dy, as a function of !! the scalar t and the vector y.  It is to have the form !!```fortran !!       SUBROUTINE JAC (NEQ, T, Y, J, IAN, JAN, PDJ) !!       DOUBLE PRECISION T, Y(*), IAN(*), JAN(*), PDJ(*) !!``` !! where NEQ, T, Y, J, IAN, and JAN are input, and the array !! PDJ, of length NEQ, is to be loaded with column J !! of the Jacobian on output.  Thus df(i)/dy(J) is to be !! loaded into PDJ(i) for all relevant values of i. !! Here T and Y have the same meaning as in Subroutine F, !! and J is a column index (1 to NEQ).  IAN and JAN are !! undefined in calls to JAC for structure determination !! (MOSS = 1).  otherwise, IAN and JAN are structure !! descriptors, as defined under optional outputs below, and !! so can be used to determine the relevant row indices i, if !! desired. !! !! JAC need not provide df/dy exactly.  A crude !! approximation (possibly with greater sparsity) will do. !! !! In any case, PDJ is preset to zero by the solver, !! so that only the nonzero elements need be loaded by JAC. !! Calls to JAC are made with J = 1,...,NEQ, in that order, and !! each such set of calls is preceded by a call to F with the !! same arguments NEQ, T, and Y.  Thus to gain some efficiency, !! intermediate quantities shared by both calculations may be !! saved in a user Common block by F and not recomputed by JAC, !! if desired.  JAC must not alter its input arguments. !! JAC must be declared External in the calling program. !! !! Subroutine JAC may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in JAC) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! MF !! !! : the method flag.  Used only for input. !! MF has three decimal digits-- MOSS, METH, MITER-- !!```text !!       MF = 100*MOSS + 10*METH + MITER. !!``` !! MOSS indicates the method to be used to obtain the sparsity !! structure of the Jacobian matrix if MITER = 1 or 2: !!            MOSS = 0 | means the user has supplied IA and JA !!                     | (see descriptions under IWORK above). !!            MOSS = 1 | means the user has supplied JAC (see below) !!                     | and the structure will be obtained from NEQ !!                     | initial calls to JAC. !!            MOSS = 2 | means the structure will be obtained from NEQ+1 !!                     | initial calls to F. !! METH indicates the basic linear multistep method: !!            METH = 1 | means the implicit Adams method. !!            METH = 2 | means the method based on Backward !!                     | Differentiation Formulas (BDFs). !! MITER indicates the corrector iteration method: !! !!   value     | description !!   --------- | -------------------------------------------- !!   MITER = 0 | means functional iteration (no Jacobian matrix !!             | is involved). !!   MITER = 1 | means chord iteration with a user-supplied !!             | sparse Jacobian, given by Subroutine JAC. !!   MITER = 2 | means chord iteration with an internally !!             | generated (difference quotient) sparse Jacobian !!             | (using NGP extra calls to F per df/dy value, !!             | where NGP is an optional output described below.) !!   MITER = 3 | means chord iteration with an internally !!             | generated diagonal Jacobian approximation !!             | (using 1 extra call to F per df/dy evaluation). !! !! If MITER = 1 or MOSS = 1, the user must supply a Subroutine !! JAC (the name is arbitrary) as described above under JAC. !! Otherwise, a dummy argument can be used. !! !! The standard choices for MF are: !! !!   value        | description !!   ------------ | -------------------------------------------- !!   MF = 10      | for a nonstiff problem, !!   MF = 21 or 22| for a stiff problem with IA/JA supplied !!                | (21 if JAC is supplied, 22 if not), !!   MF = 121     | for a stiff problem with JAC supplied, !!                | but not IA/JA, !!   MF = 222     | for a stiff problem with neither IA/JA nor !!                | JAC supplied. !! !! The sparseness structure can be changed during the !! problem by making a call to DLSODES with ISTATE = 3. !!----------------------------------------------------------------------- !!#### Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !!  Name  | Location |    Meaning and Default Value !!  ----- | -------- | ---------------------------------------------------- !!  H0    | RWORK(5) | the step size to be attempted on the first step. !!        |          | The default value is determined by the solver. !!        |          | !!  HMAX  | RWORK(6) | the maximum absolute step size allowed. !!        |          | The default value is infinite. !!        |          | !!  HMIN  | RWORK(7) | the minimum absolute step size allowed. !!        |          | The default value is 0.  (This lower bound is not !!        |          | enforced on the final step before reaching TCRIT !!        |          | when ITASK = 4 or 5.) !!        |          | !!  SETH  | RWORK(8) | the element threshhold for sparsity determination !!        |          | when MOSS = 1 or 2.  If the absolute value of !!        |          | an estimated Jacobian element is .le. SETH, it !!        |          | will be assumed to be absent in the structure. !!        |          | The default value of SETH is 0. !!        |          | !!  MAXORD| IWORK(5) | the maximum order to be allowed.  The default !!        |          | value is 12 if METH = 1, and 5 if METH = 2. !!        |          | If MAXORD exceeds the default value, it will !!        |          | be reduced to the default value. !!        |          | If MAXORD is changed during the problem, it may !!        |          | cause the current order to be reduced. !!        |          | !!  MXSTEP| IWORK(6) | maximum number of (internally defined) steps !!        |          | allowed during one call to the solver. !!        |          | The default value is 500. !!        |          | !!  MXHNIL| IWORK(7) | maximum number of messages printed (per problem) !!        |          | warning that T + H = T on a step (H = step size). !!        |          | This must be positive to result in a non-default !!        |          | value.  The default value is 10. !! !!#### Optional Outputs. !! !! As optional additional output from DLSODES, the variables listed !! below are quantities related to the performance of DLSODES !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSODES, and on any return with !! ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return !! (ISTATE = -3), they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !!  Name  | Location |     Meaning !! ------ | -------- | -------------------------------------------------- !!  HU    | RWORK(11)| the step size in t last used (successfully). !!        |          | !!  HCUR  | RWORK(12)| the step size to be attempted on the next step. !!        |          | !!  TCUR  | RWORK(13)| the current value of the independent variable !!        |          | which the solver has actually reached, i.e. the !!        |          | current internal mesh point in t.  On output, TCUR !!        |          | will always be at least as far as the argument !!        |          | T, but may be farther (if interpolation was done). !!        |          | !!  TOLSF | RWORK(14)| a tolerance scale factor, greater than 1.0, !!        |          | computed when a request for too much accuracy was !!        |          | detected (ISTATE = -3 if detected at the start of !!        |          | the problem, ISTATE = -2 otherwise).  If ITOL is !!        |          | left unaltered but RTOL and ATOL are uniformly !!        |          | scaled up by a factor of TOLSF for the next call, !!        |          | then the solver is deemed likely to succeed. !!        |          | (The user may also ignore TOLSF and alter the !!        |          | tolerance parameters in any other way appropriate.) !!        |          | !!  NST   | IWORK(11)| the number of steps taken for the problem so far. !!        |          | !!  NFE   | IWORK(12)| the number of f evaluations for the problem so far, !!        |          | excluding those for structure determination !!        |          | (MOSS = 2). !!        |          | !!  NJE   | IWORK(13)| the number of Jacobian evaluations for the problem !!        |          | so far, excluding those for structure determination !!        |          | (MOSS = 1). !!        |          | !!  NQU   | IWORK(14)| the method order last used (successfully). !!        |          | !!  NQCUR | IWORK(15)| the order to be attempted on the next step. !!        |          | !!  IMXER | IWORK(16)| the index of the component of largest magnitude in !!        |          | the weighted local error vector ( E(i)/EWT(i) ), !!        |          | on an error return with ISTATE = -4 or -5. !!        |          | !!  LENRW | IWORK(17)| the length of RWORK actually required. !!        |          | This is defined on normal returns and on an illegal !!        |          | input return for insufficient storage. !!        |          | !!  LENIW | IWORK(18)| the length of IWORK actually required. !!        |          | This is defined on normal returns and on an illegal !!        |          | input return for insufficient storage. !!        |          | !!  NNZ   | IWORK(19)| the number of nonzero elements in the Jacobian !!        |          | matrix, including the diagonal (MITER = 1 or 2). !!        |          | (This may differ from that given by IA(NEQ+1)-1 !!        |          | if MOSS = 0, because of added diagonal entries.) !!        |          | !!  NGP   | IWORK(20)| the number of groups of column indices, used in !!        |          | difference quotient Jacobian aproximations if !!        |          | MITER = 2.  This is also the number of extra f !!        |          | evaluations needed for each Jacobian evaluation. !!        |          | !!  NLU   | IWORK(21)| the number of sparse LU decompositions for the !!        |          | problem so far. !!        |          | !!  LYH   | IWORK(22)| the base address in RWORK of the history array YH, !!        |          | described below in this list. !!        |          | !!  IPIAN | IWORK(23)| the base address of the structure descriptor array !!        |          | IAN, described below in this list. !!        |          | !!  IPJAN | IWORK(24)| the base address of the structure descriptor array !!        |          | JAN, described below in this list. !!        |          | !!  NZL   | IWORK(25)| the number of nonzero elements in the strict lower !!        |          | triangle of the LU factorization used in the chord !!        |          | iteration (MITER = 1 or 2). !!        |          | !!  NZU   | IWORK(26)| the number of nonzero elements in the strict upper !!        |          | triangle of the LU factorization used in the chord !!        |          | iteration (MITER = 1 or 2). !!        |          | The total number of nonzeros in the factorization !!        |          | is therefore NZL + NZU + NEQ. !!        |          | !! !! The following four arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address, and its description. !! For YH and ACOR, the base addresses are in RWORK (a real array). !! The integer arrays IAN and JAN are to be obtained by declaring an !! integer array IWK and identifying IWK(1) with RWORK(21), using either !! an equivalence statement or a subroutine call.  Then the base !! addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained !! as optional outputs IWORK(23) and IWORK(24), respectively. !! Thus IAN(1) is IWK(IPIAN), etc. !! !! Name  | Base Address  |   Description !! ----- | ------------- | ---------------------------------------------- !! IAN   |IPIAN (in IWK) | structure descriptor array of size NEQ + 1. !!       |               | !! JAN   |IPJAN (in IWK) | structure descriptor array of size NNZ. !!       | (see above)   | IAN and JAN together describe the sparsity !!       |               | structure of the Jacobian matrix, as used by !!       |               | DLSODES when MITER = 1 or 2. !!       |               | JAN contains the row indices of the nonzero !!       |               | locations, reading in columnwise order, and !!       |               | IAN contains the starting locations in JAN of !!       |               | the descriptions of columns 1,...,NEQ, in !!       |               | that order, with IAN(1) = 1.  Thus for each !!       |               | j = 1,...,NEQ, the row indices i of the !!       |               | nonzero locations in column j are !!       |               | i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1). !!       |               | Note that IAN(NEQ+1) = NNZ + 1. !!       |               | (If MOSS = 0, IAN/JAN may differ from the !!       |               | input IA/JA because of a different ordering !!       |               | in each column, and added diagonal entries.) !!       |               | !! YH    | LYH           | the Nordsieck history array, of size NYH by !!       |  (optional    | (NQCUR + 1), where NYH is the initial value !!       |   output)     | of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!       |               | of YH contains HCUR\\*\\*j/factorial(j) times !!       |               | the j-th derivative of the interpolating !!       |               | polynomial currently representing the solution, !!       |               | evaluated at t = TCUR.  The base address LYH !!       |               | is another optional output, listed above. !!       |               | !! ACOR  |  LENRW-NEQ+1  | array of size NEQ used for the accumulated !!       |               | corrections on each step, scaled on output !!       |               | to represent the estimated local error in y !!       |               | on the last step.  This is the vector E  in !!       |               | the description of the error control.  It is !!       |               | defined only on a successful return from !!       |               | DLSODES. !! !!----------------------------------------------------------------------- !!#### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSODES. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !!  Form of Call               |       Function !!  -------------------------- | ----------------------------------------- !!   CALL XSETUN(LUN)          | Set the logical unit number, LUN, for !!                             | output of messages from DLSODES, if !!                             | the default is not desired. !!                             | The default value of LUN is 6. !!                             | !!   CALL XSETF(MFLAG)         | Set a flag to control the printing of !!                             | messages by DLSODES. !!                             | MFLAG = 0 means do not print. (Danger: !!                             | This risks losing valuable information.) !!                             | MFLAG = 1 means print (the default). !!                             | !!                             | Either of the above calls may be made at !!                             | any time and will take effect immediately. !!                             | !!   CALL DSRCMS(RSAV,ISAV,JOB)| saves and restores the contents of !!                             | the internal Common blocks used by !!                             | DLSODES (see Part 3 below). !!                             | RSAV must be a real array of length 224 !!                             | or more, and ISAV must be an integer !!                             | array of length 71 or more. !!                             | JOB=1 means save Common into RSAV/ISAV. !!                             | JOB=2 means restore Common from RSAV/ISAV. !!                             | !!                             | DSRCMS is useful if one is !!                             | interrupting a run and restarting !!                             | later, or alternating between two or !!                             | more problems solved with DLSODES. !!                             | !!   CALL DINTDY(,,,,,)        | Provide derivatives of y, of various !!        (see below)          | orders, at a specified point t, if !!                             | desired.  It may be called only after !!                             | a successful return from DLSODES. !! !! The detailed instructions for using DINTDY are as follows. !! The form of the call is: !!```fortran !!      LYH = IWORK(22) !!      CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by DLSODES). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (See optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(T), is already provided !! by DLSODES directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! LYH !! !! : the base address of the history array YH, obtained !! as an optional output as shown above. !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !! !!----------------------------------------------------------------------- !!#### Part 3.  Save and Restore Problem State !! !! If the solution of a given problem by DLSODES is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSODES call prior to the !! interruption, the contents of the call sequence variables and the !! internal state variables, and later restore these values before the !! next DLSODES call for that problem.  To save and restore the Common !! blocks, use Subroutine DSRCMS (see Part 2 above). !! !!----------------------------------------------------------------------- !!#### Part 4.  Optionally Replaceable Solver Routines. !! !! Below are descriptions of two routines in the DLSODES package which !! relate to the measurement of errors.  Either routine can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !!#### (a) DEWSET. !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!```fortran !!     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !!``` !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSODES call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM !! routine (see below), and also used by DLSODES in the computation !! of the optional output IMXER, the diagonal Jacobian approximation, !! and the increments for difference quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !!#### (b) DVNORM. !! The following is a real function routine which computes the weighted !! root-mean-square norm of a vector v: !!```text !!     D = DVNORM (N, V, W) !! where !!   N = the length of the vector, !!   V = real array of length N containing the vector, !!   W = real array of length N containing weights, !!   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). !!``` !! DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where !! EWT is as set by Subroutine DEWSET. !! !! If the user supplies this function, it should return a non-negative !! value of DVNORM suitable for use in the error control in DLSODES. !! None of the arguments should be altered by DVNORM. !! For example, a user-supplied DVNORM routine might: !! !!  - substitute a max-norm of (V(i)\\*W(i)) for the RMS-norm, or !!  - ignore some components of V in the norm, with the effect of !!    suppressing the error control on those components of y. !! !!----------------------------------------------------------------------- !! !! References: !! !! 1.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !! !! 2.  S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman, !!     Yale Sparse Matrix Package: I. The Symmetric Codes, !!     Int. J. Num. Meth. Eng., 18 (1982), pp. 1145-1151. !! !! 3.  S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman, !!     Yale Sparse Matrix Package: II. The Nonsymmetric Codes, !!     Research Report No. 114, Dept. of Computer Sciences, Yale !!     University, 1977. !! !!----------------------------------------------------------------------- !!```text !! Authors:    Alan C. Hindmarsh !!             Center for Applied Scientific Computing, L-561 !!             Lawrence Livermore National Laboratory !!             Livermore, CA 94551 !! !!             Andrew H. Sherman !!             J. S. Nolen and Associates !!             Houston, TX 77084 !!``` !!### Pedigree: !! This version of DLSODES is derived from the the 12 November 2003 version of !! \"DLSODES: Livermore Solver for Ordinary Differential Equations !!          with general Sparse Jacobian matrix.\" !! !! This version is in double precision. !! ! ! ### REVISION HISTORY  (YYYYMMDD) !  19810120  DATE WRITTEN !  19820315  Upgraded MDI in ODRV package: operates on M + M-transpose. !  19820426  Numerous revisions in use of work arrays; !            use wordlength ratio LENRAT; added IPISP & LRAT to Common; !            added optional outputs IPIAN/IPJAN; !            numerous corrections to comments. !  19830503  Added routine CNTNZU; added NZL and NZU to /LSS001/; !            changed ADJLR call logic; added optional outputs NZL & NZU; !            revised counter initializations; revised PREP stmt. numbers; !            corrections to comments throughout. !  19870320  Corrected jump on test of umax in CDRV routine; !            added ISTATE = -7 return. !  19870330  Major update: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODE; !            in STODE, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            converted arithmetic IF statements to logical IF statements; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20020502  Corrected declarations in descriptions of user routines. !  20031105  Restored 'own' variables to Common blocks, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. ! ! ------------------------------------------------------------------------ !  Other routines in the DLSODES package. ! !  In addition to Subroutine DLSODES, the DLSODES package includes the !  following subroutines and function routines: !   DIPREP   acts as an interface between DLSODES and DPREP, and also does !            adjusting of work space pointers and work arrays. !   DPREP    is called by DIPREP to compute sparsity and do sparse matrix !            preprocessing if MITER = 1 or 2. !   JGROUP   is called by DPREP to compute groups of Jacobian column !            indices for use when MITER = 2. !   ADJLR    adjusts the length of required sparse matrix work space. !            It is called by DPREP. !   CNTNZU   is called by DPREP and counts the nonzero elements in the !            strict upper triangle of J + J-transpose, where J = df/dy. !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DSTODE   is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DPRJS    computes and preprocesses the Jacobian matrix J = df/dy !            and the Newton iteration matrix P = I - h*l0*J. !   DSOLSS   manages solution of linear system in chord iteration. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted RMS-norm of a vector. !   DSRCMS   is a user-callable routine to save and restore !            the contents of the internal Common blocks. !   ODRV     constructs a reordering of the rows and columns of !            a matrix by the minimum degree algorithm.  ODRV is a !            driver routine which calls Subroutines MD, MDI, MDM, !            MDP, MDU, and SRO.  See Ref. 2 for details.  (The ODRV !            module has been modified since Ref. 2, however.) !   CDRV     performs reordering, symbolic factorization, numerical !            factorization, or linear system solution operations, !            depending on a path argument ipath.  CDRV is a !            driver routine which calls Subroutines NROC, NSFC, !            NNFC, NNSC, and NNTC.  See Ref. 3 for details. !            DLSODES uses CDRV to solve linear systems in which the !            coefficient matrix is  P = I - con*J, where I is the !            identity, con is a scalar, and J is an approximation to !            the Jacobian df/dy.  Because CDRV deals with rowwise !            sparsity descriptions, CDRV works with P-transpose, not P. !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note:  DVNORM, DUMACH, and IXSAV are function routines. !  All the others are subroutines. ! !!----------------------------------------------------------------------- subroutine dlsodes ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Mf ) integer , parameter :: dp = kind ( 0.0d0 ) ! external f external jac real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imax , imul , imxer , ipflag , ipgo , irem , j , kgo , leniw , lenrw , lenyht , lf0 , lia , lja , & & lrtem , lwtem , lyhd , lyhn , mf1 , ncolm logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , save :: lenrat , mxhnl0 , mxstp0 integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODES, DIPREP, DPREP, !  DINTDY, DSTODE, DPRJS, and DSOLSS. !  The block DLSS01 is declared in subroutines DLSODES, DIPREP, DPREP, !  DPRJS, and DSOLSS. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ! ----------------------------------------------------------------------- !  In the Data statement below, set LENRAT equal to the ratio of !  the wordlength for a real number to that for an integer.  Usually, !  LENRAT = 1 for single precision and 2 for double precision.  If the !  true ratio is not an integer, use the next smaller integer (.ge. 1). ! ----------------------------------------------------------------------- data lenrat / 2 / ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- ihit = . false . if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODES- ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 2000 ! msg = 'DLSODES- Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODES- ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODES- ISTATE.gt.1 but DLSODES not initialized. ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. !  If ISTATE = 1, the final setting of work space pointers, the matrix !  preprocessing, and other initializations are done in Block C. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODES- NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODES- ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 2000 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODES- ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODES- IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else dlss % moss = Mf / 100 mf1 = Mf - 100 * dlss % moss dls1 % meth = mf1 / 10 dls1 % miter = mf1 - 10 * dls1 % meth if ( dlss % moss < 0 . or . dlss % moss > 2 ) goto 700 if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 700 if ( dls1 % miter < 0 . or . dls1 % miter > 3 ) goto 700 if ( dls1 % miter == 0 . or . dls1 % miter == 3 ) dlss % moss = 0 !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODES- MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODES- MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODES- MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODES- TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 2000 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODES- HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 2000 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODES- HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 2000 else dlss % seth = Rwork ( 8 ) if ( dlss % seth < 0.0D0 ) then msg = 'DLSODES- SETH (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 9 , 0 , 0 , 0 , 0 , 1 , dlss % seth , 0.0D0 ) goto 2000 endif endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 dlss % seth = 0.0D0 endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODES- RTOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 2000 elseif ( atoli < 0.0D0 ) then msg = 'DLSODES- ATOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 2000 endif enddo ! ----------------------------------------------------------------------- !  Compute required work array lengths, as far as possible, and test !  these against LRW and LIW.  Then set tentative pointers for work !  arrays.  Pointers to RWORK/IWORK segments are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  WM, YH, SAVF, EWT, ACOR. !  If MITER = 1 or 2, the required length of the matrix work space WM !  is not yet known, and so a crude minimum value is used for the !  initial tests of LRW and LIW, and YH is temporarily stored as far !  to the right in RWORK as possible, to leave the maximum amount !  of space for WM for matrix preprocessing.  Thus if MITER = 1 or 2 !  and MOSS .ne. 2, some of the segments of RWORK are temporarily !  omitted, as they are not needed in the preprocessing.  These !  omitted segments are: ACOR if ISTATE = 1, EWT and ACOR if ISTATE = 3 !  and MOSS = 1, and SAVF, EWT, and ACOR if ISTATE = 3 and MOSS = 0. ! ----------------------------------------------------------------------- dlss % lrat = lenrat if ( Istate == 1 ) dls1 % nyh = dls1 % n dlss % lwmin = 0 if ( dls1 % miter == 1 ) dlss % lwmin = 4 * dls1 % n + 10 * dls1 % n / dlss % lrat if ( dls1 % miter == 2 ) dlss % lwmin = 4 * dls1 % n + 11 * dls1 % n / dlss % lrat if ( dls1 % miter == 3 ) dlss % lwmin = dls1 % n + 2 dlss % lenyh = ( dls1 % maxord + 1 ) * dls1 % nyh dlss % lrest = dlss % lenyh + 3 * dls1 % n lenrw = 20 + dlss % lwmin + dlss % lrest Iwork ( 17 ) = lenrw leniw = 30 if ( dlss % moss == 0 . and . dls1 % miter /= 0 . and . dls1 % miter /= 3 ) leniw = leniw + dls1 % n + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) goto 800 if ( leniw > Liw ) goto 900 lia = 31 if ( dlss % moss == 0 . and . dls1 % miter /= 0 . and . dls1 % miter /= 3 ) leniw = leniw + Iwork ( lia + dls1 % n ) - 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 900 lja = lia + dls1 % n + 1 lia = min ( lia , Liw ) lja = min ( lja , Liw ) dls1 % lwm = 21 if ( Istate == 1 ) dls1 % nq = 1 ncolm = min ( dls1 % nq + 1 , dls1 % maxord + 2 ) dlss % lenyhm = ncolm * dls1 % nyh lenyht = dlss % lenyh if ( dls1 % miter == 1 . or . dls1 % miter == 2 ) lenyht = dlss % lenyhm imul = 2 if ( Istate == 3 ) imul = dlss % moss if ( dlss % moss == 2 ) imul = 3 lrtem = lenyht + imul * dls1 % n lwtem = dlss % lwmin if ( dls1 % miter == 1 . or . dls1 % miter == 2 ) lwtem = Lrw - 20 - lrtem dlss % lenwk = lwtem lyhn = dls1 % lwm + lwtem dls1 % lsavf = lyhn + lenyht dls1 % lewt = dls1 % lsavf + dls1 % n dls1 % lacor = dls1 % lewt + dls1 % n dlss % istatc = Istate if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  the sparse matrix preprocessing (MITER = 1 or 2), and the !  calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh dls1 % tn = T dls1 % nst = 0 dls1 % h = 1.0D0 dlss % nnz = 0 dlss % ngp = 0 dlss % nzl = 0 dlss % nzu = 0 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1000 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo if ( dls1 % miter /= 0 . and . dls1 % miter /= 3 ) then !  DIPREP and DPREP do sparse matrix preprocessing if MITER = 1 or 2. --- dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprep ( Neq , Y , Rwork , Iwork ( lia ), Iwork ( lja ), ipflag , f , jac ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1400 case ( 3 ) goto 1500 case ( 4 ) goto 1600 case ( 5 ) goto 1700 case ( 6 ) goto 1800 case ( 7 ) goto 1900 case default Iwork ( 22 ) = dls1 % lyh if ( lenrw > Lrw ) goto 800 endselect endif !  Check TCRIT for legality (ITASK = 4 or 5). --------------------------- if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1200 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif !  Initialize all remaining parameters. --------------------------------- dls1 % uround = dumach () dls1 % jstart = 0 if ( dls1 % miter /= 0 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dlss % msbj = 50 dlss % nslj = 0 dlss % ccmxj = 0.2D0 dlss % psmall = 100 0.0D0 * dls1 % uround dlss % rbig = 0.01D0 / dlss % psmall dls1 % nhnil = 0 dls1 % nje = 0 dlss % nlu = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( f(i)/ywt(i) )**2  ) !                                        1 !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          f(i)   = i-th component of initial value of f, !          ywt(i) = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. !  ABS(H0) is made .le. ABS(TOUT-T) in any case. ! ----------------------------------------------------------------------- lf0 = dls1 % lyh + dls1 % nyh if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODES- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 2000 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 200 else ! ----------------------------------------------------------------------- !  ISTATE = 3.  Move YH to its new location. !  Note that only the part of YH needed for the next step, namely !  MIN(NQ+1,MAXORD+2) columns, is actually moved. !  A temporary error weight array EWT is loaded if MOSS = 2. !  Sparse matrix processing is done in DIPREP/DPREP if MITER = 1 or 2. !  If MAXORD was reduced below NQ, then the pointers are finally set !  so that SAVF is identical to YH(*,MAXORD+2). ! ----------------------------------------------------------------------- lyhd = dls1 % lyh - lyhn imax = lyhn - 1 + dlss % lenyhm !  Move YH.  Move right if LYHD < 0; move left if LYHD > 0. ------------- if ( lyhd < 0 ) then do i = lyhn , imax j = imax + lyhn - i Rwork ( j ) = Rwork ( j + lyhd ) enddo endif if ( lyhd > 0 ) then do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo endif dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh if ( dls1 % miter /= 0 . and . dls1 % miter /= 3 ) then if ( dlss % moss == 2 ) then !  Temporarily load EWT if MITER = 1 or 2 and MOSS = 2. ----------------- call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1000 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo endif !  DIPREP and DPREP do sparse matrix preprocessing if MITER = 1 or 2. --- dls1 % lsavf = min ( dls1 % lsavf , Lrw ) dls1 % lewt = min ( dls1 % lewt , Lrw ) dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprep ( Neq , Y , Rwork , Iwork ( lia ), Iwork ( lja ), ipflag , f , jac ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1400 case ( 3 ) goto 1500 case ( 4 ) goto 1600 case ( 5 ) goto 1700 case ( 6 ) goto 1800 case ( 7 ) goto 1900 case default Iwork ( 22 ) = dls1 % lyh if ( lenrw > Lrw ) goto 800 endselect endif !  Set flag to signal parameter changes to DSTODE. ---------------------- dls1 % jstart = - 1 if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODES- ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 2000 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1200 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1100 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1300 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODE. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODES- At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODES- At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 600 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODES- Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODES- Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !     CALL DSTODE(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,WM,f,JAC,DPRJS,DSOLSS) ! ----------------------------------------------------------------------- call dstode ( Neq , Y , & & Rwork ( dls1 % lyh ), & & dls1 % nyh , & & Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), & & f , jac , dprjs , dsolss ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODES- At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODES- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) !  KFLAG = -3.  Fatal error flag returned by DPRJS or DSOLSS (CDRV). ---- msg = 'DLSODES- At T (=R1) and step size H (=R2), a fatal' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error flag was returned by CDRV (by way of  ' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Subroutine DPRJS or DSOLSS)       ' call xerrwd ( msg , 40 , 207 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 7 goto 600 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  if TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODES- At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 2000 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODES- At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 600 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODES. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 600 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return 700 continue msg = 'DLSODES- MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2000 800 continue msg = 'DLSODES- RWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 17 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 900 continue msg = 'DLSODES- IWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 18 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1000 continue ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODES- EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 2000 1100 continue msg = 'DLSODES- ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 2000 1200 continue msg = 'DLSODES- ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 2000 1300 continue msg = 'DLSODES- Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) goto 2000 1400 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine DPREP).  ' call xerrwd ( msg , 60 , 28 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 28 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1500 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine JGROUP). ' call xerrwd ( msg , 60 , 29 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 29 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1600 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine ODRV).   ' call xerrwd ( msg , 60 , 30 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 30 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1700 continue msg = 'DLSODES- Error from ODRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), ODRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 31 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) goto 2000 1800 continue msg = 'DLSODES- RWORK length insufficient (for Subroutine CDRV).   ' call xerrwd ( msg , 60 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 32 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2000 1900 continue msg = 'DLSODES- Error from CDRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), CDRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 33 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) if ( imul == 2 ) then msg = '        Duplicate entry in sparsity structure descriptors.  ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( imul == 3 . or . imul == 6 ) then msg = '        Insufficient storage for NSFC (called by CDRV).     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif ! 2000 continue Istate = - 3 return 99999 continue end subroutine dlsodes","tags":"","loc":"sourcefile/dlsodes.inc.html"},{"title":"dlsodpk.inc – odepack","text":"Contents Subroutines dlsodpk Source Code dlsodpk.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! DLSODPK: Livermore Solver for Ordinary Differential equations, !!          with Preconditioned Krylov iteration methods for the !!          Newton correction linear systems. !! !! DLSODPK solves the initial value problem for stiff or nonstiff !! systems of first order ODEs, !!```text !!     dy/dt = f(t,y),  or, in component form, !!     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). !!``` !! !! This version is in double precision. !! !!----------------------------------------------------------------------- !!### Introduction. !! !! This is a modification of the DLSODE package which incorporates !! various preconditioned Krylov subspace iteration methods for the !! linear algebraic systems that arise in the case of stiff systems. !! !! The linear systems that must be solved have the form !!```text !!   A * x  = b,  where  A = identity - hl0 * (df/dy) . !!``` !! Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial !! derivatives of f (NEQ by NEQ). !! !! The particular Krylov method is chosen by setting the second digit, !! MITER, in the method flag MF. !! Currently, the values of MITER have the following meanings: !! !!  MITER     | description !!  --------- | ---------------------------------------------------------- !!          1 | means the preconditioned Scaled Incomplete !!            | Orthogonalization Method (SPIOM). !!            | !!          2 | means an incomplete version of the Preconditioned Scaled !!            | Generalized Minimal Residual method (SPIGMR). !!            | This is the best choice in general. !!            | !!          3 | means the Preconditioned Conjugate Gradient method (PCG). !!            | Recommended only when df/dy is symmetric or nearly so. !!            | !!          4 | means the scaled Preconditioned Conjugate Gradient method !!            | (PCGS).  Recommended only when D-inverse \\* df/dy \\* D is !!            | symmetric or nearly so, where D is the diagonal scaling !!            | matrix with elements 1/EWT(i) (see RTOL/ATOL description). !!            | !!          9 | means that only a user-supplied matrix P (approximating A) !!            | will be used, with no Krylov iteration done.  This option !!            | allows the user to provide the complete linear system !!            | solution algorithm, if desired. !!            | !! !! The user can apply preconditioning to the linear system A\\*x = b, !! by means of arbitrary matrices (the preconditioners). !! !! In the case of SPIOM and SPIGMR, one can apply left and right !! preconditioners P1 and P2, and the basic iterative method is then !! applied to the matrix (P1-inverse)\\*A\\*(P2-inverse) instead of to the !! matrix A.  The product P1\\*P2 should be an approximation to matrix A !! such that linear systems with P1 or P2 are easier to solve than with !! A.  Preconditioning from the left only or right only means using !! P2 = identity or P1 = identity, respectively. !! !! In the case of the PCG and PCGS methods, there is only one !! preconditioner matrix P (but it can be the product of more than one). !! It should approximate the matrix A but allow for relatively !! easy solution of linear systems with coefficient matrix P. !! !! For PCG, P should be positive definite symmetric, or nearly so, !! and for PCGS, the scaled preconditioner D-inverse \\* P \\* D !! should be symmetric or nearly so. !! !! If the Jacobian J = df/dy splits in a natural way into a sum !! J = J1 + J2, then one possible choice of preconditioners is !! P1 = identity - hl0 \\* J1  and  P2 = identity - hl0 \\* J2 !! provided each of these is easy to solve (or approximately solve). !!----------------------------------------------------------------------- !!### Summary of Usage. !! !! Communication between the user and the DLSODPK package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including optional communication, nonstandard options, !! and instructions for special situations.  See also the demonstration !! program distributed with this solver. !! !! **A.** First provide a subroutine of the form: !!```fortran !!       SUBROUTINE F (NEQ, T, Y, YDOT) !!       DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! which supplies the vector function f by loading YDOT(i) with f(i). !! !! **B.** Next determine (or guess) whether or not the problem is stiff. !! Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue !! whose real part is negative and large in magnitude, compared to the !! reciprocal of the t span of interest.  If the problem is nonstiff, !! use a method flag MF = 10.  If it is stiff, MF should be between 21 !! and 24, or possibly 29.  MF = 22 is generally the best choice. !! Use 23 or 24 only if symmetry is present.  Use MF = 29 if the !! complete linear system solution is to be provided by the user. !! The following four parameters must also be set. !! !!```text !!  IWORK(1) = LWP  = length of real array WP for preconditioning. !!  IWORK(2) = LIWP = length of integer array IWP for preconditioning. !!  IWORK(3) = JPRE = preconditioner type flag: !!                  = 0 for no preconditioning (P1 = P2 = P = identity) !!                  = 1 for left-only preconditioning (P2 = identity) !!                  = 2 for right-only preconditioning (P1 = identity) !!                  = 3 for two-sided preconditioning (and PCG or PCGS) !!  IWORK(4) = JACFLG = flag for whether JAC is called. !!                    = 0 if JAC is not to be called, !!                    = 1 if JAC is to be called. !!``` !!  Use JACFLG = 1 if JAC computes any nonconstant data for use in !!  preconditioning, such as Jacobian elements. !!  The arrays WP and IWP are work arrays under the user's control, !!  for use in the routines that perform preconditioning operations. !! !! **C.** If the problem is stiff, you must supply two routines that deal !! with the preconditioning of the linear systems to be solved. !! These are as follows: !!```fortran !!     SUBROUTINE JAC (F, NEQ, T, Y, YSV, REWT, FTY, V, HL0, WP,IWP, IER) !!     DOUBLE PRECISION T, Y(*),YSV(*), REWT(*), FTY(*), V(*), HL0, WP(*) !!     INTEGER IWP(*) !!``` !! This routine must evaluate and preprocess any parts of the !! Jacobian matrix df/dy involved in the preconditioners P1, P2, P. !! The Y and FTY arrays contain the current values of y and f(t,y), !! respectively, and YSV also contains the current value of y. !! The array V is work space of length NEQ. !! !! JAC must multiply all computed Jacobian elements by the scalar !! -HL0, add the identity matrix, and do any factorization !! operations called for, in preparation for solving linear systems !! with a coefficient matrix of P1, P2, or P.  The matrix P1\\*P2 or P !! should be an approximation to  identity - HL0 \\* (df/dy). !! JAC should return IER = 0 if successful, and IER .ne. 0 if not. !! (If IER .ne. 0, a smaller time step will be tried.) !!```fortran !!     SUBROUTINE PSOL (NEQ, T, Y, FTY, WK, HL0, WP, IWP, B, LR, IER) !!     DOUBLE PRECISION T, Y(*), FTY(*), WK(*), HL0, WP(*), B(*) !!     INTEGER IWP(*) !!``` !! This routine must solve a linear system with B as right-hand !! side and one of the preconditioning matrices, P1, P2, or P, as !! coefficient matrix, and return the solution vector in B. !! !! LR is a flag concerning left vs right preconditioning, input !! to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. !! In the case of the PCG or PCGS method, LR will be 3, and PSOL !! should solve the system P\\*x = B with the preconditioner matrix P. !! In the case MF = 29 (no Krylov iteration), LR will be 0, !! and PSOL is to return in B the desired approximate solution !! to A \\* x = B, where A = identity - HL0 \\* (df/dy). !! !! PSOL can use data generated in the JAC routine and stored in !! WP and IWP.  WK is a work array of length NEQ. !! !! The argument HL0 is the current value of the scalar appearing !! in the linear system.  If the old value, at the time of the last !! JAC call, is needed, it must have been saved by JAC in WP. !! On return, PSOL should set the error flag IER as follows: !! !!       IER = 0 if PSOL was successful, !!       IER .gt. 0 if a recoverable error occurred, meaning that the !!              time step will be retried, !!       IER .lt. 0 if an unrecoverable error occurred, meaning that the !!              solver is to stop immediately. !! !! **D.** Write a main program which calls Subroutine DLSODPK once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages by !! DLSODPK.  On the first call to DLSODPK, supply arguments as follows: !! !! F !! !! : name of subroutine for right-hand side vector f. !! This name must be declared External in calling program. !! !! NEQ !! !! : number of first order ODEs. !! !! Y !! !! : array of initial values, of length NEQ. !! !! T !! !! : the initial value of the independent variable. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (scalar or array). !! the estimated local error in y(i) will be controlled so as !! to be roughly less (in magnitude) than !!```text !!             EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!             EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! Thus the local error test passes if, in each component, !! either the absolute error is less than ATOL (or ATOL(i)), !! or the relative error is less than RTOL. !! !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !! control.  Caution: Actual (global) errors may exceed these !! local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!        20 + 16*NEQ           for MF = 10, !!        45 + 17*NEQ + LWP     for MF = 21, !!        61 + 17*NEQ + LWP     for MF = 22, !!        20 + 15*NEQ + LWP     for MF = 23 or 24, !!        20 + 12*NEQ + LWP     for MF = 29. !!``` !! !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least: !!```text !!        30            for MF = 10, !!        35 + LIWP     for MF = 21, !!        30 + LIWP     for MF = 22, 23, 24, or 29. !!``` !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! JAC,PSOL !! !! : names of subroutines for preconditioning. !! These names must be declared External in the calling program. !! !! MF !! !! : method flag.  Standard values are: !! !!  value | description !!  ----- | ------------------------------------------------------- !!     10 | for nonstiff (Adams) method. !!     21 | for stiff (BDF) method, with preconditioned SIOM. !!     22 | for stiff method, with preconditioned GMRES method. !!     23 | for stiff method, with preconditioned CG method. !!     24 | for stiff method, with scaled preconditioned CG method. !!     29 | for stiff method, with user's PSOL routine only. !! !! Note that the main program must declare arrays Y, RWORK, IWORK, !! and possibly ATOL. !! !! **E.** The output from the first call (or any call) is: !! !!      Y = array of computed values of y(t) vector. !!      T = corresponding value of independent variable (normally TOUT). !! ISTATE !! !! : table of values: !! !!  value | description !!  ----- | -------------------------------------------------------------- !!      2 | if DLSODPK was successful, negative otherwise. !!     -1 | means excess work done on this call (perhaps wrong MF). !!     -2 | means excess accuracy requested (tolerances too small). !!     -3 | means illegal input detected (see printed message). !!     -4 | means repeated error test failures (check all inputs). !!     -5 | means repeated convergence failures (perhaps bad JAC !!        | or PSOL routine supplied or wrong choice of MF or !!        | tolerances, or this solver is inappropriate). !!     -6 | means error weight became zero during problem. (Solution !!        | component i vanished, and ATOL or ATOL(i) = 0.) !!     -7 | means an unrecoverable error occurred in PSOL. !! !! **F.** To continue the integration after a successful return, simply !! reset TOUT and call DLSODPK again.  No other parameters need be reset. !! !!----------------------------------------------------------------------- !!#### Full Description of User Interface to DLSODPK. !! !! The user interface to DLSODPK consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSODPK, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSODPK package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of two routines in the DLSODPK package, either of !!      which the user may replace with his/her own version, if desired. !!      These relate to the measurement of errors. !! !!----------------------------------------------------------------------- !!#### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !!  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF, !! !! and those used for both input and output are !!  Y, T, ISTATE. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSODPK to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows. !! !! F !! !! : the name of the user-supplied subroutine defining the !! ODE system.  The system must be put in the first-order !! form dy/dt = f(t,y), where f is a vector-valued function !! of the scalar t and the vector y.  Subroutine F is to !! compute the function f.  It is to have the form !!```fortran !!          SUBROUTINE F (NEQ, T, Y, YDOT) !!          DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! where NEQ, T, and Y are input, and the array YDOT = f(t,y) !! is output.  Y and YDOT are arrays of length NEQ. !! Subroutine F should not alter Y(1),...,Y(NEQ). !! F must be declared External in the calling program. !! !! Subroutine F may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in F) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y below. !! !! If quantities computed in the F routine are needed !! externally to DLSODPK, an extra call to F should be made !! for this purpose, for consistent and accurate results. !! If only the derivative dy/dt is needed, use DINTDY instead. !! !! NEQ !! !! : the size of the ODE system (number of first order !! ordinary differential equations).  Used only for input. !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in the user-supplied subroutines. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! (The DLSODPK package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to F, JAC, and PSOL.  Hence, if it is an array, locations !! NEQ(2),... may be used to store other integer data and pass !! it to the user-supplied subroutines.  Each such routine must !! include NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 1), and only for output on other calls. !! On the first call, Y must contain the vector of initial !! values.  On output, Y contains the computed solution vector, !! evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to F, !! JAC, and PSOL. Hence its length may exceed NEQ, and locations !! Y(NEQ+1),... may be used to store other real data and !! pass it to the user-supplied subroutines.  (The DLSODPK !! package accesses only Y(1),...,Y(NEQ).) !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! On output, after each call, T is the value at which a !! computed solution y is evaluated (usually the same as TOUT). !! On an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 1), TOUT may be equal !! to T for one call, then should .ne. T for the next call. !! For the initial T, an input value of TOUT .ne. T is used !! in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!```text !!                  RMS-norm of ( E(i)/EWT(i) )   .le.   1, !!      where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), !!``` !! and the RMS-norm (root-mean-square norm) here is !! RMS-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ).  Here EWT = (EWT(i)) !! is a vector of weights which must always be positive, and !! the values of RTOL and ATOL should all be non-negative. !! the following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL   |   ATOL   |      EWT(i) !!  ---- | ------- | -------- | ------------------------------- !!   1   | scalar  |  scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | scalar  |  array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array   |  array   |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting !! user-supplied routines for the setting of EWT and/or for !! the norm calculation.  See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK  = an index specifying the task to be performed. !! !! Input only.  ITASK has the following values and meanings. !! !!  value | description !!  ----- | -------------------------------------------------------------- !!     1  | means normal computation of output values of y(t) at !!        | t = TOUT (by overshooting and interpolating). !!     2  | means take one step only and return. !!     3  | means stop at the first internal mesh point at or !!        | beyond t = TOUT and return. !!     4  | means normal computation of output values of y(t) at !!        | t = TOUT but without overshooting t = TCRIT. !!        | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!        | or beyond TOUT, but not behind it in the direction of !!        | integration.  This option is useful if the problem !!        | has a singularity at or beyond t = TCRIT. !!     5  | means take one step, without passing TCRIT, and return. !!        | TCRIT must be input as RWORK(1). !! !! **Note**:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at t = TOUT are returned first). !! !! ISTATE = an index used for input and output to specify the !!          the state of the calculation. !! !! On input, the values of ISTATE are as follows: !! !!  value | description !!  ----- | -------------------------------------------------------------- !!     1  | means this is the first call for the problem !!        | (initializations will be done).  See note below. !!     2  | means this is not the first call, and the calculation !!        | is to continue normally, with no change in any input !!        | parameters except possibly TOUT and ITASK. !!        | (If ITOL, RTOL, and/or ATOL are changed between calls !!        | with ISTATE = 2, the new values will be used but not !!        | tested for legality.) !!     3  | means this is not the first call, and the !!        | calculation is to continue normally, but with !!        | a change in input parameters other than !!        | TOUT and ITASK.  Changes are allowed in !!        | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, !!        | and any of the optional inputs except H0. !! !! **Note**:  A preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!   value | description !!   ----- | -------------------------------------------------------------- !!       1 | means nothing was done; TOUT = T and ISTATE = 1 on input. !!       2 | means the integration was performed successfully. !!      -1 | means an excessive amount of work (more than MXSTEP !!         | steps) was done on this call, before completing the !!         | requested task, but the integration was otherwise !!         | successful as far as T.  (MXSTEP is an optional input !!         | and is normally 500.)  To continue, the user may !!         | simply reset ISTATE to a value .gt. 1 and call again !!         | (the excess work step counter will be reset to 0). !!         | In addition, the user may increase MXSTEP to avoid !!         | this error return (see below on optional inputs). !!      -2 | means too much accuracy was requested for the precision !!         | of the machine being used.  This was detected before !!         | completing the requested task, but the integration !!         | was successful as far as T.  To continue, the tolerance !!         | parameters must be reset, and ISTATE must be set !!         | to 3.  The optional output TOLSF may be used for this !!         | purpose.  (Note: If this condition is detected before !!         | taking any steps, then an illegal input return !!         | (ISTATE = -3) occurs instead.) !!      -3 | means illegal input was detected, before taking any !!         | integration steps.  See written message for details. !!         | Note:  If the solver detects an infinite loop of calls !!         | to the solver with illegal input, it will cause !!         | the run to stop. !!      -4 | means there were repeated error test failures on !!         | one attempted step, before completing the requested !!         | task, but the integration was successful as far as T. !!         | The problem may have a singularity, or the input !!         | may be inappropriate. !!      -5 | means there were repeated convergence test failures on !!         | one attempted step, before completing the requested !!         | task, but the integration was successful as far as T. !!      -6 | means EWT(i) became zero for some i during the !!         | integration.  Pure relative error control (ATOL(i)=0.0) !!         | was requested on a variable which has now vanished. !!         | The integration was successful as far as T. !!      -7 | means the PSOL routine returned an unrecoverable error !!         | flag (IER .lt. 0).  The integration was successful as !!         | far as T. !! !! **Note**:  since the normal output value of ISTATE is 2, !! it does not need to be reset for normal continuation. !! Also, since a negative input value of ISTATE will be !! regarded as illegal, a negative output value requires the !! user to change it, and possibly other inputs, before !! calling the solver again. !! !! IOPT !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !! !!      IOPT = 0 means no optional inputs are being used. !!               Default values will be used in all cases. !!      IOPT = 1 means one or more optional inputs are being used. !! !! RWORK !! !! : a real working array (double precision). !!```text !!       The length of RWORK must be at least !!          20 + NYH*(MAXORD + 1) + 3*NEQ + LENLS + LWP    where !!       NYH    = the initial value of NEQ, !!       MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!                smaller value is given as an optional input), !!       LENLS = length of work space for linear system (Krylov) !!               method, excluding preconditioning: !!         LENLS = 0                               if MITER = 0, !!         LENLS = NEQ*(MAXL+3) + MAXL**2          if MITER = 1, !!         LENLS = NEQ*(MAXL+3+MIN(1,MAXL-KMP)) !!              + (MAXL+3)*MAXL + 1                if MITER = 2, !!         LENLS = 6*NEQ                           if MITER = 3 or 4, !!         LENLS = 3*NEQ                           if MITER = 9. !!``` !! (See the MF description for METH and MITER, and the !! list of optional inputs for MAXL and KMP.) !! !! LWP !! !! : length of real user work space for preconditioning !! (see JAC/PSOL). !! Thus if default values are used and NEQ is constant, !! this length is: !!```text !!             20 + 16*NEQ           for MF = 10, !!             45 + 24*NEQ + LWP     FOR MF = 11, !!             61 + 24*NEQ + LWP     FOR MF = 12, !!             20 + 22*NEQ + LWP     FOR MF = 13 OR 14, !!             20 + 19*NEQ + LWP     FOR MF = 19, !!             20 + 9*NEQ            FOR MF = 20, !!             45 + 17*NEQ + LWP     FOR MF = 21, !!             61 + 17*NEQ + LWP     FOR MF = 22, !!             20 + 15*NEQ + LWP     FOR MF = 23 OR 24, !!             20 + 12*NEQ + LWP     for MF = 29. !!``` !! The first 20 words of RWORK are reserved for conditional !! and optional inputs and optional outputs. !! !! The following word in RWORK is a conditional input: !!```text !!         RWORK(1) = TCRIT = critical value of t which the solver !!                    is not to overshoot.  Required if ITASK is !!                    4 or 5, and ignored otherwise.  (See ITASK.) !!``` !! !! LRW !! !! : the length of the array RWORK, as declared by the user. !! (This will be checked by the solver.) !! !! IWORK !! !! : an integer work array.  The length of IWORK must be at least !! !!             30                 if MITER = 0 (MF = 10 or 20), !!             30 + MAXL + LIWP   if MITER = 1 (MF = 11, 21), !!             30 + LIWP          if MITER = 2, 3, 4, or 9. !! !!          MAXL = 5 unless a different optional input value is given. !!          LIWP = length of integer user work space for preconditioning !!          (see conditional input list following). !! !! The first few words of IWORK are used for conditional and !! optional inputs and optional outputs. !! !! The following 4 words in IWORK are conditional inputs, !! required if MITER .ge. 1: !!```text !!          IWORK(1) = LWP  = length of real array WP for use in !!                     preconditioning (part of RWORK array). !!          IWORK(2) = LIWP = length of integer array IWP for use in !!                     preconditioning (part of IWORK array). !!                     The arrays WP and IWP are work arrays under the !!                     user's control, for use in the routines that !!                     perform preconditioning operations (JAC and PSOL). !!          IWORK(3) = JPRE = preconditioner type flag: !!                   = 0 for no preconditioning (P1 = P2 = P = identity) !!                   = 1 for left-only preconditioning (P2 = identity) !!                   = 2 for right-only preconditioning (P1 = identity) !!                   = 3 for two-sided preconditioning (and PCG or PCGS) !!          IWORK(4) = JACFLG = flag for whether JAC is called. !!                   = 0 if JAC is not to be called, !!                   = 1 if JAC is to be called. !!                     Use JACFLG = 1 if JAC computes any nonconstant !!                     data needed in preconditioning operations, !!                     such as some of the Jacobian elements. !!``` !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! Note:  The work arrays must not be altered between calls to DLSODPK !! for the same problem, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSODPK between calls, if !! desired (but not for use by any of the user-supplied subroutines). !! !! JAC !! !! : the name of the user-supplied routine to compute any !! Jacobian elements (or approximations) involved in the !! matrix preconditioning operations (MITER .ge. 1). !! It is to have the form !!```fortran !!            SUBROUTINE JAC (F, NEQ, T, Y, YSV, REWT, FTY, V, & !!           &                HL0, WP, IWP, IER) !!            DOUBLE PRECISION T, Y(*),YSV(*), REWT(*), FTY(*), V(*), & !!           &                 HL0, WP(*) !!            INTEGER IWP(*) !!``` !! This routine must evaluate and preprocess any parts of the !! Jacobian matrix df/dy used in the preconditioners P1, P2, P. !! !! The Y and FTY arrays contain the current values of y and !! f(t,y), respectively, and YSV also contains the current !! value of y.  The array V is work space of length !! NEQ for use by JAC.  REWT is the array of reciprocal error !! weights (1/EWT).  JAC must multiply all computed Jacobian !! elements by the scalar -HL0, add the identity matrix, and do !! any factorization operations called for, in preparation !! for solving linear systems with a coefficient matrix of !! P1, P2, or P.  The matrix P1\\*P2 or P should be an !! approximation to  identity - HL0 \\* (df/dy).  JAC should !! return IER = 0 if successful, and IER .ne. 0 if not. !! (If IER .ne. 0, a smaller time step will be tried.) !! The arrays WP (of length LWP) and IWP (of length LIWP) !! are for use by JAC and PSOL for work space and for storage !! of data needed for the solution of the preconditioner !! linear systems.  Their lengths and contents are under the !! user's control. !! !! The JAC routine may save relevant Jacobian elements (or !! approximations) used in the preconditioners, along with the !! value of HL0, and use these to reconstruct preconditioner !! matrices later without reevaluationg those elements. !! !! This may be cost-effective if JAC is called with HL0 !! considerably different from its earlier value, indicating !! that a corrector convergence failure has occurred because !! of the change in HL0, not because of changes in the !! value of the Jacobian.  In doing this, use the saved and !! current values of HL0 to decide whether to use saved !! or reevaluated elements. !! !! JAC may alter V, but may not alter Y, YSV, REWT, FTY, or HL0. !! !! JAC must be declared External in the calling program. !! !! Subroutine JAC may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in JAC) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! PSOL !! !! : the name of the user-supplied routine for the !! solution of preconditioner linear systems. !! It is to have the form !!```fortran !!            SUBROUTINE PSOL (NEQ, T, Y, FTY, WK,HL0, WP,IWP, B, LR,IER) !!            DOUBLE PRECISION T, Y(*), FTY(*), WK(*), HL0, WP(*), B(*) !!            INTEGER IWP(*) !!``` !! This routine must solve a linear system with B as right-hand !! side and one of the preconditioning matrices, P1, P2, or P, !! as coefficient matrix, and return the solution vector in B. !! !! LR is a flag concerning left vs right preconditioning, input !! to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. !! !! In the case of the PCG or PCGS method, LR will be 3, and PSOL !! should solve the system P\\*x = B with the preconditioner P. !! !! In the case MITER = 9 (no Krylov iteration), LR will be 0, !! and PSOL is to return in B the desired approximate solution !! to A \\* x = B, where A = identity - HL0 \\* (df/dy). !! !! PSOL can use data generated in the JAC routine and stored in !! WP and IWP. !! !! The Y and FTY arrays contain the current values of y and !! f(t,y), respectively.  The array WK is work space of length !! NEQ for use by PSOL. !! !! The argument HL0 is the current value of the scalar appearing !! in the linear system.  If the old value, as of the last !! JAC call, is needed, it must have been saved by JAC in WP. !! On return, PSOL should set the error flag IER as follows: !! !!         IER = 0 if PSOL was successful, !!         IER .gt. 0 on a recoverable error, meaning that the !!                time step will be retried, !!         IER .lt. 0 on an unrecoverable error, meaning that the !!                solver is to stop immediately. !! !! PSOL may not alter Y, FTY, or HL0. !! !! PSOL must be declared External in the calling program. !! !! Subroutine PSOL may access user-defined quantities in !! NEQ(2),... and Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in PSOL) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! MF !! !! : the method flag.  Used only for input.  The legal values of !! MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29. !! !! MF has decimal digits METH and MITER: MF = 10\\*METH + MITER. !! METH indicates the basic linear multistep method: !! !!  METH  | description !!  ----- | ------------------------------------- !!      1 | means the implicit Adams method. !!      2 | means the method based on Backward !!        | Differentiation Formulas (BDFs). !! !! MITER indicates the corrector iteration method: !! !!  MITER | description !!  ----- | -------------------------------------------------- !!      0 | means functional iteration (no linear system !!        | is involved). !!      1 | means Newton iteration with Scaled Preconditioned !!        | Incomplete Orthogonalization Method (SPIOM) !!        | for the linear systems. !!      2 | means Newton iteration with Scaled Preconditioned !!        | Generalized Minimal Residual method (SPIGMR) !!        | for the linear systems. !!      3 | means Newton iteration with Preconditioned !!        | Conjugate Gradient method (PCG) !!        | for the linear systems. !!      4 | means Newton iteration with scaled Preconditioned !!        | Conjugate Gradient method (PCGS) !!        | for the linear systems. !!      9 | means Newton iteration with only the !!        | user-supplied PSOL routine called (no Krylov !!        | iteration) for the linear systems. !!        | JPRE is ignored, and PSOL is called with LR = 0. !!        | !! !! See comments in the introduction about the choice of MITER. !! If MITER .ge. 1, the user must supply routines JAC and PSOL !! (the names are arbitrary) as described above. !! For MITER = 0, dummy arguments can be used. !! !!----------------------------------------------------------------------- !!### Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !! Name  | Location |     Meaning and Default Value !! ----- | -------- | ---------------------------------------------------- !! H0    | RWORK(5) | the step size to be attempted on the first step. !!       |          | The default value is determined by the solver. !!       |          | !! HMAX  | RWORK(6) | the maximum absolute step size allowed. !!       |          | The default value is infinite. !!       |          | !! HMIN  | RWORK(7) | the minimum absolute step size allowed. !!       |          | The default value is 0.  (This lower bound is not !!       |          | enforced on the final step before reaching TCRIT !!       |          | when ITASK = 4 or 5.) !!       |          | !! DELT  | RWORK(8) | convergence test constant in Krylov iteration !!       |          | algorithm.  The default is .05. !!       |          | !! MAXORD| IWORK(5) | the maximum order to be allowed.  The default !!       |          | value is 12 if METH = 1, and 5 if METH = 2. !!       |          | If MAXORD exceeds the default value, it will !!       |          | be reduced to the default value. !!       |          | If MAXORD is changed during the problem, it may !!       |          | cause the current order to be reduced. !!       |          | !! MXSTEP| IWORK(6) | maximum number of (internally defined) steps !!       |          | allowed during one call to the solver. !!       |          | The default value is 500. !!       |          | !! MXHNIL| IWORK(7) | maximum number of messages printed (per problem) !!       |          | warning that T + H = T on a step (H = step size). !!       |          | This must be positive to result in a non-default !!       |          | value.  The default value is 10. !!       |          | !! MAXL  | IWORK(8) | maximum number of iterations in the SPIOM, SPIGMR, !!       |          | PCG, or PCGS algorithm (.le. NEQ). !!       |          | The default is MAXL = MIN(5,NEQ). !!       |          | !! KMP   | IWORK(9) | number of vectors on which orthogonalization !!       |          | is done in SPIOM or SPIGMR algorithm (.le. MAXL). !!       |          | The default is KMP = MAXL. !!       |          | Note:  When KMP .lt. MAXL and MF = 22, the length !!       |          |        of RWORK must be defined accordingly.  See !!       |          |        the definition of RWORK above. !!       |          | !! !!----------------------------------------------------------------------- !!#### Optional Outputs. !! !! As optional additional output from DLSODPK, the variables listed !! below are quantities related to the performance of DLSODPK !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSODPK, and on any return with !! ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return !! (ISTATE = -3), they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !! Name  | Location  |     Meaning !! ----- | --------- | --------------------------------------------------- !! HU    | RWORK(11) | the step size in t last used (successfully). !!       |           | !! HCUR  | RWORK(12) | the step size to be attempted on the next step. !!       |           | !! TCUR  | RWORK(13) | the current value of the independent variable !!       |           | which the solver has actually reached, i.e. the !!       |           | current internal mesh point in t.  On output, TCUR !!       |           | will always be at least as far as the argument !!       |           | T, but may be farther (if interpolation was done). !!       |           | !! TOLSF | RWORK(14) | a tolerance scale factor, greater than 1.0, !!       |           | computed when a request for too much accuracy was !!       |           | detected (ISTATE = -3 if detected at the start of !!       |           | the problem, ISTATE = -2 otherwise).  If ITOL is !!       |           | left unaltered but RTOL and ATOL are uniformly !!       |           | scaled up by a factor of TOLSF for the next call, !!       |           | then the solver is deemed likely to succeed. !!       |           | (The user may also ignore TOLSF and alter the !!       |           | tolerance parameters in any other way appropriate.) !!       |           | !! NST   | IWORK(11) | the number of steps taken for the problem so far. !!       |           | !! NFE   | IWORK(12) | the number of f evaluations for the problem so far. !!       |           | !! NPE   | IWORK(13) | the number of calls to JAC so far (for Jacobian !!       |           | evaluation associated with preconditioning). !!       |           | !! NQU   | IWORK(14) | the method order last used (successfully). !!       |           | !! NQCUR | IWORK(15) | the order to be attempted on the next step. !!       |           | !! IMXER | IWORK(16) | the index of the component of largest magnitude in !!       |           | the weighted local error vector ( E(i)/EWT(i) ), !!       |           | on an error return with ISTATE = -4 or -5. !!       |           | !! LENRW | IWORK(17) | the length of RWORK actually required. !!       |           | This is defined on normal returns and on an illegal !!       |           | input return for insufficient storage. !!       |           | !! LENIW | IWORK(18) | the length of IWORK actually required. !!       |           | This is defined on normal returns and on an illegal !!       |           | input return for insufficient storage. !!       |           | !! NNI   | IWORK(19) | number of nonlinear iterations so far (each of !!       |           | which calls an iterative linear solver). !!       |           | !! NLI   | IWORK(20) | number of linear iterations so far. !!       |           | Note: A measure of the success of algorithm is !!       |           | the average number of linear iterations per !!       |           | nonlinear iteration, given by NLI/NNI. !!       |           | If this is close to MAXL, MAXL may be too small. !!       |           | !! NPS   | IWORK(21) | number of preconditioning solve operations !!       |           | (PSOL calls) so far. !!       |           | !! NCFN  | IWORK(22) | number of convergence failures of the nonlinear !!       |           | (Newton) iteration so far. !!       |           | Note: A measure of success is the overall !!       |           | rate of nonlinear convergence failures, NCFN/NST. !!       |           | !! NCFL  | IWORK(23) | number of convergence failures of the linear !!       |           | iteration so far. !!       |           | Note: A measure of success is the overall !!       |           | rate of linear convergence failures, NCFL/NNI. !! !! !! The following two arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address in RWORK, and its description. !! !! Name  | Base Address  |    Description !! ----- | ------------- | ----------------------------------------------- !! YH    | 21            | the Nordsieck history array, of size NYH by !!       |               | (NQCUR + 1), where NYH is the initial value !!       |               | of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!       |               | of YH contains HCUR\\*\\*j/factorial(j) times !!       |               | the j-th derivative of the interpolating !!       |               | polynomial currently representing the solution, !!       |               | evaluated at t = TCUR. !!       |               | !! ACOR  |  LENRW-NEQ+1  | array of size NEQ used for the accumulated !!       |               | corrections on each step, scaled on output !!       |               | to represent the estimated local error in y !!       |               | on the last step.  This is the vector E in !!       |               | the description of the error control.  It is !!       |               | defined only on a successful return from !!       |               | DLSODPK. !! !!----------------------------------------------------------------------- !! Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSODPK. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !!  Form of Call               | Function !!  -------------------------- | ------------------------------------------ !!   CALL XSETUN(LUN)          | Set the logical unit number, LUN, for !!                             | output of messages from DLSODPK, if !!                             | the default is not desired. !!                             | The default value of lun is 6. !!                             | !!   CALL XSETF(MFLAG)         | Set a flag to control the printing of !!                             | messages by DLSODPK. !!                             | MFLAG = 0 means do not print. (Danger: !!                             | This risks losing valuable information.) !!                             | MFLAG = 1 means print (the default). !!                             | !!                             | Either of the above calls may be made at !!                             | any time and will take effect immediately. !!                             | !!   CALL DSRCPK(RSAV,ISAV,JOB)| saves and restores the contents of !!                             | the internal Common blocks used by !!                             | DLSODPK (see Part 3 below). !!                             | RSAV must be a real array of length 222 !!                             | or more, and ISAV must be an integer !!                             | array of length 50 or more. !!                             |      JOB=1 means save Common into RSAV/ISAV. !!                             |      JOB=2 means restore Common from RSAV/ISAV. !!                             | DSRCPK is useful if one is !!                             | interrupting a run and restarting !!                             | later, or alternating between two or !!                             | more problems solved with DLSODPK. !!                             | !!   CALL DINTDY(,,,,,)        | Provide derivatives of y, of various !!        (See below)          | orders, at a specified point t, if !!                             | desired.  It may be called only after !!                             | a successful return from DLSODPK. !! !! The detailed instructions for using DINTDY are as follows. !! The form of the call is: !!```fortran !!   CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by DLSODPK). !! for valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(T), is already provided !! by DLSODPK directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! RWORK(21) !! !! : the base address of the history array YH. !! !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !! !!----------------------------------------------------------------------- !!#### Part 3.  Save and Restore Program State !! !! If the solution of a given problem by DLSODPK is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSODPK call prior to the !! interruption, the contents of the call sequence variables and the !! internal state variable, and later restore these values before the !! next DLSODPK call for that problem.  To save and restore the values !! , use Subroutine DSRCPK (see Part 2 above). !! !!----------------------------------------------------------------------- !! Part 4.  Optionally Replaceable Solver Routines. !! !! below are descriptions of two routines in the DLSODPK package which !! relate to the measurement of errors.  Either routine can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !!#### (a) DEWSET() !! !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!```fortran !!     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !!``` !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSODPK call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM !! routine (see below), and also used by DLSODPK in the computation !! of the optional output IMXER, the diagonal Jacobian approximation, !! and the increments for difference quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !!#### (b) DVNORM() !! !! The following is a real function routine which computes the weighted !! root-mean-square norm of a vector v: !!```text !!     D = DVNORM (N, V, W) !!``` !! where: !!```text !!   N = the length of the vector, !!   V = real array of length N containing the vector, !!   W = real array of length N containing weights, !!   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). !!``` !! DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where !! EWT is as set by Subroutine DEWSET. !! !! If the user supplies this function, it should return a non-negative !! value of DVNORM suitable for use in the error control in DLSODPK. !! None of the arguments should be altered by DVNORM. !! For example, a user-supplied DVNORM routine might: !!  - substitute a max-norm of (V(i)\\*W(i)) for the RMS-norm, or !!  - ignore some components of V in the norm, with the effect of !!    suppressing the error control on those components of y. !! !!----------------------------------------------------------------------- !!### Pedigree: !! !! DLSODE is derived from the 18 November 2003 version of !! Livermore Solver for Ordinary !! Differential Equations package ODEPACK, !! !! References: !! !! 1.  Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix !!     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989), !!     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987. !! 2.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !! !!----------------------------------------------------------------------- !! !! Authors:       Alan C. Hindmarsh and Peter N. Brown !!                Center for Applied Scientific Computing, L-561 !!                Lawrence Livermore National Laboratory !!                Livermore, CA 94551 !! ! ----------------------------------------------------------------------- ! ### REVISION HISTORY  (YYYYMMDD) !  19860901  DATE WRITTEN !  19861010  Numerous minor revisions to SPIOM and SPGMR routines; !            minor corrections to prologues and comments. !  19870114  Changed name SPGMR to SPIGMR; revised residual norm !            calculation in SPIGMR (for incomplete case); !            revised error return logic in SPIGMR; !  19870330  Major update: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODPK; !            in STODPK, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  19871130  Added option MITER = 9; shortened WM array by 2; !            revised early return from SPIOM and SPIGMR; !            replaced copy loops with SCOPY/DCOPY calls; !            minor corrections/revisions to SOLPK, SPIGMR, ATV, ATP; !            corrections to main prologue and internal comments. !  19880304  Corrections to type declarations in SOLPK, SPIOM, USOL. !  19891025  Added ISTATE = -7 return; minor revisions to USOL; !            added initialization of JACFLG in main driver; !            removed YH and NYH from PKSET call list; !            minor revisions to SPIOM and SPIGMR; !            corrections to main prologue and internal comments. !  19900803  Added YSV to JAC call list; minor comment corrections. !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20020502  Corrected declarations in descriptions of user routines. !  20030603  Corrected duplicate type declaration for DUMACH. !  20031105  Restored 'own' variables to Common blocks, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. !  20031117  Changed internal name NPE to NJE. ! ! ----------------------------------------------------------------------- !  Other routines in the DLSODPK package. ! !  In addition to Subroutine DLSODPK, the DLSODPK package includes the !  following subroutines and function routines: !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted RMS-norm of a vector. !   DSTODPK  is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DPKSET   interfaces between DSTODPK and the JAC routine. !   DSOLPK   manages solution of linear system in Newton iteration. !   DSPIOM   performs the SPIOM algorithm. !   DATV     computes a scaled, preconditioned product (I-hl0*J)*v. !   DORTHOG  orthogonalizes a vector against previous basis vectors. !   DHEFA    generates an LU factorization of a Hessenberg matrix. !   DHESL    solves a Hessenberg square linear system. !   DSPIGMR  performs the SPIGMR algorithm. !   DHEQR    generates a QR factorization of a Hessenberg matrix. !   DHELS    finds the least squares solution of a Hessenberg system. !   DPCG     performs Preconditioned Conjugate Gradient algorithm (PCG). !   DPCGS    performs the PCGS algorithm. !   DATP     computes the product A*p, where A = I - hl0*df/dy. !   DUSOL    interfaces to the user's PSOL routine (MITER = 9). !   DSRCPK   is a user-callable routine to save and restore !            the contents of the internal Common blocks. !   DAXPY, DCOPY, DDOT, DNRM2, and DSCAL   are basic linear !            algebra modules (from the BLAS collection). !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note:  DVNORM, DDOT, DNRM2, DUMACH, and IXSAV are function !  routines.  All the others are subroutines. ! !!----------------------------------------------------------------------- subroutine dlsodpk ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , psol , Mf ) external f external jac external psol real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , avdim , ayi , big , ewti , h0 , hmax , hmx , rcfl , rcfn , rh , rtoli , size , sum , tcrit , tdist , tnext ,& & tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , kgo , leniw , leniwk , lenrw , lenwk , lenwm , lf0 , liwp , lwp , ncfl0 , ncfn0 , nli0 , & & nni0 , nnid , nstd , nwarn logical :: ihit , lavd , lcfl , lcfn , lwarn integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer , dimension ( * ) :: Neq real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODPK, DINTDY, DSTODPK, !  DSOLPK, and DATV. !  The block DLPK01 is declared in subroutines DLSODPK, DSTODPK, DPKSET, !  and DSOLPK. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODPK-  ISTATE(=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1100 ! msg = 'DLSODPK-  Run aborted.. apparent infinite loop.   ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODPK-  ITASK (=I1) illegal.' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODPK-  ISTATE.gt.1 but DLSODPK not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, MF. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODPK-  NEQ (=I1) .lt. 1    ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODPK-  ISTATE = 3 and NEQ increased (I1 to I2).' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1100 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODPK-  ITOL (=I1) illegal. ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODPK-  IOPT (=I1) illegal. ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 700 if ( dls1 % miter < 0 ) goto 700 if ( dls1 % miter > 4 . and . dls1 % miter < 9 ) goto 700 if ( dls1 % miter >= 1 ) dlpk % jpre = Iwork ( 3 ) dlpk % jacflg = 0 if ( dls1 % miter >= 1 ) dlpk % jacflg = Iwork ( 4 ) !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODPK-  MAXORD (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODPK-  MXSTEP (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODPK-  MXHNIL (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODPK-  TOUT (=R1) behind T (=R2)     ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1100 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODPK-  HMAX (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1100 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODPK-  HMIN (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1100 else dlpk % maxl = Iwork ( 8 ) if ( dlpk % maxl == 0 ) dlpk % maxl = 5 dlpk % maxl = min ( dlpk % maxl , dls1 % n ) dlpk % kmp = Iwork ( 9 ) if ( dlpk % kmp == 0 . or . dlpk % kmp > dlpk % maxl ) dlpk % kmp = dlpk % maxl dlpk % delt = Rwork ( 8 ) if ( dlpk % delt == 0.0D0 ) dlpk % delt = 0.05D0 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 dlpk % maxl = min ( 5 , dls1 % n ) dlpk % kmp = dlpk % maxl dlpk % delt = 0.05D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  RWORK segments (in order) are denoted  YH, WM, EWT, SAVF, SAVX, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate == 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh if ( dls1 % miter == 0 ) lenwk = 0 if ( dls1 % miter == 1 ) lenwk = dls1 % n * ( dlpk % maxl + 2 ) + dlpk % maxl * dlpk % maxl if ( dls1 % miter == 2 ) lenwk = dls1 % n * ( dlpk % maxl + 2 + min ( 1 , dlpk % maxl - dlpk % kmp )) + ( dlpk % maxl + 3 ) * dlpk % maxl + 1 if ( dls1 % miter == 3 . or . dls1 % miter == 4 ) lenwk = 5 * dls1 % n if ( dls1 % miter == 9 ) lenwk = 2 * dls1 % n lwp = 0 if ( dls1 % miter >= 1 ) lwp = Iwork ( 1 ) lenwm = lenwk + lwp dlpk % locwp = lenwk + 1 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dlpk % lsavx = dls1 % lsavf + dls1 % n dls1 % lacor = dlpk % lsavx + dls1 % n if ( dls1 % miter == 0 ) dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 31 leniwk = 0 if ( dls1 % miter == 1 ) leniwk = dlpk % maxl liwp = 0 if ( dls1 % miter >= 1 ) liwp = Iwork ( 2 ) leniw = 30 + leniwk + liwp dlpk % lociwp = leniwk + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODPK-  RWORK length needed, LENRW(=I1), exceeds LRW(=I2) ' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1100 elseif ( leniw > Liw ) then msg = 'DLSODPK-  IWORK length needed, LENIW(=I1), exceeds LIW(=I2) ' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1100 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODPK-  RTOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1100 elseif ( atoli < 0.0D0 ) then msg = 'DLSODPK-  ATOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1100 endif enddo !  Load SQRT(N) and its reciprocal in Common. --------------------------- dlpk % sqrtn = sqrt ( real ( dls1 % n )) dlpk % rsqrtn = 1.0D0 / dlpk % sqrtn if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 900 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 nli0 = 0 nni0 = 0 ncfn0 = 0 ncfl0 = 0 nwarn = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 dlpk % nni = 0 dlpk % nli = 0 dlpk % nps = 0 dlpk % ncfn = 0 dlpk % ncfl = 0 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODPK-  EWT(I1) is R1 .le. 0.0        ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1100 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( f(i)/ywt(i) )**2  ) !                                        1 !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          f(i)   = i-th component of initial value of f, !          ywt(i) = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODPK- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1100 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODPK. ------ dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into SAVF. --------- do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst nli0 = dlpk % nli nni0 = dlpk % nni ncfn0 = dlpk % ncfn ncfl0 = dlpk % ncfl nwarn = 0 select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODPK-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2) ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1100 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 900 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 800 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1000 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODPK. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, !  Check for poor Newton/Krylov method performance, update EWT (if not !  at start of problem), check for too much accuracy being requested, !  and check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODPK-  At current T (=R1), MXSTEP (=I1) steps  ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else nstd = dls1 % nst - dls1 % nslast nnid = dlpk % nni - nni0 if ( nstd >= 10 . and . nnid /= 0 ) then avdim = real ( dlpk % nli - nli0 ) / real ( nnid ) rcfn = real ( dlpk % ncfn - ncfn0 ) / real ( nstd ) rcfl = real ( dlpk % ncfl - ncfl0 ) / real ( nnid ) lavd = avdim > ( dlpk % maxl - 0.05D0 ) lcfn = rcfn > 0.9D0 lcfl = rcfl > 0.9D0 lwarn = lavd . or . lcfn . or . lcfl if ( lwarn ) then nwarn = nwarn + 1 if ( nwarn <= 10 ) then if ( lavd ) then msg = 'DLSODPK- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lavd ) then msg = '      at T = R1 by average no. of linear iterations = R2    ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , avdim ) endif if ( lcfn ) then msg = 'DLSODPK- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfn ) then msg = '      at T = R1 by nonlinear convergence failure rate = R2  ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfn ) endif if ( lcfl ) then msg = 'DLSODPK- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfl ) then msg = '      at T = R1 by linear convergence failure rate = R2     ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfl ) endif endif endif endif call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODPK-  At T (=R1), EWT(I1) has become R2.le.0. ' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 600 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODPK-  Warning..Internal T(=R1) and H(=R2) are ' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODPK-  Above warning has been issued I1 times. ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODPK(NEQ,Y,YH,NYH,YH,EWT,SAVF,SAVX,ACOR,WM,IWM,f,JAC,PSOL) ! ----------------------------------------------------------------------- call dstodpk ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dlpk % lsavx ), & & Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), f , jac , psol ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODPK-  At T(=R1), step size H(=R2), the error  ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODPK-  At T (=R1) and step size H (=R2), the   ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) !  KFLAG = -3.  Unrecoverable error from PSOL. -------------------------- msg = 'DLSODPK-  At T (=R1) an unrecoverable error return' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      was made from Subroutine PSOL     ' call xerrwd ( msg , 40 , 205 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 600 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  see if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODPK-  At start of problem, too much accuracy  ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1100 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODPK-  At T (=R1), too much accuracy requested ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 600 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODPK. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 600 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl return 700 continue msg = 'DLSODPK-  MF (=I1) illegal.   ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1100 800 continue msg = 'DLSODPK-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)  ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1100 900 continue msg = 'DLSODPK-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)  ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1100 1000 continue msg = 'DLSODPK-  Trouble in DINTDY. ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1100 continue Istate = - 3 return 99999 continue end subroutine dlsodpk","tags":"","loc":"sourcefile/dlsodpk.inc.html"},{"title":"dlsodi.inc – odepack","text":"Contents Subroutines dlsodi Source Code dlsodi.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! DLSODI solves the initial value problem for linearly implicit !! systems of first order ODEs, !!```text !!     A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, !!``` !! or, in component form, !!```text !!     ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  = !!        i,1      1                     i,NEQ      NEQ !! !!      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ ) !!           i      1   2       NEQ !!``` !! !! If A is singular, this is a differential-algebraic system. !! This version is in double precision. !! !!----------------------------------------------------------------------- !!### Summary of Usage !! !! Communication between the user and the DLSODI package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including optional communication, nonstandard options, !! and instructions for special situations.  See also the example !! problem (with program and output) following this summary. !! !! **A.** First, provide a subroutine of the form: !!```fortran !!               SUBROUTINE RES (NEQ, T, Y, S, R, IRES) !!               DOUBLE PRECISION T, Y(*), S(*), R(*) !!``` !! which computes the residual function !!```text !!     r = g(t,y)  -  A(t,y) * s , !!``` !! as a function of t and the vectors y and s.  (s is an internally !! generated approximation to dy/dt.)  The arrays Y and S are inputs !! to the RES routine and should not be altered.  The residual !! vector is to be stored in the array R.  The argument IRES should be !! ignored for casual use of DLSODI.  (For uses of IRES, see the !! paragraph on RES in the full description below.) !! !! **B.** Next, decide whether full or banded form is more economical !! for the storage of matrices.  DLSODI must deal internally with the !! matrices A and dr/dy, where r is the residual function defined above. !! DLSODI generates a linear combination of these two matrices, and !! this is treated in either full or banded form. !! !! The matrix structure is communicated by a method flag MF, !! which is 21 or 22 for the full case, and 24 or 25 in the band case. !! !! In the banded case, DLSODI requires two half-bandwidth !! parameters ML and MU.  These are, respectively, the widths of the !! lower and upper parts of the band, excluding the main diagonal. !! Thus the band consists of the locations (i,j) with !! i-ML .le. j .le. i+MU, and the full bandwidth is ML+MU+1. !! Note that the band must accommodate the nonzero elements of !! A(t,y), dg/dy, and d(A\\*s)/dy (s fixed).  Alternatively, one !! can define a band that encloses only the elements that are relatively !! large in magnitude, and gain some economy in storage and possibly !! also efficiency, although the appropriate threshhold for !! retaining matrix elements is highly problem-dependent. !! !! **C.** You must also provide a subroutine of the form: !!```fortran !!       SUBROUTINE ADDA (NEQ, T, Y, ML, MU, P, NROWP) !!       DOUBLE PRECISION T, Y(*), P(NROWP,*) !!``` !! which adds the matrix A = A(t,y) to the contents of the array P. !! T and the Y array are input and should not be altered. !! !! In the full matrix case, this routine should add elements of !! to P in the usual order.  I.e., add A(i,j) to P(i,j).  (Ignore the !! ML and MU arguments in this case.) !! !! In the band matrix case, this routine should add element A(i,j) !! to P(i-j+MU+1,j).  I.e., add the diagonal lines of A to the rows of !! P from the top down (the top line of A added to the first row of P). !! !! **D.** For the sake of efficiency, you are encouraged to supply the !! Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)\\*s !! (s = a fixed vector) as above.  If dr/dy is being supplied, !! use MF = 21 or 24, and provide a subroutine of the form: !!```fortran !!       SUBROUTINE JAC (NEQ, T, Y, S, ML, MU, P, NROWP) !!       DOUBLE PRECISION T, Y(*), S(*), P(NROWP,*) !!``` !! which computes dr/dy as a function of t, y, and s.  Here T, Y, and !! S are inputs, and the routine is to load dr/dy into P as follows: !! !! In the full matrix case (MF = 21), load P(i,j) with dr(i)/dy(j), !! the partial derivative of r(i) with respect to y(j).  (Ignore the !! ML and MU arguments in this case.) !! !! In the band matrix case (MF = 24), load P(i-j+mu+1,j) with !! dr(i)/dy(j), i.e. load the diagonal lines of dr/dy into the rows of !! P from the top down. !! !! In either case, only nonzero elements need be loaded, and the !! indexing of P is the same as in the ADDA routine. !! !! Note that if A is independent of y (or this dependence !! is weak enough to be ignored) then JAC is to compute dg/dy. !! !! If it is not feasible to provide a JAC routine, use !! MF = 22 or 25, and DLSODI will compute an approximate Jacobian !! internally by difference quotients. !! !! **E.** Next decide whether or not to provide the initial value of the !! derivative vector dy/dt.  If the initial value of A(t,y) is !! nonsingular (and not too ill-conditioned), you may let DLSODI compute !! this vector (ISTATE = 0).  (DLSODI will solve the system A \\* s = g for !! s, with initial values of A and g.)  If A(t,y) is initially !! singular, then the system is a differential-algebraic system, and !! you must make use of the particular form of the system to compute the !! initial values of y and dy/dt.  In that case, use ISTATE = 1 and !! load the initial value of dy/dt into the array YDOTI. !! !! The input array YDOTI and the initial Y array must be consistent with !! the equations A \\* dy/dt = g.  This implies that the initial residual !! r = g(t,y) - A(t,y) \\* YDOTI  must be approximately zero. !! !! **F.** Write a main program which calls Subroutine DLSODI once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages !! by DLSODI.  On the first call to DLSODI, supply arguments as follows: !! !! RES !! !! : name of user subroutine for residual function r. !! !! ADDA !! !! : name of user subroutine for computing and adding A(t,y). !! !! JAC !! !! : name of user subroutine for Jacobian matrix dr/dy !! (MF = 21 or 24).  If not used, pass a dummy name. !! !! Note: the names for the RES and ADDA routines and (if used) the !! JAC routine must be declared External in the calling program. !! !! NEQ !! !! : number of scalar equations in the system. !! !! Y !! !! : array of initial values, of length NEQ. !! !! YDOTI !! !! : array of length NEQ (containing initial dy/dt if ISTATE = 1). !! !! T !! !! : the initial value of the independent variable. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (scalar or array). !! the estimated local error in y(i) will be controlled so as !! to be roughly less (in magnitude) than !!```text !!       EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!       EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! Thus the local error test passes if, in each component, !! either the absolute error is less than ATOL (or ATOL(i)), !! or the relative error is less than RTOL. !! !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !! control. !! !! _Caution_: Actual (global) errors may exceed these !! local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1 if the !! initial dy/dt is supplied, and 0 otherwise. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!       22 +  9*NEQ + NEQ**2           for MF = 21 or 22, !!       22 + 10*NEQ + (2*ML + MU)*NEQ  for MF = 24 or 25. !!``` !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least 20 + NEQ. !! If MF = 24 or 25, input in IWORK(1),IWORK(2) the lower !! and upper half-bandwidths ML,MU. !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! MF !! !! : method flag.  Standard values are: !! !!  value | description !!  ----- | --------------------------------------------- !!     21 | for a user-supplied full Jacobian. !!     22 | for an internally generated full Jacobian. !!     24 | for a user-supplied banded Jacobian. !!     25 | for an internally generated banded Jacobian. !! !! for other choices of MF, see the paragraph on MF in !! the full description below. !! !! Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK, !! and possibly ATOL. !! !! **G.** The output from the first call (or any call) is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable (normally TOUT). !! !! ISTATE !! !! : allowed values and their descripitions: !! !!  values | description !!  ------ | ------------------------------------------------------------- !!       2 | if DLSODI was successful, negative otherwise. !!      -1 | means excess work done on this call (check all inputs). !!      -2 | means excess accuracy requested (tolerances too small). !!      -3 | means illegal input detected (see printed message). !!      -4 | means repeated error test failures (check all inputs). !!      -5 | means repeated convergence failures (perhaps bad Jacobian !!         | supplied or wrong choice of tolerances). !!      -6 | means error weight became zero during problem. (Solution !!         | component i vanished, and ATOL or ATOL(i) = 0.) !!      -7 | cannot occur in casual use. !!      -8 | means DLSODI was unable to compute the initial dy/dt. !!         | In casual use, this means A(t,y) is initially singular. !!         | Supply YDOTI and use ISTATE = 1 on the first call. !! !!  If DLSODI returns ISTATE = -1, -4, or -5, then the output of !!  DLSODI also includes YDOTI = array containing residual vector !!  r = g - A \\* dy/dt  evaluated at the current t, y, and dy/dt. !! !! **H.** To continue the integration after a successful return, simply !! reset TOUT and call DLSODI again.  No other parameters need be reset. !! !!----------------------------------------------------------------------- !!### Example Problem. !! !! The following is a simple example problem, with the coding !! needed for its solution by DLSODI.  The problem is from chemical !! kinetics, and consists of the following three equations: !!```text !!     dy1/dt = -.04*y1 + 1.e4*y2*y3 !!     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2 !!       0.   = y1 + y2 + y3 - 1. !!``` !! on the interval from t = 0.0 to t = 4.e10, with initial conditions !!```text !! y1 = 1.0, y2 = y3 = 0. !!``` !! !! The following coding solves this problem with DLSODI, using MF = 21 !! and printing results at t = .4, 4., ..., 4.e10.  It uses !! ITOL = 2 and ATOL much smaller for y2 than y1 or y3 because !! y2 has much smaller values.  dy/dt is supplied in YDOTI. We had !! obtained the initial value of dy3/dt by differentiating the !! third equation and evaluating the first two at t = 0. !! At the end of the run, statistical quantities of interest are !! printed (see optional outputs in the full description below). !! !!```fortran !!program dlsodi_ex !!use m_odepack !!implicit none !!external aplusp !!external dgbydy !!external resid !! !!integer,parameter            ::  dp=kind(0.0d0) !!real(kind=dp),dimension(3)   ::  atol,y,ydoti !!integer                      ::  iopt,iout,istate,itask,itol,liw,lrw,mf,neq !!integer,dimension(23)        ::  iwork !!real(kind=dp)                ::  rtol,t,tout !!real(kind=dp),dimension(58)  ::  rwork !! !!   call reference() !! !!   neq = 3 !!   y(1) = 1. !!   y(2) = 0. !!   y(3) = 0. !!   ydoti(1) = -.04 !!   ydoti(2) = .04 !!   ydoti(3) = 0. !!   t = 0. !!   tout = .4 !!   itol = 2 !!   rtol = 1.D-4 !!   atol(1) = 1.D-6 !!   atol(2) = 1.D-10 !!   atol(3) = 1.D-6 !!   itask = 1 !!   istate = 1 !!   iopt = 0 !!   lrw = 58 !!   liw = 23 !!   mf = 21 !!   do iout = 1,12 !!      call dlsodi(resid,aplusp,dgbydy,[neq],y,ydoti,t,tout,itol,[rtol],    & !!                & atol,itask,istate,iopt,rwork,lrw,iwork,liw,mf) !!      write (6,99010) t,y(1),y(2),y(3) !!   99010 format (' At t =',d12.4,'   Y =',3D14.6) !!      if ( istate<0 ) then !!         write (6,99020) istate !!   99020 format (///' Error halt.. ISTATE =',i3) !!         stop 1 !!      else !!         tout = tout*10. !!      endif !!   enddo !!   write (6,99030) iwork(11),iwork(12),iwork(13) !!   99030 format (/' No. steps =',i4,'  No. r-s =',i4,'  No. J-s =',i4) !! !!end program dlsodi_ex !! !!subroutine resid(Neq,T,Y,S,R,Ires) !!implicit none !!integer,parameter :: dp=kind(0.0d0) !! !!integer                                 ::  Neq !!real(kind=dp)                           ::  T !!real(kind=dp),intent(in),dimension(3)   ::  Y !!real(kind=dp),intent(in),dimension(3)   ::  S !!real(kind=dp),intent(out),dimension(3)  ::  R !!integer                                 ::  Ires !! !!   R(1) = -.04*Y(1) + 1.D4*Y(2)*Y(3) - S(1) !!   R(2) = .04*Y(1) - 1.D4*Y(2)*Y(3) - 3.D7*Y(2)*Y(2) - S(2) !!   R(3) = Y(1) + Y(2) + Y(3) - 1. !!end subroutine resid !! !!subroutine aplusp(Neq,T,Y,Ml,Mu,P,Nrowp) !!implicit none !!integer,parameter :: dp=kind(0.0d0) !! !!integer                                         ::  Neq !!real(kind=dp)                                   ::  T !!real(kind=dp),dimension(3)                      ::  Y !!integer                                         ::  Ml !!integer                                         ::  Mu !!real(kind=dp),intent(inout),dimension(Nrowp,3)  ::  P !!integer,intent(in)                              ::  Nrowp !! !!   P(1,1) = P(1,1) + 1. !!   P(2,2) = P(2,2) + 1. !!end subroutine aplusp !! !!subroutine dgbydy(Neq,T,Y,S,Ml,Mu,P,Nrowp) !!implicit none !!integer,parameter                             ::  dp=kind(0.0d0) !!integer                                       ::  Neq !!real(kind=dp)                                 ::  T !!real(kind=dp),intent(in),dimension(3)         ::  Y !!real(kind=dp),dimension(3)                    ::  S !!integer                                       ::  Ml !!integer                                       ::  Mu !!real(kind=dp),intent(out),dimension(Nrowp,3)  ::  P !!integer,intent(in)                            ::  Nrowp !! !!   P(1,1) = -.04 !!   P(1,2) = 1.D4*Y(3) !!   P(1,3) = 1.D4*Y(2) !!   P(2,1) = .04 !!   P(2,2) = -1.D4*Y(3) - 6.D7*Y(2) !!   P(2,3) = -1.D4*Y(2) !!   P(3,1) = 1. !!   P(3,2) = 1. !!   P(3,3) = 1. !!end subroutine dgbydy !!``` !! !!```text !! The output of this program (on a CDC-7600 in single precision) !! is as follows: !! !!   At t =  4.0000e-01   Y =  9.851726e-01  3.386406e-05  1.479357e-02 !!   At t =  4.0000e+00   Y =  9.055142e-01  2.240418e-05  9.446344e-02 !!   At t =  4.0000e+01   Y =  7.158050e-01  9.184616e-06  2.841858e-01 !!   At t =  4.0000e+02   Y =  4.504846e-01  3.222434e-06  5.495122e-01 !!   At t =  4.0000e+03   Y =  1.831701e-01  8.940379e-07  8.168290e-01 !!   At t =  4.0000e+04   Y =  3.897016e-02  1.621193e-07  9.610297e-01 !!   At t =  4.0000e+05   Y =  4.935213e-03  1.983756e-08  9.950648e-01 !!   At t =  4.0000e+06   Y =  5.159269e-04  2.064759e-09  9.994841e-01 !!   At t =  4.0000e+07   Y =  5.306413e-05  2.122677e-10  9.999469e-01 !!   At t =  4.0000e+08   Y =  5.494532e-06  2.197826e-11  9.999945e-01 !!   At t =  4.0000e+09   Y =  5.129457e-07  2.051784e-12  9.999995e-01 !!   At t =  4.0000e+10   Y = -7.170472e-08 -2.868188e-13  1.000000e+00 !! !!   No. steps = 330  No. r-s = 404  No. J-s =  69 !!``` !! !!----------------------------------------------------------------------- !!### Full Description of User Interface to DLSODI. !! !! The user interface to DLSODI consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSODI, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSODI package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of two routines in the DLSODI package, either of !!      which the user may replace with his/her own version, if desired. !!      These relate to the measurement of errors. !! !!----------------------------------------------------------------------- !!### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !!     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, !!     IOPT, LRW, LIW, MF, !! !! and those used for both input and output are !!     Y, T, ISTATE, YDOTI. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSODI to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows. !! !! RES !! !! : the name of the user-supplied subroutine which supplies !! the residual vector for the ODE system, defined by !!```text !!                r = g(t,y) - A(t,y) * s !!``` !! as a function of the scalar t and the vectors !! s and y (s approximates dy/dt).  This subroutine !! is to have the form !!```fortran !!               SUBROUTINE RES (NEQ, T, Y, S, R, IRES) !!               DOUBLE PRECISION T, Y(*), S(*), R(*) !!``` !! where NEQ, T, Y, S, and IRES are input, and R and !! IRES are output.  Y, S, and R are arrays of length NEQ. !! !! On input, IRES indicates how DLSODI will use the !! returned array R, as follows: !! !!  IRES  | description !!  ----- | ------------------------------------------------ !!   1    | means that DLSODI needs the full residual, !!        | r = g - A\\*s, exactly. !!   -1   | means that DLSODI is using R only to compute !!        | the Jacobian dr/dy by difference quotients. !! !! The RES routine can ignore IRES, or it can omit some terms !! if IRES = -1.  If A does not depend on y, then RES can !! just return R = g when IRES = -1.  If g - A\\*s contains other !! additive terms that are independent of y, these can also be !! dropped, if done consistently, when IRES = -1. !! !! The subroutine should set the flag IRES if it !! encounters a halt condition or illegal input. !! Otherwise, it should not reset IRES.  On output, !! !! IRES = 1 or -1 represents a normal return, and !! DLSODI continues integrating the ODE.  Leave IRES !! unchanged from its input value. !! !! IRES = 2 tells DLSODI to immediately return control !! to the calling program, with ISTATE = 3.  This lets !! the calling program change parameters of the problem, !! if necessary. !! !! IRES = 3 represents an error condition (for example, an !! illegal value of y).  DLSODI tries to integrate the system !! without getting IRES = 3 from RES.  If it cannot, DLSODI !! returns with ISTATE = -7 or -1. !! !! On an DLSODI return with ISTATE = 3, -1, or -7, the values !! of T and Y returned correspond to the last point reached !! successfully without getting the flag IRES = 2 or 3. !! !! The flag values IRES = 2 and 3 should not be used to !! handle switches or root-stop conditions.  This is better !! done by calling DLSODI in a one-step mode and checking the !! stopping function for a sign change at each step. !! !! If quantities computed in the RES routine are needed !! externally to DLSODI, an extra call to RES should be made !! for this purpose, for consistent and accurate results. !! To get the current dy/dt for the S argument, use DINTDY. !! !! RES must be declared External in the calling !! program.  See note below for more about RES. !! !! ADDA !! !! : the name of the user-supplied subroutine which adds the !! matrix A = A(t,y) to another matrix stored in the same form !! as A.  The storage form is determined by MITER (see MF). !! This subroutine is to have the form !!```subroutine !!               SUBROUTINE ADDA (NEQ, T, Y, ML, MU, P, NROWP) !!               DOUBLE PRECISION T, Y(*), P(NROWP,*) !!``` !! where NEQ, T, Y, ML, MU, and NROWP are input and P is !! output.  Y is an array of length NEQ, and the matrix P is !! stored in an NROWP by NEQ array. !!```text !! In the full matrix case ( MITER = 1 or 2) ADDA should !! add  A    to P(i,j).  ML and MU are ignored. !!       i,j !! !! In the band matrix case ( MITER = 4 or 5) ADDA should !! add  A    to  P(i-j+MU+1,j). !!       i,j !!``` !! See JAC for details on this band storage form. !! !! ADDA must be declared External in the calling program. !! See note below for more information about ADDA. !! !! JAC !! !! : the name of the user-supplied subroutine which supplies the !! Jacobian matrix, dr/dy, where r = g - A\\*s.  The form of the !! Jacobian matrix is determined by MITER.  JAC is required !! if MITER = 1 or 4 -- otherwise a dummy name can be !! passed.  This subroutine is to have the form !!```fortran !!        SUBROUTINE JAC ( NEQ, T, Y, S, ML, MU, P, NROWP ) !!        DOUBLE PRECISION T, Y(*), S(*), P(NROWP,*) !!``` !! where NEQ, T, Y, S, ML, MU, and NROWP are input and P !! is output.  Y and S are arrays of length NEQ, and the !! matrix P is stored in an NROWP by NEQ array. !! P is to be loaded with partial derivatives (elements !! of the Jacobian matrix) on output. !! !! In the full matrix case (MITER = 1), ML and MU !! are ignored and the Jacobian is to be loaded into P !! by columns-- i.e., dr(i)/dy(j) is loaded into P(i,j). !! !! In the band matrix case (MITER = 4), the elements !! within the band are to be loaded into P by columns, !! with diagonal lines of dr/dy loaded into the !! rows of P.  Thus dr(i)/dy(j) is to be loaded !! into P(i-j+MU+1,j).  The locations in P in the two !! triangular areas which correspond to nonexistent matrix !! elements can be ignored or loaded arbitrarily, as they !! they are overwritten by DLSODI.  ML and MU are the !! half-bandwidth parameters (see IWORK). !! !! In either case, P is preset to zero by the solver, !! so that only the nonzero elements need be loaded by JAC. !! Each call to JAC is preceded by a call to RES with the same !! arguments NEQ, T, Y, and S.  Thus to gain some efficiency, !! intermediate quantities shared by both calculations may be !! saved in a user Common block by RES and not recomputed by JAC !! if desired.  Also, JAC may alter the Y array, if desired. !! !! JAC need not provide dr/dy exactly.  A crude !! approximation (possibly with a smaller bandwidth) will do. !! !! JAC must be declared External in the calling program. !! See note below for more about JAC. !! !! Notes on RES, ADDA, and JAC: !! !! These subroutines may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in the subroutines) and/or Y has length !! exceeding NEQ(1).  However, these routines should not alter !! NEQ(1), Y(1),...,Y(NEQ) or any other input variables. !! See the descriptions of NEQ and Y below. !! !! NEQ !! !! : the size of the system (number of first order ordinary !! differential equations or scalar algebraic equations). !! Used only for input. !! !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in RES, ADDA, or JAC. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! (The DLSODI package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to RES, ADDA, and JAC.  Hence, if it is an array, !! locations NEQ(2),... may be used to store other integer data !! and pass it to RES, ADDA, or JAC.  Each such subroutine !! must include NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 0 or 1), and only for output on other !! calls.  On the first call, Y must contain the vector of !! initial values.  On output, Y contains the computed solution !! vector, evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to RES, !! ADDA, and JAC.  Hence its length may exceed NEQ, !! and locations Y(NEQ+1),... may be used to store other real !! data and pass it to RES, ADDA, or JAC.  (The DLSODI !! package accesses only Y(1),...,Y(NEQ). ) !! !! YDOTI !! !! : a real array for the initial value of the vector !! dy/dt and for work space, of dimension at least NEQ. !! !! On input: !! !! If ISTATE = 0, then DLSODI will compute the initial value !! of dy/dt, if A is nonsingular.  Thus YDOTI will !! serve only as work space and may have any value. !! !! If ISTATE = 1, then YDOTI must contain the initial value !! of dy/dt. !! !! If ISTATE = 2 or 3 (continuation calls), then YDOTI !! may have any value. !! !! Note: If the initial value of A is singular, then !! DLSODI cannot compute the initial value of dy/dt, so !! it must be provided in YDOTI, with ISTATE = 1. !! !! On output, when DLSODI terminates abnormally with ISTATE = !! -1, -4, or -5, YDOTI will contain the residual !! r = g(t,y) - A(t,y)\\*(dy/dt).  If r is large, t is near !! its initial value, and YDOTI is supplied with ISTATE = 1, !! then there may have been an incorrect input value of !! YDOTI = dy/dt, or the problem (as given to DLSODI) !! may not have a solution. !! !! If desired, the YDOTI array may be used for other !! purposes between calls to the solver. !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! On output, after each call, T is the value at which a !! computed solution Y is evaluated (usually the same as TOUT). !! on an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 0 or 1), TOUT may be !! equal to T for one call, then should .ne. T for the next !! call.  For the initial T, an input value of TOUT .ne. T is !! used in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!```text !!                      RMS-norm of ( E(i)/EWT(i) )   .le.   1, !!          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), !!``` !! and the RMS-norm (root-mean-square norm) here is !!```text !! RMS-norm(v) = SQRT(sum v(i)**2 / NEQ) !!``` !! Here EWT = (EWT(i)) !! is a vector of weights which must always be positive, and !! the values of RTOL and ATOL should all be non-negative. !! The following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL   |   ATOL   |      EWT(i) !!  ---- |-------- |--------- |------------------------------- !!   1   | scalar  |  scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | scalar  |  array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting !! user-supplied routines for the setting of EWT and/or for !! the norm calculation.  See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! Input only.  ITASK has the following values and meanings. !! !!  value | description !!  ----- | --------------------------------------------------------- !!      1 | means normal computation of output values of y(t) at !!        | t = TOUT (by overshooting and interpolating). !!      2 | means take one step only and return. !!      3 | means stop at the first internal mesh point at or !!        | beyond t = TOUT and return. !!      4 | means normal computation of output values of y(t) at !!        | t = TOUT but without overshooting t = TCRIT. !!        | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!        | or beyond TOUT, but not behind it in the direction of !!        | integration.  This option is useful if the problem !!        | has a singularity at or beyond t = TCRIT. !!      5 | means take one step, without passing TCRIT, and return. !!        | TCRIT must be input as RWORK(1). !! !! Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at t = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! state of the calculation. !! !! On input, the values of ISTATE are as follows. !! !!  value | description !!  ----- | --------------------------------------------------------- !!      0 | means this is the first call for the problem, and !!        | DLSODI is to compute the initial value of dy/dt !!        | (while doing other initializations).  See note below. !!      1 | means this is the first call for the problem, and !!        | the initial value of dy/dt has been supplied in !!        | YDOTI (DLSODI will do other initializations).  See note !!        | below. !!      2 | means this is not the first call, and the calculation !!        | is to continue normally, with no change in any input !!        | parameters except possibly TOUT and ITASK. !!        | (If ITOL, RTOL, and/or ATOL are changed between calls !!        | with ISTATE = 2, the new values will be used but not !!        | tested for legality.) !!      3 | means this is not the first call, and the !!        | calculation is to continue normally, but with !!        || a change in input parameters other than !!        | TOUT and ITASK.  Changes are allowed in !!        | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, ML, MU, !!        | and any of the optional inputs except H0. !!        | (See IWORK description for ML and MU.) !! !! Note:  A preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 0 or 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value | description !!  ----- | --------------------------------------------------------- !!      0 | or 1  means nothing was done; TOUT = t and !!        | ISTATE = 0 or 1 on input. !!      2 | means that the integration was performed successfully. !!      3 | means that the user-supplied Subroutine RES signalled !!        | DLSODI to halt the integration and return (IRES = 2). !!        | Integration as far as T was achieved with no occurrence !!        | of IRES = 2, but this flag was set on attempting the !!        | next step. !!     -1 | means an excessive amount of work (more than MXSTEP !!        | steps) was done on this call, before completing the !!        | requested task, but the integration was otherwise !!        | successful as far as T.  (MXSTEP is an optional input !!        | and is normally 500.)  To continue, the user may !!        | simply reset ISTATE to a value .gt. 1 and call again !!        | (the excess work step counter will be reset to 0). !!        | In addition, the user may increase MXSTEP to avoid !!        | this error return (see below on optional inputs). !!     -2 | means too much accuracy was requested for the precision !!        | of the machine being used.  This was detected before !!        | completing the requested task, but the integration !!        | was successful as far as T.  To continue, the tolerance !!        | parameters must be reset, and ISTATE must be set !!        | to 3.  The optional output TOLSF may be used for this !!        | purpose.  (Note: If this condition is detected before !!        | taking any steps, then an illegal input return !!        | (ISTATE = -3) occurs instead.) !!     -3 | means illegal input was detected, before taking any !!        | integration steps.  See written message for details. !!        | Note:  If the solver detects an infinite loop of calls !!        | to the solver with illegal input, it will cause !!        | the run to stop. !!     -4 | means there were repeated error test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | The problem may have a singularity, or the input !!        | may be inappropriate. !!     -5 | means there were repeated convergence test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | This may be caused by an inaccurate Jacobian matrix. !!     -6 | means EWT(i) became zero for some i during the !!        | integration.  pure relative error control (ATOL(i)=0.0) !!        | was requested on a variable which has now vanished. !!        | the integration was successful as far as T. !!     -7 | means that the user-supplied Subroutine RES set !!        | its error flag (IRES = 3) despite repeated tries by !!        | DLSODI to avoid that condition. !!     -8 | means that ISTATE was 0 on input but DLSODI was unable !!        | to compute the initial value of dy/dt.  See the !!        | printed message for details. !! !! Note:  Since the normal output value of ISTATE is 2, !! it does not need to be reset for normal continuation. !! Similarly, ISTATE (= 3) need not be reset if RES told !! DLSODI to return because the calling program must change !! the parameters of the problem. !! Also, since a negative input value of ISTATE will be !! regarded as illegal, a negative output value requires the !! user to change it, and possibly other inputs, before !! calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !! !!  IOPT  | description !!  ----- | --------------------------------------------------- !!    0   | means no optional inputs are being used. !!        | Default values will be used in all cases. !!    1   | means one or more optional inputs are being used. !! !! RWORK !! !! : a real working array (double precision). !! The length of RWORK must be at least !!```text !!             20 + NYH*(MAXORD + 1) + 3*NEQ + LENWM    where !!          NYH    = the initial value of NEQ, !!          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!                   smaller value is given as an optional input), !!          LENWM   = NEQ**2 + 2    if MITER is 1 or 2, and !!          LENWM   = (2*ML+MU+1)*NEQ + 2 if MITER is 4 or 5. !!``` !! !! (See MF description for the definition of METH and MITER.) !! Thus if MAXORD has its default value and NEQ is constant, !! this length is !!```text !!             22 + 16*NEQ + NEQ**2         for MF = 11 or 12, !!             22 + 17*NEQ + (2*ML+MU)*NEQ  for MF = 14 or 15, !!             22 +  9*NEQ + NEQ**2         for MF = 21 or 22, !!             22 + 10*NEQ + (2*ML+MU)*NEQ  for MF = 24 or 25. !!``` !! The first 20 words of RWORK are reserved for conditional !! and optional inputs and optional outputs. !! !! The following word in RWORK is a conditional input: !! !!      RWORK(1) = TCRIT = critical value of t which the solver !!                 is not to overshoot.  Required if ITASK is !!                 4 or 5, and ignored otherwise.  (See ITASK.) !! !! LRW !! !! : the length of the array RWORK, as declared by the user. !! (This will be checked by the solver.) !! !! IWORK !! !! : an integer work array.  The length of IWORK must be at least !! 20 + NEQ .  The first few words of IWORK are used for !! conditional and optional inputs and optional outputs. !! !! The following 2 words in IWORK are conditional inputs: !!```text !!      IWORK(1) = ML !!      IWORK(2) = MU !!``` !! These are the lower and upper half-bandwidths, respectively, of the !! matrices in the problem-- the Jacobian dr/dy and the left-hand side !! matrix A. These half-bandwidths exclude the main diagonal, so the total !! bandwidth is ML + MU + 1 . !! !! The band is defined by the matrix locations (i,j) with i-ML .le. j !! .le. i+MU.  ML and MU must satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are !! required if MITER is 4 or 5, and ignored otherwise. !! !! ML and MU may in fact be the band parameters for matrices to which !! dr/dy and A are only approximately equal. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! Note:  The work arrays must not be altered between calls to DLSODI !! for the same problem, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSODI between calls, if !! desired (but not for use by RES, ADDA, or JAC). !! !! MF !! !! : the method flag.  Used only for input.  The legal values of !! MF are 11, 12, 14, 15, 21, 22, 24, and 25. !! !! MF has decimal digits METH and MITER: MF = 10\\*METH + MITER. !! !! METH indicates the basic linear multistep method: !! !!  METH  | description !!  ----- | --------------------------------------------------- !!    1   | means the implicit Adams method. !!    2   | means the method based on Backward !!        | Differentiation Formulas (BDFs). !! !! The BDF method is strongly preferred for stiff !! problems, while the Adams method is preferred when !! the problem is not stiff.  If the matrix A(t,y) is !! nonsingular, stiffness here can be taken to mean that of !! the explicit ODE system dy/dt = A-inverse \\* g.  If A is !! singular, the concept of stiffness is not well defined. !! !! If you do not know whether the problem is stiff, we !! recommend using METH = 2.  If it is stiff, the advantage !! of METH = 2 over METH = 1 will be great, while if it is !! not stiff, the advantage of METH = 1 will be slight. !! If maximum efficiency is important, some experimentation !! with METH may be necessary. !! !! MITER indicates the corrector iteration method: !! !!  MITER | description !!  ----- | --------------------------------------------------- !!   1    | means chord iteration with a user-supplied !!        | full (NEQ by NEQ) Jacobian. !!   2    | means chord iteration with an internally !!        | generated (difference quotient) full Jacobian. !!        | This uses NEQ+1 extra calls to RES per dr/dy !!        | evaluation. !!   4    | means chord iteration with a user-supplied !!        | banded Jacobian. !!   5    | means chord iteration with an internally !!        | generated banded Jacobian (using ML+MU+2 !!        | extra calls to RES per dr/dy evaluation). !! !! If MITER = 1 or 4, the user must supply a Subroutine JAC !! (the name is arbitrary) as described above under JAC. !! For other values of MITER, a dummy argument can be used. !!----------------------------------------------------------------------- !!#### Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! the use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !! Name  |  Location |     Meaning and Default Value !! ----- | --------- | -------------------------------------------------- !! H0    |  RWORK(5) | the step size to be attempted on the first step. !!       |           | The default value is determined by the solver. !!       |           | !! HMAX  |  RWORK(6) | the maximum absolute step size allowed. !!       |           | The default value is infinite. !!       |           | !! HMIN  |  RWORK(7) | the minimum absolute step size allowed. !!       |           | The default value is 0.  (This lower bound is not !!       |           | enforced on the final step before reaching TCRIT !!       |           | when ITASK = 4 or 5.) !!       |           | !! MAXORD|  IWORK(5) | the maximum order to be allowed.  The default !!       |           | value is 12 if METH = 1, and 5 if METH = 2. !!       |           | If MAXORD exceeds the default value, it will !!       |           | be reduced to the default value. !!       |           | If MAXORD is changed during the problem, it may !!       |           | cause the current order to be reduced. !!       |           | !! MXSTEP|  IWORK(6) | maximum number of (internally defined) steps !!       |           | allowed during one call to the solver. !!       |           | The default value is 500. !!       |           | !! MXHNIL|  IWORK(7) | maximum number of messages printed (per problem) !!       |           | warning that T + H = T on a step (H = step size). !!       |           | This must be positive to result in a non-default !!       |           | value.  The default value is 10. !! !!----------------------------------------------------------------------- !!#### Optional Outputs. !! !! As optional additional output from DLSODI, the variables listed !! below are quantities related to the performance of DLSODI !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSODI, and on any return with !! ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal !! input) or -8, they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !!  Name  | Location  |   Meaning !!  ----- | --------- | -------------------------------------------------- !!        |           | !!  HU    |  RWORK(11)| the step size in t last used (successfully). !!        |           | !!  HCUR  |  RWORK(12)| the step size to be attempted on the next step. !!        |           | !!  TCUR  |  RWORK(13)| the current value of the independent variable !!        |           | which the solver has actually reached, i.e. the !!        |           | current internal mesh point in t.  On output, TCUR !!        |           | will always be at least as far as the argument !!        |           | T, but may be farther (if interpolation was done). !!        |           | !!  TOLSF |  RWORK(14)| a tolerance scale factor, greater than 1.0, !!        |           | computed when a request for too much accuracy was !!        |           | detected (ISTATE = -3 if detected at the start of !!        |           | the problem, ISTATE = -2 otherwise).  If ITOL is !!        |           | left unaltered but RTOL and ATOL are uniformly !!        |           | scaled up by a factor of TOLSF for the next call, !!        |           | then the solver is deemed likely to succeed. !!        |           | (The user may also ignore TOLSF and alter the !!        |           | tolerance parameters in any other way appropriate.) !!        |           | !!  NST   |  IWORK(11)| the number of steps taken for the problem so far. !!        |           | !!  NRE   |  IWORK(12)| the number of residual evaluations (RES calls) !!        |           | for the problem so far. !!        |           | !!  NJE   |  IWORK(13)| the number of Jacobian evaluations (each involving !!        |           | an evaluation of A and dr/dy) for the problem so !!        |           | far.  This equals the number of calls to ADDA and !!        |           | (if MITER = 1 or 4) JAC, and the number of matrix !!        |           | LU decompositions. !!        |           | !!  NQU   |  IWORK(14)| the method order last used (successfully). !!        |           | !!  NQCUR |  IWORK(15)| the order to be attempted on the next step. !!        |           | !!  IMXER |  IWORK(16)| the index of the component of largest magnitude in !!        |           | the weighted local error vector ( E(i)/EWT(i) ), !!        |           | on an error return with ISTATE = -4 or -5. !!        |           | !!  LENRW |  IWORK(17)| the length of RWORK actually required. !!        |           | This is defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !!        |           | !!  LENIW |  IWORK(18)| the length of IWORK actually required. !!        |           | This is defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !! !! The following two arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address in RWORK, and its description. !! !!  Name  | Base Address  | Description !!  ----- | ------------- | ----------------------------------------------- !!  YH    |  21           |  the Nordsieck history array, of size NYH by !!        |               |  (NQCUR + 1), where NYH is the initial value !!        |               |  of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!        |               |  of YH contains HCUR\\*\\*j/factorial(j) times !!        |               |  the j-th derivative of the interpolating !!        |               |  polynomial currently representing the solution, !!        |               |  evaluated at t = TCUR. !!        |               | !!  ACOR  |   LENRW-NEQ+1 |  array of size NEQ used for the accumulated !!        |               |  corrections on each step, scaled on output to !!        |               |  represent the estimated local error in y on the !!        |               |  last step. This is the vector E in the descrip- !!        |               |  tion of the error control.  It is defined only !!        |               |  on a return from DLSODI with ISTATE = 2. !! !!----------------------------------------------------------------------- !!### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSODI. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !!  Form of Call               | Function !!  -------------------------- | ------------------------------------------- !!   CALL XSETUN(LUN)          | Set the logical unit number, LUN, for !!                             | output of messages from DLSODI, if !!                             | the default is not desired. !!                             | The default value of LUN is 6. !!                             | !!   CALL XSETF(MFLAG)         | Set a flag to control the printing of !!                             | messages by DLSODI. !!                             | MFLAG = 0 means do not print. (Danger: !!                             | This risks losing valuable information.) !!                             | MFLAG = 1 means print (the default). !!                             | !!                             | Either of the above calls may be made at !!                             | any time and will take effect immediately. !!                             | !!   CALL DSRCOM(RSAV,ISAV,JOB)| saves and restores the contents of !!                             | the internal Common blocks used by !!                             | DLSODI (see Part 3 below). !!                             | RSAV must be a real array of length 218 !!                             | or more, and ISAV must be an integer !!                             | array of length 37 or more. !!                             |     JOB=1 means save Common into RSAV/ISAV. !!                             |     JOB=2 means restore Common from RSAV/ISAV. !!                             | !!                             | DSRCOM is useful if one is !!                             | interrupting a run and restarting !!                             | later, or alternating between two or !!                             | more problems solved with DLSODI. !!                             | !!   CALL DINTDY(,,,,,)        | Provide derivatives of y, of various !!        (see below)          | orders, at a specified point t, if !!                             | desired.  It may be called only after !!                             | a successful return from DLSODI. !! !! The detailed instructions for using DINTDY are as follows. !! !!#### The form of the call is: !!```fortran !!   CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) !!``` !!#### The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by DLSODI). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(T), is already provided !! by DLSODI directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! RWORK(21) !! !! : the base address of the history array YH. !! !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !!#### The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !!----------------------------------------------------------------------- !!### Part 3.  Save and Restore Program State !! !! If the solution of a given problem by DLSODI is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSODI call prior to the !! interruption, the contents of the call sequence variables and the !! internal state values, and later restore these values before the !! next DLSODI call for that problem.  To save and restore the values !! use Subroutine DSRCOM (see Part 2 above). !! !!----------------------------------------------------------------------- !!### Part 4.  Optionally Replaceable Solver Routines. !! !! Below are descriptions of two routines in the DLSODI package which !! relate to the measurement of errors.  Either routine can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !!#### (a) DEWSET() !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSODI call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM !! routine (see below), and also used by DLSODI in the computation !! of the optional output IMXER, the diagonal Jacobian approximation, !! and the increments for difference quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !!#### (b) DVNORM() !! The following is a real function routine which computes the weighted !! root-mean-square norm of a vector v: !!```text !!     D = DVNORM (N, V, W) !! where: !!   N = the length of the vector, !!   V = real array of length N containing the vector, !!   W = real array of length N containing weights, !!   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). !!``` !! DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where !! EWT is as set by Subroutine DEWSET. !! !! If the user supplies this function, it should return a non-negative !! value of DVNORM suitable for use in the error control in DLSODI. !! None of the arguments should be altered by DVNORM. !! For example, a user-supplied DVNORM routine might: !! !!  - substitute a max-norm of (V(i)\\*W(i)) for the RMS-norm, or !!  - ignore some components of V in the norm, with the effect of !!    suppressing the error control on those components of y. !! !!----------------------------------------------------------------------- !!### Pedigree: !! !! DLSODI is a derived from the 18 November 2003 version of !! \"DLSODI: Livermore Solver for Ordinary Differential Equations !! (implicit form)\". !! !!----------------------------------------------------------------------- !! !! Reference: !! !!     Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !!----------------------------------------------------------------------- !! Authors: !!```text !!      Alan C. Hindmarsh and Jeffrey F. Painter !!      Center for Applied Scientific Computing, L-561 !!      Lawrence Livermore National Laboratory !!      Livermore, CA 94551 !!``` ! ----------------------------------------------------------------------- ! ### REVISION HISTORY  (YYYYMMDD) !  19800424  DATE WRITTEN !  19800519  Corrected access of YH on forced order reduction; !            numerous corrections to prologues and other comments. !  19800617  In main driver, added loading of SQRT(UROUND) in RWORK; !            minor corrections to main prologue. !  19800903  Corrected ISTATE logic; minor changes in prologue. !  19800923  Added zero initialization of HU and NQU. !  19801028  Reorganized RES calls in AINVG, STODI, and PREPJI; !            in LSODI, corrected NRE increment and reset LDY0 at 580; !            numerous corrections to main prologue. !  19801218  Revised XERRWD routine; minor corrections to main prologue. !  19810330  Added Common block /LSI001/; use LSODE's INTDY and SOLSY; !            minor corrections to XERRWD and error message at 604; !            minor corrections to declarations; corrections to prologues. !  19810818  Numerous revisions: replaced EWT by 1/EWT; used flags !            JCUR, ICF, IERPJ, IERSL between STODI and subordinates; !            added tuning parameters CCMAX, MAXCOR, MSBP, MXNCF; !            reorganized returns from STODI; reorganized type decls.; !            fixed message length in XERRWD; changed default LUNIT to 6; !            changed Common lengths; changed comments throughout. !  19820906  Corrected use of ABS(H) in STODI; minor comment fixes. !  19830510  Numerous revisions: revised diff. quotient increment; !            eliminated block /LSI001/, using IERPJ flag; !            revised STODI logic after PJAC return; !            revised tuning of H change and step attempts in STODI; !            corrections to main prologue and internal comments. !  19870330  Major update: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODI; !            in STODI, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            converted arithmetic IF statements to logical IF statements; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20020502  Corrected declarations in descriptions of user routines. !  20031105  Restored 'own' variables to Common block, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. !  20031117  Changed internal names NRE, LSAVR to NFE, LSAVF resp. ! !------------------------------------------------------------------------- !  Other routines in the DLSODI package. ! !  In addition to Subroutine DLSODI, the DLSODI package includes the !  following subroutines and function routines: !   DAINVG   computes the initial value of the vector !              dy/dt = A-inverse * g !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DSTODI   is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DPREPJI  computes and preprocesses the Jacobian matrix !            and the Newton iteration matrix P. !   DSOLSY   manages solution of linear system in chord iteration. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted RMS-norm of a vector. !   DSRCOM   is a user-callable routine to save and restore !            the contents of the internal Common blocks. !   DGEFA and DGESL   are routines from LINPACK for solving full !            systems of linear algebraic equations. !   DGBFA and DGBSL   are routines from LINPACK for solving banded !            linear systems. !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note:  DVNORM, DUMACH, and IXSAV are function routines. !  All the others are subroutines. ! !!----------------------------------------------------------------------- subroutine dlsodi ( res , adda , jac , Neq , Y , Ydoti , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , Mf ) external adda external jac external res real ( kind = dp ) :: Atol ( * ) real ( kind = dp ) :: Rtol ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydoti ( * ) real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , ier , iflag , imxer , ires , kgo , leniw , lenrw , lenwm , lp , lyd0 , ml , mu logical :: ihit integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf integer , intent ( inout ) :: Iwork ( Liw ) integer , save :: mord ( 2 ) character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 integer :: Neq ( * ) real ( kind = dp ), intent ( inout ) :: Rwork ( Lrw ) real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following internal Common block contains !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODI, DINTDY, DSTODI, !  DPREPJI, and DSOLSY. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 0 or 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 0 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODI-  ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1300 ! msg = 'DLSODI-  Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODI-  ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( Istate <= 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODI-  ISTATE .gt. 1 but DLSODI not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 0 or 1) !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  MF, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODI-  NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( Istate > 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODI-  ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1300 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODI-  ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODI-  IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 900 if ( dls1 % miter <= 0 . or . dls1 % miter > 5 ) goto 900 if ( dls1 % miter == 3 ) goto 900 if ( dls1 % miter >= 3 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODI-  ML(=I1) illegal: .lt. 0 or .ge. NEQ(=I2) ' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODI-  MU(=I1) illegal: .lt. 0 or .ge. NEQ(=I2) ' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1300 endif endif !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODI-  MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODI-  MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODI-  MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODI-  TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1300 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODI-  HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1300 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODI-  HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1300 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted YH, WM, EWT, SAVR, ACOR. ! ----------------------------------------------------------------------- dls1 % lyh = 21 if ( Istate <= 1 ) dls1 % nyh = dls1 % n dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh lenwm = 0 if ( dls1 % miter <= 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( dls1 % miter >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODI-  RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1300 elseif ( leniw > Liw ) then msg = 'DLSODI-  IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1300 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODI-  RTOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1300 elseif ( atoli < 0.0D0 ) then msg = 'DLSODI-  ATOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1300 endif enddo if ( Istate <= 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 0 or 1). !  It contains all remaining initializations, the call to DAINVG !  (if ISTATE = 1), and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1100 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nfe = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Compute initial dy/dt, if necessary, and load it and initial Y into YH lyd0 = dls1 % lyh + dls1 % nyh lp = dls1 % lwm + 1 if ( Istate == 1 ) then !  Initial dy/dt was supplied.  Load into YH (LYD0 points to YH(*,2).). - do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) Rwork ( i + lyd0 - 1 ) = Ydoti ( i ) enddo else !  DLSODI must compute initial dy/dt (LYD0 points to YH(*,2)). ---------- call dainvg ( res , adda , Neq ( 1 ), T , Y , Rwork ( lyd0 ), dls1 % miter , ml , mu , Rwork ( lp ), Iwork ( 21 ), ier ) dls1 % nfe = dls1 % nfe + 1 if ( ier < 0 ) then !  DAINVG failed because matrix A was singular. ------------------------- ier = - ier msg = 'DLSODI- Attempt to initialize dy/dt failed:  Matrix A is    ' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      singular.  DGEFA or DGBFA returned INFO = I1' call xerrwd ( msg , 50 , 207 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return elseif ( ier > 0 ) then !  DAINVG failed because RES set IRES to 2 or 3. ------------------------ msg = 'DLSODI-  Attempt to initialize dy/dt failed       ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      because residual routine set its error flag ' call xerrwd ( msg , 50 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to IRES = (I1)' call xerrwd ( msg , 20 , 208 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return else do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo endif endif !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODI-  EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1300 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( YDOT(i)/ywt(i) )**2  ) !                                        1 !  where   w0      = MAX ( ABS(T), ABS(TOUT) ), !          YDOT(i) = i-th component of initial value of dy/dt, !          ywt(i)  = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODI-  TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1300 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lyd0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = h0 * Rwork ( i + lyd0 - 1 ) enddo goto 200 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODI. ------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into YDOTI.--------- do i = 1 , dls1 % n Ydoti ( i ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif !  Reload WM(1) = RWORK(lWM), since lWM may have changed. --------------- Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODI-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1300 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1000 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1100 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1200 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1000 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1200 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODI. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODI-  At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODI-  At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 700 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODI-  Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODI-  Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODI(NEQ,Y,YH,NYH,YH1,EWT,SAVF,SAVR,ACOR,WM,IWM,RES, !                  ADDA,JAC,DPREPJI,DSOLSY) !  Note: SAVF in DSTODI occupies the same space as YDOTI in DLSODI. ! ----------------------------------------------------------------------- call dstodi ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Ydoti , Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), res , adda , jac , dprepji , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODI-  At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODI-  At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) case ( 5 ) !  IRES = 3 returned by RES, despite retries by DSTODI. ----------------- msg = 'DLSODI-  At T (=R1) residual routine returned     ' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error IRES = 3 repeatedly.        ' call xerrwd ( msg , 40 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 700 case default ! !  KGO = 1:success; 2:error test failure; 3:convergence failure; !        4:RES ordered return. 5:RES returned error. ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  see if TOUT or TCRIT was reached.  adjust dls1%h if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODI-  At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1300 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODI-  At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 700 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODI. !  if ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 if ( dls1 % kflag ==- 3 ) Istate = 3 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer ! Compute residual if relevant. ---------------------------------------- 600 continue lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + lyd0 - 1 ) / dls1 % h Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo ires = 1 call res ( Neq , dls1 % tn , Y , Rwork ( dls1 % lsavf ), Ydoti , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then msg = 'DLSODI-  Residual routine set its flag IRES       ' call xerrwd ( msg , 50 , 210 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to (I1) when called for final output.       ' call xerrwd ( msg , 50 , 210 , 0 , 1 , ires , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 800 ! Set Y vector, T, and optional outputs. ------------------------------- 700 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo 800 continue T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq return 900 continue msg = 'DLSODI-  MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1300 1000 continue msg = 'DLSODI-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1300 1100 continue msg = 'DLSODI-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1300 1200 continue msg = 'DLSODI-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1300 continue Istate = - 3 return 99999 continue end subroutine dlsodi","tags":"","loc":"sourcefile/dlsodi.inc.html"},{"title":"dlsodkr.inc – odepack","text":"Contents Subroutines dlsodkr Source Code dlsodkr.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! DLSODKR: Livermore Solver for Ordinary Differential equations, !!          with preconditioned Krylov iteration methods for the !!          Newton correction linear systems, and with Rootfinding. !! !! DLSODKR solves the initial value problem for stiff or nonstiff !! systems of first order ODEs, !!```text !!     dy/dt = f(t,y),  or, in component form, !!     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). !!``` !! At the same time, it locates the roots of any of a set of functions !!```text !!     g(i) = g(i,t,y(1),...,y(NEQ))  (i = 1,...,ng). !!``` !! !!   This version is in double precision. !! !!----------------------------------------------------------------------- !!### Introduction. !! !! This is a modification of the DLSODE package, and differs from it !! in five ways: !! 1.  It uses various preconditioned Krylov subspace iteration methods !!     for the linear algebraic systems that arise in the case of stiff !!     systems.  See the introductory notes below. !! 2.  It does automatic switching between functional (fixpoint) !!     iteration and Newton iteration in the corrector iteration. !! 3.  It finds the root of at least one of a set of constraint !!     functions g(i) of the independent and dependent variables. !!     It finds only those roots for which some g(i), as a function !!     of t, changes sign in the interval of integration. !!     It then returns the solution at the root, if that occurs !!     sooner than the specified stop condition, and otherwise returns !!     the solution according the specified stop condition. !! 4.  It supplies to JAC an input flag, JOK, which indicates whether !!     JAC may (optionally) bypass the evaluation of Jacobian matrix data !!     and instead process saved data (with the current value of scalar hl0). !! 5.  It contains a new subroutine that calculates the initial step !!     size to be attempted. !! !!### Introduction to the Krylov methods in DLSODKR: !! !! The linear systems that must be solved have the form !!```text !!   A * x  = b,  where  A = identity - hl0 * (df/dy) . !!``` !! Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial !! derivatives of f (NEQ by NEQ). !! !! The particular Krylov method is chosen by setting the second digit, !! MITER, in the method flag MF. !! Currently, the values of MITER have the following meanings: !! !!  MITER  | description !!  ------ | ------------------------------------------------------------ !!   1     | means the Scaled Preconditioned Incomplete !!         | Orthogonalization Method (SPIOM). !!         | !!   2     | means an incomplete version of the preconditioned scaled !!         | Generalized Minimal Residual method (SPIGMR). !!         | This is the best choice in general. !!         | !!   3     | means the Preconditioned Conjugate Gradient method (PCG). !!         | Recommended only when df/dy is symmetric or nearly so. !!         | !!   4     | means the scaled Preconditioned Conjugate Gradient method !!         | (PCGS).  Recommended only when D-inverse \\* df/dy \\* D is !!         | symmetric or nearly so, where D is the diagonal scaling !!         | matrix with elements 1/EWT(i) (see RTOL/ATOL description). !!         | !!   9     | means that only a user-supplied matrix P (approximating A) !!         | will be used, with no Krylov iteration done.  This option !!         | allows the user to provide the complete linear system !!         | solution algorithm, if desired. !! !! The user can apply preconditioning to the linear system A\\*x = b, !! by means of arbitrary matrices (the preconditioners). !! !! In the case of SPIOM and SPIGMR, one can apply left and right !! preconditioners P1 and P2, and the basic iterative method is then !! applied to the matrix (P1-inverse)\\*A\\*(P2-inverse) instead of to the !! matrix A.  The product P1\\*P2 should be an approximation to matrix A !! such that linear systems with P1 or P2 are easier to solve than with !! A.  Preconditioning from the left only or right only means using !! P2 = identity or P1 = identity, respectively. !! !! In the case of the PCG and PCGS methods, there is only one !! preconditioner matrix P (but it can be the product of more than one). !! It should approximate the matrix A but allow for relatively !! easy solution of linear systems with coefficient matrix P. !! For PCG, P should be positive definite symmetric, or nearly so, !! and for PCGS, the scaled preconditioner D-inverse \\* P \\* D !! should be symmetric or nearly so. !! !! If the Jacobian J = df/dy splits in a natural way into a sum !! J = J1 + J2, then one possible choice of preconditioners is !! P1 = identity - hl0 \\* J1  and  P2 = identity - hl0 \\* J2 !! provided each of these is easy to solve (or approximately solve). !! !!----------------------------------------------------------------------- !! Summary of Usage. !! !! Communication between the user and the DLSODKR package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including optional communication, nonstandard options, !! and instructions for special situations.  See also the demonstration !! program distributed with this solver. !! !! **A.** First provide a subroutine of the form: !!```fortran !!               SUBROUTINE F (NEQ, T, Y, YDOT) !!               DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! which supplies the vector function f by loading YDOT(i) with f(i). !! !! **B.** Provide a subroutine of the form: !!```fortran !!               SUBROUTINE G (NEQ, T, Y, NG, GOUT) !!               DOUBLE PRECISION T, Y(*), GOUT(NG) !!``` !! which supplies the vector function g by loading GOUT(i) with !! g(i), the i-th constraint function whose root is sought. !! !! **C.** Next determine (or guess) whether or not the problem is stiff. !! Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue !! whose real part is negative and large in magnitude, compared to the !! reciprocal of the t span of interest.  If the problem is nonstiff, !! use a method flag MF = 10.  If it is stiff, MF should be between 21 !! and 24, or possibly 29.  MF = 22 is generally the best choice. !! Use 23 or 24 only if symmetry is present.  Use MF = 29 if the !! complete linear system solution is to be provided by the user. !! The following four parameters must also be set. !!```text !!  IWORK(1) = LWP  = length of real array WP for preconditioning. !!  IWORK(2) = LIWP = length of integer array IWP for preconditioning. !!  IWORK(3) = JPRE = preconditioner type flag: !!                  = 0 for no preconditioning (P1 = P2 = P = identity) !!                  = 1 for left-only preconditioning (P2 = identity) !!                  = 2 for right-only preconditioning (P1 = identity) !!                  = 3 for two-sided preconditioning (and PCG or PCGS) !!  IWORK(4) = JACFLG = flag for whether JAC is called. !!                    = 0 if JAC is not to be called, !!                    = 1 if JAC is to be called. !!``` !! Use JACFLG = 1 if JAC computes any nonconstant data for use in !! preconditioning, such as Jacobian elements. !! The arrays WP and IWP are work arrays under the user's control, !! for use in the routines that perform preconditioning operations. !! !! **D.** If the problem is stiff, you must supply two routines that deal !! with the preconditioning of the linear systems to be solved. !! !! These are as follows: !!```fortran !!     SUBROUTINE JAC (F, NEQ, T, Y, YSV, REWT, FTY,V,HL0,JOK,WP,IWP,IER) !!     DOUBLE PRECISION T, Y(*), YSV(*), REWT(*), FTY(*), V(*), HL0,WP(*) !!     INTEGER IWP(*) !!``` !! This routine must evaluate and preprocess any parts of the !! Jacobian matrix df/dy involved in the preconditioners P1, P2, P. !! The Y and FTY arrays contain the current values of y and f(t,y), !! respectively, and YSV also contains the current value of y. !! The array V is work space of length NEQ. !! !! JAC must multiply all computed Jacobian elements by the scalar !! -HL0, add the identity matrix, and do any factorization !! operations called for, in preparation for solving linear systems !! with a coefficient matrix of P1, P2, or P.  The matrix P1\\*P2 or P !! should be an approximation to  identity - hl0 \\* (df/dy). !! JAC should return IER = 0 if successful, and IER .ne. 0 if not. !! (If IER .ne. 0, a smaller time step will be tried.) !! !! JAC may alter Y and V, but not YSV, REWT, FTY, or HL0. !! !! The JOK argument can be ignored (or see full description below). !!```fortran !!     SUBROUTINE PSOL (NEQ, T, Y, FTY, WK, HL0, WP, IWP, B, LR, IER) !!     DOUBLE PRECISION T, Y(*), FTY(*), WK(*), HL0, WP(*), B(*) !!     INTEGER IWP(*) !!``` !! This routine must solve a linear system with B as right-hand !! side and one of the preconditioning matrices, P1, P2, or P, as !! coefficient matrix, and return the solution vector in B. !! !! LR is a flag concerning left vs right preconditioning, input !! to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. !! !! In the case of the PCG or PCGS method, LR will be 3, and PSOL !! should solve the system P\\*x = B with the preconditioner matrix P. !! !! In the case MF = 29 (no Krylov iteration), LR will be 0, !! and PSOL is to return in B the desired approximate solution !! to A \\* x = B, where A = identity - hl0 \\* (df/dy). !! !! PSOL can use data generated in the JAC routine and stored in !! WP and IWP.  WK is a work array of length NEQ. !! !! The argument HL0 is the current value of the scalar appearing !! in the linear system.  If the old value, at the time of the last !! JAC call, is needed, it must have been saved by JAC in WP. !! !! on return, PSOL should set the error flag IER as follows: !!```text !!       IER = 0 if PSOL was successful, !!       IER .gt. 0 if a recoverable error occurred, meaning that the !!              time step will be retried, !!       IER .lt. 0 if an unrecoverable error occurred, meaning that the !!              solver is to stop immediately. !!``` !! **E.** Write a main program which calls Subroutine DLSODKR once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages !! by DLSODKR.  On the first call to DLSODKR, supply arguments as !! follows: !! !! F !! !! : name of subroutine for right-hand side vector f. !!   This name must be declared External in calling program. !! !! NEQ !! !! : number of first order ODEs. !! !! Y !! !! : array of initial values, of length NEQ. !! !! T !! !! : the initial value of the independent variable. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (scalar or array). !!   The estimated local error in y(i) will be controlled so as !!   to be roughly less (in magnitude) than !!             EWT(i) = RTOL\\*ABS(Y(i)) + ATOL     if ITOL = 1, or !!             EWT(i) = RTOL\\*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!   Thus the local error test passes if, in each component, !!   either the absolute error is less than ATOL (or ATOL(i)), !!   or the relative error is less than RTOL. !!   Use RTOL = 0.0 for pure absolute error control, and !!   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !!   control.  Caution: Actual (global) errors may exceed these !!   local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!        20 + 16*NEQ + 3*NG           for MF = 10, !!        45 + 17*NEQ + 3*NG + LWP     for MF = 21, !!        61 + 17*NEQ + 3*NG + LWP     for MF = 22, !!        20 + 15*NEQ + 3*NG + LWP     for MF = 23 or 24, !!        20 + 12*NEQ + 3*NG + LWP     for MF = 29. !!``` !! !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least: !!```text !!        30            for MF = 10, !!        35 + LIWP     for MF = 21, !!        30 + LIWP     for MF = 22, 23, 24, or 29. !!``` !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! JAC,PSOL !! !! : names of subroutines for preconditioning. !! These names must be declared External in the calling program. !! !! MF !! !! : method flag.  Standard values are: !! !!  value | description !!  ----- | -------------------------------------------------------- !!    10  | for nonstiff (Adams) method. !!    21  | for stiff (BDF) method, with preconditioned SIOM. !!    22  | for stiff method, with preconditioned GMRES method. !!    23  | for stiff method, with preconditioned CG method. !!    24  | for stiff method, with scaled preconditioned CG method. !!    29  | for stiff method, with user's PSOL routine only. !! !! G !! !! : name of subroutine for constraint functions, whose !! roots are desired during the integration. !! This name must be declared External in calling program. !! !! NG !! !! : number of constraint functions g(i).  If there are none, !! set NG = 0, and pass a dummy name for G. !! !! JROOT !! !! : integer array of length NG for output of root information. !! See next paragraph. !! !! Note that the main program must declare arrays Y, RWORK, IWORK, !! JROOT, and possibly ATOL. !! !! **F.** The output from the first call (or any call) is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable (normally TOUT). !! !! ISTATE !! !! : values and meanings: !! !!  value  | description !!  ------ | ------------------------------------------------------- !!  2 or 3 | if DLSODKR was successful, negative otherwise. !!       2 | means no root was found, and TOUT was reached as desired. !!       3 | means a root was found prior to reaching TOUT. !!      -1 | means excess work done on this call (perhaps wrong MF). !!      -2 | means excess accuracy requested (tolerances too small). !!      -3 | means illegal input detected (see printed message). !!      -4 | means repeated error test failures (check all inputs). !!      -5 | means repeated convergence failures (perhaps bad JAC !!         | or PSOL routine supplied or wrong choice of MF or !!         | tolerances, or this solver is inappropriate). !!      -6 | means error weight became zero during problem. (Solution !!         | component i vanished, and ATOL or ATOL(i) = 0.) !!      -7 | means an unrecoverable error occurred in PSOL. !! !! JROOT !! !! : array showing roots found if ISTATE = 3 on return. !!   JROOT(i) = 1 if g(i) has a root at T, or 0 otherwise. !! !! **G.** To continue the integration after a successful return, proceed !! as follows: !! !! 1.  If ISTATE = 2 on return, reset TOUT and call DLSODKR again. !! 2.  If ISTATE = 3 on return, reset ISTATE to 2 and call DLSODKR again. !! !! In either case, no other parameters need be reset. !! !!----------------------------------------------------------------------- !!#### Full Description of User Interface to DLSODKR. !! !! The user interface to DLSODKR consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSODKR, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSODKR package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of two routines in the DLSODKR package, either of !!      which the user may replace with his/her own version, if desired. !!      These relate to the measurement of errors. !! !!----------------------------------------------------------------------- !!#### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !!  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF, !!  G, and NG, !! !! that used only for output is  JROOT, !! and those used for both input and output are !!  Y, T, ISTATE. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSODKR to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows. !! !! F !! !! : the name of the user-supplied subroutine defining the !! ODE system.  The system must be put in the first-order !! form dy/dt = f(t,y), where f is a vector-valued function !! of the scalar t and the vector y.  Subroutine F is to !! compute the function f.  It is to have the form !!```fortran !!           SUBROUTINE F (NEQ, T, Y, YDOT) !!           DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! where NEQ, T, and Y are input, and the array YDOT = f(t,y) !! is output.  Y and YDOT are arrays of length NEQ. !! Subroutine F should not alter Y(1),...,Y(NEQ). !! F must be declared External in the calling program. !! !! Subroutine F may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in F) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y below. !! !! If quantities computed in the F routine are needed !! externally to DLSODKR, an extra call to F should be made !! for this purpose, for consistent and accurate results. !! If only the derivative dy/dt is needed, use DINTDY instead. !! !! NEQ !! !! : the size of the ODE system (number of first order !! ordinary differential equations).  Used only for input. !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in the user-supplied routines. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! (The DLSODKR package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to the user-supplied routines.  Hence, if it is an array, !! locations NEQ(2),... may be used to store other integer data !! and pass it to the user-supplied routines. Each such routine !! must include NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 1), and only for output on other calls. !! On the first call, Y must contain the vector of initial !! values.  On output, Y contains the computed solution vector, !! evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to F, G, !! JAC, and PSOL.  Hence its length may exceed NEQ, and !! locations Y(NEQ+1),... may be used to store other real data !! and pass it to the user-supplied routines. !! (The DLSODKR package accesses only Y(1),...,Y(NEQ).) !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! On output, after each call, T is the value at which a !! computed solution y is evaluated (usually the same as TOUT). !! If a root was found, T is the computed location of the !! root reached first, on output. !! On an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 1), TOUT may be equal !! to T for one call, then should .ne. T for the next call. !! For the initial T, an input value of TOUT .ne. T is used !! in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!```text !!                    RMS-norm of ( E(i)/EWT(i) )   .le.   1, !!        where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), !!``` !! and the RMS-norm (root-mean-square norm) here is !! RMS-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ).  Here EWT = (EWT(i)) !! is a vector of weights which must always be positive, and !! the values of RTOL and ATOL should all be non-negative. !! The following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL  | RTOL    | ATOL     | EWT(i) !!  ----- | ------- | -------- | ----------------------------- !!    1   | scalar  |  scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!    2   | scalar  |  array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!    3   | array   |  scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!    4   | array   |  array   |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting !! user-supplied routines for the setting of EWT and/or for !! the norm calculation.  See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! Input only.  ITASK has the following values and meanings. !! !!  value | description !!  ----- | ------------------------------------------------------- !!      1 | means normal computation of output values of y(t) at !!        | t = TOUT (by overshooting and interpolating). !!      2 | means take one step only and return. !!      3 | means stop at the first internal mesh point at or !!        | beyond t = TOUT and return. !!      4 | means normal computation of output values of y(t) at !!        | t = TOUT but without overshooting t = TCRIT. !!        | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!        | or beyond TOUT, but not behind it in the direction of !!        | integration.  This option is useful if the problem !!        | has a singularity at or beyond t = TCRIT. !!      5 | means take one step, without passing TCRIT, and return. !!        | TCRIT must be input as RWORK(1). !! !! Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at T = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! the state of the calculation. !! !! On input, the values of ISTATE are as follows. !! !!  value | description !!  ----- | ------------------------------------------------------- !!      1 | means this is the first call for the problem !!        | (initializations will be done).  See note below. !!      2 | means this is not the first call, and the calculation !!        | is to continue normally, with no change in any input !!        | parameters except possibly TOUT and ITASK. !!        | (If ITOL, RTOL, and/or ATOL are changed between calls !!        | with ISTATE = 2, the new values will be used but not !!        | tested for legality.) !!      3 | means this is not the first call, and the !!        | calculation is to continue normally, but with !!        | a change in input parameters other than !!        | TOUT and ITASK.  Changes are allowed in !!        | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, !!        | and any of the optional inputs except H0. !!        | In addition, immediately following a return with !!        | ISTATE = 3 (root found), NG and G may be changed. !!        | (But changing NG from 0 to .gt. 0 is not allowed.) !!        | !!        |  Note:  A preliminary call with TOUT = T is not counted !!        |  as a first call here, as no initialization or checking of !!        |  input is done.  (Such a call is sometimes useful for the !!        |  purpose of outputting the initial conditions.) !!        |  Thus the first call for which TOUT .ne. T requires !!        |  ISTATE = 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value | description !!  ----- | ------------------------------------------------------- !!      1 | means nothing was done; TOUT = T and ISTATE = 1 on input. !!      2 | means the integration was performed successfully. !!      3 | means the integration was successful, and one or more !!        | roots were found before satisfying the stop condition !!        | specified by ITASK.  See JROOT. !!     -1 | means an excessive amount of work (more than MXSTEP !!        | steps) was done on this call, before completing the !!        | requested task, but the integration was otherwise !!        | successful as far as T.  (MXSTEP is an optional input !!        | and is normally 500.)  To continue, the user may !!        | simply reset ISTATE to a value .gt. 1 and call again !!        | (the excess work step counter will be reset to 0). !!        | In addition, the user may increase MXSTEP to avoid !!        | this error return (see below on optional inputs). !!     -2 | means too much accuracy was requested for the precision !!        | of the machine being used.  This was detected before !!        | completing the requested task, but the integration !!        | was successful as far as T.  To continue, the tolerance !!        | parameters must be reset, and ISTATE must be set !!        | to 3.  The optional output TOLSF may be used for this !!        | purpose.  (Note: If this condition is detected before !!        | taking any steps, then an illegal input return !!        | (ISTATE = -3) occurs instead.) !!     -3 | means illegal input was detected, before taking any !!        | integration steps.  See written message for details. !!        | Note:  If the solver detects an infinite loop of calls !!        | to the solver with illegal input, it will cause !!        | the run to stop. !!     -4 | means there were repeated error test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!        | The problem may have a singularity, or the input !!        | may be inappropriate. !!     -5 | means there were repeated convergence test failures on !!        | one attempted step, before completing the requested !!        | task, but the integration was successful as far as T. !!     -6 | means EWT(i) became zero for some i during the !!        | integration.  Pure relative error control (ATOL(i)=0.0) !!        | was requested on a variable which has now vanished. !!        | The integration was successful as far as T. !!     -7 | means the PSOL routine returned an unrecoverable error !!        | flag (IER .lt. 0).  The integration was successful as !!        | far as T. !! !!  **Note**:  Since the normal output value of ISTATE is 2, !!  it does not need to be reset for normal continuation. !!  Also, since a negative input value of ISTATE will be !!  regarded as illegal, a negative output value requires the !!  user to change it, and possibly other inputs, before !!  calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !! !!          IOPT = 0 means no optional inputs are being used. !!                   Default values will be used in all cases. !!          IOPT = 1 means one or more optional inputs are being used. !! !! RWORK !! !! : a real working array (double precision). !!```text !!      The length of RWORK must be at least !!         20 + NYH*(MAXORD+1) + 3*NEQ + 3*NG + LENLS + LWP    where !!      NYH    = the initial value of NEQ, !!      MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!               smaller value is given as an optional input), !!      LENLS = length of work space for linear system (Krylov) !!              method, excluding preconditioning: !!        LENLS = 0                               if MITER = 0, !!        LENLS = NEQ*(MAXL+3) + MAXL**2          if MITER = 1, !!        LENLS = NEQ*(MAXL+3+MIN(1,MAXL-KMP)) !!             + (MAXL+3)*MAXL + 1                if MITER = 2, !!        LENLS = 6*NEQ                           if MITER = 3 or 4, !!        LENLS = 3*NEQ                           if MITER = 9. !!      (See the MF description for METH and MITER, and the !!      list of optional inputs for MAXL and KMP.) !!      LWP = length of real user work space for preconditioning !!      (see JAC/PSOL). !!      Thus if default values are used and NEQ is constant, !!      this length is: !!         20 + 16*NEQ + 3*NG           for MF = 10, !!         45 + 24*NEQ + 3*NG + LWP     for MF = 11, !!         61 + 24*NEQ + 3*NG + LWP     for MF = 12, !!         20 + 22*NEQ + 3*NG + LWP     for MF = 13 or 14, !!         20 + 19*NEQ + 3*NG + LWP     for MF = 19, !!         20 + 9*NEQ + 3*NG            for MF = 20, !!         45 + 17*NEQ + 3*NG + LWP     for MF = 21, !!         61 + 17*NEQ + 3*NG + LWP     for MF = 22, !!         20 + 15*NEQ + 3*NG + LWP     for MF = 23 or 24, !!         20 + 12*NEQ + 3*NG + LWP     for MF = 29. !!``` !! The first 20 words of RWORK are reserved for conditional !! and optional inputs and optional outputs. !! !! The following word in RWORK is a conditional input: !! !! RWORK(1) = TCRIT = critical value of t which the solver !! is not to overshoot.  Required if ITASK is !! 4 or 5, and ignored otherwise.  (See ITASK.) !! !! LRW !! !! : the length of the array RWORK, as declared by the user. !! (This will be checked by the solver.) !! !! IWORK !! !! : an integer work array.  The length of IWORK must be at least !!             30                 if MITER = 0 (MF = 10 or 20), !!             30 + MAXL + LIWP   if MITER = 1 (MF = 11, 21), !!             30 + LIWP          if MITER = 2, 3, 4, or 9. !!          MAXL = 5 unless a different optional input value is given. !!          LIWP = length of integer user work space for preconditioning !!          (see conditional input list following). !!          The first few words of IWORK are used for conditional and !!          optional inputs and optional outputs. !! !!          The following 4 words in IWORK are conditional inputs, !!          required if MITER .ge. 1: !!          IWORK(1) = LWP  = length of real array WP for use in !!                     preconditioning (part of RWORK array). !!          IWORK(2) = LIWP = length of integer array IWP for use in !!                     preconditioning (part of IWORK array). !!                     The arrays WP and IWP are work arrays under the !!                     user's control, for use in the routines that !!                     perform preconditioning operations (JAC and PSOL). !!          IWORK(3) = JPRE = preconditioner type flag: !!                   = 0 for no preconditioning (P1 = P2 = P = identity) !!                   = 1 for left-only preconditioning (P2 = identity) !!                   = 2 for right-only preconditioning (P1 = identity) !!                   = 3 for two-sided preconditioning (and PCG or PCGS) !!          IWORK(4) = JACFLG = flag for whether JAC is called. !!                   = 0 if JAC is not to be called, !!                   = 1 if JAC is to be called. !!                     Use JACFLG = 1 if JAC computes any nonconstant !!                     data needed in preconditioning operations, !!                     such as some of the Jacobian elements. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! Note:  The work arrays must not be altered between calls to DLSODKR !! for the same problem, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSODKR between calls, if !! desired (but not for use by any of the user-supplied routines). !! !! JAC !! !! : the name of the user-supplied routine to compute any !! Jacobian elements (or approximations) involved in the !! matrix preconditioning operations (MITER .ge. 1). !! It is to have the form !!```fortran !!        SUBROUTINE JAC (F, NEQ, T, Y, YSV, REWT, FTY, V, & !!       &                HL0, JOK, WP, IWP, IER) !!        DOUBLE PRECISION T, Y(*), YSV(*), REWT(*), FTY(*), V(*), & !!       &                 HL0, WP(*) !!        INTEGER IWP(*) !!``` !! This routine must evaluate and preprocess any parts of the !! Jacobian matrix df/dy used in the preconditioners P1, P2, P. !! !! The Y and FTY arrays contain the current values of y and !! f(t,y), respectively, and the YSV array also contains !! the current y vector.  The array V is work space of length !! NEQ for use by JAC.  REWT is the array of reciprocal error !! weights (1/EWT).  JAC must multiply all computed Jacobian !! elements by the scalar -HL0, add the identity matrix, and do !! any factorization operations called for, in preparation !! for solving linear systems with a coefficient matrix of !! P1, P2, or P.  The matrix P1\\*P2 or P should be an & !! approximation to  identity - hl0 \\* (df/dy).  JAC should !! return IER = 0 if successful, and IER .ne. 0 if not. !! !! (If IER .ne. 0, a smaller time step will be tried.) !! The arrays WP (of length LWP) and IWP (of length LIWP) !! are for use by JAC and PSOL for work space and for storage !! of data needed for the solution of the preconditioner !! linear systems.  Their lengths and contents are under the !! user's control. !! !! The argument JOK is an input flag for optional use !! by JAC in deciding whether to recompute Jacobian elements !! or use saved values.  If JOK = -1, then JAC must compute !! any relevant Jacobian elements (or approximations) used in !! the preconditioners.  Optionally, JAC may also save these !! elements for later reuse.  If JOK = 1, the integrator has !! made a judgement (based on the convergence history and the !! value of HL0) that JAC need not recompute Jacobian elements, !! but instead use saved values, and the current value of HL0, !! to reconstruct the preconditioner matrices, followed by !! any required factorizations.  This may be cost-effective if !! Jacobian elements are costly and storage is available. !! !! JAC may alter Y and V, but not YSV, REWT, FTY, or HL0. !! JAC must be declared External in the calling program. !! !! Subroutine JAC may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in JAC) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! PSOL !! !! : the name of the user-supplied routine for the !! solution of preconditioner linear systems. !! It is to have the form !!```fortran !!         SUBROUTINE PSOL (NEQ, T, Y, FTY, WK,HL0, WP,IWP, B, LR,IER) !!         DOUBLE PRECISION T, Y(*), FTY(*), WK(*), HL0, WP(*), B(*) !!         INTEGER IWP(*) !!``` !! This routine must solve a linear system with B as right-hand !! side and one of the preconditioning matrices, P1, P2, or P, !! as coefficient matrix, and return the solution vector in B. !! LR is a flag concerning left vs right preconditioning, input !! to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2. !! In the case of the PCG or PCGS method, LR will be 3, and PSOL !! should solve the system P\\*x = B with the preconditioner P. !! In the case MITER = 9 (no Krylov iteration), LR will be 0, !! and PSOL is to return in B the desired approximate solution !! to A \\* x = B, where A = identity - hl0 \\* (df/dy). !! PSOL can use data generated in the JAC routine and stored in !! WP and IWP. !! !! The Y and FTY arrays contain the current values of y and !! f(t,y), respectively.  The array WK is work space of length !! NEQ for use by PSOL. !! !! The argument HL0 is the current value of the scalar appearing !! in the linear system.  If the old value, as of the last !! JAC call, is needed, it must have been saved by JAC in WP. !! !! On return, PSOL should set the error flag IER as follows: !!```text !!        IER = 0 if PSOL was successful, !!        IER .gt. 0 on a recoverable error, meaning that the !!               time step will be retried, !!        IER .lt. 0 on an unrecoverable error, meaning that the !!               solver is to stop immediately. !!      PSOL may not alter Y, FTY, or HL0. !!      PSOL must be declared External in the calling program. !!           Subroutine PSOL may access user-defined quantities in !!      NEQ(2),... and Y(NEQ(1)+1),... if NEQ is an array !!      (dimensioned in PSOL) and/or Y has length exceeding NEQ(1). !!      See the descriptions of NEQ and Y above. !!``` !! MF !! !! : the method flag.  Used only for input.  The legal values of !! MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29. !! MF has decimal digits METH and MITER: MF = 10\\*METH + MITER. !! METH indicates the basic linear multistep method: !! !!  METH | description !!  ---- | ---------------------------------------------------- !!     1 | means the implicit Adams method. !!     2 | means the method based on Backward !! !! Differentiation Formulas (BDFs). !! !! MITER indicates the corrector iteration method: !!  MITER | description !!  ----- | ---------------------------------------------------- !!  0     | means functional iteration (no linear system !!        | is involved). !!  1     | means Newton iteration with Scaled Preconditioned !!        | Incomplete Orthogonalization Method (SPIOM) !!        | for the linear systems. !!  2     | means Newton iteration with Scaled Preconditioned !!        | Incomplete Generalized Minimal Residual method !!        | (SPIGMR) for the linear systems. !!  3     | means Newton iteration with Preconditioned !!        | Conjugate Gradient method (PCG) !!        | for the linear systems. !!  4     | means Newton iteration with scaled preconditioned !!        | Conjugate Gradient method (PCGS) !!        | for the linear systems. !!  9     | means Newton iteration with only the !!        | user-supplied PSOL routine called (no Krylov !!        | iteration) for the linear systems. !!        | JPRE is ignored, and PSOL is called with LR = 0. !! !! See comments in the introduction about the choice of MITER. !! If MITER .ge. 1, the user must supply routines JAC and PSOL !! (the names are arbitrary) as described above. !! For MITER = 0, a dummy argument can be used. !! !! G !! !! : the name of subroutine for constraint functions, whose !! roots are desired during the integration.  It is to have !! the form !!```fortran !!          SUBROUTINE G (NEQ, T, Y, NG, GOUT) !!          DOUBLE PRECISION T, Y(*), GOUT(NG) !!``` !! where NEQ, T, Y, and NG are input, and the array GOUT !! is output.  NEQ, T, and Y have the same meaning as in !! the F routine, and GOUT is an array of length NG. !! For i = 1,...,NG, this routine is to load into GOUT(i) !! the value at (t,y) of the i-th constraint function g(i). !! DLSODKR will find roots of the g(i) of odd multiplicity !! (i.e. sign changes) as they occur during the integration. !! G must be declared External in the calling program. !! !! Caution: Because of numerical errors in the functions !! g(i) due to roundoff and integration error, DLSODKR may !! return false roots, or return the same root at two or more !! nearly equal values of t.  If such false roots are !! suspected, the user should consider smaller error tolerances !! and/or higher precision in the evaluation of the g(i). !! !! If a root of some g(i) defines the end of the problem, !! the input to DLSODKR should nevertheless allow integration !! to a point slightly past that root, so that DLSODKR can !! locate the root by interpolation. !! !! Subroutine G may access user-defined quantities in !! NEQ(2),... and Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in G) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! NG !! !! : number of constraint functions g(i).  If there are none, !! set NG = 0, and pass a dummy name for G. !! !! JROOT !! !! : integer array of length NG.  Used only for output. !! On a return with ISTATE = 3 (one or more roots found), !! JROOT(i) = 1 if g(i) has a root at t, or JROOT(i) = 0 if not. !!----------------------------------------------------------------------- !! Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !! Name  | Location |     Meaning and Default Value !!       |          | !! H0    | RWORK(5) | the step size to be attempted on the first step. !!       |          | The default value is determined by the solver. !!       |          | !! HMAX  | RWORK(6) | the maximum absolute step size allowed. !!       |          | The default value is infinite. !!       |          | !! HMIN  | RWORK(7) | the minimum absolute step size allowed. !!       |          | The default value is 0.  (This lower bound is not !!       |          | enforced on the final step before reaching TCRIT !!       |          | when ITASK = 4 or 5.) !!       |          | !! DELT  | RWORK(8) | convergence test constant in Krylov iteration !!       |          | algorithm.  The default is .05. !!       |          | !! MAXORD| IWORK(5) | the maximum order to be allowed.  The default !!       |          | value is 12 if METH = 1, and 5 if METH = 2. !!       |          | If MAXORD exceeds the default value, it will !!       |          | be reduced to the default value. !!       |          | If MAXORD is changed during the problem, it may !!       |          | cause the current order to be reduced. !!       |          | !! MXSTEP| IWORK(6) | maximum number of (internally defined) steps !!       |          | allowed during one call to the solver. !!       |          | The default value is 500. !!       |          | !! MXHNIL| IWORK(7) | maximum number of messages printed (per problem) !!       |          | warning that T + H = T on a step (H = step size). !!       |          | This must be positive to result in a non-default !!       |          | value.  The default value is 10. !!       |          | !! MAXL  | IWORK(8) | maximum number of iterations in the SPIOM, SPIGMR, !!       |          | PCG, or PCGS algorithm (.le. NEQ). !!       |          | The default is MAXL = MIN(5,NEQ). !!       |          | !! KMP   | IWORK(9) | number of vectors on which orthogonalization !!       |          | is done in SPIOM or SPIGMR algorithm (.le. MAXL). !!       |          | The default is KMP = MAXL. !!       |          | !!       |          | Note:  When KMP .lt. MAXL and MF = 22, the length !!       |          | of RWORK must be defined accordingly.  See !!       |          | the definition of RWORK above. !!       |          | !! !!----------------------------------------------------------------------- !! Optional Outputs. !! !! As optional additional output from DLSODKR, the variables listed !! below are quantities related to the performance of DLSODKR !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSODKR, and on any return with !! ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return !! (ISTATE = -3), they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !!  Name  |  Location |     Meaning !!  ----- | --------- | --------------------------------------------------- !!  HU    |  RWORK(11)| the step size in t last used (successfully). !!        |           | !!  HCUR  |  RWORK(12)| the step size to be attempted on the next step. !!        |           | !!  TCUR  |  RWORK(13)| the current value of the independent variable !!        |           | which the solver has actually reached, i.e. the !!        |           | current internal mesh point in t.  On output, TCUR !!        |           | will always be at least as far as the argument !!        |           | T, but may be farther (if interpolation was done). !!        |           | !!  TOLSF |  RWORK(14)| a tolerance scale factor, greater than 1.0, !!        |           | computed when a request for too much accuracy was !!        |           | detected (ISTATE = -3 if detected at the start of !!        |           | the problem, ISTATE = -2 otherwise).  If ITOL is !!        |           | left unaltered but RTOL and ATOL are uniformly !!        |           | scaled up by a factor of TOLSF for the next call, !!        |           | then the solver is deemed likely to succeed. !!        |           | (The user may also ignore TOLSF and alter the !!        |           | tolerance parameters in any other way appropriate.) !!        |           | !!  NGE   |  IWORK(10)| the number of g evaluations for the problem so far. !!        |           | !!  NST   |  IWORK(11)| the number of steps taken for the problem so far. !!        |           | !!  NFE   |  IWORK(12)| the number of f evaluations for the problem so far. !!        |           | !!  NPE   |  IWORK(13)| the number of calls to JAC so far (for evaluation !!        |           | of preconditioners). !!        |           | !!  NQU   |  IWORK(14)| the method order last used (successfully). !!        |           | !!  NQCUR |  IWORK(15)| the order to be attempted on the next step. !!        |           | !!  IMXER |  IWORK(16)| the index of the component of largest magnitude in !!        |           | the weighted local error vector ( E(i)/EWT(i) ), !!        |           | on an error return with ISTATE = -4 or -5. !!        |           | !!  LENRW |  IWORK(17)| the length of RWORK actually required. !!        |           | This is defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !!        |           | !!  LENIW |  IWORK(18)| the length of IWORK actually required. !!        |           | This is defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !!        |           | !!  NNI   |  IWORK(19)| number of nonlinear iterations so far (each of !!        |           | which calls an iterative linear solver). !!        |           | !!  NLI   |  IWORK(20)| number of linear iterations so far. !!        |           | Note: A measure of the success of algorithm is !!        |           | the average number of linear iterations per !!        |           | nonlinear iteration, given by NLI/NNI. !!        |           | If this is close to MAXL, MAXL may be too small. !!        |           | !!  NPS   |  IWORK(21)| number of preconditioning solve operations !!        |           | (PSOL calls) so far. !!        |           | !!  NCFN  |  IWORK(22)| number of convergence failures of the nonlinear !!        |           | (Newton) iteration so far. !!        |           | Note: A measure of success is the overall !!        |           | rate of nonlinear convergence failures, NCFN/NST. !!        |           | !!  NCFL  |  IWORK(23)| number of convergence failures of the linear !!        |           | iteration so far. !!        |           | Note: A measure of success is the overall !!        |           | rate of linear convergence failures, NCFL/NNI. !!        |           | !!  NSFI  |  IWORK(24)| number of functional iteration steps so far. !!        |           | Note: A measure of the extent to which the !!        |           | problem is nonstiff is the ratio NSFI/NST. !!        |           | !!  NJEV  |  IWORK(25)| number of JAC calls with JOK = -1 so far !!        |           | (number of evaluations of Jacobian data). !!        |           | !! !! The following two arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address in RWORK, and its description. !! !!  Name  | Base Address  |   Description !!  ----- | ------------- | ----------------------------------------------- !!  YH    | 21 + 3\\*NG    | the Nordsieck history array, of size NYH by !!        |               | (NQCUR + 1), where NYH is the initial value !!        |               | of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!        |               | of YH contains HCUR\\*\\*j/factorial(j) times !!        |               | the j-th derivative of the interpolating !!        |               | polynomial currently representing the solution, !!        |               | evaluated at t = TCUR. !!        |               | !!  ACOR  |  LENRW-NEQ+1  | array of size NEQ used for the accumulated !!        |               | corrections on each step, scaled on output !!        |               | to represent the estimated local error in y !!        |               | on the last step.  This is the vector E in !!        |               | the description of the error control.  It is !!        |               | defined only on a successful return from !!        |               | DLSODKR. !! !!----------------------------------------------------------------------- !!#### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSODKR. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !!  Form of Call              |      Function !!  ------------------------- | ------------------------------------------ !!  CALL XSETUN(LUN)          | Set the logical unit number, LUN, for !!                            | output of messages from DLSODKR, if !!                            | the default is not desired. !!                            | The default value of LUN is 6. !!                            | !!  CALL XSETF(MFLAG)         | Set a flag to control the printing of !!                            | messages by DLSODKR. !!                            | MFLAG = 0 means do not print. (Danger: !!                            | This risks losing valuable information.) !!                            | MFLAG = 1 means print (the default). !!                            | !!                            | Either of the above calls may be made at !!                            | any time and will take effect immediately. !!                            | !!  CALL DSRCKR(RSAV,ISAV,JOB)| saves and restores the contents of !!                            | the internal Common blocks used by !!                            | DLSODKR (see Part 3 below). !!                            | RSAV must be a real array of length 228 !!                            | or more, and ISAV must be an integer !!                            | array of length 63 or more. !!                            |     JOB=1 means save Common into RSAV/ISAV. !!                            |     JOB=2 means restore Common from RSAV/ISAV. !!                            | !!                            | DSRCKR is useful if one is !!                            | interrupting a run and restarting !!                            | later, or alternating between two or !!                            | more problems solved with DLSODKR. !!                            | !!  CALL DINTDY(,,,,,)        | Provide derivatives of y, of various !!       (see below)          | orders, at a specified point t, if !!                            | desired.  It may be called only after !!                            | a successful return from DLSODKR. !! !! The detailed instructions for using DINTDY are as follows. !! The form of the call is: !!```fortran !!   LYH = 21 + 3*NG !!   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by DLSODKR). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(T), is already provided !! by DLSODKR directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! LYH !! !! : 21 + 3\\*NG = base address in RWORK of the history array YH. !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !!             of the K-th derivative of y(t). !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !!----------------------------------------------------------------------- !!#### Part 3.  Common Blocks. !! !! If DLSODKR is to be used in an overlay situation, the user !! must declare, in the primary overlay, the variables in: !!```text !!   (1) the call sequence to DLSODKR, and !!   (2) the four internal Common blocks !!         /DLS001/  of length  255  (218 double precision words !!                      followed by 37 integer words), !!         /DLS002/  of length   5  (1 double precision word !!                      followed by  4 integer words), !!         /DLPK01/  of length  17  (4 double precision words !!                      followed by 13 integer words), !!         /DLSR01/  of length  14     (5 double precision words !!                      followed by  9 integer words). !!``` !! !! If DLSODKR is used on a system in which the contents of internal !! Common blocks are not preserved between calls, the user should !! declare the above Common blocks in the calling program to insure !! that their contents are preserved. !! !! If the solution of a given problem by DLSODKR is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSODKR call prior to the !! interruption, the contents of the call sequence variables and the !! internal Common blocks, and later restore these values before the !! next DLSODKR call for that problem.  To save and restore the Common !! blocks, use Subroutine DSRCKR (see Part 2 above). !! !!----------------------------------------------------------------------- !!#### Part 4.  Optionally Replaceable Solver Routines. !! !! Below are descriptions of two routines in the DLSODKR package which !! relate to the measurement of errors.  Either routine can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !! (a) DEWSET() !! !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!```fortran !!     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !!``` !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSODKR call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM !! routine (see below), and also used by DLSODKR in the computation !! of the optional output IMXER, the diagonal Jacobian approximation, !! and the increments for difference quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !! (b) DVNORM() !! The following is a real function routine which computes the weighted !! root-mean-square norm of a vector v: !!```text !!     D = DVNORM (N, V, W) !! where: !!   N = the length of the vector, !!   V = real array of length N containing the vector, !!   W = real array of length N containing weights, !!   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). !!``` !! DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where !! EWT is as set by Subroutine DEWSET. !! !! If the user supplies this function, it should return a non-negative !! value of DVNORM suitable for use in the error control in DLSODKR. !! None of the arguments should be altered by DVNORM. !! For example, a user-supplied DVNORM routine might: !! !!   - substitute a max-norm of (V(i)\\*W(i)) for the RMS-norm, or !!   - ignore some components of V in the norm, with the effect of !!     suppressing the error control on those components of y. !! !!----------------------------------------------------------------------- !!### Pedigree: !! !!   This is the 18 November 2003 version of !!   DLSODKR is derived from the Livermore Solver for Ordinary !!   Differential Equations package ODEPACK, !! !!----------------------------------------------------------------------- !! References: !! 1.  Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix !!     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989), !!     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987. !! 2.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !!----------------------------------------------------------------------- !! Authors:       Alan C. Hindmarsh and Peter N. Brown !!                Center for Applied Scientific Computing, L-561 !!                Lawrence Livermore National Laboratory !!                Livermore, CA 94551 !!----------------------------------------------------------------------- ! ! ### REVISION HISTORY  (YYYYMMDD) !  19900117  DATE WRITTEN !  19900503  Added iteration switching (functional/Newton). !  19900802  Added flag for Jacobian-saving in user preconditioner. !  19900910  Added new initial stepsize routine LHIN. !  19901019  Corrected LHIN - y array restored. !  19910909  Changed names STOPK to STOKA, PKSET to SETPK; !            removed unused variables in driver declarations; !            minor corrections to main prologue. !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20020502  Corrected declarations in descriptions of user routines. !  20030603  Corrected duplicate type declaration for DUMACH. !  20031105  Restored 'own' variables to Common blocks, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. !  20031117  Changed internal name NPE to NJE. ! ! ----------------------------------------------------------------------- !  Other routines in the DLSODKR package. ! !  In addition to Subroutine DLSODKR, the DLSODKR package includes the !  following subroutines and function routines: !   DLHIN    calculates a step size to be attempted initially. !   DRCHEK   does preliminary checking for roots, and serves as an !            interface between Subroutine DLSODKR and Subroutine DROOTS. !   DROOTS   finds the leftmost root of a set of functions. !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted RMS-norm of a vector. !   DSTOKA   is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DSETPK   interfaces between DSTOKA and the JAC routine. !   DSOLPK   manages solution of linear system in Newton iteration. !   DSPIOM   performs the SPIOM algorithm. !   DATV     computes a scaled, preconditioned product (I-hl0*J)*v. !   DORTHOG  orthogonalizes a vector against previous basis vectors. !   DHEFA    generates an LU factorization of a Hessenberg matrix. !   DHESL    solves a Hessenberg square linear system. !   DSPIGMR  performs the SPIGMR algorithm. !   DHEQR    generates a QR factorization of a Hessenberg matrix. !   DHELS    finds the least squares solution of a Hessenberg system. !   DPCG     performs preconditioned conjugate gradient algorithm (PCG). !   DPCGS    performs the PCGS algorithm. !   DATP     computes the product A*p, where A = I - hl0*df/dy. !   DUSOL    interfaces to the user's PSOL routine (MITER = 9). !   DSRCKR   is a user-callable routine to save and restore !            the contents of the internal Common blocks. !   DAXPY, DCOPY, DDOT, DNRM2, and DSCAL   are basic linear !            algebra modules (from the BLAS collection). !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note:  DVNORM, DDOT, DNRM2, DUMACH, and IXSAV are function !  routines.  All the others are subroutines. ! !------------------------------------------------------------------------ subroutine dlsodkr ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , psol , Mf , g , Ng , Jroot ) external f external g external jac external psol real ( kind = dp ), dimension ( * ) :: Atol , Rtol , Y real ( kind = dp ) :: atoli , avdim , big , ewti , h0 , hmax , hmx , rcfl , rcfn , rh , rtoli , size , tcrit , tnext , tolsf , tp integer :: i , i1 , i2 , ier , iflag , imxer , irfp , irt , kgo , leniw , leniwk , lenrw , lenwk , lenwm , lenyh , lf0 , liwp , & & lwp , lyhnew , ncfl0 , ncfn0 , niter , nli0 , nni0 , nnid , nstd , nwarn logical :: ihit , lavd , lcfl , lcfn , lwarn integer :: Iopt , Istate , Itask , Itol , Liw , Lrw , Mf , Ng integer , intent ( inout ), dimension ( Liw ) :: Iwork integer , dimension ( * ) :: Neq integer :: Jroot ( * ) integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 real ( kind = dp ), intent ( inout ), dimension ( Lrw ) :: Rwork real ( kind = dp ), intent ( inout ) :: T , Tout ! ! ----------------------------------------------------------------------- !  The following four internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODKR, DINTDY, !  DSTOKA, DSOLPK, and DATV. !  The block DLS002 is declared in subroutines DLSODKR and DSTOKA. !  The block DLSR01 is declared in subroutines DLSODKR, DRCHEK, DROOTS. !  The block DLPK01 is declared in subroutines DLSODKR, DSTOKA, DSETPK, !  and DSOLPK. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( ng . ne . 0 ) jroot (: ng ) = 0 if ( Istate < 1 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODKR-  ISTATE(=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 1000 ! msg = 'DLSODKR-  Run aborted.. apparent infinite loop.   ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODKR-  ITASK (=I1) illegal.' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else dlsr % itaskc = Itask if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODKR- ISTATE.gt.1 but DLSODKR not initialized. ' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, MF, !  and NG. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODKR-  NEQ (=I1) .lt. 1    ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODKR-  ISTATE = 3 and NEQ increased (I1 to I2).' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 1000 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODKR-  ITOL (=I1) illegal. ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODKR-  IOPT (=I1) illegal. ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else dls1 % meth = Mf / 10 dls1 % miter = Mf - 10 * dls1 % meth if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 600 if ( dls1 % miter < 0 ) goto 600 if ( dls1 % miter > 4 . and . dls1 % miter < 9 ) goto 600 if ( dls1 % miter >= 1 ) dlpk % jpre = Iwork ( 3 ) dlpk % jacflg = 0 if ( dls1 % miter >= 1 ) dlpk % jacflg = Iwork ( 4 ) if ( Ng < 0 ) then msg = 'DLSODKR-  NG (=I1) .lt. 0     ' call xerrwd ( msg , 30 , 30 , 0 , 1 , Ng , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( Istate /= 1 ) then if ( dlsr % irfnd == 0 . and . Ng /= dlsr % ngc ) then msg = 'DLSODKR-  NG changed (from I1 to I2) illegally,   ' call xerrwd ( msg , 50 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      i.e. not immediately after a root was found.' call xerrwd ( msg , 50 , 31 , 0 , 2 , dlsr % ngc , Ng , 0 , 0.0D0 , 0.0D0 ) goto 1000 endif endif dlsr % ngc = Ng !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODKR-  MAXORD (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODKR-  MXSTEP (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODKR-  MXHNIL (=I1) .lt. 0 ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODKR-  TOUT (=R1) behind T (=R2)     ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 1000 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODKR-  HMAX (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 1000 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODKR-  HMIN (=R1) .lt. 0.0 ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 1000 else dlpk % maxl = Iwork ( 8 ) if ( dlpk % maxl == 0 ) dlpk % maxl = 5 dlpk % maxl = min ( dlpk % maxl , dls1 % n ) dlpk % kmp = Iwork ( 9 ) if ( dlpk % kmp == 0 . or . dlpk % kmp > dlpk % maxl ) dlpk % kmp = dlpk % maxl dlpk % delt = Rwork ( 8 ) if ( dlpk % delt == 0.0D0 ) dlpk % delt = 0.05D0 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 dlpk % maxl = min ( 5 , dls1 % n ) dlpk % kmp = dlpk % maxl dlpk % delt = 0.05D0 endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  RWORK segments (in order) are denoted  G0, G1, GX, YH, WM, !  EWT, SAVF, SAVX, ACOR. ! ----------------------------------------------------------------------- if ( Istate == 1 ) dls1 % nyh = dls1 % n dlsr % lg0 = 21 dlsr % lg1 = dlsr % lg0 + Ng dlsr % lgx = dlsr % lg1 + Ng lyhnew = dlsr % lgx + Ng if ( Istate == 1 ) dls1 % lyh = lyhnew if ( lyhnew /= dls1 % lyh ) then !  If ISTATE = 3 and NG was changed, shift YH to its new location. ------ lenyh = dls1 % l * dls1 % nyh if ( Lrw >= lyhnew - 1 + lenyh ) then i1 = 1 if ( lyhnew > dls1 % lyh ) i1 = - 1 call dcopy ( lenyh , Rwork ( dls1 % lyh ), i1 , Rwork ( lyhnew ), i1 ) dls1 % lyh = lyhnew endif endif dls1 % lwm = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh if ( dls1 % miter == 0 ) lenwk = 0 if ( dls1 % miter == 1 ) lenwk = dls1 % n * ( dlpk % maxl + 2 ) + dlpk % maxl * dlpk % maxl if ( dls1 % miter == 2 ) lenwk = dls1 % n * ( dlpk % maxl + 2 + min ( 1 , dlpk % maxl - dlpk % kmp )) + ( dlpk % maxl + 3 ) * dlpk % maxl + 1 if ( dls1 % miter == 3 . or . dls1 % miter == 4 ) lenwk = 5 * dls1 % n if ( dls1 % miter == 9 ) lenwk = 2 * dls1 % n lwp = 0 if ( dls1 % miter >= 1 ) lwp = Iwork ( 1 ) lenwm = lenwk + lwp dlpk % locwp = lenwk + 1 dls1 % lewt = dls1 % lwm + lenwm dls1 % lsavf = dls1 % lewt + dls1 % n dlpk % lsavx = dls1 % lsavf + dls1 % n dls1 % lacor = dlpk % lsavx + dls1 % n if ( dls1 % miter == 0 ) dls1 % lacor = dls1 % lsavf + dls1 % n lenrw = dls1 % lacor + dls1 % n - 1 Iwork ( 17 ) = lenrw dls1 % liwm = 31 leniwk = 0 if ( dls1 % miter == 1 ) leniwk = dlpk % maxl liwp = 0 if ( dls1 % miter >= 1 ) liwp = Iwork ( 2 ) leniw = 30 + leniwk + liwp dlpk % lociwp = leniwk + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) then msg = 'DLSODKR-  RWORK length needed, LENRW(=I1), exceeds LRW(=I2) ' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 1000 elseif ( leniw > Liw ) then msg = 'DLSODKR-  IWORK length needed, LENIW(=I1), exceeds LIW(=I2) ' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 1000 else !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODKR-  RTOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 1000 elseif ( atoli < 0.0D0 ) then msg = 'DLSODKR-  ATOL(I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 1000 endif enddo !  Load SQRT(N) and its reciprocal in Common. --------------------------- dlpk % sqrtn = sqrt ( real ( dls1 % n )) dlpk % rsqrtn = 1.0D0 / dlpk % sqrtn if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 800 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 nli0 = 0 nni0 = 0 ncfn0 = 0 ncfl0 = 0 nwarn = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 dlpk % nni = 0 dlpk % nli = 0 dlpk % nps = 0 dlpk % ncfn = 0 dlpk % ncfl = 0 dls % nsfi = 0 dls % njev = 0 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODKR-  EWT(I1) is R1 .le. 0.0        ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 1000 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo if ( h0 == 0.0D0 ) then !  Call DLHIN to set initial step size H0 to be attempted. -------------- call dlhin ( Neq , dls1 % n , T , Rwork ( dls1 % lyh ), Rwork ( lf0 ), & & f , Tout , dls1 % uround , Rwork ( dls1 % lewt ), Itol , Atol , Y , & & Rwork ( dls1 % lacor ), h0 , niter , ier ) dls1 % nfe = dls1 % nfe + niter if ( ier /= 0 ) then msg = 'DLSODKR- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 1000 endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo !  Check for a zero of g at T. ------------------------------------------ dlsr % irfnd = 0 dlsr % toutc = Tout if ( dlsr % ngc == 0 ) goto 200 call drchek ( 1 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 0 ) goto 200 msg = 'DLSODKR-  One or more components of g has a root  ' call xerrwd ( msg , 50 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      too near to the initial point.    ' call xerrwd ( msg , 40 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 else !  If ISTATE = 3, set flag to signal parameter changes to DSTOKA.-------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into SAVF. --------- do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + dls1 % lwm - 1 ) enddo endif if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif endif endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. !  First, DRCHEK is called to check for a root within the dlsr%last step !  taken, other than the dlsr%last root found there, if any. !  If ITASK = 2 or 5, and y(TN) has not yet been returned to the user !  because of an intervening root, return through Block G. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst ! irfp = dlsr % irfnd if ( dlsr % ngc /= 0 ) then if ( Itask == 1 . or . Itask == 4 ) dlsr % toutc = Tout call drchek ( 2 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif dlsr % irfnd = 0 if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 2 ) goto 300 ! nli0 = dlpk % nli nni0 = dlpk % nni ncfn0 = dlpk % ncfn ncfl0 = dlpk % ncfl nwarn = 0 select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODKR-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2) ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 1000 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 700 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 800 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 900 T = Tout Istate = 2 goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 700 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 900 T = Tout Istate = 2 goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) T = tcrit if ( irfp == 1 . and . dlsr % tlast /= dls1 % tn . and . Itask == 5 ) goto 300 if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTOKA. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, !  check for poor Newton/Krylov method performance, update EWT (if not !  at start of problem), check for too much accuracy being requested, !  and check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODKR-  At current T (=R1), MXSTEP (=I1) steps  ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 500 else nstd = dls1 % nst - dls1 % nslast nnid = dlpk % nni - nni0 if ( nstd >= 10 . and . nnid /= 0 ) then avdim = real ( dlpk % nli - nli0 ) / real ( nnid ) rcfn = real ( dlpk % ncfn - ncfn0 ) / real ( nstd ) rcfl = real ( dlpk % ncfl - ncfl0 ) / real ( nnid ) lavd = avdim > ( dlpk % maxl - 0.05D0 ) lcfn = rcfn > 0.9D0 lcfl = rcfl > 0.9D0 lwarn = lavd . or . lcfn . or . lcfl if ( lwarn ) then nwarn = nwarn + 1 if ( nwarn <= 10 ) then if ( lavd ) then msg = 'DLSODKR- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lavd ) then msg = '      at T = R1 by average no. of linear iterations = R2    ' call xerrwd ( msg , 60 , 111 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , avdim ) endif if ( lcfn ) then msg = 'DLSODKR- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfn ) then msg = '      at T = R1 by nonlinear convergence failure rate = R2  ' call xerrwd ( msg , 60 , 112 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfn ) endif if ( lcfl ) then msg = 'DLSODKR- Warning. Poor iterative algorithm performance seen ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( lcfl ) then msg = '      at T = R1 by linear convergence failure rate = R2     ' call xerrwd ( msg , 60 , 113 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , rcfl ) endif endif endif endif call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODKR-  At T(=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 500 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODKR-  Warning.. Internal T(=R1) and H(=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODKR-  Above warning has been issued I1 times. ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTOKA(NEQ,Y,YH,NYH,YH,EWT,SAVF,SAVX,ACOR,WM,IWM,f,JAC,PSOL) ! ----------------------------------------------------------------------- call dstoka ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dlpk % lsavx ), Rwork ( dls1 % lacor )& & , Rwork ( dls1 % lwm ), Iwork ( dls1 % liwm ), f , jac , psol ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODKR- At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 !  Compute IMXER if relevant. ------------------------------------------- big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODKR-  At T (=R1) and step size H (=R2), the   ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) !  KFLAG = -3.  Unrecoverable error from PSOL. -------------------------- msg = 'DLSODKR-  At T (=R1) an unrecoverable error return' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      was made from Subroutine PSOL     ' call xerrwd ( msg , 40 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 500 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0). !  Call DRCHEK to check for a root within the dlsr%last step. !  Then, if no root was found, check for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 ! if ( dlsr % ngc /= 0 ) then call drchek ( 3 , g , Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dlsr % lg0 ), Rwork ( dlsr % lg1 ), Rwork ( dlsr % lgx ), Jroot , irt ) if ( irt == 1 ) then dlsr % irfnd = 1 Istate = 3 T = dlsr % t0 goto 400 endif endif ! select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout Istate = 2 goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODKR-  At start of problem, too much accuracy  ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 1000 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODKR-  At T (=R1), too much accuracy requested ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 500 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODKR. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif Istate = 2 400 continue Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl Iwork ( 24 ) = dls % nsfi Iwork ( 25 ) = dls % njev Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return !  Set Y vector, T, and optional outputs. ------------------------------- 500 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlpk % nni Iwork ( 20 ) = dlpk % nli Iwork ( 21 ) = dlpk % nps Iwork ( 22 ) = dlpk % ncfn Iwork ( 23 ) = dlpk % ncfl Iwork ( 24 ) = dls % nsfi Iwork ( 25 ) = dls % njev Iwork ( 10 ) = dlsr % nge dlsr % tlast = T return 600 continue msg = 'DLSODKR-  MF (=I1) illegal.   ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 1000 700 continue msg = 'DLSODKR-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)  ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 1000 800 continue msg = 'DLSODKR-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)  ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 1000 900 continue msg = 'DLSODKR-  Trouble in DINTDY. ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) ! 1000 continue Istate = - 3 return 99999 continue end subroutine dlsodkr","tags":"","loc":"sourcefile/dlsodkr.inc.html"},{"title":"dlsodis.inc – odepack","text":"Contents Subroutines dlsodis Source Code dlsodis.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!##Synopsis !! !! _DLSODIS_ solves the initial value problem for linearly implicit !! systems of first order ODEs, !! !!```text !!     A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, !!``` !! or, in component form, !! !!```text !!     ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  = !!        i,1      1                     i,NEQ      NEQ !! !!      =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ ) !!           i      1   2       NEQ !!``` !! !! If A is singular, this is a differential-algebraic system. !! !! DLSODIS is a variant version of the DLSODI package, and is intended !! for stiff problems in which the matrix A and the Jacobian matrix !! d(g - A*s)/dy have arbitrary sparse structures. !! !! This version is in double precision. !! !!----------------------------------------------------------------------- !!### Summary of Usage. !! !! Communication between the user and the DLSODIS package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including optional communication, nonstandard options, !! and instructions for special situations.  See also the example !! problem (with program and output) following this summary. !! !! **A.** First, provide a subroutine of the form: !!```fortran !!                SUBROUTINE RES (NEQ, T, Y, S, R, IRES) !!                DOUBLE PRECISION T, Y(*), S(*), R(*) !!``` !! which computes the residual function !!```text !!      r = g(t,y)  -  A(t,y) * s , !!``` !! as a function of t and the vectors y and s.  (s is an internally !! generated approximation to dy/dt.)  The arrays Y and S are inputs !! to the RES routine and should not be altered.  The residual !! vector is to be stored in the array R.  The argument IRES should be !! ignored for casual use of DLSODIS.  (For uses of IRES, see the !! paragraph on RES in the full description below.) !! !! **B.** DLSODIS must deal internally with the matrices A and dr/dy, where !! r is the residual function defined above.  DLSODIS generates a linear !! combination of these two matrices in sparse form. !!      The matrix structure is communicated by a method flag, MF: !!         MF =  21 or  22     when the user provides the structures of !!                             matrix A and dr/dy, !!         MF = 121 or 222     when the user does not provide structure !!                             information, and !!         MF = 321 or 422     when the user provides the structure !!                             of matrix A. !! !! **C.** You must also provide a subroutine of the form: !!```fortran !!       SUBROUTINE ADDA (NEQ, T, Y, J, IAN, JAN, P) !!       DOUBLE PRECISION T, Y(*), P(*) !!       INTEGER IAN(*), JAN(*) !!``` !! which adds the matrix A = A(t,y) to the contents of the array P. !! NEQ, T, Y, and J are input arguments and should not be altered. !! This routine should add the J-th column of matrix A to the array !! P (of length NEQ).  I.e. add A(i,J) to P(i) for all relevant !! values of i.  The arguments IAN and JAN should be ignored for normal !! situations.  DLSODIS will call the ADDA routine with J = 1,2,...,NEQ. !! !! **D.** For the sake of efficiency, you are encouraged to supply the !! Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y)\\*s !! (s = a fixed vector) as above.  If dr/dy is being supplied, !! use MF = 21, 121, or 321, and provide a subroutine of the form: !!```fortran !!       SUBROUTINE JAC (NEQ, T, Y, S, J, IAN, JAN, PDJ) !!       DOUBLE PRECISION T, Y(*), S(*), PDJ(*) !!       INTEGER IAN(*), JAN(*) !!``` !! which computes dr/dy as a function of t, y, and s.  Here NEQ, T, Y, S, !! and J are input arguments, and the JAC routine is to load the array !! PDJ (of length NEQ) with the J-th column of dr/dy.  I.e. load PDJ(i) !! with dr(i)/dy(J) for all relevant values of i.  The arguments IAN and !! JAN should be ignored for normal situations.  DLSODIS will call the !! JAC routine with J = 1,2,...,NEQ. !! !! Only nonzero elements need be loaded.  A crude approximation !! to dr/dy, possibly with fewer nonzero elememts, will suffice. !! Note that if A is independent of y (or this dependence !! is weak enough to be ignored) then JAC is to compute dg/dy. !! !! If it is not feasible to provide a JAC routine, use !! MF = 22, 222, or 422 and DLSODIS will compute an approximate !! Jacobian internally by difference quotients. !! !! **E**. Next decide whether or not to provide the initial value of the !! derivative vector dy/dt.  If the initial value of A(t,y) is !! nonsingular (and not too ill-conditioned), you may let DLSODIS compute !! this vector (ISTATE = 0).  (DLSODIS will solve the system A\\*s = g for !! s, with initial values of A and g.)  If A(t,y) is initially !! singular, then the system is a differential-algebraic system, and !! you must make use of the particular form of the system to compute the !! initial values of y and dy/dt.  In that case, use ISTATE = 1 and !! load the initial value of dy/dt into the array YDOTI. !! !! The input array YDOTI and the initial Y array must be consistent with !! the equations A\\*dy/dt = g.  This implies that the initial residual !! r = g(t,y) - A(t,y)\\*YDOTI   must be approximately zero. !! !! **F.** Write a main program which calls Subroutine DLSODIS once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages by !! DLSODIS.  On the first call to DLSODIS, supply arguments as follows: !! !! RES !! !! : name of user subroutine for residual function r. !! !! ADDA !! !! : name of user subroutine for computing and adding A(t,y). !! !! JAC !! !! : name of user subroutine for Jacobian matrix dr/dy !! (MF = 121).  If not used, pass a dummy name. !! Note: The names for the RES and ADDA routines and (if used) the !! !! JAC routine must be declared External in the calling program. !! !! NEQ !! !! : number of scalar equations in the system. !! !! Y !! !! : array of initial values, of length NEQ. !! !! YDOTI !! !! : array of length NEQ (containing initial dy/dt if ISTATE = 1). !! !! T !! !! : the initial value of the independent variable. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a scalar or array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (scalar or array). !! The estimated local error in y(i) will be controlled so as !! to be roughly less (in magnitude) than !!```text !!        EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!        EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !! Thus the local error test passes if, in each component, !! either the absolute error is less than ATOL (or ATOL(i)), !! or the relative error is less than RTOL. !! Use RTOL = 0.0 for pure absolute error control, and !! use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !! control.  Caution: Actual (global) errors may exceed these !! local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1 if the !! initial dy/dt is supplied, and 0 otherwise. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!             20 + (2 + 1./LENRAT)*NNZ + (11 + 9./LENRAT)*NEQ !!``` !! where: !!```text !!          NNZ    = the number of nonzero elements in the sparse !!                   iteration matrix  P = A - con\\*dr/dy (con = scalar) !!                   (If NNZ is unknown, use an estimate of it.) !!          LENRAT = the real to integer wordlength ratio (usually 1 in !!                   single precision and 2 in double precision). !!``` !! In any case, the required size of RWORK cannot generally !! be predicted in advance for any value of MF, and the !! value above is a rough estimate of a crude lower bound. !! Some experimentation with this size may be necessary. !! (When known, the correct required length is an optional !! output, available in IWORK(17).) !! !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least 30. !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! MF !! !! : method flag.  Standard values are: !!```text !!      121 for a user-supplied sparse Jacobian. !!      222 for an internally generated sparse Jacobian. !!``` !! For other choices of MF, see the paragraph on MF in !! the full description below. !! !! Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK, !! and possibly ATOL. !! !! **G.** The output from the first call, or any call, is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable (normally TOUT). !! !! ISTATE !! !! : value and their meanings: !! !!  value | descriptions !!  ----- | -------------------------------------------------------- !!      2 | if DLSODIS was successful, negative otherwise. !!     -1 | means excess work done on this call (check all inputs). !!     -2 | means excess accuracy requested (tolerances too small). !!     -3 | means illegal input detected (see printed message). !!     -4 | means repeated error test failures (check all inputs). !!     -5 | means repeated convergence failures (perhaps bad Jacobian !!        | supplied or wrong choice of tolerances). !!     -6 | means error weight became zero during problem. (Solution !!        | component i vanished, and ATOL or ATOL(i) = 0.) !!     -7 | cannot occur in casual use. !!     -8 | means DLSODIS was unable to compute the initial dy/dt. !!        | in casual use, this means A(t,y) is initially singular. !!        | Supply YDOTI and use ISTATE = 1 on the first call. !!     -9 | means a fatal error return flag came from sparse solver !!        | CDRV by way of DPRJIS or DSOLSS.  Should never happen. !! !! A return with ISTATE = -1, -4, or -5, may result from using !! an inappropriate sparsity structure, one that is quite !! different from the initial structure.  Consider calling !! DLSODIS again with ISTATE = 3 to force the structure to be !! reevaluated.  See the full description of ISTATE below. !! !! If DLSODIS returns ISTATE = -1, -4  or -5, then the output of !! DLSODIS also includes YDOTI = array containing residual vector !! r = g - A \\* dy/dt  evaluated at the current t, y, and dy/dt. !! !! **H.** To continue the integration after a successful return, simply !! reset TOUT and call DLSODIS again.  No other parameters need be reset. !! !!----------------------------------------------------------------------- !! Example Problem. !! !! The following is an example problem, with the coding needed !! for its solution by DLSODIS.  The problem comes from the partial !! differential equation (the Burgers equation) !!```text !!   du/dt  =  - u * du/dx  +  eta * d**2 u/dx**2,   eta = .05, !! on -1 .le. x .le. 1.  The boundary conditions are periodic: !!   u(-1,t) = u(1,t)  and  du/dx(-1,t) = du/dx(1,t) !! The initial profile is a square wave, !!   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere. !! The PDE is discretized in x by a simplified Galerkin method, !! using piecewise linear basis functions, on a grid of 40 intervals. !! The result is a system A * dy/dt = g(y), of size NEQ = 40, !! where y(i) is the approximation to u at x = x(i), with !! x(i) = -1 + (i-1)*delx, delx = 2/NEQ = .05. !! The individual equations in the system are (in order): !!  (1/6)dy(NEQ)/dt+(4/6)dy(1)/dt+(1/6)dy(2)/dt !!       = r4d*(y(NEQ)**2-y(2)**2)+eodsq*(y(2)-2*y(1)+y(NEQ)) !! for i = 2,3,...,nm1, !!  (1/6)dy(i-1)/dt+(4/6)dy(i)/dt+(1/6)dy(i+1)/dt !!       = r4d*(y(i-1)**2-y(i+1)**2)+eodsq*(y(i+1)-2*y(i)+y(i-1)) !! and finally !!  (1/6)dy(nm1)/dt+(4/6)dy(NEQ)/dt+(1/6)dy(1)/dt !!       = r4d*(y(nm1)**2-y(1)**2)+eodsq*(y(1)-2*y(NEQ)+y(nm1)) !! where r4d = 1/(4*delx), eodsq = eta/delx**2 and nm1 = NEQ-1. !!``` !! The following coding solves the problem with MF = 121, with output !! of solution statistics at t = .1, .2, .3, and .4, and of the !! solution vector at t = .4.  Optional outputs (run statistics) are !! also printed. !! !!```fortran !!module c_test1 !!implicit none !!integer,parameter,private :: dp=kind(0.0d0) !!real(kind=dp),public      :: EODsq, R4D !!integer,public            :: NM1 !!end module c_test1 !! !!program dlsodis_ex !!use m_odepack !!use c_test1 !!implicit none !!integer,parameter              ::  dp=kind(0.0d0) !!external                       ::  addasp !!external                       ::  jacsp !!external                       ::  resid !!real(kind=dp),save             ::  atol,rtol !!real(kind=dp)                  ::  delx,t,tout !!integer                        ::  i,io,istate,nnzlu !!integer,save                   ::  iopt,itask,itol,liw,lrw,mf,neq !!integer,dimension(30)          ::  iw !!real(kind=dp),dimension(1409)  ::  rw !!real(kind=dp),dimension(40)    ::  y,ydoti !! !!data itol/1/,rtol/1.0D-3/,atol/1.0D-3/,itask/1/,iopt/0/ !!data neq/40/,lrw/1409/,liw/30/,mf/121/ !! !!   delx = 2.0/neq !!   R4D = 0.25/delx !!   EODsq = 0.05/delx**2 !!   NM1 = neq - 1 !!   do i = 1,neq !!      y(i) = 0.0 !!   enddo !!   y(11) = 0.5 !!   do i = 12,30 !!      y(i) = 1.0 !!   enddo !!   y(31) = 0.5 !!   t = 0.0 !!   tout = 0.1 !!   istate = 0 !!   do io = 1,4 !!      call dlsodis(resid,addasp,jacsp,[neq],y,ydoti,t,tout,itol,[rtol],    & !!                 & [atol],itask,istate,iopt,rw,lrw,iw,liw,mf) !!      write (6,99010) t,iw(11),rw(11) !!   99010 format (' At t =',f5.2,'   No. steps =',i4,'    Last step =',     & !!               & d12.4) !!      if ( istate/=2 ) then !!         write (6,99020) istate !!   99020 format (///' Error halt.. ISTATE =',i3) !!         stop 1 !!      else !!         tout = tout + 0.1 !!      endif !!   enddo !!   write (6,99030) (y(i),i=1,neq) !!   99030 format (/' Final solution values..'/8(5D12.4/)) !!   write (6,99040) iw(17),iw(18),iw(11),iw(12),iw(13) !!   99040 format (/' Required RW size =',i5,'   IW size =',                 & !!               & i4/' No. steps =',i4,'   No. r-s =',i4,'   No. J-s =',i4) !!   nnzlu = iw(25) + iw(26) + neq !!   write (6,99050) iw(19),nnzlu !!   99050 format (' No. of nonzeros in P matrix =',i4,                      & !!                &'   No. of nonzeros in LU =',i4) !! !!end program dlsodis_ex !! !!subroutine gfun(N,T,Y,G) !!use c_test1 !!implicit none !!integer,parameter                       ::  dp=kind(0.0d0) !!integer,intent(in)                      ::  N !!real(kind=dp)                           ::  T !!real(kind=dp),intent(in),dimension(N)   ::  Y !!real(kind=dp),intent(out),dimension(N)  ::  G !!integer                                 ::  i !! !!   G(1) = R4D*(Y(N)**2-Y(2)**2) + EODsq*(Y(2)-2.0*Y(1)+Y(N)) !!   do i = 2,NM1 !!      G(i) = R4D*(Y(i-1)**2-Y(i+1)**2) + EODsq*(Y(i+1)-2.0*Y(i)+Y(i-1)) !!   enddo !!   G(N) = R4D*(Y(NM1)**2-Y(1)**2) + EODsq*(Y(1)-2.0*Y(N)+Y(NM1)) !!end subroutine gfun !! !!subroutine resid(N,T,Y,S,R,Ires) !!use c_test1 !!implicit none !!integer,parameter                         :: dp=kind(0.0d0) !!external                                  :: gfun !! !!integer                                   :: N !!real(kind=dp)                             :: T !!real(kind=dp),dimension(N)                :: Y !!real(kind=dp),intent(in),dimension(N)     :: S !!real(kind=dp),intent(inout),dimension(N)  :: R !!integer                                   :: Ires !! !!integer                                   :: i !! !!   call gfun(N,T,Y,R) !!   R(1) = R(1) - (S(N)+4.0*S(1)+S(2))/6.0 !!   do i = 2,NM1 !!      R(i) = R(i) - (S(i-1)+4.0*S(i)+S(i+1))/6.0 !!   enddo !!   R(N) = R(N) - (S(NM1)+4.0*S(N)+S(1))/6.0 !!end subroutine resid !! !!subroutine addasp(N,T,Y,J,Ip,Jp,P) !!implicit none !!integer,parameter                         ::  dp=kind(0.0d0) !!integer,intent(in)                        ::  N !!real(kind=dp)                             ::  T !!real(kind=dp),dimension(N)                ::  Y !!integer,intent(in)                        ::  J !!integer,dimension(*)                      ::  Ip !!integer,dimension(*)                      ::  Jp !!real(kind=dp),intent(inout),dimension(N)  ::  P !!integer                                   ::  jm1,jp1 !! !!   jm1 = J - 1 !!   jp1 = J + 1 !!   if ( J==N ) jp1 = 1 !!   if ( J==1 ) jm1 = N !!   P(J) = P(J) + (2.0/3.0) !!   P(jp1) = P(jp1) + (1.0/6.0) !!   P(jm1) = P(jm1) + (1.0/6.0) !!end subroutine addasp !! !!subroutine jacsp(N,T,Y,S,J,Ip,Jp,Pdj) !!use c_test1 !!implicit none !!integer,parameter                       ::  dp=kind(0.0d0) !! !!integer,intent(in)                      ::  N !!real(kind=dp)                           ::  T !!real(kind=dp),intent(in),dimension(N)   ::  Y !!real(kind=dp),dimension(N)              ::  S !!integer,intent(in)                      ::  J !!integer,dimension(*)                    ::  Ip !!integer,dimension(*)                    ::  Jp !!real(kind=dp),intent(out),dimension(N)  ::  Pdj !! !!integer                                 ::  jm1,jp1 !! !!   jm1 = J - 1 !!   jp1 = J + 1 !!   if ( J==1 ) jm1 = N !!   if ( J==N ) jp1 = 1 !!   Pdj(jm1) = -2.0*R4D*Y(J) + EODsq !!   Pdj(J) = -2.0*EODsq !!   Pdj(jp1) = 2.0*R4D*Y(J) + EODsq !!end subroutine jacsp !!``` !! !! The output of this program (on a CDC-7600 in single precision) !! is as follows: !! !!```text !! At t = 0.10   No. steps =  15    Last step =  1.6863e-02 !! At t = 0.20   No. steps =  19    Last step =  2.4101e-02 !! At t = 0.30   No. steps =  22    Last step =  4.3143e-02 !! At t = 0.40   No. steps =  24    Last step =  5.7819e-02 !! !! Final solution values.. !!  1.8371e-02  1.3578e-02  1.5864e-02  2.3805e-02  3.7245e-02 !!  5.6630e-02  8.2538e-02  1.1538e-01  1.5522e-01  2.0172e-01 !!  2.5414e-01  3.1150e-01  3.7259e-01  4.3608e-01  5.0060e-01 !!  5.6482e-01  6.2751e-01  6.8758e-01  7.4415e-01  7.9646e-01 !!  8.4363e-01  8.8462e-01  9.1853e-01  9.4500e-01  9.6433e-01 !!  9.7730e-01  9.8464e-01  9.8645e-01  9.8138e-01  9.6584e-01 !!  9.3336e-01  8.7497e-01  7.8213e-01  6.5315e-01  4.9997e-01 !!  3.4672e-01  2.1758e-01  1.2461e-01  6.6208e-02  3.3784e-02 !! !! Required RW size = 1409   IW size =  30 !! No. steps =  24   No. r-s =  33   No. J-s =   8 !! No. of nonzeros in P matrix = 120   No. of nonzeros in LU = 194 !!``` !!----------------------------------------------------------------------- !!#### Full Description of User Interface to DLSODIS. !! !! The user interface to DLSODIS consists of the following parts. !! !! 1.   The call sequence to Subroutine DLSODIS, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      Following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the DLSODIS package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of two routines in the DLSODIS package, either of !!      which the user may replace with his/her own version, if desired. !!      These relate to the measurement of errors. !! !!----------------------------------------------------------------------- !!### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !!     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, !!     IOPT, LRW, LIW, MF, !! !! and those used for both input and output are !!     Y, T, ISTATE, YDOTI. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine DLSODIS to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows. !! !! RES !! !! : the name of the user-supplied subroutine which supplies !! the residual vector for the ODE system, defined by !!```text !!            r = g(t,y) - A(t,y) * s !!``` !! as a function of the scalar t and the vectors !! s and y (s approximates dy/dt).  This subroutine !! is to have the form !!```fortran !!               SUBROUTINE RES (NEQ, T, Y, S, R, IRES) !!               DOUBLE PRECISION T, Y(*), S(*), R(*) !!``` !! where NEQ, T, Y, S, and IRES are input, and R and !! IRES are output.  Y, S, and R are arrays of length NEQ. !! !! On input, IRES indicates how DLSODIS will use the !! returned array R, as follows: !!```text !!             IRES = 1  means that DLSODIS needs the full residual, !!                       r = g - A\\*s, exactly. !!             IRES = -1 means that DLSODIS is using R only to compute !!                       the Jacobian dr/dy by difference quotients. !!``` !! The RES routine can ignore IRES, or it can omit some terms !! if IRES = -1.  If A does not depend on y, then RES can !! just return R = g when IRES = -1.  If g - A\\*s contains other !! additive terms that are independent of y, these can also be !! dropped, if done consistently, when IRES = -1. !! !! The subroutine should set the flag IRES if it !! encounters a halt condition or illegal input. !! Otherwise, it should not reset IRES.  On output, !! !! IRES = 1 or -1 represents a normal return, and !! DLSODIS continues integrating the ODE.  Leave IRES !! unchanged from its input value. !! !! IRES = 2 tells DLSODIS to immediately return control !! to the calling program, with ISTATE = 3.  This lets !! the calling program change parameters of the problem !! if necessary. !! !! IRES = 3 represents an error condition (for example, an !! illegal value of y).  DLSODIS tries to integrate the system !! without getting IRES = 3 from RES.  If it cannot, DLSODIS !! returns with ISTATE = -7 or -1. !! !! On a return with ISTATE = 3, -1, or -7, the values !! of T and Y returned correspond to the last point reached !! successfully without getting the flag IRES = 2 or 3. !! !! The flag values IRES = 2 and 3 should not be used to !! handle switches or root-stop conditions.  This is better !! done by calling DLSODIS in a one-step mode and checking the !! stopping function for a sign change at each step. !! !! If quantities computed in the RES routine are needed !! externally to DLSODIS, an extra call to RES should be made !! for this purpose, for consistent and accurate results. !! To get the current dy/dt for the S argument, use DINTDY. !! !! RES must be declared External in the calling !! program.  See note below for more about RES. !! !! ADDA !! !! : the name of the user-supplied subroutine which adds the !! matrix A = A(t,y) to another matrix stored in sparse form. !! This subroutine is to have the form !!```fortran !!       SUBROUTINE ADDA (NEQ, T, Y, J, IAN, JAN, P) !!       DOUBLE PRECISION T, Y(*), P(*) !!       INTEGER IAN(*), JAN(*) !!``` !! where NEQ, T, Y, J, IAN, JAN, and P  are input.  This routine !! should add the J-th column of matrix A to the array P, of !! length NEQ.  Thus a(i,J) is to be added to P(i) for all !! relevant values of i.  Here T and Y have the same meaning as !! in Subroutine RES, and J is a column index (1 to NEQ). !! IAN and JAN are undefined in calls to ADDA for structure !! determination (MOSS .ne. 0).  Otherwise, IAN and JAN are !! structure descriptors, as defined under optional outputs !! below, and so can be used to determine the relevant row !! indices i, if desired. !! !! Calls to ADDA are made with J = 1,...,NEQ, in that !! order.  ADDA must not alter its input arguments. !! !! ADDA must be declared External in the calling program. !! See note below for more information about ADDA. !! !! JAC !! !! : the name of the user-supplied subroutine which supplies !! the Jacobian matrix, dr/dy, where r = g - A\\*s.  JAC is !! required if MITER = 1, or MOSS = 1 or 3.  Otherwise a dummy !! name can be passed.  This subroutine is to have the form !!```fortran !!               SUBROUTINE JAC (NEQ, T, Y, S, J, IAN, JAN, PDJ) !!               DOUBLE PRECISION T, Y(*), S(*), PDJ(*) !!               INTEGER IAN(*), JAN(*) !!``` !! where NEQ, T, Y, S, J, IAN, and JAN are input.  The !! array PDJ, of length NEQ, is to be loaded with column J !! of the Jacobian on output.  Thus dr(i)/dy(J) is to be !! loaded into PDJ(i) for all relevant values of i. !! !! Here T, Y, and S have the same meaning as in Subroutine RES, !! and J is a column index (1 to NEQ).  IAN and JAN !! are undefined in calls to JAC for structure determination !! (MOSS .ne. 0).  Otherwise, IAN and JAN are structure !! descriptors, as defined under optional outputs below, and !! so can be used to determine the relevant row indices i, if !! desired. !! !! JAC need not provide dr/dy exactly.  A crude !! approximation (possibly with greater sparsity) will do. !! !! In any case, PDJ is preset to zero by the solver, !! so that only the nonzero elements need be loaded by JAC. !! Calls to JAC are made with J = 1,...,NEQ, in that order, and !! each such set of calls is preceded by a call to RES with the !! same arguments NEQ, T, Y, S, and IRES.  Thus to gain some !! efficiency intermediate quantities shared by both calculations !! may be saved in a user Common block by RES and not recomputed !! by JAC, if desired.  JAC must not alter its input arguments. !! !! JAC must be declared External in the calling program. !! !! See note below for more about JAC. !! !! Note on RES, ADDA, and JAC: !! !! These subroutines may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in the subroutines) and/or Y has length !! exceeding NEQ(1).  However, these subroutines should not !! alter NEQ(1), Y(1),...,Y(NEQ) or any other input variables. !! See the descriptions of NEQ and Y below. !! !! NEQ !! !! : the size of the system (number of first order ordinary !! differential equations or scalar algebraic equations). !! Used only for input. !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in RES, ADDA, or JAC. !! !! Normally, NEQ is a scalar, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ may be an array, with NEQ(1) set to the system size. !! (The DLSODIS package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to RES, ADDA, and JAC.  Hence, if it is an array, !! locations NEQ(2),... may be used to store other integer data !! and pass it to RES, ADDA, or JAC.  Each such subroutine !! must include NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 0 or 1), and only for output on other !! calls.  On the first call, Y must contain the vector of !! initial values.  On output, Y contains the computed solution !! vector, evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to RES, !! ADDA, and JAC.  Hence its length may exceed NEQ, !! and locations Y(NEQ+1),... may be used to store other real !! data and pass it to RES, ADDA, or JAC.  (The DLSODIS !! package accesses only Y(1),...,Y(NEQ). ) !! !! YDOTI !! !! : a real array for the initial value of the vector !! dy/dt and for work space, of dimension at least NEQ. !! !! On input: !! !! If ISTATE = 0 then DLSODIS will compute the initial value !! of dy/dt, if A is nonsingular.  Thus YDOTI will !! serve only as work space and may have any value. !! !! If ISTATE = 1 then YDOTI must contain the initial value !! of dy/dt. !! !! If ISTATE = 2 or 3 (continuation calls) then YDOTI !! may have any value. !! !! Note: If the initial value of A is singular, then !! DLSODIS cannot compute the initial value of dy/dt, so !! it must be provided in YDOTI, with ISTATE = 1. !! !! On output, when DLSODIS terminates abnormally with ISTATE = !! -1, -4, or -5, YDOTI will contain the residual !! r = g(t,y) - A(t,y)\\*(dy/dt).  If r is large, t is near !! its initial value, and YDOTI is supplied with ISTATE = 1, !! there may have been an incorrect input value of !! YDOTI = dy/dt, or the problem (as given to DLSODIS) !! may not have a solution. !! !! If desired, the YDOTI array may be used for other !! purposes between calls to the solver. !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! On output, after each call, T is the value at which a !! computed solution y is evaluated (usually the same as TOUT). !! On an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 0 or 1), TOUT may be !! equal to T for one call, then should .ne. T for the next !! call.  For the initial T, an input value of TOUT .ne. T is !! used in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, either a scalar or !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, either a scalar or !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !!```text !!                      RMS-norm of ( E(i)/EWT(i) )   .le.   1, !!          where       EWT(i) = RTOL(i)*ABS(Y(i)) + ATOL(i), !!``` !! and the RMS-norm (root-mean-square norm) here is !! RMS-norm(v) = SQRT(sum v(i)\\*\\*2 / NEQ).  Here EWT = (EWT(i)) !! is a vector of weights which must always be positive, and !! the values of RTOL and ATOL should all be non-negative. !! The following table gives the types (scalar/array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL    |  ATOL   |      EWT(i) !!  ---- | -------- | ------- | ------------------------------ !!   1   | scalar   | scalar  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | scalar   | array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array    | scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array    | scalar  |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! When either of these parameters is a scalar, it need not !! be dimensioned in the user's calling program. !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting !! user-supplied routines for the setting of EWT and/or for !! the norm calculation.  See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! Input only.  ITASK has the following values and meanings. !! !! !!  value  | description !!  ------ | ---------------------------------------------------- !!      1  | means normal computation of output values of y(t) at !!         | t = TOUT (by overshooting and interpolating). !!      2  | means take one step only and return. !!      3  | means stop at the first internal mesh point at or !!         | beyond t = TOUT and return. !!      4  | means normal computation of output values of y(t) at !!         | t = TOUT but without overshooting t = TCRIT. !!         | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!         | or beyond TOUT, but not behind it in the direction of !!         | integration.  This option is useful if the problem !!         | has a singularity at or beyond t = TCRIT. !!      5  | means take one step, without passing TCRIT, and return. !!         | TCRIT must be input as RWORK(1). !! !! Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at t = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! state of the calculation. !! !! On input, the values of ISTATE are as follows. !! !!  value  | description !!  ------ | ---------------------------------------------------- !!       0 | means this is the first call for the problem, and !!         | DLSODIS is to compute the initial value of dy/dt !!         | (while doing other initializations).  See note below. !!         | !!       1 | means this is the first call for the problem, and !!         | the initial value of dy/dt has been supplied in !!         | YDOTI (DLSODIS will do other initializations). !!         | See note below. !!         | !!       2 | means this is not the first call, and the calculation !!         | is to continue normally, with no change in any input !!         | parameters except possibly TOUT and ITASK. !!         | (If ITOL, RTOL, and/or ATOL are changed between calls !!         | with ISTATE = 2, the new values will be used but not !!         | tested for legality.) !!         | !!       3 | means this is not the first call, and the !!         | calculation is to continue normally, but with !!         | a change in input parameters other than !!         | TOUT and ITASK.  Changes are allowed in !!         | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, MF, !!         | the conditional inputs IA, JA, IC, and JC, !!         | and any of the optional inputs except H0. !!         | A call with ISTATE = 3 will cause the sparsity !!         | structure of the problem to be recomputed. !!         | (Structure information is reread from IA and JA if !!         | MOSS = 0, 3, or 4 and from IC and JC if MOSS = 0). !! !! Note:  A preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 0 or 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value  | description !!  ------ | ---------------------------------------------------- !!  0 or 1 | means nothing was done; TOUT = T and !!         | ISTATE = 0 or 1 on input. !!         | !!  2      | means that the integration was performed successfully. !!         | !!  3      | means that the user-supplied Subroutine RES signalled !!         | !!         | DLSODIS to halt the integration and return (IRES = 2). !!         | Integration as far as T was achieved with no occurrence !!         | of IRES = 2, but this flag was set on attempting the !!         | next step. !!         | !! -1      | means an excessive amount of work (more than MXSTEP !!         | steps) was done on this call, before completing the !!         | requested task, but the integration was otherwise !!         | successful as far as T.  (MXSTEP is an optional input !!         | and is normally 500.)  To continue, the user may !!         | simply reset ISTATE to a value .gt. 1 and call again !!         | (the excess work step counter will be reset to 0). !!         | In addition, the user may increase MXSTEP to avoid !!         | this error return (see below on optional inputs). !!         | !! -2      | means too much accuracy was requested for the precision !!         | of the machine being used.  This was detected before !!         | completing the requested task, but the integration !!         | was successful as far as T.  To continue, the tolerance !!         | parameters must be reset, and ISTATE must be set !!         | to 3.  The optional output TOLSF may be used for this !!         | purpose.  (Note: If this condition is detected before !!         | taking any steps, then an illegal input return !!         | (ISTATE = -3) occurs instead.) !!         | !! -3      | means illegal input was detected, before taking any !!         | integration steps.  See written message for details. !!         | Note:  If the solver detects an infinite loop of calls !!         | to the solver with illegal input, it will cause !!         | the run to stop. !!         | !! -4      | means there were repeated error test failures on !!         | one attempted step, before completing the requested !!         | task, but the integration was successful as far as T. !!         | The problem may have a singularity, or the input !!         | may be inappropriate. !!         | !! -5      | means there were repeated convergence test failures on !!         | one attempted step, before completing the requested !!         | task, but the integration was successful as far as T. !!         | This may be caused by an inaccurate Jacobian matrix. !!         | !! -6      | means EWT(i) became zero for some i during the !!         | integration.  Pure relative error control (ATOL(i) = 0.0) !!         | was requested on a variable which has now vanished. !!         | the integration was successful as far as T. !!         | !! -7      | means that the user-supplied Subroutine RES set !!         | its error flag (IRES = 3) despite repeated tries by !!         | DLSODIS to avoid that condition. !!         | !! -8      | means that ISTATE was 0 on input but DLSODIS was unable !!         | to compute the initial value of dy/dt.  See the !!         | printed message for details. !!         | !! -9      | means a fatal error return flag came from the sparse !!         | solver CDRV by way of DPRJIS or DSOLSS (numerical !!         | factorization or backsolve).  This should never happen. !!         | The integration was successful as far as T. !! !! Note: An error return with ISTATE = -1, -4, or -5 !! may mean that the sparsity structure of the !! problem has changed significantly since it was last !! determined (or input).  In that case, one can attempt to !! complete the integration by setting ISTATE = 3 on the next !! call, so that a new structure determination is done. !! !! Note:  Since the normal output value of ISTATE is 2, !! it does not need to be reset for normal continuation. !! similarly, ISTATE (= 3) need not be reset if RES told !! DLSODIS to return because the calling program must change !! the parameters of the problem. !! Also, since a negative input value of ISTATE will be !! regarded as illegal, a negative output value requires the !! user to change it, and possibly other inputs, before !! calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !! !!          IOPT = 0 means no optional inputs are being used. !!                   Default values will be used in all cases. !!          IOPT = 1 means one or more optional inputs are being used. !! !! RWORK !! !! : a work array used for a mixture of real (double precision) !! and integer work space. !! !! The length of RWORK (in real words) must be at least !!```text !!             20 + NYH*(MAXORD + 1) + 3*NEQ + LWM !!``` !! where !!```text !!          NYH    = the initial value of NEQ, !!          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a !!                   smaller value is given as an optional input), !!          LWM = 2*NNZ + 2*NEQ + (NNZ+9*NEQ)/LENRAT   if MITER = 1, !!          LWM = 2*NNZ + 2*NEQ + (NNZ+10*NEQ)/LENRAT  if MITER = 2. !!``` !! in the above formulas, !!```text !!          NNZ    = number of nonzero elements in the iteration matrix !!                   P = A - con*J  (con is a constant and J is the !!                   Jacobian matrix dr/dy). !!          LENRAT = the real to integer wordlength ratio (usually 1 in !!                   single precision and 2 in double precision). !!          (See the MF description for METH and MITER.) !!``` !! Thus if MAXORD has its default value and NEQ is constant, !! the minimum length of RWORK is: !!```text !!             20 + 16*NEQ + LWM  for MF = 11, 111, 311, 12, 212, 412, !!             20 +  9*NEQ + LWM  for MF = 21, 121, 321, 22, 222, 422. !!``` !! The above formula for LWM is only a crude lower bound. !! The required length of RWORK cannot be readily predicted !! in general, as it depends on the sparsity structure !! of the problem.  Some experimentation may be necessary. !! !! The first 20 words of RWORK are reserved for conditional !! and optional inputs and optional outputs. !! !! The following word in RWORK is a conditional input: !! !!        RWORK(1) = TCRIT = critical value of t which the solver !!                 is not to overshoot.  Required if ITASK is !!                 4 or 5, and ignored otherwise.  (See ITASK.) !! !! LRW !! !! : the length of the array RWORK, as declared by the user. !! (This will be checked by the solver.) !! !! IWORK !! !! : an integer work array.  The length of IWORK must be at least !!```text !!      32 + 2*NEQ + NZA + NZC   for MOSS = 0, !!      30                       for MOSS = 1 or 2, !!      31 + NEQ + NZA           for MOSS = 3 or 4. !!``` !! (NZA is the number of nonzero elements in matrix A, and !! NZC is the number of nonzero elements in dr/dy.) !! !! In DLSODIS, IWORK is used for conditional and !! optional inputs and optional outputs. !! !! The following two blocks of words in IWORK are conditional !! inputs, required if MOSS = 0, 3, or 4, but not otherwise !! (see the description of MF for MOSS). !! !!      IWORK(30+j) = IA(j)     (j=1,...,NEQ+1) !!      IWORK(31+NEQ+k) = JA(k) (k=1,...,NZA) !! !! The two arrays IA and JA describe the sparsity structure !! to be assumed for the matrix A.  JA contains the row !! indices where nonzero elements occur, reading in columnwise !! order, and IA contains the starting locations in JA of the !! descriptions of columns 1,...,NEQ, in that order, with !! IA(1) = 1.  Thus, for each column index j = 1,...,NEQ, the !! values of the row index i in column j where a nonzero !! element may occur are given by !! !!      i = JA(k),  where   IA(j) .le. k .lt. IA(j+1). !! !! If NZA is the total number of nonzero locations assumed, !! then the length of the JA array is NZA, and IA(NEQ+1) must !! be NZA + 1.  Duplicate entries are not allowed. !! The following additional blocks of words are required !! if MOSS = 0, but not otherwise.  If LC = 31 + NEQ + NZA, then !!```text !!      IWORK(LC+j) = IC(j)       (j=1,...,NEQ+1), and !!      IWORK(LC+NEQ+1+k) = JC(k) (k=1,...,NZC) !!``` !! The two arrays IC and JC describe the sparsity !! structure to be assumed for the Jacobian matrix dr/dy. !! They are used in the same manner as the above IA and JA !! arrays.  If NZC is the number of nonzero locations !! assumed, then the length of the JC array is NZC, and !! IC(NEQ+1) must be NZC + 1.  Duplicate entries are not !! allowed. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! Note:  The work arrays must not be altered between calls to DLSODIS !! for the same problem, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside DLSODIS between calls, if !! desired (but not for use by RES, ADDA, or JAC). !! !! MF !! !! : the method flag.  Used only for input. !! MF has three decimal digits-- MOSS, METH, and MITER. !! For standard options: !!```text !!       MF = 100*MOSS + 10*METH + MITER. !!``` !! MOSS indicates the method to be used to obtain the sparsity !! structure of the Jacobian matrix: !! !!  MOSS | Description !!  ---- | ----------------------------------------------------- !!     0 | means the user has supplied IA, JA, IC, and JC !!       | (see descriptions under IWORK above). !!     1 | means the user has supplied JAC (see below) and !!       | the structure will be obtained from NEQ initial !!       | calls to JAC and NEQ initial calls to ADDA. !!     2 | means the structure will be obtained from NEQ+1 !!       | initial calls to RES and NEQ initial calls to ADDA !!     3 | like MOSS = 1, except user has supplied IA and JA. !!     4 | like MOSS = 2, except user has supplied IA and JA. !! !! METH indicates the basic linear multistep method: !! !!  METH | Description !!  ---- | ----------------------------------------------------- !!     1 | means the implicit Adams method. !!     2 | means the method based on Backward !!       | Differentiation Formulas (BDFs). !! !!  The BDF method is strongly preferred for stiff problems, !!  while the Adams method is preferred when the problem is !!  not stiff.  If the matrix A(t,y) is nonsingular, !!  stiffness here can be taken to mean that of the explicit !!  ODE system dy/dt = A-inverse \\* g.  If A is singular, !!  the concept of stiffness is not well defined. !! !!  If you do not know whether the problem is stiff, we !!  recommend using METH = 2.  If it is stiff, the advantage !!  of METH = 2 over METH = 1 will be great, while if it is !!  not stiff, the advantage of METH = 1 will be slight. !!  If maximum efficiency is important, some experimentation !!  with METH may be necessary. !! !!  MITER indicates the corrector iteration method: !! !!  METH | Description !!  ---- | ----------------------------------------------------- !!     1 | means chord iteration with a user-supplied !!       | sparse Jacobian, given by Subroutine JAC. !!       | !!     2 | means chord iteration with an internally !!       | generated (difference quotient) sparse !!       | Jacobian (using NGP extra calls to RES per !!       | dr/dy value, where NGP is an optional !!       | output described below.) !! !! If MITER = 1 or MOSS = 1 or 3 the user must supply a !! Subroutine JAC (the name is arbitrary) as described above !! under JAC.  Otherwise, a dummy argument can be used. !! !! The standard choices for MF are: !! !!  MF        | Description !!  --------- | ----------------------------------------------------- !!   21 or 22 | for a stiff problem with IA/JA and IC/JC !!            |  supplied, !!            | !!   121      | for a stiff problem with JAC supplied, but not !!            | IA/JA or IC/JC, !!            | !!   222      | for a stiff problem with neither IA/JA, IC/JC/, !!            | nor JAC supplied, !!            | !!   321      | for a stiff problem with IA/JA and JAC supplied, !!            | but not IC/JC, !!            | !!   422      | for a stiff problem with IA/JA supplied, but not !!            | IC/JC or JAC. !! !!  The sparseness structure can be changed during the problem !!  by making a call to DLSODIS with ISTATE = 3. !!----------------------------------------------------------------------- !! Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !!  Name   | Location |     Meaning and Default Value !!  ------ | -------- | -------------------------------------------------- !!  H0     | RWORK(5) | the step size to be attempted on the first step. !!         |          | The default value is determined by the solver. !!         |          | !!  HMAX   | RWORK(6) | the maximum absolute step size allowed. !!         |          | The default value is infinite. !!         |          | !!  HMIN   | RWORK(7) | the minimum absolute step size allowed. !!         |          | The default value is 0.  (This lower bound is not !!         |          | enforced on the final step before reaching TCRIT !!         |          | when ITASK = 4 or 5.) !!         |          | !!  MAXORD | IWORK(5) | the maximum order to be allowed.  The default !!         |          | value is 12 if METH = 1, and 5 if METH = 2. !!         |          | If MAXORD exceeds the default value, it will !!         |          | be reduced to the default value. !!         |          | If MAXORD is changed during the problem, it may !!         |          | cause the current order to be reduced. !!         |          | !!  MXSTEP | IWORK(6) | maximum number of (internally defined) steps !!         |          | allowed during one call to the solver. !!         |          | The default value is 500. !!         |          | !!  MXHNIL | IWORK(7) | maximum number of messages printed (per problem) !!         |          | warning that T + H = T on a step (H = step size). !!         |          | This must be positive to result in a non-default !!         |          | value.  The default value is 10. !! !!#### Optional Outputs. !! !! As optional additional output from DLSODIS, the variables listed !! below are quantities related to the performance of DLSODIS !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! !! Except where stated otherwise, all of these outputs are defined !! on any successful return from DLSODIS, and on any return with !! ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal !! input) or -8, they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !! Name  | Location |     Meaning !! ----- | -------- | --------------------------------------------------- !! HU    | RWORK(11)| the step size in t last used (successfully). !!       |          | !! HCUR  | RWORK(12)| the step size to be attempted on the next step. !!       |          | !! TCUR  | RWORK(13)| the current value of the independent variable !!       |          | which the solver has actually reached, i.e. the !!       |          | current internal mesh point in t.  On output, TCUR !!       |          | will always be at least as far as the argument !!       |          | T, but may be farther (if interpolation was done). !!       |          | !! TOLSF | RWORK(14)| a tolerance scale factor, greater than 1.0, !!       |          | computed when a request for too much accuracy was !!       |          | detected (ISTATE = -3 if detected at the start of !!       |          | the problem, ISTATE = -2 otherwise).  If ITOL is !!       |          | left unaltered but RTOL and ATOL are uniformly !!       |          | scaled up by a factor of TOLSF for the next call, !!       |          | then the solver is deemed likely to succeed. !!       |          | (The user may also ignore TOLSF and alter the !!       |          | tolerance parameters in any other way appropriate.) !!       |          | !! NST   | IWORK(11)| the number of steps taken for the problem so far. !!       |          | !! NRE   | IWORK(12)| the number of residual evaluations (RES calls) !!       |          | for the problem so far, excluding those for !!       |          | structure determination (MOSS = 2 or 4). !!       |          | !! NJE   | IWORK(13)| the number of Jacobian evaluations (each involving !!       |          | an evaluation of A and dr/dy) for the problem so !!       |          | far, excluding those for structure determination !!       |          | (MOSS = 1 or 3).  This equals the number of calls !!       |          | to ADDA and (if MITER = 1) JAC. !!       |          | !! NQU   | IWORK(14)| the method order last used (successfully). !!       |          | !! NQCUR | IWORK(15)| the order to be attempted on the next step. !!       |          | !! IMXER | IWORK(16)| the index of the component of largest magnitude in !!       |          | the weighted local error vector ( E(i)/EWT(i) ), !!       |          | on an error return with ISTATE = -4 or -5. !!       |          | !! LENRW | IWORK(17)| the length of RWORK actually required. !!       |          | This is defined on normal returns and on an illegal !!       |          | input return for insufficient storage. !!       |          | !! LENIW | IWORK(18)| the length of IWORK actually required. !!       |          | This is defined on normal returns and on an illegal !!       |          | input return for insufficient storage. !!       |          | !! NNZ   | IWORK(19)| the number of nonzero elements in the iteration !!       |          | matrix  P = A - con\\*J  (con is a constant and !!       |          | J is the Jacobian matrix dr/dy). !!       |          | !! NGP   | IWORK(20)| the number of groups of column indices, used in !!       |          | difference quotient Jacobian aproximations if !!       |          | MITER = 2.  This is also the number of extra RES !!       |          | evaluations needed for each Jacobian evaluation. !!       |          | !! NLU   | IWORK(21)| the number of sparse LU decompositions for the !!       |          | problem so far. (Excludes the LU decomposition !!       |          | necessary when ISTATE = 0.) !!       |          | !! LYH   | IWORK(22)| the base address in RWORK of the history array YH, !!       |          | described below in this list. !!       |          | !! IPIAN | IWORK(23)| the base address of the structure descriptor array !!       |          | IAN, described below in this list. !!       |          | !! IPJAN | IWORK(24)| the base address of the structure descriptor array !!       |          | JAN, described below in this list. !!       |          | !! NZL   | IWORK(25)| the number of nonzero elements in the strict lower !!       |          | triangle of the LU factorization used in the chord !!       |          | iteration. !!       |          | !! NZU   | IWORK(26)| the number of nonzero elements in the strict upper !!       |          | triangle of the LU factorization used in the chord !!       |          | iteration.  The total number of nonzeros in the !!       |          | factorization is therefore NZL + NZU + NEQ. !! !! The following four arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address, and its description. !! !! For YH and ACOR, the base addresses are in RWORK (a real array). !! The integer arrays IAN and JAN are to be obtained by declaring an !! integer array IWK and identifying IWK(1) with RWORK(21), using either !! an equivalence statement or a subroutine call.  Then the base !! addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained !! as optional outputs IWORK(23) and IWORK(24), respectively. !! !! Thus IAN(1) is IWK(ipian), etc. !! !! Name |  Base Address  |    Description !! ---- | -------------- | ---------------------------------------------- !! IAN  | IPIAN (in IWK) | structure descriptor array of size NEQ + 1. !! JAN  | IPJAN (in IWK) | structure descriptor array of size NNZ. !!      |  (see above)   | IAN and JAN together describe the sparsity !!      |                | structure of the iteration matrix !!      |                |   P = A - con\\*J,  as used by DLSODIS. !!      |                | JAN contains the row indices of the nonzero !!      |                | locations, reading in columnwise order, and !!      |                | IAN contains the starting locations in JAN of !!      |                | the descriptions of columns 1,...,NEQ, in !!      |                | that order, with IAN(1) = 1.  Thus for each !!      |                | j = 1,...,NEQ, the row indices i of the !!      |                | nonzero locations in column j are !!      |                | i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1). !!      |                | Note that IAN(NEQ+1) = NNZ + 1. !! YH   |  LYH           | the Nordsieck history array, of size NYH by !!      |   (optional    | (NQCUR + 1), where NYH is the initial value !!      |    output)     | of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!      |                | of YH contains HCUR\\*\\*j/factorial(j) times !!      |                | the j-th derivative of the interpolating !!      |                | polynomial currently representing the solution, !!      |                | evaluated at t = TCUR.  The base address LYH !!      |                | is another optional output, listed above. !!      |                | !! ACOR |   LENRW-NEQ+1  | array of size NEQ used for the accumulated !!      |                | corrections on each step, scaled on output to !!      |                | represent the estimated local error in y on the !!      |                | last step.  This is the vector E in the !!      |                | description of the error control. It is defined !!      |                | only on a return from DLSODIS with ISTATE = 2. !! !!----------------------------------------------------------------------- !!### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with DLSODIS. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !! Form of Call                | Function !! --------------------------- | ---------------------------------------- !!   CALL XSETUN(LUN)          | Set the logical unit number, LUN, for !!                             | output of messages from DLSODIS, if !!                             | The default is not desired. !!                             | The default value of LUN is 6. !!                             | !!   CALL XSETF(MFLAG)         | Set a flag to control the printing of !!                             | messages by DLSODIS. !!                             | !!                             |   MFLAG = 0 means do not print. (Danger: !!                             |   This risks losing valuable information.) !!                             |   MFLAG = 1 means print (the default). !!                             | !!                             | Either of the above calls may be made at !!                             | any time and will take effect immediately. !!                             | !!   CALL DSRCMS(RSAV,ISAV,JOB)| saves and restores the contents of !!                             | the internal Common blocks used by !!                             | DLSODIS (see Part 3 below). !!                             | RSAV must be a real array of length 224 !!                             | or more, and ISAV must be an integer !!                             | array of length 71 or more. !!                             | !!                             |   JOB=1 means save into RSAV/ISAV. !!                             |   JOB=2 means restore from RSAV/ISAV. !!                             | !!                             | DSRCMS is useful if one is !!                             | interrupting a run and restarting !!                             | later, or alternating between two or !!                             | more problems solved with DLSODIS. !!                             | !!   CALL DINTDY(,,,,,)        | Provide derivatives of y, of various !!        (see below)          | orders, at a specified point t, if !!                             | desired.  It may be called only after !!                             | a successful return from DLSODIS. !! !! The detailed instructions for using DINTDY are as follows. !! The form of the call is: !!```fortran !!   LYH = IWORK(22) !!   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by DLSODIS). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(t), is already provided !! by DLSODIS directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! LYH !! !! : the base address of the history array YH, obtained !! as an optional output as shown above. !! !! NYH !! !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! !! IFLAG !! !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !!----------------------------------------------------------------------- !!### Part 3.  Save and Restore Program State !! !! If the solution of a given problem by DLSODIS is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last DLSODIS call prior to the !! interruption, the contents of the call sequence variables and the !! internal state variables, and later restore these values before the !! next DLSODIS call for that problem.  To save and restore the program !! state, use Subroutines DSRCMS (see Part 2 above). !! !!----------------------------------------------------------------------- !!### Part 4.  Optionally Replaceable Solver Routines. !! !! Below are descriptions of two routines in the DLSODIS package which !! relate to the measurement of errors.  Either routine can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !!##### (a) DEWSET() !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!```fortran !!     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !!``` !! where NEQ, ITOL, RTOL, and ATOL are as in the DLSODIS call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM !! routine (see below), and also used by DLSODIS in the computation !! of the optional output IMXER, and the increments for difference !! quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !!#### (b) DVNORM() !! The following is a real function routine which computes the weighted !! root-mean-square norm of a vector v: !!```text !!     D = DVNORM (N, V, W) !!``` !! where: !!```text !!   N = the length of the vector, !!   V = real array of length N containing the vector, !!   W = real array of length N containing weights, !!   D = SQRT( (1/N) * sum(V(i)*W(i))**2 ). !!``` !! DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where !! EWT is as set by Subroutine DEWSET. !! !! If the user supplies this function, it should return a non-negative !! value of DVNORM suitable for use in the error control in DLSODIS. !! None of the arguments should be altered by DVNORM. !! For example, a user-supplied DVNORM routine might: !!  - substitute a max-norm of (V(i)\\*w(I)) for the RMS-norm, or !!  - ignore some components of V in the norm, with the effect of !!    suppressing the error control on those components of y. !! !!----------------------------------------------------------------------- !! References: !! 1.  M. K. Seager and S. Balsdon,  LSODIS, A Sparse Implicit !!     ODE Solver, in Proceedings of the IMACS 10th World Congress, !!     Montreal, August 8-13, 1982. !! !! 2.  Alan C. Hindmarsh,  LSODE and LSODI, Two New Initial Value !!     Ordinary Differential Equation Solvers, !!     ACM-SIGNUM Newsletter, vol. 15, no. 4 (1980), pp. 10-11. !! !! 3.  S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman, !!     Yale Sparse Matrix Package: I. The Symmetric Codes, !!     Int. J. Num. Meth. Eng., vol. 18 (1982), pp. 1145-1151. !! !! 4.  S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman, !!     Yale Sparse Matrix Package: II. The Nonsymmetric Codes, !!     Research Report No. 114, Dept. of Computer Sciences, Yale !!     University, 1977. !! !!----------------------------------------------------------------------- !!### Pedigree: !! !! DLSODIS is derived from the 18 November 2003 version of !! Livermore Solver for Ordinary Differential Equations package ODEPACK, !! (Implicit form) with general Sparse Jacobian matrices. !! !! Authors:       Alan C. Hindmarsh !!                Center for Applied Scientific Computing, L-561 !!                Lawrence Livermore National Laboratory !!                Livermore, CA 94551 !! and !!                Sheila Balsdon !!                Zycor, Inc. !!                Austin, TX 78741 !! !! !!----------------------------------------------------------------------- ! ! ### REVISION HISTORY  (YYYYMMDD) !  19820714  DATE WRITTEN !  19830812  Major update, based on recent LSODI and LSODES revisions: !            Upgraded MDI in ODRV package: operates on M + M-transpose. !            Numerous revisions in use of work arrays; !            use wordlength ratio LENRAT; added IPISP & LRAT to Common; !            added optional outputs IPIAN/IPJAN; !            Added routine CNTNZU; added NZL and NZU to /LSS001/; !            changed ADJLR call logic; added optional outputs NZL & NZU; !            revised counter initializations; revised PREPI stmt. nos.; !            revised difference quotient increment; !            eliminated block /LSI001/, using IERPJ flag; !            revised STODI logic after PJAC return; !            revised tuning of H change and step attempts in STODI; !            corrections to main prologue and comments throughout. !  19870320  Corrected jump on test of umax in CDRV routine. !  20010125  Numerous revisions: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODI; !            in STODI, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            converted arithmetic IF statements to logical IF statements; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20020502  Corrected declarations in descriptions of user routines. !  20031021  Fixed address offset bugs in Subroutine DPREPI. !  20031027  Changed 0. to 0.0D0 in Subroutine DPREPI. !  20031105  Restored 'own' variables to Common blocks, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. !  20031117  Changed internal names NRE, LSAVR to NFE, LSAVF resp. ! ! ----------------------------------------------------------------------- !  Other routines in the DLSODIS package. ! !  In addition to Subroutine DLSODIS, the DLSODIS package includes the !  following subroutines and function routines: !   DIPREPI  acts as an interface between DLSODIS and DPREPI, and also !            does adjusting of work space pointers and work arrays. !   DPREPI   is called by DIPREPI to compute sparsity and do sparse !            matrix preprocessing. !   DAINVGS  computes the initial value of the vector !              dy/dt = A-inverse * g !   ADJLR    adjusts the length of required sparse matrix work space. !            It is called by DPREPI. !   CNTNZU   is called by DPREPI and counts the nonzero elements in the !            strict upper triangle of P + P-transpose. !   JGROUP   is called by DPREPI to compute groups of Jacobian column !            indices for use when MITER = 2. !   DINTDY   computes an interpolated value of the y vector at t = TOUT. !   DSTODI   is the core integrator, which does one step of the !            integration and the associated error control. !   DCFODE   sets all method coefficients and test constants. !   DPRJIS   computes and preprocesses the Jacobian matrix J = dr/dy !            and the Newton iteration matrix P = A - h*l0*J. !   DSOLSS   manages solution of linear system in chord iteration. !   DEWSET   sets the error weight vector EWT before each step. !   DVNORM   computes the weighted RMS-norm of a vector. !   DSRCMS   is a user-callable routine to save and restore !            the contents of the internal Common blocks. !   ODRV     constructs a reordering of the rows and columns of !            a matrix by the minimum degree algorithm.  ODRV is a !            driver routine which calls Subroutines MD, MDI, MDM, !            MDP, MDU, and SRO.  See Ref. 2 for details.  (The ODRV !            module has been modified since Ref. 2, however.) !   CDRV     performs reordering, symbolic factorization, numerical !            factorization, or linear system solution operations, !            depending on a path argument IPATH.  CDRV is a !            driver routine which calls Subroutines NROC, NSFC, !            NNFC, NNSC, and NNTC.  See Ref. 3 for details. !            DLSODIS uses CDRV to solve linear systems in which the !            coefficient matrix is  P = A - con*J, where A is the !            matrix for the linear system A(t,y)*dy/dt = g(t,y), !            con is a scalar, and J is an approximation to !            the Jacobian dr/dy.  Because CDRV deals with rowwise !            sparsity descriptions, CDRV works with P-transpose, not P. !            DLSODIS also uses CDRV to solve the linear system !              A(t,y)*dy/dt = g(t,y)  for dy/dt when ISTATE = 0. !            (For this, CDRV works with A-transpose, not A.) !   DUMACH   computes the unit roundoff in a machine-independent manner. !   XERRWD, XSETUN, XSETF, IXSAV, and handle the printing of all !            error messages and warnings.  XERRWD is machine-dependent. !  Note:  DVNORM, DUMACH, IXSAV, and are function routines. !  All the others are subroutines. ! !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! subroutine dlsodis ( res , adda , jac , Neq , Y , Ydoti , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , Mf ) external res external adda external jac integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ) :: Ydoti ( * ) real ( kind = dp ), intent ( inout ) :: T real ( kind = dp ), intent ( inout ) :: Tout integer :: Itol real ( kind = dp ) :: Rtol ( * ) real ( kind = dp ) :: Atol ( * ) integer :: Itask integer :: Istate integer :: Iopt integer :: Lrw real ( kind = dp ), intent ( inout ) :: Rwork ( Lrw ) integer :: Liw integer , intent ( inout ) :: Iwork ( Liw ) integer :: Mf real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , ier , iflag , igo , imax , imul , imxer , ipflag , ipgo , irem , ires , j , kgo , leniw , lenrw , lenyht , & & lia , lic , lja , ljc , lrtem , lwtem , lyd0 , lyhd , lyhn , mf1 , ncolm logical :: ihit integer , save :: lenrat , mxhnl0 , mxstp0 integer , save :: mord ( 2 ) character ( 60 ) :: msg ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODIS, DIPREPI, DPREPI, !  DINTDY, DSTODI, DPRJIS, and DSOLSS. !  The block DLSS01 is declared in subroutines DLSODIS, DAINVGS, !  DIPREPI, DPREPI, DPRJIS, and DSOLSS. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ! ----------------------------------------------------------------------- !  In the Data statement below, set LENRAT equal to the ratio of !  the wordlength for a real number to that for an integer.  Usually, !  LENRAT = 1 for single precision and 2 for double precision.  If the !  true ratio is not an integer, use the next smaller integer (.ge. 1), ! ----------------------------------------------------------------------- data lenrat / 2 / ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropirately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 0 or 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- ihit = . false . if ( Istate < 0 . or . Istate > 3 ) then ! ----------------------------------------------------------------------- !  Block I. !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- msg = 'DLSODIS- ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate >= 0 ) goto 2300 ! msg = 'DLSODIS- Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 99999 else if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODIS- ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( Istate <= 1 ) then dls1 % init = 0 if ( Tout == T ) return elseif ( dls1 % init == 0 ) then msg = 'DLSODIS-ISTATE .gt. 1 but DLSODIS not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 elseif ( Istate == 2 ) then goto 50 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 0 or 1) !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. !  If ISTATE = 0 or 1, the final setting of work space pointers, the !  matrix preprocessing, and other initializations are done in Block C. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, and !  MF. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODIS- NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( Istate > 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODIS- ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) goto 2300 endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODIS- ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 elseif ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODIS- IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else dlss % moss = Mf / 100 mf1 = Mf - 100 * dlss % moss dls1 % meth = mf1 / 10 dls1 % miter = mf1 - 10 * dls1 % meth if ( dlss % moss < 0 . or . dlss % moss > 4 ) goto 900 if ( dls1 % miter == 2 . and . dlss % moss == 1 ) dlss % moss = dlss % moss + 1 if ( dls1 % miter == 2 . and . dlss % moss == 3 ) dlss % moss = dlss % moss + 1 if ( dls1 % miter == 1 . and . dlss % moss == 2 ) dlss % moss = dlss % moss - 1 if ( dls1 % miter == 1 . and . dlss % moss == 4 ) dlss % moss = dlss % moss - 1 if ( dls1 % meth < 1 . or . dls1 % meth > 2 ) goto 900 if ( dls1 % miter < 1 . or . dls1 % miter > 2 ) goto 900 !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dls1 % maxord = Iwork ( 5 ) if ( dls1 % maxord < 0 ) then msg = 'DLSODIS- MAXORD (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dls1 % maxord , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( dls1 % maxord == 0 ) dls1 % maxord = 100 dls1 % maxord = min ( dls1 % maxord , mord ( dls1 % meth )) dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODIS- MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODIS- MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 else if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) then h0 = Rwork ( 5 ) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODIS- TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) goto 2300 endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODIS- HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) goto 2300 else dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODIS- HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) goto 2300 endif endif endif endif endif else dls1 % maxord = mord ( dls1 % meth ) dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 if ( Istate <= 1 ) h0 = 0.0D0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODIS- RTOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) goto 2300 elseif ( atoli < 0.0D0 ) then msg = 'DLSODIS- ATOL(=I1) is R1 .lt. 0.0       ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) goto 2300 endif enddo ! ----------------------------------------------------------------------- !  Compute required work array lengths, as far as possible, and test !  these against LRW and LIW.  Then set tentative pointers for work !  arrays.  Pointers to RWORK/IWORK segments are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  WM, YH, SAVR, EWT, ACOR. !  The required length of the matrix work space WM is not yet known, !  and so a crude minimum value is used for the initial tests of LRW !  and LIW, and YH is temporarily stored as far to the right in RWORK !  as possible, to leave the maximum amount of space for WM for matrix !  preprocessing.  Thus if MOSS .ne. 2 or 4, some of the segments of !  RWORK are temporarily omitted, as they are not needed in the !  preprocessing.  These omitted segments are: ACOR if ISTATE = 1, !  EWT and ACOR if ISTATE = 3 and MOSS = 1, and SAVR, EWT, and ACOR if !  ISTATE = 3 and MOSS = 0. ! ----------------------------------------------------------------------- dlss % lrat = lenrat if ( Istate <= 1 ) dls1 % nyh = dls1 % n if ( dls1 % miter == 1 ) dlss % lwmin = 4 * dls1 % n + 10 * dls1 % n / dlss % lrat if ( dls1 % miter == 2 ) dlss % lwmin = 4 * dls1 % n + 11 * dls1 % n / dlss % lrat dlss % lenyh = ( dls1 % maxord + 1 ) * dls1 % nyh dlss % lrest = dlss % lenyh + 3 * dls1 % n lenrw = 20 + dlss % lwmin + dlss % lrest Iwork ( 17 ) = lenrw leniw = 30 if ( dlss % moss /= 1 . and . dlss % moss /= 2 ) leniw = leniw + dls1 % n + 1 Iwork ( 18 ) = leniw if ( lenrw > Lrw ) goto 1000 if ( leniw > Liw ) goto 1100 lia = 31 if ( dlss % moss /= 1 . and . dlss % moss /= 2 ) leniw = leniw + Iwork ( lia + dls1 % n ) - 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 1100 lja = lia + dls1 % n + 1 lia = min ( lia , Liw ) lja = min ( lja , Liw ) lic = leniw + 1 if ( dlss % moss == 0 ) leniw = leniw + dls1 % n + 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 1100 if ( dlss % moss == 0 ) leniw = leniw + Iwork ( lic + dls1 % n ) - 1 Iwork ( 18 ) = leniw if ( leniw > Liw ) goto 1100 ljc = lic + dls1 % n + 1 lic = min ( lic , Liw ) ljc = min ( ljc , Liw ) dls1 % lwm = 21 if ( Istate <= 1 ) dls1 % nq = Istate ncolm = min ( dls1 % nq + 1 , dls1 % maxord + 2 ) dlss % lenyhm = ncolm * dls1 % nyh lenyht = dlss % lenyhm imul = 2 if ( Istate == 3 ) imul = dlss % moss if ( Istate == 3 . and . dlss % moss == 3 ) imul = 1 if ( dlss % moss == 2 . or . dlss % moss == 4 ) imul = 3 lrtem = lenyht + imul * dls1 % n lwtem = Lrw - 20 - lrtem dlss % lenwk = lwtem lyhn = dls1 % lwm + lwtem dls1 % lsavf = lyhn + lenyht dls1 % lewt = dls1 % lsavf + dls1 % n dls1 % lacor = dls1 % lewt + dls1 % n dlss % istatc = Istate if ( Istate <= 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 0 or 1). !  It contains all remaining initializations, the call to DAINVGS !  (if ISTATE = 0), the sparse matrix preprocessing, and the !  calculation if the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh dls1 % tn = T dls1 % nst = 0 dls1 % nfe = 0 dls1 % h = 1.0D0 dlss % nnz = 0 dlss % ngp = 0 dlss % nzl = 0 dlss % nzu = 0 !  Load the initial value vector in YH.---------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo if ( Istate == 1 ) then !  Initial dy/dt was supplied.  Load it into YH (LYD0 points to YH(*,2).) lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = Ydoti ( i ) enddo endif !  Load and invert the EWT array.  (H is temporarily set to 1.0.)-------- call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1200 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo !  Call DIPREPI and DPREPI to do sparse matrix preprocessing.------------ dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprepi ( Neq , Y , Ydoti , Rwork , Iwork ( lia ), Iwork ( lja ), Iwork ( lic ), Iwork ( ljc ), ipflag , res , jac , adda ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1600 case ( 3 ) goto 1700 case ( 4 ) goto 1800 case ( 5 ) goto 1900 case ( 6 ) goto 2000 case ( 7 ) goto 2100 case ( 8 , 9 ) goto 2200 case default Iwork ( 22 ) = dls1 % lyh if ( lenrw > Lrw ) goto 1000 !  Compute initial dy/dt, if necessary, and load it into YH.------------- lyd0 = dls1 % lyh + dls1 % n if ( Istate == 0 ) then call dainvgs ( Neq ( 1 ), T , Y , Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), Rwork ( dls1 % lacor ), Rwork ( lyd0 ), ier , res , adda ) dls1 % nfe = dls1 % nfe + 1 igo = ier + 1 select case ( igo ) case ( 2 ) !  DAINVGS failed because RES set IRES to 2 or 3. ----------------------- msg = 'DLSODIS- Attempt to initialize dy/dt failed       ' call xerrwd ( msg , 50 , 209 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      because residual routine set its error flag ' call xerrwd ( msg , 50 , 209 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to IRES = (I1)' call xerrwd ( msg , 20 , 209 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return case ( 3 , 4 ) !  DAINVGS failed because matrix A was singular. ------------------------ msg = 'DLSODIS- Attempt to initialize dy/dt failed because matrix A' call xerrwd ( msg , 60 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     was singular.  CDRV returned zero pivot error flag.    ' call xerrwd ( msg , 60 , 208 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = 'DAINVGS set its error flag to IER = (I1)' call xerrwd ( msg , 40 , 208 , 0 , 1 , ier , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 8 return case default endselect endif !  Check TCRIT for legality (ITASK = 4 or 5). --------------------------- if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) goto 1400 if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif !  Initialize all remaining parameters. --------------------------------- dls1 % uround = dumach () dls1 % jstart = 0 Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dls1 % nhnil = 0 dls1 % nje = 0 dlss % nlu = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by.. !                                       NEQ !    H0**2 = TOL / ( w0**-2 + (1/NEQ) * Sum ( YDOT(i)/ywt(i) )**2  ) !                                        1 !  where   w0      = MAX ( ABS(T), ABS(TOUT) ), !          YDOT(i) = i-th component of initial value of dy/dt, !          ywt(i)  = EWT(i)/TOL  (a weight for y(i)). !  The sign of H0 is inferred from the initial values of TOUT and T. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODIS- TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) goto 2300 else tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dvnorm ( dls1 % n , Rwork ( lyd0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lyd0 - 1 ) = h0 * Rwork ( i + lyd0 - 1 ) enddo goto 200 endselect else ! ----------------------------------------------------------------------- !  ISTATE = 3.  Move YH to its new location. !  Note that only the part of YH needed for the next step, namely !  MIN(NQ+1,MAXORD+2) columns, is actually moved. !  A temporary error weight array EWT is loaded if MOSS = 2 or 4. !  Sparse matrix processing is done in DIPREPI/DPREPI. !  If MAXORD was reduced below NQ, then the pointers are finally set !  so that SAVR is identical to (YH*,MAXORD+2) ! ----------------------------------------------------------------------- lyhd = dls1 % lyh - lyhn imax = lyhn - 1 + dlss % lenyhm !  Move YH.  Move right if LYHD < 0; move left if LYHD > 0. ------------- if ( lyhd < 0 ) then do i = lyhn , imax j = imax + lyhn - i Rwork ( j ) = Rwork ( j + lyhd ) enddo endif if ( lyhd > 0 ) then do i = lyhn , imax Rwork ( i ) = Rwork ( i + lyhd ) enddo endif dls1 % lyh = lyhn Iwork ( 22 ) = dls1 % lyh if ( dlss % moss == 2 . or . dlss % moss == 4 ) then !  Temporarily load EWT if MOSS = 2 or 4. call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) goto 1200 Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo endif !  DIPREPI and DPREPI do sparse matrix preprocessing. ------------------- dls1 % lsavf = min ( dls1 % lsavf , Lrw ) dls1 % lewt = min ( dls1 % lewt , Lrw ) dls1 % lacor = min ( dls1 % lacor , Lrw ) call diprepi ( Neq , Y , Ydoti , Rwork , Iwork ( lia ), Iwork ( lja ), Iwork ( lic ), Iwork ( ljc ), ipflag , res , jac , adda ) lenrw = dls1 % lwm - 1 + dlss % lenwk + dlss % lrest Iwork ( 17 ) = lenrw if ( ipflag /=- 1 ) Iwork ( 23 ) = dlss % ipian if ( ipflag /=- 1 ) Iwork ( 24 ) = dlss % ipjan ipgo = - ipflag + 1 select case ( ipgo ) case ( 2 ) goto 1600 case ( 3 ) goto 1700 case ( 4 ) goto 1800 case ( 5 ) goto 1900 case ( 6 ) goto 2000 case ( 7 ) goto 2100 case ( 8 , 9 ) goto 2200 case default Iwork ( 22 ) = dls1 % lyh lyd0 = dls1 % lyh + dls1 % n if ( lenrw > Lrw ) goto 1000 !  Set flag to signal changes to DSTODI.--------------------------------- dls1 % jstart = - 1 if ( dls1 % nq > dls1 % maxord ) then !  MAXORD was reduced below NQ.  Copy YH(*,MAXORD+2) into YDOTI. -------- do i = 1 , dls1 % n Ydoti ( i ) = Rwork ( i + dls1 % lsavf - 1 ) enddo endif if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endselect endif endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 50 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 100 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODIS- ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) goto 2300 else if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) goto 300 goto 100 endif case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1300 if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) goto 1400 if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1500 T = Tout goto 400 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) goto 1300 case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) goto 1500 T = Tout goto 400 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) goto 300 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 ) dls1 % jstart = - 2 endif endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODI. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 100 continue if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- msg = 'DLSODIS- At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 600 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODIS- At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 700 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 200 continue tolsf = dls1 % uround * dvnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODIS- Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODIS- Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !      CALL DSTODI(NEQ,Y,YH,NYH,YH1,EWT,SAVF,SAVR,ACOR,WM,WM,RES, !                  ADDA,JAC,DPRJIS,DSOLSS) !  Note: SAVF in DSTODI occupies the same space as YDOTI in DLSODIS. ! ----------------------------------------------------------------------- call dstodi ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Ydoti , Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), & & Rwork ( dls1 % lwm ), Rwork ( dls1 % lwm ), res , adda , jac , dprjis , dsolss ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- msg = 'DLSODIS- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     error test failed repeatedly or with ABS(H) = HMIN     ' call xerrwd ( msg , 60 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 500 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- msg = 'DLSODIS- At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 500 case ( 4 ) case ( 5 ) !  IRES = 3 returned by RES, despite retries by DSTODI. ----------------- msg = 'DLSODIS- At T (=R1) residual routine returned     ' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '    error IRES = 3 repeatedly.' call xerrwd ( msg , 30 , 206 , 1 , 0 , 0 , 0 , 0 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 700 case ( 6 ) !  KFLAG = -5.  Fatal error flag returned by DPRJIS or DSOLSS (CDRV). --- msg = 'DLSODIS- At T (=R1) and step size H (=R2), a fatal' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      error flag was returned by CDRV (by way of  ' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Subroutine DPRJIS or DSOLSS)      ' call xerrwd ( msg , 40 , 207 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 9 goto 600 case default ! !  KGO = 1:success; 2:error test failure; 3:convergence failure; !        4:RES ordered return; 5:RES returned error; !        6:fatal error from CDRV via DPRJIS or DSOLSS. ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0).  Test for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) dls1 % jstart = - 2 endif goto 100 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 100 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 400 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODIS- At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf goto 2300 else !  Too much accuracy requested for machine precision. ------------------- msg = 'DLSODIS- At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 700 endif endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODIS. !  if ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 300 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 400 continue Istate = 2 if ( dls1 % kflag ==- 3 ) Istate = 3 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return !  Compute IMXER if relevant. ------------------------------------------- 500 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Compute residual if relevant. ---------------------------------------- 600 continue lyd0 = dls1 % lyh + dls1 % nyh do i = 1 , dls1 % n Rwork ( i + dls1 % lsavf - 1 ) = Rwork ( i + lyd0 - 1 ) / dls1 % h Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo ires = 1 call res ( Neq , dls1 % tn , Y , Rwork ( dls1 % lsavf ), Ydoti , ires ) dls1 % nfe = dls1 % nfe + 1 if ( ires > 1 ) then msg = 'DLSODIS- Residual routine set its flag IRES       ' call xerrwd ( msg , 50 , 210 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to (I1) when called for final output.       ' call xerrwd ( msg , 50 , 210 , 0 , 1 , ires , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 800 !  set y vector, t, and optional outputs. ------------------------------- 700 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo 800 continue T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlss % nnz Iwork ( 20 ) = dlss % ngp Iwork ( 21 ) = dlss % nlu Iwork ( 25 ) = dlss % nzl Iwork ( 26 ) = dlss % nzu return 900 continue msg = 'DLSODIS- MF (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Mf , 0 , 0 , 0.0D0 , 0.0D0 ) goto 2300 1000 continue msg = 'DLSODIS- RWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 17 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1100 continue msg = 'DLSODIS- IWORK length is insufficient to proceed. ' call xerrwd ( msg , 50 , 18 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1200 continue ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODIS- EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) goto 2300 1300 continue msg = 'DLSODIS- ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) goto 2300 1400 continue msg = 'DLSODIS- ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) goto 2300 1500 continue msg = 'DLSODIS- Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) goto 2300 1600 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine DPREPI). ' call xerrwd ( msg , 60 , 28 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 28 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1700 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine JGROUP). ' call xerrwd ( msg , 60 , 29 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 29 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1800 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine ODRV).   ' call xerrwd ( msg , 60 , 30 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 30 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 1900 continue msg = 'DLSODIS- Error from ODRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 31 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), ODRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 31 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) goto 2300 2000 continue msg = 'DLSODIS- RWORK length insufficient (for Subroutine CDRV).   ' call xerrwd ( msg , 60 , 32 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '        Length needed is .ge. LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 32 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) goto 2300 2100 continue msg = 'DLSODIS- Error from CDRV in Yale Sparse Matrix Package.     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) imul = ( dlss % iys - 1 ) / dls1 % n irem = dlss % iys - imul * dls1 % n msg = '      At T (=R1), CDRV returned error flag = I1*NEQ + I2.   ' call xerrwd ( msg , 60 , 33 , 0 , 2 , imul , irem , 1 , dls1 % tn , 0.0D0 ) if ( imul == 2 ) then msg = '        Duplicate entry in sparsity structure descriptors.  ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( imul == 3 . or . imul == 6 ) then msg = '        Insufficient storage for NSFC (called by CDRV).     ' call xerrwd ( msg , 60 , 33 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif goto 2300 2200 continue msg = 'DLSODIS- At T (=R1) residual routine (called by DPREPI)     ' call xerrwd ( msg , 60 , 34 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) ier = - ipflag - 5 msg = '     returned error IRES (=I1)' call xerrwd ( msg , 30 , 34 , 0 , 1 , ier , 0 , 1 , dls1 % tn , 0.0D0 ) ! 2300 continue Istate = - 3 return 99999 continue end subroutine dlsodis","tags":"","loc":"sourcefile/dlsodis.inc.html"},{"title":"dlsoda.inc – odepack","text":"Contents Subroutines dlsoda Source Code dlsoda.inc Source Code !==================================================================================================================================! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !==================================================================================================================================! !> !!### Synopsis !! !! _DLSODA_ solves the initial value problem for stiff or nonstiff !! systems of first order ODEs of the form !!```text !!     dy/dt = f(t,y),  or, in component form, !!     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). !!``` !! with automatic method switching for stiff and nonstiff problems. !! !! This a variant version of the _DLSODE_ package. !! It switches automatically between stiff and nonstiff methods. !! This means that the user does not have to determine whether the !! problem is stiff or not, and the solver will automatically choose the !! appropriate method.  It always starts with the nonstiff method. !! !!----------------------------------------------------------------------- !!### Summary of Usage !! !! Communication between the user and the _DLSODA_ package, for normal !! situations, is summarized here.  This summary describes only a subset !! of the full set of options available.  See the full description for !! details, including alternative treatment of the Jacobian matrix, !! optional inputs and outputs, nonstandard options, and !! instructions for special situations.  See also the example !! problem (with program and output) following this summary. !! !!#### Section A. !! First provide a subroutine of the form: !!```fortran !!               SUBROUTINE F (NEQ, T, Y, YDOT) !!               DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! which supplies the vector function _f_ by loading YDOT(i) with f(i). !! !!#### Section B. !! Write a main program which calls Subroutine _DLSODA_ once for !! each point at which answers are desired.  This should also provide !! for possible use of logical unit 6 for output of error messages !! by _DLSODA_.  On the first call to _DLSODA_, supply arguments as follows: !! !! F !! !! : name of subroutine for right-hand side vector f. !!   This name must be declared External in calling program. !! !! NEQ !! !! : number of first order ODEs. !! !! Y !! !! : array of initial values, of length NEQ. !! !! T !! !! : the initial value of the independent variable. !! !! TOUT !! !! : first point where output is desired (.ne. T). !! !! ITOL !! !! : 1 or 2 according as ATOL (below) is a single or multi-value array. !! !! RTOL !! !! : relative tolerance parameter (scalar). !! !! ATOL !! !! : absolute tolerance parameter (array). !!   the estimated local error in y(i) will be controlled so as !!   to be less than !!```text !!        EWT(i) = RTOL*ABS(Y(i)) + ATOL     if ITOL = 1, or !!        EWT(i) = RTOL*ABS(Y(i)) + ATOL(i)  if ITOL = 2. !!``` !!   Thus the local error test passes if, in each component, !!   either the absolute error is less than ATOL (or ATOL(i)), !!   or the relative error is less than RTOL. !! !!   Use RTOL = 0.0 for pure absolute error control, and !!   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error !!   control.  Caution: actual (global) errors may exceed these !!   local tolerances, so choose them conservatively. !! !! ITASK !! !! : 1 for normal computation of output values of y at t = TOUT. !! !! ISTATE !! !! : integer flag (input and output).  Set ISTATE = 1. !! !! IOPT !! !! : 0 to indicate no optional inputs used. !! !! RWORK !! !! : real work array of length at least: !!```text !!         22 + NEQ * MAX(16, NEQ + 9). !!``` !!   See also _Section E_ below. !! !! LRW !! !! : declared length of RWORK (in user's dimension). !! !! IWORK !! !! : integer work array of length at least  20 + NEQ. !! !! LIW !! !! : declared length of IWORK (in user's dimension). !! !! JAC !! !! : name of subroutine for Jacobian matrix. !!   Use a dummy name.  See also _Section E_ below. !! !! JT !! !! : Jacobian type indicator.  Set JT = 2. !!   See also _Section E_ below. !!   Note that the main program must declare arrays Y, RWORK, IWORK, !!   and possibly ATOL. !! !!----------------------------------------------------------------------- !!#### Section C. !! The output from the first call (or any call) is: !! !! Y !! !! : array of computed values of y(t) vector. !! !! T !! !! : corresponding value of independent variable (normally TOUT). !! !! ISTATE !! : Status values are returned in ISTATE: !! !!  values  | descriptions !!  ------- | ------------------------------------------------------------ !!     2    | if _DLSODA_ was successful, negative otherwise. !!    -1    | means excess work done on this call (perhaps wrong JT). !!    -2    | means excess accuracy requested (tolerances too small). !!    -3    | means illegal input detected (see printed message). !!    -4    | means repeated error test failures (check all inputs). !!    -5    | means repeated convergence failures (perhaps bad Jacobian !!          |       supplied or wrong choice of JT or tolerances). !!    -6    | means error weight became zero during problem. (Solution !!          |       component i vanished, and ATOL or ATOL(i) = 0.) !!    -7    | means work space insufficient to finish (see messages). !! !! !!#### Section D. !! To continue the integration after a successful return, simply !! reset TOUT and call _DLSODA_ again.  No other parameters need be reset. !! !!#### Section E. !! *Note*: If and when _DLSODA_ regards the problem as stiff, and !! switches methods accordingly, it must make use of the NEQ by NEQ !! Jacobian matrix, J = df/dy.  For the sake of simplicity, the !! inputs to _DLSODA_ recommended in _Section B_ above cause _DLSODA_ to !! treat J as a full matrix, and to approximate it internally by !! difference quotients.  Alternatively, J can be treated as a band !! matrix (with great potential reduction in the size of the RWORK !! array).  Also, in either the full or banded case, the user can supply !! J in closed form, with a routine whose name is passed as the JAC !! argument.  These alternatives are described in the paragraphs on !! RWORK, JAC, and JT in the full description of the call sequence below. !! !!----------------------------------------------------------------------- !! Example Problem. !! !! The following is a simple example problem, with the coding !! needed for its solution by _DLSODA_.  The problem is from chemical !! kinetics, and consists of the following three rate equations: !!```text !!     dy1/dt = -.04*y1 + 1.e4*y2*y3 !!     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2 !!     dy3/dt = 3.e7*y2**2 !!``` !! on the interval from t = 0.0 to t = 4.e10, with initial conditions !!```text !!     y1 = 1.0, y2 = y3 = 0.  The problem is stiff. !!``` !! !! The following coding solves this problem with _DLSODA_, !! printing results at t = .4, 4., ..., 4.e10.  It uses !! ITOL = 2, and ATOL much smaller for y2 than y1 or y3 because !! y2 has much smaller values. !! At the end of the run, statistical quantities of interest are !! printed (see optional outputs in the full description below). !! !!```fortran !! program dlsoda_ex !! use m_odepack !! implicit none !! external fex !! external jdum !! integer,parameter            ::  dp=kind(0.0d0) !! real(kind=dp),dimension(3)   ::  atol,y !! integer                      ::  iopt,iout,istate,itask !! integer                      ::  itol,jt,liw,lrw,neq !! integer,dimension(23)        ::  iwork !! real(kind=dp)                ::  rtol,t,tout !! real(kind=dp),dimension(70)  ::  rwork !! !!    neq = 3 !!    y(1) = 1. !!    y(2) = 0. !!    y(3) = 0. !!    t = 0. !!    tout = .4 !!    itol = 2 !!    rtol = 1.D-4 !!    atol(1) = 1.D-6 !!    atol(2) = 1.D-10 !!    atol(3) = 1.D-6 !!    itask = 1 !!    istate = 1 !!    iopt = 0 !!    lrw = 70 !!    liw = 23 !!    jt = 2 !!    do iout = 1,12 !!       call dlsoda(fex,[neq],y,t,tout,itol,[rtol],atol,itask,istate,iopt,& !!                 & rwork,lrw,iwork,liw,jdum,jt) !!       write (6,99010) t,y(1),y(2),y(3) !!       99010 format (' At t =',d12.4,'   Y =',3D14.6) !!       if ( istate<0 ) then !!          write (6,99020) istate !!          99020 format (///' Error halt.. ISTATE =',i3) !!          stop 1 !!       else !!          tout = tout*10. !!       endif !!    enddo !!    write (6,99030) iwork(11),iwork(12),iwork(13),iwork(19),        & !!                  & rwork(15) !!    99030 format (/' No. steps =',i4,'  No. f-s =',i4,'  No. J-s =',      & !!                 &i4/' Method last used =',i2,'   Last switch was at t =',& !!                & d12.4) !! !! end program dlsoda_ex !! !! subroutine jdum() !! implicit none !! end subroutine jdum !! !! subroutine fex(Neq,T,Y,Ydot) !! implicit none !! integer,parameter :: dp=kind(0.0d0) !! !! integer                                   ::  Neq !! real(kind=dp)                             ::  T !! real(kind=dp),intent(in),dimension(3)     ::  Y !! real(kind=dp),intent(inout),dimension(3)  ::  Ydot !! !!    Ydot(1) = -.04*Y(1) + 1.D4*Y(2)*Y(3) !!    Ydot(3) = 3.D7*Y(2)*Y(2) !!    Ydot(2) = -Ydot(1) - Ydot(3) !! end subroutine fex !!``` !! !! The output of this program (on a CDC-7600 in single precision) !! is as follows: !!```text !!   At t =  4.0000e-01   y =  9.851712e-01  3.386380e-05  1.479493e-02 !!   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02 !!   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01 !!   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01 !!   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01 !!   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01 !!   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01 !!   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01 !!   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01 !!   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01 !!   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01 !!   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00 !! !!   No. steps = 361  No. f-s = 693  No. J-s =  64 !!   Method last used = 2   Last switch was at t =  6.0092e-03 !!``` !!----------------------------------------------------------------------- !!#### Full description of user interface to _DLSODA_. !! !! The user interface to _DLSODA_ consists of the following parts. !! !! 1.   The call sequence to Subroutine _DLSODA_, which is a driver !!      routine for the solver.  This includes descriptions of both !!      the call sequence arguments and of user-supplied routines. !!      following these descriptions is a description of !!      optional inputs available through the call sequence, and then !!      a description of optional outputs (in the work arrays). !! !! 2.   Descriptions of other routines in the _DLSODA_ package that may be !!      (optionally) called by the user.  These provide the ability to !!      alter error message handling, save and restore the internal !!      Common, and obtain specified derivatives of the solution y(t). !! !! 3.   Descriptions of Common blocks to be declared in overlay !!      or similar environments, or to be saved when doing an interrupt !!      of the problem and continued solution later. !! !! 4.   Description of a subroutine in the _DLSODA_ package, !!      which the user may replace with his/her own version, if desired. !!      this relates to the measurement of errors. !! !!----------------------------------------------------------------------- !!##### Part 1.  Call Sequence. !! !! The call sequence parameters used for input only are !! !!     F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, JT, !! !! and those used for both input and output are !! !!     Y, T, ISTATE. !! !! The work arrays RWORK and IWORK are also used for conditional and !! optional inputs and optional outputs.  (The term output here refers !! to the return from Subroutine _DLSODA_ to the user's calling program.) !! !! The legality of input parameters will be thoroughly checked on the !! initial call for the problem, but not checked thereafter unless a !! change in input parameters is flagged by ISTATE = 3 on input. !! !! The descriptions of the call arguments are as follows: !! !! F !! !! : the name of the user-supplied subroutine defining the !! ODE system.  The system must be put in the first-order !! form dy/dt = f(t,y), where f is a vector-valued function !! of the scalar t and the vector y.  Subroutine F is to !! compute the function f.  It is to have the form !!```fortran !!      SUBROUTINE F (NEQ, T, Y, YDOT) !!      DOUBLE PRECISION T, Y(*), YDOT(*) !!``` !! where NEQ, T, and Y are input, and the array YDOT = f(t,y) !! is output.  Y and YDOT are arrays of length NEQ. !! Subroutine F should not alter Y(1),...,Y(NEQ). !! F must be declared External in the calling program. !! !! Subroutine F may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in F) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y below. !! !! If quantities computed in the F routine are needed !! externally to _DLSODA_, an extra call to F should be made !! for this purpose, for consistent and accurate results. !! If only the derivative dy/dt is needed, use DINTDY instead. !! !! NEQ !! !! : the size of the ODE system (number of first order !! ordinary differential equations).  Used only for input. !! NEQ may be decreased, but not increased, during the problem. !! If NEQ is decreased (with ISTATE = 3 on input), the !! remaining components of Y should be left undisturbed, if !! these are to be accessed in F and/or JAC. !! !! Normally, NEQ is a single value, and it is generally referred to !! as a scalar in this user interface description.  However, !! NEQ must be an array, with NEQ(1) set to the system size. !! (The _DLSODA_ package accesses only NEQ(1).)  In either case, !! this parameter is passed as the NEQ argument in all calls !! to F and JAC.  Hence, if it is an multi-value array, locations !! NEQ(2),... may be used to store other integer data and pass !! it to F and/or JAC.  Subroutines F and/or JAC must include !! NEQ in a Dimension statement in that case. !! !! Y !! !! : a real array for the vector of dependent variables, of !! length NEQ or more.  Used for both input and output on the !! first call (ISTATE = 1), and only for output on other calls. !! On the first call, Y must contain the vector of initial !! values.  On output, Y contains the computed solution vector, !! evaluated at T.  If desired, the Y array may be used !! for other purposes between calls to the solver. !! !! This array is passed as the Y argument in all calls to !! F and JAC.  Hence its length may exceed NEQ, and locations !! Y(NEQ+1),... may be used to store other real data and !! pass it to F and/or JAC.  (The _DLSODA_ package accesses only !! Y(1),...,Y(NEQ).) !! !! T !! !! : the independent variable.  On input, T is used only on the !! first call, as the initial point of the integration. !! on output, after each call, T is the value at which a !! computed solution Y is evaluated (usually the same as TOUT). !! on an error return, T is the farthest point reached. !! !! TOUT !! !! : the next value of t at which a computed solution is desired. !! Used only for input. !! !! When starting the problem (ISTATE = 1), TOUT may be equal !! to T for one call, then should .ne. T for the next call. !! For the initial t, an input value of TOUT .ne. T is used !! in order to determine the direction of the integration !! (i.e. the algebraic sign of the step sizes) and the rough !! scale of the problem.  Integration in either direction !! (forward or backward in t) is permitted. !! !! If ITASK = 2 or 5 (one-step modes), TOUT is ignored after !! the first call (i.e. the first call with TOUT .ne. T). !! Otherwise, TOUT is required on every call. !! !! If ITASK = 1, 3, or 4, the values of TOUT need not be !! monotone, but a value of TOUT which backs up is limited !! to the current internal T interval, whose endpoints are !! TCUR - HU and TCUR (see optional outputs, below, for !! TCUR and HU). !! !! ITOL !! !! : an indicator for the type of error control.  See !! description below under ATOL.  Used only for input. !! !! RTOL !! !! : a relative error tolerance parameter, !! an array of length NEQ.  See description below under ATOL. !! Input only. !! !! ATOL !! !! : an absolute error tolerance parameter, !! an array of length NEQ.  Input only. !! !! The input parameters ITOL, RTOL, and ATOL determine !! the error control performed by the solver.  The solver will !! control the vector E = (E(i)) of estimated local errors !! in y, according to an inequality of the form !! !!      max-norm of ( E(i)/EWT(i) )   .le.   1, !! !! where EWT = (EWT(i)) is a vector of positive error weights. !! The values of RTOL and ATOL should all be non-negative. !! The following table gives the types (single/mult-value array) of !! RTOL and ATOL, and the corresponding form of EWT(i). !! !!  ITOL |  RTOL    |   ATOL   |           EWT(i) !!  ---- | -------- | -------- | ------------------------------- !!   1   | single   |  single  |  RTOL\\*ABS(Y(i)) + ATOL !!   2   | single   |  array   |  RTOL\\*ABS(Y(i)) + ATOL(i) !!   3   | array    |  single  |  RTOL(i)\\*ABS(Y(i)) + ATOL !!   4   | array    |  array   |  RTOL(i)\\*ABS(Y(i)) + ATOL(i) !! !! Even when these parameters are a single value, it needs to be an array !! in the user's calling program, or passed as a temporary array (ie. use !! \"[NEQ]\" on the call if NEQ is a scalar). !! !! If none of the above choices (with ITOL, RTOL, and ATOL !! fixed throughout the problem) is suitable, more general !! error controls can be obtained by substituting a !! user-supplied routine for the setting of EWT. !! See Part 4 below. !! !! If global errors are to be estimated by making a repeated !! run on the same problem with smaller tolerances, then all !! components of RTOL and ATOL (i.e. of EWT) should be scaled !! down uniformly. !! !! ITASK !! !! : an index specifying the task to be performed. !! Input only.  ITASK has the following values and meanings. !! !!  value  | descriptions !! ------- | ----------------------------------------------------------- !!       1 | means normal computation of output values of y(t) at !!         | t = TOUT (by overshooting and interpolating). !!       2 | means take one step only and return. !!       3 | means stop at the first internal mesh point at or !!         | beyond t = TOUT and return. !!       4 | means normal computation of output values of y(t) at !!         | t = TOUT but without overshooting t = TCRIT. !!         | TCRIT must be input as RWORK(1).  TCRIT may be equal to !!         | or beyond TOUT, but not behind it in the direction of !!         | integration.  This option is useful if the problem !!         | has a singularity at or beyond t = TCRIT. !!       5 | means take one step, without passing TCRIT, and return. !!         | TCRIT must be input as RWORK(1). !! !! Note:  If ITASK = 4 or 5 and the solver reaches TCRIT !! (within roundoff), it will return T = TCRIT (exactly) to !! indicate this (unless ITASK = 4 and TOUT comes before TCRIT, !! in which case answers at t = TOUT are returned first). !! !! ISTATE !! !! : an index used for input and output to specify the !! the state of the calculation. !! !! On input, the values of ISTATE are as follows: !! !!  value  | descriptions !!  ------ | ----------------------------------------------------------- !!       1 | means this is the first call for the problem !!         | (initializations will be done).  See note below. !!       2 | means this is not the first call, and the calculation !!         | is to continue normally, with no change in any input !!         | parameters except possibly TOUT and ITASK. !!         | (If ITOL, RTOL, and/or ATOL are changed between calls !!         | with ISTATE = 2, the new values will be used but not !!         | tested for legality.) !!       3 | means this is not the first call, and the !!         | calculation is to continue normally, but with !!         | a change in input parameters other than !!         | TOUT and ITASK.  Changes are allowed in !!         | NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, !!         | and any optional inputs except H0, MXORDN, and MXORDS. !!         | (See IWORK description for ML and MU.) !! !! !! Note:  A preliminary call with TOUT = T is not counted !! as a first call here, as no initialization or checking of !! input is done.  (Such a call is sometimes useful for the !! purpose of outputting the initial conditions.) !! Thus the first call for which TOUT .ne. T requires !! ISTATE = 1 on input. !! !! On output, ISTATE has the following values and meanings. !! !!  value.   |            descriptions !!  -------- | ----------------------------------------------------------- !!       1   | means nothing was done; TOUT = T and ISTATE = 1 on input. !!       2   | means the integration was performed successfully. !!      -1   | means an excessive amount of work (more than MXSTEP !!           | steps) was done on this call, before completing the !!           | requested task, but the integration was otherwise !!           | successful as far as T.  (MXSTEP is an optional input !!           | and is normally 500.)  To continue, the user may !!           | simply reset ISTATE to a value .gt. 1 and call again !!           | (the excess work step counter will be reset to 0). !!           | In addition, the user may increase MXSTEP to avoid !!           | this error return (see below on optional inputs). !!      -2   | means too much accuracy was requested for the precision !!           | of the machine being used.  This was detected before !!           | completing the requested task, but the integration !!           | was successful as far as T.  To continue, the tolerance !!           | parameters must be reset, and ISTATE must be set !!           | to 3.  The optional output TOLSF may be used for this !!           | purpose.  (Note: If this condition is detected before !!           | taking any steps, then an illegal input return !!           | (ISTATE = -3) occurs instead.) !!      -3   | means illegal input was detected, before taking any !!           | integration steps.  See written message for details. !!           | Note:  If the solver detects an infinite loop of calls !!           | to the solver with illegal input, it will cause !!           | the run to stop. !!      -4   | means there were repeated error test failures on !!           | one attempted step, before completing the requested !!           | task, but the integration was successful as far as T. !!           | The problem may have a singularity, or the input !!           | may be inappropriate. !!      -5   | means there were repeated convergence test failures on !!           | one attempted step, before completing the requested !!           | task, but the integration was successful as far as T. !!           | This may be caused by an inaccurate Jacobian matrix, !!           | if one is being used. !!      -6   | means EWT(i) became zero for some i during the !!           | integration.  Pure relative error control (ATOL(i)=0.0) !!           | was requested on a variable which has now vanished. !!           | The integration was successful as far as T. !!      -7   | means the length of RWORK and/or IWORK was too small to !!           | proceed, but the integration was successful as far as T. !!           | This happens when _DLSODA_ chooses to switch methods !!           | but LRW and/or LIW is too small for the new method. !! !! !! Note:  Since the normal output value of ISTATE is 2, !! it does not need to be reset for normal continuation. !! Also, since a negative input value of ISTATE will be !! regarded as illegal, a negative output value requires the !! user to change it, and possibly other inputs, before !! calling the solver again. !! !! IOPT !! !! : an integer flag to specify whether or not any optional !! inputs are being used on this call.  Input only. !! The optional inputs are listed separately below. !!          IOPT = 0 means no optional inputs are being used. !!                   default values will be used in all cases. !!          IOPT = 1 means one or more optional inputs are being used. !! !! RWORK !! !! : a real array (double precision) for work space, and (in the !! first 20 words) for conditional and optional inputs and !! optional outputs. !! !! As _DLSODA_ switches automatically between stiff and nonstiff !! methods, the required length of RWORK can change during the !! problem.  Thus the RWORK array passed to _DLSODA_ can either !! have a static (fixed) length large enough for both methods, !! or have a dynamic (changing) length altered by the calling !! program in response to output from _DLSODA_. !! !!#### Fixed Length Case !!```text !!   If the RWORK length is to be fixed, it should be at least !!        MAX (LRN, LRS), !!   where LRN and LRS are the RWORK lengths required when the !!   current method is nonstiff or stiff, respectively. !! !!   The separate RWORK length requirements LRN and LRS are !!   as follows: !!   IF NEQ is constant and the maximum method orders have !!   their default values, then !!      LRN = 20 + 16*NEQ, !!      LRS = 22 + 9*NEQ + NEQ**2           if JT = 1 or 2, !!      LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ   if JT = 4 or 5. !!   Under any other conditions, LRN and LRS are given by: !!      LRN = 20 + NYH*(MXORDN+1) + 3*NEQ, !!      LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT, !!   where !!      NYH    = the initial value of NEQ, !!      MXORDN = 12, unless a smaller value is given as an !!               optional input, !!      MXORDS = 5, unless a smaller value is given as an !!               optional input, !!      LMAT   = length of matrix work space: !!      LMAT   = NEQ**2 + 2              if JT = 1 or 2, !!      LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. !!``` !! !!#### Dynamic Length Case !! !! If the length of RWORK is to be dynamic, then it should !! be at least LRN or LRS, as defined above, depending on the !! current method. !! !! Initially, it must be at least LRN (since !! _DLSODA_ starts with the nonstiff method). !! !! On any return from _DLSODA_, the optional output MCUR indicates the !! current method.  If MCUR differs from the value it had on the previous !! return, or if there has only been one call to _DLSODA_ and MCUR is now 2, !! then _DLSODA_ has switched methods during the last call, and the length !! of RWORK should be reset (to LRN if MCUR = 1, or to LRS if MCUR = 2). !! (An increase in the RWORK length is required if _DLSODA_ returned !! ISTATE = -7, but not otherwise.) !! !! After resetting the length, call _DLSODA_ with ISTATE = 3 !! to signal that change. !! !! LRW !! !! : the length of the array RWORK, as declared by the user. !! (This will be checked by the solver.) !! !! IWORK !! !! : an integer array for work space. !! As _DLSODA_ switches automatically between stiff and nonstiff !! methods, the required length of IWORK can change during !! problem, between !!             LIS = 20 + NEQ   and   LIN = 20, !! respectively.  Thus the IWORK array passed to _DLSODA_ can !! either have a fixed length of at least 20 + NEQ, or have a !! dynamic length of at least LIN or LIS, depending on the !! current method.  The comments on dynamic length under !! RWORK above apply here.  Initially, this length need !! only be at least LIN = 20 . !! !! The first few words of IWORK are used for conditional and !! optional inputs and optional outputs. !! !! The following 2 words in IWORK are conditional inputs: !!```text !!   IWORK(1) = ML !!   IWORK(2) = MU !!``` !! These are the lower and upper half-bandwidths, respectively, of the !! banded Jacobian, excluding the main diagonal.  The band is defined by !! the matrix locations (i,j) with i-ML .le. j .le. i+MU.  ML and MU must !! satisfy  0 .le.  ML,MU  .le. NEQ-1.  These are required if JT is 4 or 5, !! and ignored otherwise.  ML and MU may in fact be the band parameters !! for a matrix to which df/dy is only approximately equal. !! !! LIW !! !! : the length of the array IWORK, as declared by the user. !! (This will be checked by the solver.) !! !! Note: The base addresses of the work arrays must not be !! altered between calls to _DLSODA_ for the same problem. !! The contents of the work arrays must not be altered !! between calls, except possibly for the conditional and !! optional inputs, and except for the last 3\\*NEQ words of RWORK. !! The latter space is used for internal scratch space, and so is !! available for use by the user outside _DLSODA_ between calls, if !! desired (but not for use by F or JAC). !! !! JAC !! !! : the name of the user-supplied routine to compute the !! Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine !! is optional, but if the problem is expected to be stiff much !! of the time, you are encouraged to supply JAC, for the sake !! of efficiency.  (Alternatively, set JT = 2 or 5 to have !! _DLSODA_ compute df/dy internally by difference quotients.) !! If and when _DLSODA_ uses df/dy, it treats this NEQ by NEQ !! matrix either as full (JT = 1 or 2), or as banded (JT = !! 4 or 5) with half-bandwidths ML and MU (discussed under !! IWORK above).  In either case, if JT = 1 or 4, the JAC !! routine must compute df/dy as a function of the scalar t !! and the vector y.  It is to have the form !!```fortran !!     SUBROUTINE JAC (NEQ, T, Y, ML, MU, PD, NROWPD) !!     DOUBLE PRECISION T, Y(*), PD(NROWPD,*) !!``` !! where NEQ, T, Y, ML, MU, and NROWPD are input and the array !! PD is to be loaded with partial derivatives (elements of !! the Jacobian matrix) on output.  PD must be given a first !! dimension of NROWPD.  T and Y have the same meaning as in !! Subroutine F. !! !! In the full matrix case (JT = 1), ML and MU are !! ignored, and the Jacobian is to be loaded into PD in !! columnwise manner, with df(i)/dy(j) loaded into PD(i,j). !! !! In the band matrix case (JT = 4), the elements !! within the band are to be loaded into PD in columnwise !! manner, with diagonal lines of df/dy loaded into the rows !! of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j). !! ML and MU are the half-bandwidth parameters (see IWORK). !! The locations in PD in the two triangular areas which !! correspond to nonexistent matrix elements can be ignored !! or loaded arbitrarily, as they are overwritten by _DLSODA_. !! !! JAC need not provide df/dy exactly.  A crude !! approximation (possibly with a smaller bandwidth) will do. !! !! In either case, PD is preset to zero by the solver, !! so that only the nonzero elements need be loaded by JAC. !! Each call to JAC is preceded by a call to F with the same !! arguments NEQ, T, and Y.  Thus to gain some efficiency, !! intermediate quantities shared by both calculations may be !! saved in a user Common block by F and not recomputed by JAC, !! if desired.  Also, JAC may alter the Y array, if desired. !! JAC must be declared External in the calling program. !! !! Subroutine JAC may access user-defined quantities in !! NEQ(2),... and/or in Y(NEQ(1)+1),... if NEQ is an array !! (dimensioned in JAC) and/or Y has length exceeding NEQ(1). !! See the descriptions of NEQ and Y above. !! !! JT !! !! : Jacobian type indicator.  Used only for input. !! JT specifies how the Jacobian matrix df/dy will be !! treated, if and when _DLSODA_ requires this matrix. !! JT has the following values and meanings: !! !! value | description !! ----- | --------------------------------------------------------------- !!     1 | means a user-supplied full (NEQ by NEQ) Jacobian. !!     2 | means an internally generated (difference quotient) full !!       | Jacobian (using NEQ extra calls to F per df/dy value). !!     4 | means a user-supplied banded Jacobian. !!     5 | means an internally generated banded Jacobian (using !!       | ML+MU+1 extra calls to F per df/dy evaluation). !! !! !! If JT = 1 or 4, the user must supply a Subroutine JAC !! (the name is arbitrary) as described above under JAC. !! If JT = 2 or 5, a dummy argument can be used. !!----------------------------------------------------------------------- !!##### Optional Inputs. !! !! The following is a list of the optional inputs provided for in the !! call sequence.  (See also Part 2.)  For each such input variable, !! this table lists its name as used in this documentation, its !! location in the call sequence, its meaning, and the default value. !! The use of any of these inputs requires IOPT = 1, and in that !! case all of these inputs are examined.  A value of zero for any !! of these optional inputs will cause the default value to be used. !! Thus to use a subset of the optional inputs, simply preload !! locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and !! then set those of interest to nonzero values. !! !! Name   | Location  |   Meaning and Default Value !! ------ | --------- | ------------------------------------------------- !! H0     | RWORK(5)  | the step size to be attempted on the first step. !!        |           | The default value is determined by the solver. !!        |           | !! HMAX   | RWORK(6)  | the maximum absolute step size allowed. !!        |           | The default value is infinite. !!        |           | !! HMIN   | RWORK(7)  | the minimum absolute step size allowed. !!        |           | The default value is 0.  (This lower bound is not !!        |           | enforced on the final step before reaching TCRIT !!        |           | when ITASK = 4 or 5.) !!        |           | !! IXPR   | IWORK(5)  | flag to generate extra printing at method switches. !!        |           | IXPR = 0 means no extra printing (the default). !!        |           | IXPR = 1 means print data on each switch. !!        |           | T, H, and NST will be printed on the same logical !!        |           | unit as used for error messages. !!        |           | !! MXSTEP |IWORK(6)   | maximum number of (internally defined) steps !!        |           | allowed during one call to the solver. !!        |           | The default value is 500. !!        |           | !! MXHNIL |IWORK(7)   | maximum number of messages printed (per problem) !!        |           | warning that T + H = T on a step (H = step size). !!        |           | This must be positive to result in a non-default !!        |           | value.  The default value is 10. !!        |           | !! MXORDN |IWORK(8)   | the maximum order to be allowed for the nonstiff !!        |           | (Adams) method.  the default value is 12. !!        |           | if MXORDN exceeds the default value, it will !!        |           | be reduced to the default value. !!        |           | MXORDN is held constant during the problem. !!        |           | !! MXORDS |IWORK(9)   | the maximum order to be allowed for the stiff !!        |           | (BDF) method.  The default value is 5. !!        |           | If MXORDS exceeds the default value, it will !!        |           | be reduced to the default value. !!        |           | MXORDS is held constant during the problem. !! !! !! ----------------------------------------------------------------------- !!##### Optional Outputs. !! !! As optional additional output from _DLSODA_, the variables listed !! below are quantities related to the performance of _DLSODA_ !! which are available to the user.  These are communicated by way of !! the work arrays, but also have internal mnemonic names as shown. !! except where stated otherwise, all of these outputs are defined !! on any successful return from _DLSODA_, and on any return with !! ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return !! (ISTATE = -3), they will be unchanged from their existing values !! (if any), except possibly for TOLSF, LENRW, and LENIW. !! On any error return, outputs relevant to the error will be defined, !! as noted below. !! !! Name   |  Location |    Meaning !! ------ | --------- | ------------------------------------------------- !! HU     | RWORK(11) | the step size in t last used (successfully). !!        |           | !! HCUR   | RWORK(12) | the step size to be attempted on the next step. !!        |           | !! TCUR   | RWORK(13) | the current value of the independent variable !!        |           | which the solver has actually reached, i.e. the !!        |           | current internal mesh point in t.  On output, TCUR !!        |           | will always be at least as far as the argument !!        |           | T, but may be farther (if interpolation was done). !!        |           | !! TOLSF  | RWORK(14) | a tolerance scale factor, greater than 1.0, !!        |           | computed when a request for too much accuracy was !!        |           | detected (ISTATE = -3 if detected at the start of !!        |           | the problem, ISTATE = -2 otherwise).  If ITOL is !!        |           | left unaltered but RTOL and ATOL are uniformly !!        |           | scaled up by a factor of TOLSF for the next call, !!        |           | then the solver is deemed likely to succeed. !!        |           | (The user may also ignore TOLSF and alter the !!        |           | tolerance parameters in any other way appropriate.) !!        |           | !! TSW    | RWORK(15) | the value of t at the time of the last method !!        |           | switch, if any. !!        |           | !! NST    | IWORK(11) | the number of steps taken for the problem so far. !!        |           | !! NFE    | IWORK(12) | the number of f evaluations for the problem so far. !!        |           | !! NJE    | IWORK(13) | the number of Jacobian evaluations (and of matrix !!        |           | LU decompositions) for the problem so far. !!        |           | !! NQU    | IWORK(14) | the method order last used (successfully). !!        |           | !! NQCUR  | IWORK(15) | the order to be attempted on the next step. !!        |           | !! IMXER  | IWORK(16) | the index of the component of largest magnitude in !!        |           | the weighted local error vector ( E(i)/EWT(i) ), !!        |           | on an error return with ISTATE = -4 or -5. !!        |           | !! LENRW  | IWORK(17) | the length of RWORK actually required, assuming !!        |           | that the length of RWORK is to be fixed for the !!        |           | rest of the problem, and that switching may occur. !!        |           | This is defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !!        |           | !! LENIW  | IWORK(18) | the length of IWORK actually required, assuming !!        |           | that the length of IWORK is to be fixed for the !!        |           | rest of the problem, and that switching may occur. !!        |           | This is defined on normal returns and on an illegal !!        |           | input return for insufficient storage. !!        |           | !! MUSED  | IWORK(19) | the method indicator for the last successful step: !!        |           | 1 means Adams (nonstiff), 2 means BDF (stiff). !!        |           | !! MCUR   | IWORK(20) | the current method indicator: !!        |           | 1 means Adams (nonstiff), 2 means BDF (stiff). !!        |           | This is the method to be attempted !!        |           | on the next step.  Thus it differs from MUSED !!        |           | only if a method switch has just been made. !! !! !! The following two arrays are segments of the RWORK array which !! may also be of interest to the user as optional outputs. !! For each array, the table below gives its internal name, !! its base address in RWORK, and its description. !! !! Name   | Base Address  |   Description !! ------ | ------------- | --------------------------------------------- !! YH     | 21            |the Nordsieck history array, of size NYH by !!        |               |(NQCUR + 1), where NYH is the initial value !!        |               |of NEQ.  For j = 0,1,...,NQCUR, column j+1 !!        |               |of YH contains HCUR\\*\\*j/factorial(j) times !!        |               |the j-th derivative of the interpolating !!        |               |polynomial currently representing the solution, !!        |               |evaluated at T = TCUR. !!        |               | !! ACOR   |  LACOR        |array of size NEQ used for the accumulated !!        | (from Common  |corrections on each step, scaled on output !!        |   as noted)   |to represent the estimated local error in y !!        |               |on the last step.  This is the vector E in !!        |               |the description of the error control.  It is !!        |               |defined only on a successful return from !!        |               |_DLSODA_.  The base address LACOR is obtained by !!        |               |including in the user's program the !!        |               |following 2 lines: !!        |               |    COMMON /DLS001/ RLS(218), ILS(37) !!        |               |    LACOR = ILS(22) !! !!----------------------------------------------------------------------- !!#### Part 2.  Other Routines Callable. !! !! The following are optional calls which the user may make to !! gain additional capabilities in conjunction with _DLSODA_. !! (The routines XSETUN and XSETF are designed to conform to the !! SLATEC error handling package.) !! !!  Form of Call                | Function !!  --------------------------- | --------------------------------------- !!  CALL XSETUN(LUN)            | set the logical unit number, LUN, for !!                              | output of messages from _DLSODA_, if !!                              | the default is not desired. !!                              | The default value of LUN is 6. !!                              | !!  CALL XSETF(MFLAG)           | set a flag to control the printing of !!                              | messages by _DLSODA_. !!                              | MFLAG = 0 means do not print. (Danger: !!                              | This risks losing valuable information.) !!                              | MFLAG = 1 means print (the default). !!                              | !!                              | Either of the above calls may be made at !!                              | any time and will take effect immediately. !!                              | !!  CALL DSRCMA(RSAV,ISAV,JOB)  | saves and restores the contents of !!                              | the internal Common blocks used by !!                              | _DLSODA_ (see Part 3 below). !!                              | RSAV must be a real array of length 240 !!                              | or more, and ISAV must be an integer !!                              | array of length 46 or more. !!                              | JOB=1 means save Common into RSAV/ISAV. !!                              | JOB=2 means restore Common from RSAV/ISAV. !!                              |    DSRCMA is useful if one is !!                              | interrupting a run and restarting !!                              | later, or alternating between two or !!                              | more problems solved with _DLSODA_. !!                              | !!  CALL DINTDY(,,,,,)          | provide derivatives of y, of various !!       (see below)            | orders, at a specified point t, if !!                              | desired.  It may be called only after !!                              | a successful return from _DLSODA_. !! !! !! The detailed instructions for using DINTDY are as follows: !! !! The form of the call is: !!```fortran !!   CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) !!``` !! The input parameters are: !! !! T !! !! : value of independent variable where answers are desired !! (normally the same as the T last returned by _DLSODA_). !! For valid results, T must lie between TCUR - HU and TCUR. !! (See optional outputs for TCUR and HU.) !! !! K !! !! : integer order of the derivative desired.  K must satisfy !! 0 .le. K .le. NQCUR, where NQCUR is the current order !! (see optional outputs).  The capability corresponding !! to K = 0, i.e. computing y(T), is already provided !! by _DLSODA_ directly.  Since NQCUR .ge. 1, the first !! derivative dy/dt is always available with DINTDY. !! !! RWORK(21) !! !! : the base address of the history array YH. !! !! NYH !! : column length of YH, equal to the initial value of NEQ. !! !! The output parameters are: !! !! DKY !! : a real array of length NEQ containing the computed value !! of the K-th derivative of y(t). !! !! IFLAG !! : integer flag, returned as 0 if K and T were legal, !! -1 if K was illegal, and -2 if T was illegal. !! On an error return, a message is also written. !!----------------------------------------------------------------------- !!#### Part 3.  Interrupting and Continuing !! !! If the solution of a given problem by _DLSODA_ is to be interrupted !! and then later continued, such as when restarting an interrupted run !! or alternating between two or more problems, the user should save, !! following the return from the last _DLSODA_ call prior to the !! interruption, the contents of the call sequence variables and state !! and later restore these values before the !! next _DLSODA_ call for that problem.  To save and restore the current !! state, use Subroutine DSRCMA (see Part 2 above). !! !!----------------------------------------------------------------------- !!#### Part 4.  Optionally Replaceable Solver Routines. !! !! Below is a description of a routine in the _DLSODA_ package which !! relates to the measurement of errors, and can be !! replaced by a user-supplied version, if desired.  However, since such !! a replacement may have a major impact on performance, it should be !! done only when absolutely necessary, and only with great caution. !! (Note: The means by which the package version of a routine is !! superseded by the user's version may be system-dependent.) !! !!##### DEWSET !! The following subroutine is called just before each internal !! integration step, and sets the array of error weights, EWT, as !! described under ITOL/RTOL/ATOL above: !!```fortran !!     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT) !!``` !! where NEQ, ITOL, RTOL, and ATOL are as in the _DLSODA_ call sequence, !! YCUR contains the current dependent variable vector, and !! EWT is the array of weights set by DEWSET. !! !! If the user supplies this subroutine, it must return in EWT(i) !! (i = 1,...,NEQ) a positive quantity suitable for comparing errors !! in y(i) to.  The EWT array returned by DEWSET is passed to the !! DMNORM routine, and also used by _DLSODA_ in the computation !! of the optional output IMXER, and the increments for difference !! quotient Jacobians. !! !! In the user-supplied version of DEWSET, it may be desirable to use !! the current values of derivatives of y.  Derivatives up to order NQ !! are available from the history array YH, described above under !! optional outputs.  In DEWSET, YH is identical to the YCUR array, !! extended to NQ + 1 columns with a column length of NYH and scale !! factors of H\\*\\*j/factorial(j).  On the first call for the problem, !! given by NST = 0, NQ is 1 and H is temporarily set to 1.0. !! NYH is the initial value of NEQ.  The quantities NQ, H, and NST !! can be obtained by including in DEWSET the statements: !!```fortran !!     DOUBLE PRECISION RLS !!     COMMON /DLS001/ RLS(218),ILS(37) !!     NQ = ILS(33) !!     NST = ILS(34) !!     H = RLS(212) !!``` !! Thus, for example, the current value of dy/dt can be obtained as !! YCUR(NYH+i)/H  (i=1,...,NEQ)  (and the division by H is !! unnecessary when NST = 0). !! !!----------------------------------------------------------------------- !!### Pedigree: !! _DLSODA_ is derived from the Livermore Solver for Ordinary !! Differential Equations package ODEPACK, and is !! based on the 12 November 2003 version in double precision. !! !!### Authors: !!```text !!    Alan C. Hindmarsh !!    Center for Applied Scientific Computing, L-561 !!    Lawrence Livermore National Laboratory !!    Livermore, CA 94551 !!``` !! and !!```text !!    Linda R. Petzold !!    Univ. of California at Santa Barbara !!    Dept. of Computer Science !!    Santa Barbara, CA 93106 !!``` !! !!### References: !! 1.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE !!     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.), !!     North-Holland, Amsterdam, 1983, pp. 55-64. !! 2.  Linda R. Petzold, Automatic Selection of Methods for Solving !!     Stiff and Nonstiff Systems of Ordinary Differential Equations, !!     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. !! !!----------------------------------------------------------------------- !!#### Other routines in the _DLSODA_ package. !! !! In addition to Subroutine _DLSODA_, the _DLSODA_ package includes the !! following subroutines and function routines: !! !!  DINTDY !! !!  : computes an interpolated value of the y vector at t = TOUT. !! !!  DSTODA !! !!  : is the core integrator, which does one step of the !!  integration and the associated error control. !! !!  DCFODE !! !!  : sets all method coefficients and test constants. !! !!  DPRJA !! !!  : computes and preprocesses the Jacobian matrix J = df/dy !!  and the Newton iteration matrix P = I - h\\*l0\\*J. !! !!  DSOLSY !! !!  : manages solution of linear system in chord iteration. !! !!  DEWSET !! !!  : sets the error weight vector EWT before each step. !! !!  DMNORM !! !!  : computes the weighted max-norm of a vector. !! !!  DFNORM !! !!  : computes the norm of a full matrix consistent with the !!  weighted max-norm on vectors. !! !!  DBNORM !! !!  : computes the norm of a band matrix consistent with the !!  weighted max-norm on vectors. !! !!  DSRCMA !! !!  : is a user-callable routine to save and restore !!  the contents of the internal Common blocks. !! !!  DGEFA and DGESL !! !!  : are routines from LINPACK for solving full !!  systems of linear algebraic equations. !! !!  DGBFA and DGBSL !! !!  : are routines from LINPACK for solving banded !!  linear systems. !! !!  DUMACH !! !!  : computes the unit roundoff in a machine-independent manner. !! !!  XERRWD, XSETUN, XSETF, and IXSAV !! !!  : handle the printing of all !!   error messages and warnings.  XERRWD is machine-dependent. !! !! *Note*:  _DMNORM_, _DFNORM_, _DBNORM_, _DUMACH_, and _IXSAV_ are !! function routines.  All the others are subroutines. !! !!----------------------------------------------------------------------- ! ### REVISION HISTORY  (YYYYMMDD) !  19811102  DATE WRITTEN !  19820126  Fixed bug in tests of work space lengths; !            minor corrections in main prologue and comments. !  19870330  Major update: corrected comments throughout; !            removed TRET from Common; rewrote EWSET with 4 loops; !            fixed t test in INTDY; added Cray directives in STODA; !            in STODA, fixed DELP init. and logic around PJAC call; !            combined routines to save/restore Common; !            passed LEVEL = 0 in error message calls (except run abort). !  19970225  Fixed lines setting JSTART = -2 in Subroutine LSODA. !  20010425  Major update: convert source lines to upper case; !            added *DECK lines; changed from 1 to * in dummy dimensions; !            changed names R1MACH/D1MACH to RUMACH/DUMACH; !            renamed routines for uniqueness across single/double prec.; !            converted intrinsic names to generic form; !            removed ILLIN and NTREP (data loaded) from Common; !            removed all 'own' variables from Common; !            changed error messages to quoted strings; !            replaced XERRWV/XERRWD with 1993 revised version; !            converted prologues, comments, error messages to mixed case; !            numerous corrections to prologues and internal comments. !  20010507  Converted single precision source to double precision. !  20010613  Revised excess accuracy test (to match rest of ODEPACK). !  20010808  Fixed bug in DPRJA (matrix in DBNORM call). !  20020502  Corrected declarations in descriptions of user routines. !  20031105  Restored 'own' variables to Common blocks, to enable !            interrupt/restart feature. !  20031112  Added SAVE statements for data-loaded constants. ! ----------------------------------------------------------------------- subroutine dlsoda ( f , Neq , Y , T , Tout , Itol , Rtol , Atol , Itask , Istate , Iopt , Rwork , Lrw , Iwork , Liw , jac , Jt ) ! external :: f integer :: Neq ( * ) real ( kind = dp ) :: Y ( * ) real ( kind = dp ), intent ( inout ) :: T real ( kind = dp ), intent ( inout ) :: Tout integer :: Itol real ( kind = dp ) :: Rtol ( * ) real ( kind = dp ) :: Atol ( * ) integer :: Itask integer :: Istate integer :: Iopt integer :: Lrw real ( kind = dp ), intent ( inout ) :: Rwork ( Lrw ) integer :: Liw integer , intent ( inout ) :: Iwork ( Liw ) external :: jac integer :: Jt real ( kind = dp ) :: atoli , ayi , big , ewti , h0 , hmax , hmx , rh , rtoli , & & size , sum , tcrit , tdist , tnext , tol , tolsf , tp , w0 integer :: i , i1 , i2 , iflag , imxer , kgo , len1 , len1c , len1n , len1s , & & len2 , leniw , leniwc , lenrw , lenrwc , lenwm , lf0 , ml , mu logical :: ihit integer , dimension ( 2 ), save :: mord character ( 60 ) :: msg integer , save :: mxhnl0 , mxstp0 ! ! ----------------------------------------------------------------------- !  The following two internal Common blocks contain !  (a) variables which are local to any subroutine but whose values must !      be preserved between calls to the routine (\"own\" variables), and !  (b) variables which are communicated between subroutines. !  The block DLS001 is declared in subroutines DLSODA, DINTDY, DSTODA, !  DPRJA, and DSOLSY. !  The type(DLSA01)::DLSA is declared in subroutines DLSODA, DSTODA, and DPRJA. !  Groups of variables are replaced by dummy arrays in the Common !  declarations in routines where those variables are not used. ! ----------------------------------------------------------------------- ! data mord ( 1 ), mord ( 2 ) / 12 , 5 / , mxstp0 / 500 / , mxhnl0 / 10 / ihit = . false . ! ----------------------------------------------------------------------- !  Block A. !  This code block is executed on every call. !  It tests ISTATE and ITASK for legality and branches appropriately. !  If ISTATE .gt. 1 but the flag INIT shows that initialization has !  not yet been done, an error return occurs. !  If ISTATE = 1 and TOUT = T, return immediately. ! ----------------------------------------------------------------------- if ( Istate < 1 . or . Istate > 3 ) then msg = 'DLSODA-  ISTATE (=I1) illegal.' call xerrwd ( msg , 30 , 1 , 0 , 1 , Istate , 0 , 0 , 0.0D0 , 0.0D0 ) if ( Istate < 0 ) then msg = 'DLSODA-  Run aborted.. apparent infinite loop.    ' call xerrwd ( msg , 50 , 303 , 2 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) return endif Istate = - 3 return endif if ( Itask < 1 . or . Itask > 5 ) then msg = 'DLSODA-  ITASK (=I1) illegal. ' call xerrwd ( msg , 30 , 2 , 0 , 1 , Itask , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 1 ) then dls1 % init = 0 if ( Tout == T ) return else if ( dls1 % init == 0 ) then msg = 'DLSODA-  ISTATE .gt. 1 but DLSODA not initialized.' call xerrwd ( msg , 50 , 3 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 2 ) goto 100 endif ! ----------------------------------------------------------------------- !  Block B. !  The next code block is executed for the initial call (ISTATE = 1), !  or for a continuation call with parameter changes (ISTATE = 3). !  It contains checking of all inputs and various initializations. ! !  First check legality of the non-optional inputs NEQ, ITOL, IOPT, !  JT, ML, and MU. ! ----------------------------------------------------------------------- if ( Neq ( 1 ) <= 0 ) then msg = 'DLSODA-  NEQ (=I1) .lt. 1     ' call xerrwd ( msg , 30 , 4 , 0 , 1 , Neq ( 1 ), 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate /= 1 ) then if ( Neq ( 1 ) > dls1 % n ) then msg = 'DLSODA-  ISTATE = 3 and NEQ increased (I1 to I2). ' call xerrwd ( msg , 50 , 5 , 0 , 2 , dls1 % n , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif endif dls1 % n = Neq ( 1 ) if ( Itol < 1 . or . Itol > 4 ) then msg = 'DLSODA-  ITOL (=I1) illegal.  ' call xerrwd ( msg , 30 , 6 , 0 , 1 , Itol , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Iopt < 0 . or . Iopt > 1 ) then msg = 'DLSODA-  IOPT (=I1) illegal.  ' call xerrwd ( msg , 30 , 7 , 0 , 1 , Iopt , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Jt == 3 . or . Jt < 1 . or . Jt > 5 ) then msg = 'DLSODA-  JT (=I1) illegal.    ' call xerrwd ( msg , 30 , 8 , 0 , 1 , Jt , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif dlsa % jtyp = Jt if ( Jt > 2 ) then ml = Iwork ( 1 ) mu = Iwork ( 2 ) if ( ml < 0 . or . ml >= dls1 % n ) then msg = 'DLSODA-  ML (=I1) illegal: .lt.0 or .ge.NEQ (=I2) ' call xerrwd ( msg , 50 , 9 , 0 , 2 , ml , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( mu < 0 . or . mu >= dls1 % n ) then msg = 'DLSODA-  MU (=I1) illegal: .lt.0 or .ge.NEQ (=I2) ' call xerrwd ( msg , 50 , 10 , 0 , 2 , mu , Neq ( 1 ), 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif endif !  Next process and check the optional inputs. -------------------------- if ( Iopt == 1 ) then dlsa % ixpr = Iwork ( 5 ) if ( dlsa % ixpr < 0 . or . dlsa % ixpr > 1 ) then msg = 'DLSODA-  IXPR (=I1) illegal.  ' call xerrwd ( msg , 30 , 11 , 0 , 1 , dlsa % ixpr , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif dls1 % mxstep = Iwork ( 6 ) if ( dls1 % mxstep < 0 ) then msg = 'DLSODA-  MXSTEP (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 12 , 0 , 1 , dls1 % mxstep , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dls1 % mxstep == 0 ) dls1 % mxstep = mxstp0 dls1 % mxhnil = Iwork ( 7 ) if ( dls1 % mxhnil < 0 ) then msg = 'DLSODA-  MXHNIL (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 13 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dls1 % mxhnil == 0 ) dls1 % mxhnil = mxhnl0 if ( Istate == 1 ) then h0 = Rwork ( 5 ) dlsa % mxordn = Iwork ( 8 ) if ( dlsa % mxordn < 0 ) then msg = 'DLSODA-  MXORDN (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 28 , 0 , 1 , dlsa % mxordn , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dlsa % mxordn == 0 ) dlsa % mxordn = 100 dlsa % mxordn = min ( dlsa % mxordn , mord ( 1 )) dlsa % mxords = Iwork ( 9 ) if ( dlsa % mxords < 0 ) then msg = 'DLSODA-  MXORDS (=I1) .lt. 0  ' call xerrwd ( msg , 30 , 29 , 0 , 1 , dlsa % mxords , 0 , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( dlsa % mxords == 0 ) dlsa % mxords = 100 dlsa % mxords = min ( dlsa % mxords , mord ( 2 )) if ( ( Tout - T ) * h0 < 0.0D0 ) then msg = 'DLSODA-  TOUT (=R1) behind T (=R2)      ' call xerrwd ( msg , 40 , 14 , 0 , 0 , 0 , 0 , 2 , Tout , T ) msg = '      Integration direction is given by H0 (=R1)  ' call xerrwd ( msg , 50 , 14 , 0 , 0 , 0 , 0 , 1 , h0 , 0.0D0 ) Istate = - 3 return endif endif hmax = Rwork ( 6 ) if ( hmax < 0.0D0 ) then msg = 'DLSODA-  HMAX (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 15 , 0 , 0 , 0 , 0 , 1 , hmax , 0.0D0 ) Istate = - 3 return endif dls1 % hmxi = 0.0D0 if ( hmax > 0.0D0 ) dls1 % hmxi = 1.0D0 / hmax dls1 % hmin = Rwork ( 7 ) if ( dls1 % hmin < 0.0D0 ) then msg = 'DLSODA-  HMIN (=R1) .lt. 0.0  ' call xerrwd ( msg , 30 , 16 , 0 , 0 , 0 , 0 , 1 , dls1 % hmin , 0.0D0 ) Istate = - 3 return endif else dlsa % ixpr = 0 dls1 % mxstep = mxstp0 dls1 % mxhnil = mxhnl0 dls1 % hmxi = 0.0D0 dls1 % hmin = 0.0D0 if ( Istate == 1 ) then h0 = 0.0D0 dlsa % mxordn = mord ( 1 ) dlsa % mxords = mord ( 2 ) endif endif ! ----------------------------------------------------------------------- !  Set work array pointers and check lengths LRW and LIW. !  If ISTATE = 1, METH is initialized to 1 here to facilitate the !  checking of work space lengths. !  Pointers to segments of RWORK and IWORK are named by prefixing L to !  the name of the segment.  E.g., the segment YH starts at RWORK(LYH). !  Segments of RWORK (in order) are denoted  YH, WM, EWT, SAVF, ACOR. !  If the lengths provided are insufficient for the current method, !  an error return occurs.  This is treated as illegal input on the !  first call, but as a problem interruption with ISTATE = -7 on a !  continuation call.  If the lengths are sufficient for the current !  method but not for both methods, a warning message is sent. ! ----------------------------------------------------------------------- if ( Istate == 1 ) dls1 % meth = 1 if ( Istate == 1 ) dls1 % nyh = dls1 % n dls1 % lyh = 21 len1n = 20 + ( dlsa % mxordn + 1 ) * dls1 % nyh len1s = 20 + ( dlsa % mxords + 1 ) * dls1 % nyh dls1 % lwm = len1s + 1 lenwm = 0 if ( Jt <= 2 ) lenwm = dls1 % n * dls1 % n + 2 if ( Jt >= 4 ) lenwm = ( 2 * ml + mu + 1 ) * dls1 % n + 2 len1s = len1s + lenwm len1c = len1n if ( dls1 % meth == 2 ) len1c = len1s len1 = max ( len1n , len1s ) len2 = 3 * dls1 % n lenrw = len1 + len2 lenrwc = len1c + len2 Iwork ( 17 ) = lenrw dls1 % liwm = 1 leniw = 20 + dls1 % n leniwc = 20 if ( dls1 % meth == 2 ) leniwc = leniw Iwork ( 18 ) = leniw if ( Istate == 1 . and . Lrw < lenrwc ) then msg = 'DLSODA-  RWORK length needed, LENRW (=I1), exceeds LRW (=I2)' call xerrwd ( msg , 60 , 17 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 1 . and . Liw < leniwc ) then msg = 'DLSODA-  IWORK length needed, LENIW (=I1), exceeds LIW (=I2)' call xerrwd ( msg , 60 , 18 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) Istate = - 3 return endif if ( Istate == 3 . and . Lrw < lenrwc ) goto 600 if ( Istate == 3 . and . Liw < leniwc ) goto 700 dls1 % lewt = len1 + 1 dlsa % insufr = 0 if ( Lrw < lenrw ) then dlsa % insufr = 2 dls1 % lewt = len1c + 1 msg = 'DLSODA-  Warning.. RWORK length is sufficient for now, but  ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 103 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENRW = I1, while LRW = I2.' call xerrwd ( msg , 50 , 103 , 0 , 2 , lenrw , Lrw , 0 , 0.0D0 , 0.0D0 ) endif dls1 % lsavf = dls1 % lewt + dls1 % n dls1 % lacor = dls1 % lsavf + dls1 % n dlsa % insufi = 0 if ( Liw < leniw ) then dlsa % insufi = 2 msg = 'DLSODA-  Warning.. IWORK length is sufficient for now, but  ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      may not be later.  Integration will proceed anyway.   ' call xerrwd ( msg , 60 , 104 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      Length needed is LENIW = I1, while LIW = I2.' call xerrwd ( msg , 50 , 104 , 0 , 2 , leniw , Liw , 0 , 0.0D0 , 0.0D0 ) endif !  Check RTOL and ATOL for legality. ------------------------------------ rtoli = Rtol ( 1 ) atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol >= 3 ) rtoli = Rtol ( i ) if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) if ( rtoli < 0.0D0 ) then msg = 'DLSODA-  RTOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 19 , 0 , 1 , i , 0 , 1 , rtoli , 0.0D0 ) Istate = - 3 return endif if ( atoli < 0.0D0 ) then msg = 'DLSODA-  ATOL(I1) is R1 .lt. 0.0        ' call xerrwd ( msg , 40 , 20 , 0 , 1 , i , 0 , 1 , atoli , 0.0D0 ) Istate = - 3 return endif enddo if ( Istate == 1 ) then ! ----------------------------------------------------------------------- !  Block C. !  The next block is for the initial call only (ISTATE = 1). !  It contains all remaining initializations, the initial call to F, !  and the calculation of the initial step size. !  The error weights in EWT are inverted after being loaded. ! ----------------------------------------------------------------------- dls1 % uround = dumach () dls1 % tn = T dlsa % tsw = T dls1 % maxord = dlsa % mxordn if ( Itask == 4 . or . Itask == 5 ) then tcrit = Rwork ( 1 ) if ( ( tcrit - Tout ) * ( Tout - T ) < 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) Istate = - 3 return endif if ( h0 /= 0.0D0 . and . ( T + h0 - tcrit ) * h0 > 0.0D0 ) h0 = tcrit - T endif dls1 % jstart = 0 dls1 % nhnil = 0 dls1 % nst = 0 dls1 % nje = 0 dls1 % nslast = 0 dls1 % hu = 0.0D0 dls1 % nqu = 0 dlsa % mused = 0 dls1 % miter = 0 dls1 % ccmax = 0.3D0 dls1 % maxcor = 3 dls1 % msbp = 20 dls1 % mxncf = 10 !  Initial call to F.  (LF0 points to YH(*,2).) ------------------------- lf0 = dls1 % lyh + dls1 % nyh call f ( Neq , T , Y , Rwork ( lf0 )) dls1 % nfe = 1 !  Load the initial value vector in YH. --------------------------------- do i = 1 , dls1 % n Rwork ( i + dls1 % lyh - 1 ) = Y ( i ) enddo !  Load and invert the EWT array.  (H is temporarily set to 1.0.) ------- dls1 % nq = 1 dls1 % h = 1.0D0 call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODA-  EWT(I1) is R1 .le. 0.0         ' call xerrwd ( msg , 40 , 21 , 0 , 1 , i , 0 , 1 , ewti , 0.0D0 ) Istate = - 3 return endif Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) enddo ! ----------------------------------------------------------------------- !  The coding below computes the step size, H0, to be attempted on the !  first step, unless the user has supplied a value for this. !  First check that TOUT - T differs significantly from zero. !  A scalar tolerance quantity TOL is computed, as MAX(RTOL(i)) !  if this is positive, or MAX(ATOL(i)/ABS(Y(i))) otherwise, adjusted !  so as to be between 100*UROUND and 1.0E-3. !  Then the computed value H0 is given by: ! !    H0**(-2)  =  1./(TOL * w0**2)  +  TOL * (norm(F))**2 ! !  where   w0     = MAX ( ABS(T), ABS(TOUT) ), !          F      = the initial value of the vector f(t,y), and !          norm() = the weighted vector norm used throughout, given by !                   the DMNORM function routine, and weighted by the !                   tolerances initially loaded into the EWT array. !  The sign of H0 is inferred from the initial values of TOUT and T. !  ABS(H0) is made .le. ABS(TOUT-T) in any case. ! ----------------------------------------------------------------------- if ( h0 == 0.0D0 ) then tdist = abs ( Tout - T ) w0 = max ( abs ( T ), abs ( Tout )) if ( tdist < 2.0D0 * dls1 % uround * w0 ) then msg = 'DLSODA-  TOUT(=R1) too close to T(=R2) to start integration.' call xerrwd ( msg , 60 , 22 , 0 , 0 , 0 , 0 , 2 , Tout , T ) Istate = - 3 return endif tol = Rtol ( 1 ) if ( Itol > 2 ) then do i = 1 , dls1 % n tol = max ( tol , Rtol ( i )) enddo endif if ( tol <= 0.0D0 ) then atoli = Atol ( 1 ) do i = 1 , dls1 % n if ( Itol == 2 . or . Itol == 4 ) atoli = Atol ( i ) ayi = abs ( Y ( i )) if ( ayi /= 0.0D0 ) tol = max ( tol , atoli / ayi ) enddo endif tol = max ( tol , 10 0.0D0 * dls1 % uround ) tol = min ( tol , 0.001D0 ) sum = dmnorm ( dls1 % n , Rwork ( lf0 ), Rwork ( dls1 % lewt )) sum = 1.0D0 / ( tol * w0 * w0 ) + tol * sum ** 2 h0 = 1.0D0 / sqrt ( sum ) h0 = min ( h0 , tdist ) h0 = sign ( h0 , Tout - T ) endif !  Adjust H0 if necessary to meet HMAX bound. --------------------------- rh = abs ( h0 ) * dls1 % hmxi if ( rh > 1.0D0 ) h0 = h0 / rh !  Load H with H0 and scale YH(*,2) by H0. ------------------------------ dls1 % h = h0 do i = 1 , dls1 % n Rwork ( i + lf0 - 1 ) = h0 * Rwork ( i + lf0 - 1 ) enddo goto 300 else !  If ISTATE = 3, set flag to signal parameter changes to DSTODA. ------- dls1 % jstart = - 1 if ( dls1 % n /= dls1 % nyh ) then !  NEQ was reduced.  Zero part of YH to avoid undefined references. ----- i1 = dls1 % lyh + dls1 % l * dls1 % nyh i2 = dls1 % lyh + ( dls1 % maxord + 1 ) * dls1 % nyh - 1 if ( i1 <= i2 ) then do i = i1 , i2 Rwork ( i ) = 0.0D0 enddo endif endif endif ! ----------------------------------------------------------------------- !  Block D. !  The next code block is for continuation calls only (ISTATE = 2 or 3) !  and is to check stop conditions before taking a step. ! ----------------------------------------------------------------------- 100 continue dls1 % nslast = dls1 % nst select case ( Itask ) case ( 2 ) goto 200 case ( 3 ) tp = dls1 % tn - dls1 % hu * ( 1.0D0 + 10 0.0D0 * dls1 % uround ) if ( ( tp - Tout ) * dls1 % h > 0.0D0 ) then msg = 'DLSODA-  ITASK = I1 and TOUT (=R1) behind TCUR - HU (= R2)  ' call xerrwd ( msg , 60 , 23 , 0 , 1 , Itask , 0 , 2 , Tout , tp ) Istate = - 3 return endif if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 T = dls1 % tn goto 400 case ( 4 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) Istate = - 3 return endif if ( ( tcrit - Tout ) * dls1 % h < 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TOUT (=R2)   ' call xerrwd ( msg , 60 , 25 , 0 , 0 , 0 , 0 , 2 , tcrit , Tout ) Istate = - 3 return endif if ( ( dls1 % tn - Tout ) * dls1 % h >= 0.0D0 ) then call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) then msg = 'DLSODA-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) Istate = - 3 return endif T = Tout goto 500 endif case ( 5 ) tcrit = Rwork ( 1 ) if ( ( dls1 % tn - tcrit ) * dls1 % h > 0.0D0 ) then msg = 'DLSODA-  ITASK = 4 or 5 and TCRIT (=R1) behind TCUR (=R2)   ' call xerrwd ( msg , 60 , 24 , 0 , 0 , 0 , 0 , 2 , tcrit , dls1 % tn ) Istate = - 3 return endif case default if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) if ( iflag /= 0 ) then msg = 'DLSODA-  Trouble in DINTDY.  ITASK = I1, TOUT = R1' call xerrwd ( msg , 50 , 27 , 0 , 1 , Itask , 0 , 1 , Tout , 0.0D0 ) Istate = - 3 return endif T = Tout goto 500 endselect hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( ihit ) T = tcrit if ( ihit ) goto 400 tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( Istate == 2 . and . dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif ! ----------------------------------------------------------------------- !  Block E. !  The next block is normally executed for all calls and contains !  the call to the one-step core integrator DSTODA. ! !  This is a looping point for the integration steps. ! !  First check for too many steps being taken, update EWT (if not at !  start of problem), check for too much accuracy being requested, and !  check for H below the roundoff level in T. ! ----------------------------------------------------------------------- 200 continue if ( dls1 % meth /= dlsa % mused ) then if ( dlsa % insufr == 1 ) goto 600 if ( dlsa % insufi == 1 ) goto 700 endif if ( ( dls1 % nst - dls1 % nslast ) >= dls1 % mxstep ) then !=================================================================================================================================== ! ----------------------------------------------------------------------- !  Block H. !  The following block handles all unsuccessful returns other than !  those for illegal input.  First the error message routine is called. !  If there was an error test or convergence test failure, IMXER is set. !  Then Y is loaded from YH and T is set to TN. !  The optional outputs are loaded into the work arrays before returning. ! ----------------------------------------------------------------------- !  The maximum number of steps was taken before reaching TOUT. ---------- !  Block H. msg = 'DLSODA-  At current T (=R1), MXSTEP (=I1) steps   ' call xerrwd ( msg , 50 , 201 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      taken on this call before reaching TOUT     ' call xerrwd ( msg , 50 , 201 , 0 , 1 , dls1 % mxstep , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 1 goto 900 else call dewset ( dls1 % n , Itol , Rtol , Atol , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) do i = 1 , dls1 % n if ( Rwork ( i + dls1 % lewt - 1 ) <= 0.0D0 ) then !  EWT(i) .le. 0.0 for some i (not at start of problem). ---------------- !  Block H. ewti = Rwork ( dls1 % lewt + i - 1 ) msg = 'DLSODA-  At T (=R1), EWT(I1) has become R2 .le. 0.' call xerrwd ( msg , 50 , 202 , 0 , 1 , i , 0 , 2 , dls1 % tn , ewti ) Istate = - 6 goto 900 else Rwork ( i + dls1 % lewt - 1 ) = 1.0D0 / Rwork ( i + dls1 % lewt - 1 ) endif enddo endif 300 continue tolsf = dls1 % uround * dmnorm ( dls1 % n , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt )) if ( tolsf <= 1.0D0 ) then if ( ( dls1 % tn + dls1 % h ) == dls1 % tn ) then dls1 % nhnil = dls1 % nhnil + 1 if ( dls1 % nhnil <= dls1 % mxhnil ) then msg = 'DLSODA-  Warning..Internal T (=R1) and H (=R2) are' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      such that in the machine, T + H = T on the next step  ' call xerrwd ( msg , 60 , 101 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     (H = step size). Solver will continue anyway.' call xerrwd ( msg , 50 , 101 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) if ( dls1 % nhnil >= dls1 % mxhnil ) then msg = 'DLSODA-  Above warning has been issued I1 times.  ' call xerrwd ( msg , 50 , 102 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '     It will not be issued again for this problem.' call xerrwd ( msg , 50 , 102 , 0 , 1 , dls1 % mxhnil , 0 , 0 , 0.0D0 , 0.0D0 ) endif endif endif ! ----------------------------------------------------------------------- !    CALL DSTODA(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,f,JAC,DPRJA,DSOLSY) ! ----------------------------------------------------------------------- call dstoda ( Neq , Y , Rwork ( dls1 % lyh ), dls1 % nyh , Rwork ( dls1 % lyh ), Rwork ( dls1 % lewt ), & & Rwork ( dls1 % lsavf ), Rwork ( dls1 % lacor ), Rwork ( dls1 % lwm ), & & Iwork ( dls1 % liwm ), f , jac , dprja , dsolsy ) kgo = 1 - dls1 % kflag select case ( kgo ) case ( 2 ) !  KFLAG = -1.  Error test failed repeatedly or with ABS(H) = HMIN. ----- !  Block H. msg = 'DLSODA-  At T(=R1) and step size H(=R2), the error' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      test failed repeatedly or with ABS(H) = HMIN' call xerrwd ( msg , 50 , 204 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 4 goto 800 case ( 3 ) !  KFLAG = -2.  Convergence failed repeatedly or with ABS(H) = HMIN. ---- !  Block H. msg = 'DLSODA-  At T (=R1) and step size H (=R2), the    ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      corrector convergence failed repeatedly     ' call xerrwd ( msg , 50 , 205 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      or with ABS(H) = HMIN   ' call xerrwd ( msg , 30 , 205 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , dls1 % h ) Istate = - 5 goto 800 case default ! ----------------------------------------------------------------------- !  Block F. !  The following block handles the case of a successful return from the !  core integrator (KFLAG = 0). !  If a method switch was just made, record TSW, reset MAXORD, !  set JSTART to -1 to signal DSTODA to complete the switch, !  and do extra printing of data if IXPR = 1. !  Then, in any case, check for stop conditions. ! ----------------------------------------------------------------------- dls1 % init = 1 if ( dls1 % meth /= dlsa % mused ) then dlsa % tsw = dls1 % tn dls1 % maxord = dlsa % mxordn if ( dls1 % meth == 2 ) dls1 % maxord = dlsa % mxords if ( dls1 % meth == 2 ) Rwork ( dls1 % lwm ) = sqrt ( dls1 % uround ) dlsa % insufr = min ( dlsa % insufr , 1 ) dlsa % insufi = min ( dlsa % insufi , 1 ) dls1 % jstart = - 1 if ( dlsa % ixpr /= 0 ) then if ( dls1 % meth == 2 ) then msg = 'DLSODA- A switch to the BDF (stiff) method has occurred     ' call xerrwd ( msg , 60 , 105 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif if ( dls1 % meth == 1 ) then msg = 'DLSODA- A switch to the Adams (nonstiff) method has occurred' call xerrwd ( msg , 60 , 106 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) endif msg = '     at T = R1,  tentative step size H = R2,  step NST = I1 ' call xerrwd ( msg , 60 , 107 , 0 , 1 , dls1 % nst , 0 , 2 , dls1 % tn , dls1 % h ) endif endif select case ( Itask ) case ( 2 ) case ( 3 ) !  ITASK = 3.  Jump to exit if TOUT was reached. ------------------------ if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 case ( 4 ) !  ITASK = 4.  See if TOUT or TCRIT was reached.  Adjust H if necessary. if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) then hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx if ( . not .( ihit ) ) then tnext = dls1 % tn + dls1 % h * ( 1.0D0 + 4.0D0 * dls1 % uround ) if ( ( tnext - tcrit ) * dls1 % h > 0.0D0 ) then dls1 % h = ( tcrit - dls1 % tn ) * ( 1.0D0 - 4.0D0 * dls1 % uround ) if ( dls1 % jstart >= 0 ) dls1 % jstart = - 2 endif goto 200 endif else call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 500 endif case ( 5 ) !  ITASK = 5.  See if TCRIT was reached and jump to exit. --------------- hmx = abs ( dls1 % tn ) + abs ( dls1 % h ) ihit = abs ( dls1 % tn - tcrit ) <= 10 0.0D0 * dls1 % uround * hmx case default !  ITASK = 1.  If TOUT has been reached, interpolate. ------------------- if ( ( dls1 % tn - Tout ) * dls1 % h < 0.0D0 ) goto 200 call dintdy ( Tout , 0 , Rwork ( dls1 % lyh ), dls1 % nyh , Y , iflag ) T = Tout goto 500 endselect endselect else tolsf = tolsf * 2.0D0 if ( dls1 % nst == 0 ) then msg = 'DLSODA-  At start of problem, too much accuracy   ' call xerrwd ( msg , 50 , 26 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      requested for precision of machine..  See TOLSF (=R1) ' call xerrwd ( msg , 60 , 26 , 0 , 0 , 0 , 0 , 1 , tolsf , 0.0D0 ) Rwork ( 14 ) = tolsf Istate = - 3 return endif !  Too much accuracy requested for machine precision. ------------------- !  Block H. msg = 'DLSODA-  At T (=R1), too much accuracy requested  ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      for precision of machine..  See TOLSF (=R2) ' call xerrwd ( msg , 50 , 203 , 0 , 0 , 0 , 0 , 2 , dls1 % tn , tolsf ) Rwork ( 14 ) = tolsf Istate = - 2 goto 900 endif ! ----------------------------------------------------------------------- !  Block G. !  The following block handles all successful returns from DLSODA. !  If ITASK .ne. 1, Y is loaded from YH and T is set accordingly. !  ISTATE is set to 2, and the optional outputs are loaded into the !  work arrays before returning. ! ----------------------------------------------------------------------- 400 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn if ( Itask == 4 . or . Itask == 5 ) then if ( ihit ) T = tcrit endif 500 continue Istate = 2 Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth return !  RWORK length too small to proceed. ----------------------------------- !  Block H. 600 continue msg = 'DLSODA-  At current T(=R1), RWORK length too small' call xerrwd ( msg , 50 , 206 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 206 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 900 !  IWORK length too small to proceed. ----------------------------------- !  Block H. 700 continue msg = 'DLSODA-  At current T(=R1), IWORK length too small' call xerrwd ( msg , 50 , 207 , 0 , 0 , 0 , 0 , 0 , 0.0D0 , 0.0D0 ) msg = '      to proceed.  The integration was otherwise successful.' call xerrwd ( msg , 60 , 207 , 0 , 0 , 0 , 0 , 1 , dls1 % tn , 0.0D0 ) Istate = - 7 goto 900 !=================================================================================================================================== !  Compute IMXER if relevant. ------------------------------------------- !  Block H. 800 continue big = 0.0D0 imxer = 1 do i = 1 , dls1 % n size = abs ( Rwork ( i + dls1 % lacor - 1 ) * Rwork ( i + dls1 % lewt - 1 )) if ( big < size ) then big = size imxer = i endif enddo Iwork ( 16 ) = imxer !  Set Y vector, T, and optional outputs. ------------------------------- 900 continue do i = 1 , dls1 % n Y ( i ) = Rwork ( i + dls1 % lyh - 1 ) enddo T = dls1 % tn Rwork ( 11 ) = dls1 % hu Rwork ( 12 ) = dls1 % h Rwork ( 13 ) = dls1 % tn Rwork ( 15 ) = dlsa % tsw Iwork ( 11 ) = dls1 % nst Iwork ( 12 ) = dls1 % nfe Iwork ( 13 ) = dls1 % nje Iwork ( 14 ) = dls1 % nqu Iwork ( 15 ) = dls1 % nq Iwork ( 19 ) = dlsa % mused Iwork ( 20 ) = dls1 % meth ! ----------------------------------------------------------------------- !  Block I.  Many returns with ISTATE=-3 !  The following block handles all error returns due to illegal input !  (ISTATE = -3), as detected before calling the core integrator. !  First the error message routine is called.  If the illegal input !  is a negative ISTATE, the run is aborted (apparent infinite loop). ! ----------------------------------------------------------------------- ! end subroutine dlsoda","tags":"","loc":"sourcefile/dlsoda.inc.html"}]}
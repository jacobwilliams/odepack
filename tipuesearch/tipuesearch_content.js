var tipuesearch = {"pages":[{"title":" odepack ","text":"odepack module ODEPACK This is a WIP(Work In Progress) to evaluate the effort required and\nfeasibility of updating older Fortran code from the netlib repository\nusing a combination of the commercial plusFORT/spag software and GNU\nutilities. Many thanks to plusFORT for making an evaluation copy available for\nseveral months to the Fortran Community. The plusFORT tools were crucial\nto this study and unmatched in my experience for removing deprecated\nsyntax from pre-f2003 code. This began with ODEPACK the ODEPACK package has been selected as a significant code that is well\ndocumented and structured for its vintage, and available on the netlib\nsite and covered by a public domain license. ODEPACK:\n     About 28 000, lines of core source files\n     (About 11 000, lines of core code excluding comments)\n     An additional 3700 lines of test cases. preliminary targets for phase I: remove obsolescent syntax (trying plusFORT and spag) able to build using fpm(1)  (the Fortran Package Manager) in debug mode with ifort, gfortran, nvfortran text viewable in ford(1) and extractable as markup that can run through pandoc(1) available on github (or equivalent) no common blocks no equivalences build as a (single?) module M_odepack complete set of unit tests In this case the originally bundled subset of BLAS/LAPACK routines are\nbeing included in the module.  In production, this might not be done in\norder to be able to easily call external optimized versions. The biggest hinderance is some storage used for both INTEGER and DOUBLE\nPRECISION values. One take-away is how critical unit tests are to enable rapid development\n (which so far this package does not have) The initial pass was done just using the original sample programs as\nunit tests. This may have allowed for introduction of errors but the\noriginal samples run with the same output as the original. As a proof of concept I have gleaned what I wanted from this\neffort. plusFORT was invaluable and reduced the effort by an estimated\n85 percent. Phase II ? The results of this first pass were significant enough that this project\nwill hopefully continue.  I feel a complete unit test suite is required\nto allow development to proceed rapidily. Another issue is the remaining non-standard code.  Non-standard (but\nat the time de-facto fortran standard) such as equivalencing different\ntypes, creating scratch space that is used as different numeric types,\nand treating scalars as arrays and vice-versa as well as passing the same\narrays or values multiple times are the most time-consuming usages to\ncorrect to standard-conforming, particularly since spag(1) had already\ndone an excellent job with updating the pre-f2003 code. spag(1) is not\n(currently?) sufficient by itself to automate the additional refactoring\ndesired, which includes using post-f95 features and code restructuring,\nso the remaining work requires manual recoding. The type-mismatch issues have not been eliminated enough to include all\nthe routines in the module, so  those in the files “M_da1/dprep.inc”\n“M_da1/dainvgs.inc” “M_da1/dprepi.inc” “M_da1/dstodi.inc” and\n“M_da1_/dstode.inc” still require being built without an interface\ndefinition. building This version of ODEPACK already builds with an included make(1) file\nand as an fpm(1) package with the current options: fpm run                     --compiler nvfortran --example '*' fpm run --profile release   --compiler ifort     --example '*' fpm run --flag -std = legacy  --compiler gfortran  --example '*' As noted, a second pass needs made to restructure the code in some places\nmanually, but the code is far more readable after having been refactored\nby spag(1) from the plusFORT package and hopefully as useable as the\noriginal. There are a few notes in src/M_odepack.f90 concerning continuing issues. If there is interest in completing this transformation it can continue on this\nsite, hopefully as a group project. We are particulary interested in current users of ODEPACK trying this version,\nand contributions of additional test suites. Although I have learned what I wanted from the project in phase I, hopefully as\na community we can complete creating a new maintained production-quality version\nof this venerable and still-valuable package. Documentation The API documentation for the current master branch can be found here .  This is generated by processing the source files with FORD . Brief Description of ODEPACK - A Systematized Collection of ODE Solvers (Double Precision Version) Alan C. Hindmarsh\nCenter for Applied Scientific Computing, L-561\nLawrence Livermore National Laboratory\nLivermore, CA 94551, U.S.A.\n\n20 June 2001 Work performed under the auspices of the U.S. Department of Energy\nby the Lawrence Livermore National Laboratory under contract\nNo. W-7405-Eng-48, and supported (formerly) by the DOE Office of\nEnergy Research, Applied Mathematical Sciences Research Program. ODEPACK is a collection of Fortran solvers for the initial value\nproblem for ordinary differential equation systems.  It consists of nine\nsolvers, namely a basic solver called LSODE and eight variants of it –\nLSODES, LSODA, LSODAR, LSODPK, LSODKR, LSODI, LSOIBT, and LSODIS.\nThe collection is suitable for both stiff and nonstiff systems.  It\nincludes solvers for systems given in explicit form, dy/dt = f(t,y),\nand also solvers for systems given in linearly implicit form,\nA(t,y) dy/dt = g(t,y).  Two of the solvers use general sparse matrix\nsolvers for the linear systems that arise.  Two others use iterative\n(preconditioned Krylov) methods instead of direct methods for these\nlinear systems.  The most recent addition is LSODIS, which solves\nimplicit problems with general sparse treatment of all matrices involved. The ODEPACK solvers are written in standard Fortran 77, with a few\nexceptions, and with minimal machine dependencies.  There are separate\ndouble and single precision versions of ODEPACK.  The actual solver\nnames are those given above with a prefix of D- or S- for the double\nor single precision version, respectively, i.e. DLSODE/SLSODE, etc.\nEach solver consists of a main driver subroutine having the same name\nas the solver and some number of subordinate routines.  For each\nsolver, there is also a demonstration program, which solves one or two\nsimple problems in a somewhat self-checking manner. Recently, the ODEPACK solvers were upgraded to improve their\nportability in numerous ways.  Among the improvements are (a) renaming\nof routines and Common blocks to distinguish double and single\nprecision versions, (b) use of generic intrinsic function names, (c)\nelimination of the Block Data subprogram, (d) use of a portable\nroutine to set the unit roundoff, and (e) passing of quoted strings to\nthe error message handler.  In addition, the prologue and internal\ncomments were reformatted, and use mixed upper/lower case.  Numerous\nminor corrections and improvements were also made. The above upgrade operations were applied to LSODE earlier than they\nwere to the rest of ODEPACK, and the two upgrades were done somewhat\nindependently.  As a result, some differences will be apparent in the\nsource files of LSODE and the other solvers – primarily in the\nformatting of the comment line prologue of the main driver routine.\nIn Subroutines DLSODE/SLSODE and their subordinate routines, the\nprologue was written in “SLATEC format”, while for the other solvers a\nmore relaxed style was used.  The differences are entirely cosmetic,\nhowever, and do not affect performance. Documentation on the usage of each solver is provided in the\ninitial block of comment lines in the source file, which (in most\ncases) includes a simple example.  A demonstration program (in\nseparate double/single precision versions) is also available. What follows is a summary of the capabilities of ODEPACK, comments\nabout usage documentation, and notes about installing the collection.\nFor additional documentation on ODEPACK, see also the papers [1], [2]\n(for LSODE), and [3] (for LSODPK and LSODKR), and in the references\ncited there.  (However, the document [2] does not reflect the upgrade\noperations described above.) References: A. C. Hindmarsh, “ ODEPACK, A Systematized Collection of ODE Solvers ,”\n     in Scientific Computing, R. S. Stepleman et al. (eds.), North-Holland,\n     Amsterdam, 1983 (vol. 1 of IMACS Transactions on Scientific Computation),\n     pp. 55-64. K. Radhakrishnan and A. C. Hindmarsh, “ Description and Use of LSODE,\n     the Livermore Solver for Ordinary Differential Equations ,” LLNL\n     report UCRL-ID-113855, December 1993. P. N. Brown and A. C. Hindmarsh, “ Reduced Storage Matrix Methods\n     in Stiff ODE Systems ,” J. Appl. Math. & Comp., 31 (1989), pp.40-91. I. Summary of the ODEPACK Solvers A. Solvers for explicitly given systems. For each of the following solvers, it is assumed that the ODEs are\ngiven explicitly, so that the system can be written in the form\ndy/dt = f(t,y), where y is the vector of dependent variables, and t is\nthe independent variable. LSODE (Livermore Solver for Ordinary Differential Equations) is the\n   basic solver of the collection.  It solves stiff and nonstiff systems\n   of the form dy/dt = f.  In the stiff case, it treats the Jacobian\n   matrix df/dy as either a dense (full) or a banded matrix, and as either\n   user-supplied or internally approximated by difference quotients.\n   It uses Adams methods (predictor-corrector) in the nonstiff case,\n   and Backward Differentiation Formula (BDF) methods (the Gear methods)\n   in the stiff case.  The linear systems that arise are solved by direct\n   methods (LU factor/solve).  LSODE supersedes the older GEAR and GEARB\n   packages, and reflects a complete redesign of the user interface\n   and internal organization, with some algorithmic improvements. LSODES, written jointly with A. H. Sherman, solves systems dy/dt = f\n   and in the stiff case treats the Jacobian matrix in general sparse\n   form.  It determines the sparsity structure on its own, or optionally\n   accepts this information from the user.  It then uses parts of the\n   Yale Sparse Matrix Package (YSMP) to solve the linear systems that\n   arise, by a sparse (direct) LU factorization/backsolve method.\n   LSODES supersedes, and improves upon, the older GEARS package. LSODA, written jointly with L. R. Petzold, solves systems dy/dt = f\n   with a dense or banded Jacobian when the problem is stiff, but it\n   automatically selects between nonstiff (Adams) and stiff (BDF)\n   methods.  It uses the nonstiff method initially, and dynamically\n   monitors data in order to decide which method to use. LSODAR, also written jointly with L. R. Petzold, is a variant of\n   LSODA with a rootfinding capability added.  Thus it solves problems\n   dy/dt = f with dense or banded Jacobian and automatic method\n   selection, and at the same time, it finds the roots of any of a\n   set of given functions of the form g(t,y).  This is often useful\n   for finding stop conditions, or for finding points at which a switch\n   is to be made in the function f. LSODPK, written jointly with Peter N. Brown, is a variant of LSODE\n   in which the direct solvers for the linear systems have been replaced\n   by a selection of four preconditioned Krylov (iterative) solvers.\n   The user must supply a pair of routine to evaluate, preprocess, and\n   solve the (left and/or right) preconditioner matrices.  LSODPK also\n   includes an option for a user-supplied linear system solver to be used\n   without Krylov iteration. LSODKR is a variant of LSODPK with the addition of the same\n   rootfinding capability as in LSODAR, and also of automatic switching\n   between functional and Newton iteration.  The nonlinear iteration\n   method-switching differs from the method-switching in LSODA and LSODAR,\n   but provides similar savings by using the cheaper method in the non-stiff\n   regions of the problem.  LSODKR also improves on the Krylov methods in\n   LSODPK by offering the option to save and reuse the approximate Jacobian\n   data underlying the preconditioner. B. Solvers for linearly implicit systems. The following solvers treat systems in the linearly implicit form\nA(t,y) dy/dt = g(t,y), A = a square matrix, i.e. with the derivative\ndy/dt implicit, but linearly so.  These solvers allow A to be\nsingular, in which case the system is a differential-algebraic\nequation (DAE) system.  In that case, the user must be very careful\nto supply a well-posed problem with consistent initial conditions. LSODI, written jointly with J. F. Painter, solves linearly implicit\n   systems in which the matrices involved (A, dg/dy, and d(A dy/dt)/dy)\n   are all assumed to be either dense or banded.  LSODI supersedes the\n   older GEARIB solver and improves upon it in numerous ways. LSOIBT, written jointly with C. S. Kenney, solves linearly implicit\n   systems in which the matrices involved are all assumed to be\n   block-tridiagonal.  Linear systems are solved by the LU method. LSODIS, written jointly with S. Balsdon, solves linearly implicit\n   systems in which the matrices involved are all assumed to be sparse.\n   Like LSODES, LSODIS either determines the sparsity structure or\n   accepts it from the user, and uses parts of the Yale Sparse Matrix\n   Package to solve the linear systems that arise, by a direct method. II. Usage Documentation Each of the solvers in the ODEPACK collection is headed by a\nuser-callable driver subroutine, with the same name as the solver\n(DLSODE, etc.).  The call sequence of the driver routine includes the\nnames of one or more user-supplied subroutines that define the ODE\nsystem, and various other problem and solution parameters.  Complete\nuser documentation is given in the initial block of comment lines\n(the prologue) in the driver routine.  In each case, this prologue is\norganized as follows: Summary of Usage (short, for standard modes of use) Example Problem, with code and output (except for LSODPK and LSODKR) Full Description of User Interface, further divided as follows: Call sequence description (including optional inputs/outputs) Optionally callable routines Descriptions of internal Common blocks Optionally user-replaceable routines Revision History, showing date written and dates of revisions Other Routines, a list of all subordinate routines for the solver First-time users should read only the Summary of Usage and look at the\nthe Example Problem (or demonstration program), then later refer to the\nFull Description if and when more details or nonstandard options are needed. III. Installation Notes Use of supplied matrix procedures THe src/M_matrix/ directory  includes modified versions of routines from the\nLINPACK and BLAS collections that are needed by the solvers (and by two\nof the demonstration programs), for the solution of dense and banded\nlinear systems and associated basic linear algebra operations.\nThese routine are: _From LINPACK_ :  DGEFA, DGESL, DGBFA, DGBSL\n   _From the BLAS_: DAXPY, DCOPY, DDOT, DSCAL, DNRM2, IDAMAX If your computer system already has these routines, and especially if it\nhas machine-optimized versions, the copies provided in the M_module\nmodule should probably not be called by your program if high performance\nis required. The message package The second auxiliary source file directory M_da1/ includes a set of five\nroutines – XERRWD, XSETUN, XSETF, IXSAV, IUMACH – which handle error\nmessages from the solvers. These routines are slated for elimination and replacement with a \nmore intuitive interface. This set is in fact a reduced version (sufficient for the needs of\nODEPACK) of a much larger error handling package from the SLATEC Library.\nIf your computer system already has the full SLATEC error handler, the\nversion provided here can be ignored.  If the reduced version is used,\nits machine-dependent features should be checked first; see comments in\nSubroutine XERRWD. Non-standard code ODEPACK contains a few instances where the Fortran Standard is violated: (a) In various places in the LSODES and LSODIS solvers, a call to a\n   subroutine has a subscripted real array as an argument where the\n   subroutine called expects an integer array.  Calls of this form\n   occur in Subroutine DLSODES (to DSTODE), in DIPREP (to DPREP),\n   in Subroutine DLSODIS (to DSTODI), and in DIPREPI (to DPREPI).\n   Another such call occurs in the DLSODES demonstration program,\n   from the main program to Subroutine SSOUT. This is done in order\n   to use work space in an efficient manner, as the same space is\n   sometimes used for real work space and sometimes for integer work\n   space.  If your compiler does not accept this feature, one possible\n   way to get the desired result is to compile the called routines\n   and calling routines in separate jobs, and then combine the binary\n   modules in an appropriate manner. If this procedure is still not\n   acceptable under your system, it will be necessary to radically\n   alter the structure of the array RWORK within the LSODES or LSODIS\n   solver package.  (See also Note 5 below.) (b) Each ODEPACK solver treats the arguments NEQ, Y, RTOL, and ATOL\n   as arrays, even though the length may be only 1.  Moreover,\n   except for Y, the usage instructions say that these arguments\n   may be either arrays or scalars.  If your system does not allow\n   such a mismatch, then the documentation of these arguments\n   should be changed accordingly. For maximum storage economy, the LSODES and LSODIS solvers make use\nof the real to integer wordlength ratio.  This is assumed to be an\ninteger L such that if a real array R and an integer array M occupy\nthe same space in memory, R(1) having the same bit address as M(1),\nthen R(I) has the same address as M((I-1)*L+1).  This ratio L is\nusually 2 for double precision, and this is the value used in the\ndouble precision version supplied.  If this value is incorrect, it\nneeds to be changed in two places: (a) The integer LENRAT is DATA-loaded in Subroutines DLSODES and\n      DLSODIS to this ratio, shortly below the prologue. (b) The integer LRATIO is DATA-loaded in Subroutine CDRV to this\n      ratio, shortly below the prologue of that routine. (See comments in both places.)  If the ratio is not an integer, use\nthe greatest integer not exceeding the ratio. For installation of ODEPACK on a Cray computer, the source files\nsupplied include compiler directives for the CFT compiler.  These have\nthe form CDIR$ IVDEP and occur prior to certain loops that involve\nsubscript shifts (and would otherwise not be vectorized).  These\ndirectives are (or should be) treated as comments by any other compiler. On first obtaining ODEPACK, the demonstration programs should be\ncompiled and executed prior to any other use of the solvers.  In most\ncases, these exercise all of the major method options in each solver,\nand are self-checking.  (In the case of LSODPK and LSODKR, the\ndemonstration programs are not self-checking, and for LSODKR only one\nmajor method option is used.)  In any case, the output can be compared\nwith the sample output supplied, which was generated from the double\nprecision version of ODEPACK on a 32-bit computer.  When comparing your\noutput with that supplied, differences of 10-20% in the final values of\nthe various statistical counters can be attributed to differences in\nthe roundoff properties of different computer systems. If some subset of the whole ODEPACK collection is desired, without\nunneeded routines, the appropriate routines must be extracted\naccordingly.  The following lists give the routines needed for the\ndouble precision version of each solver. The DLSODE solver consists of the routines\n  DLSODE, DINTDY, DSTODE, DCFODE, DPREPJ, DSOLSY, DEWSET, DVNORM, DSRCOM,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODES solver consists of the routines\n  DLSODES, DIPREP, DPREP, JGROUP, ADJLR, CNTNZU, DINTDY, DSTODE, DCFODE,\n  DPRJS, DSOLSS, DEWSET, DVNORM, DSRCMS,\n  ODRV, MD, MDI, MDM, MDP, MDU, SRO,\n  CDRV, NROC, NSFC, NNFC, NNSC, NNTC,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODA solver consists of the routines\n  DLSODA, DINTDY, DSTODA, DCFODE, DPRJA, DSOLSY, DEWSET,\n  DMNORM, DFNORM, DBNORM, DSRCMA,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODAR solver consists of the routines\n  DLSODAR, DRCHEK, DROOTS, DINTDY, DSTODA, DCFODE, DPRJA, DSOLSY, DEWSET,\n  DMNORM, DFNORM, DBNORM, DSRCAR,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, DCOPY, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODPK solver consists of the routines\n  DLSODPK, DINTDY, DEWSET, DVNORM, DSTODPK, DCFODE, DPKSET, DSOLPK,\n  DSPIOM, DATV, DORTHOG, DHEFA, DHESL, DSPIGMR, DHEQR, DHELS,\n  DPCG, DPCGS, DATP, DUSOL, DSRCPK,\n  DAXPY, DSCAL, DCOPY, DDOT, DNRM2, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODKR solver consists of the routines\n  DLSODKR, DRCHEK, DROOTS, DLHIN, DINTDY, DEWSET, DVNORM, DSTOKA,\n  DCFODE, DSETPK, DSOLPK, DSPIOM, DATV, DORTHOG, DHEFA, DHESL, DSPIGMR,\n  DHEQR, DHELS, DPCG, DPCGS, DATP, DUSOL, DSRCKR,\n  DAXPY, DSCAL, DCOPY, DDOT, DNRM2, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODI solver consists of the routines\n  DLSODI, DAINVG, DINTDY, DSTODI, DCFODE, DPREPJI, DSOLSY, DEWSET,\n  DVNORM, DSRCOM,\n  DGEFA, DGESL, DGBFA, DGBSL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSOIBT solver consists of the routines\n  DLSOIBT, DAIGBT, DINTDY, DSTODI, DCFODE, DPJIBT, DSLSBT, DEWSET,\n  DVNORM, DSRCOM, DDECBT, DSOLBT,\n  DGEFA, DGESL, DAXPY, DSCAL, DDOT, IDAMAX,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH The DLSODIS solver consists of the routines\n  DLSODIS, DAINVGS, DIPREPI, DPREPI, JGROUP, ADJLR, CNTNZU, DINTDY,\n  DSTODI, DCFODE, DPRJIS, DSOLSS, DEWSET, DVNORM, DSRCMS,\n  ODRV, MD, MDI, MDM, MDP, MDU, SRO,\n  CDRV, NROC, NSFC, NNFC, NNSC, NNTC,\n  DUMACH, XERRWD, XSETUN, XSETF, IXSAV, IUMACH Developer Info Alan C. Hindmarsh as modified by John S. Urban, Jacob Williams","tags":"home","loc":"index.html"},{"title":"M_odepack.f90 – odepack","text":"Contents Modules M_odepack Subroutines dprep dainvgs dprepi dstodi dstode Source Code M_odepack.f90 Source Code module M_odepack ! ! dcopy can be replaced with array syntax ! SPAG removes save attribute and type from f90 function declaration ! SPAG removes external attribute ! determine what can be private and public ! many equality tests for real values; could replace ! simplify checkpoint capability, maybe TRANSFER() ! look for SAVEs that should be parameters ! remaining GOTOs ! replace dnrm2 with intrinsic norm2(3f) ? ! in production probably would make matrix routines separate so could use alternate library of BLAS matrix procedures ! same arrays passed on single call all over the place ! NOTE: DLSODKR did not initialize JROOT and neither did lsodkr.f90 example ! implicit none integer , parameter :: dp = kind ( 0.0d0 ) private !----------------------------------------------------------------------------------------------------------------------------------! ! da1 routines PUBLIC :: DEWSET PUBLIC :: DINTDY PUBLIC :: DSRCAR PUBLIC :: DSRCKR PUBLIC :: DSRCMA PUBLIC :: DSRCMS PUBLIC :: DSRCOM PUBLIC :: DSRCPK PUBLIC :: DUMACH ! COMPUTE THE UNIT ROUNDOFF OF THE MACHINE. PUBLIC :: DVNORM !-PUBLIC  :: DSTODE !-- maybe private once modularized public :: dmnorm public :: dpjibt public :: dprepj public :: dprepji public :: dsolss public :: dprja public :: dprjis public :: dprjs public :: dslsbt public :: dsolsy public :: adjlr public :: cdrv public :: cntnzu public :: daigbt public :: dainvg public :: dcfode ! Set ODE integrator coefficients. public :: diprep public :: diprepi public :: dlhin public :: drchek public :: dstoda public :: dstodpk public :: dstoka public :: jgroup public :: odrv !-- see nothing in documentation about being public private :: datp private :: datv private :: dbnorm private :: ddecbt private :: dfnorm private :: dhefa private :: dhels private :: dheqr private :: dhesl private :: dorthog private :: dpcg private :: dpcgs private :: dpkset private :: droots private :: dsetpk private :: dsolbt private :: dsolpk private :: dspigmr private :: dspiom private :: dusol private :: md private :: mdi private :: mdm private :: mdp private :: mdu private :: nnfc private :: nnsc private :: nntc private :: nroc private :: nsfc private :: sro private :: dnrm2 !-private :: dstodi !-private :: dprepi !-private :: dainvgs !-private :: dprep !----------------------------------------------------------------------------------------------------------------------------------! ! matrix routines PUBLIC :: DAXPY PUBLIC :: XSETUN PUBLIC :: XSETF PUBLIC :: DSCAL PUBLIC :: DCOPY PUBLIC :: XERRWD PUBLIC :: DGEFA PUBLIC :: DGESL ! should any matrix procedures be private? private :: idamax private :: ixsav private :: ddot private :: dgbsl private :: dgbfa ! main routines PUBLIC :: DLSODIS PUBLIC :: DLSODI PUBLIC :: DLSOIBT PUBLIC :: DLSODKR PUBLIC :: DLSODPK PUBLIC :: DLSODE PUBLIC :: DLSODA PUBLIC :: DLSODES PUBLIC :: DLSODAR !----------------------------------------------------------------------------------------------------------------------------------! ! state save and restore type dls002 real ( kind = dp ) :: stifr integer :: newt , nsfi , nslj , njev end type dls002 type ( dls002 ), public , save :: dls type dlss01 real ( kind = dp ) :: con0 , conmin , ccmxj , psmall , rbig , seth integer :: iplost , iesp , istatc , iys , iba , ibian , ibjan , ibjgp , ipian , ipjan , ipjgp , ipigp , ipr , ipc , ipic , ipisp , iprsp integer :: ipa , lenyh , lenyhm , lenwk , lreq , lrat , lrest , lwmin , moss , msbj , nslj , ngp , nlu , nnz , nsp , nzl , nzu end type dlss01 type ( dlss01 ), public , save :: dlss type dlsa01 real ( kind = dp ) :: tsw , cm1 ( 12 ), cm2 ( 5 ), pdest , pdlast , ratio , pdnorm integer :: insufr , insufi , ixpr , icount , irflag , jtyp , mused , mxordn , mxords end type dlsa01 type ( dlsa01 ), public , save :: dlsa type dlsr01 real ( kind = dp ) :: alpha , x2 , t0 , tlast , toutc integer :: lg0 , lg1 , lgx , imax , last , irfnd , itaskc , ngc , nge end type dlsr01 type ( dlsr01 ), public , save :: dlsr type dlpk01 real ( kind = dp ) :: delt , epcon , sqrtn , rsqrtn integer :: jpre , jacflg , locwp , lociwp , lsavx , kmp , maxl , mnewt , nni , nli , nps , ncfn , ncfl end type dlpk01 type ( dlpk01 ), public , save :: dlpk type dls001 real ( kind = dp ) :: conit , crate , el ( 13 ), elco ( 13 , 12 ), hold , rmax , tesco ( 3 , 12 ), ccmax , el0 , h , hmin , hmxi , hu , rc , tn , uround integer :: init , mxstep , mxhnil , nhnil , nslast , nyh , ialth , ipup , lmax , meo integer :: nqnyh , nslp , icf , ierpj , iersl , jcur , jstart , kflag , l , lyh integer :: lewt , lacor , lsavf , lwm , liwm , meth , miter , maxord , maxcor , msbp integer :: mxncf , n , nq , nst , nfe , nje , nqu end type dls001 type ( dls001 ), public , save :: dls1 private :: return_dls1_real private :: return_dls1_int private :: set_dls1_real private :: set_dls1_int contains !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! function return_dls1_real () real ( kind = dp ), allocatable :: return_dls1_real (:) return_dls1_real = [ dls1 % conit , dls1 % crate , dls1 % el (:), dls1 % elco (:,:), dls1 % hold , & & dls1 % rmax , dls1 % tesco (:,:), dls1 % ccmax , dls1 % el0 , dls1 % h , dls1 % hmin , & & dls1 % hmxi , dls1 % hu , dls1 % rc , dls1 % tn , dls1 % uround ] end function return_dls1_real function return_dls1_int () integer , allocatable :: return_dls1_int (:) return_dls1_int = [ dls1 % init , dls1 % mxstep , dls1 % mxhnil , dls1 % nhnil , dls1 % nslast , dls1 % nyh , dls1 % ialth , & & dls1 % ipup , dls1 % lmax , dls1 % meo , dls1 % nqnyh , dls1 % nslp , dls1 % icf , dls1 % ierpj , & & dls1 % iersl , dls1 % jcur , dls1 % jstart , dls1 % kflag , dls1 % l , dls1 % lyh , dls1 % lewt , & & dls1 % lacor , dls1 % lsavf , dls1 % lwm , dls1 % liwm , dls1 % meth , dls1 % miter , dls1 % maxord , & & dls1 % maxcor , dls1 % msbp , dls1 % mxncf , dls1 % n , dls1 % nq , dls1 % nst , dls1 % nfe , & & dls1 % nje , dls1 % nqu ] end function return_dls1_int subroutine set_dls1_real ( r ) real ( kind = dp ), intent ( in ) :: r ( 218 ) dls1 % conit = r ( 1 ) dls1 % crate = r ( 2 ) dls1 % el = r ( 3 : 15 ) dls1 % elco = reshape ( r ( 16 : 16 + 156 - 1 ),[ 13 , 12 ]) dls1 % hold = r ( 172 ) dls1 % rmax = r ( 173 ) dls1 % tesco = reshape ( r ( 174 : 174 + 36 - 1 ),[ 3 , 12 ]) dls1 % ccmax = r ( 210 ) dls1 % el0 = r ( 211 ) dls1 % h = r ( 212 ) dls1 % hmin = r ( 213 ) dls1 % hmxi = r ( 214 ) dls1 % hu = r ( 215 ) dls1 % rc = r ( 216 ) dls1 % tn = r ( 217 ) dls1 % uround = r ( 218 ) end subroutine set_dls1_real subroutine set_dls1_int ( int ) integer , intent ( in ) :: int ( 37 ) dls1 % init = int ( 1 ) dls1 % mxstep = int ( 2 ) dls1 % mxhnil = int ( 3 ) dls1 % nhnil = int ( 4 ) dls1 % nslast = int ( 5 ) dls1 % nyh = int ( 6 ) dls1 % ialth = int ( 7 ) dls1 % ipup = int ( 8 ) dls1 % lmax = int ( 9 ) dls1 % meo = int ( 10 ) dls1 % nqnyh = int ( 11 ) dls1 % nslp = int ( 12 ) dls1 % icf = int ( 13 ) dls1 % ierpj = int ( 14 ) dls1 % iersl = int ( 15 ) dls1 % jcur = int ( 16 ) dls1 % jstart = int ( 17 ) dls1 % kflag = int ( 18 ) dls1 % l = int ( 19 ) dls1 % lyh = int ( 20 ) dls1 % lewt = int ( 21 ) dls1 % lacor = int ( 22 ) dls1 % lsavf = int ( 23 ) dls1 % lwm = int ( 24 ) dls1 % liwm = int ( 25 ) dls1 % meth = int ( 26 ) dls1 % miter = int ( 27 ) dls1 % maxord = int ( 28 ) dls1 % maxcor = int ( 29 ) dls1 % msbp = int ( 30 ) dls1 % mxncf = int ( 31 ) dls1 % n = int ( 32 ) dls1 % nq = int ( 33 ) dls1 % nst = int ( 34 ) dls1 % nfe = int ( 35 ) dls1 % nje = int ( 36 ) dls1 % nqu = int ( 37 ) end subroutine set_dls1_int !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! ! da1 routines include \"M_da1/dumach.inc\" include \"M_da1/dcfode.inc\" include \"M_da1/dmnorm.inc\" include \"M_da1/dfnorm.inc\" include \"M_da1/dbnorm.inc\" include \"M_da1/dvnorm.inc\" include \"M_da1/sro.inc\" include \"M_da1/adjlr.inc\" include \"M_da1/dewset.inc\" include \"M_da1/jgroup.inc\" include \"M_da1/odrv.inc\" include \"M_da1/dhels.inc\" include \"M_da1/cntnzu.inc\" include \"M_da1/daigbt.inc\" include \"M_da1/ddecbt.inc\" include \"M_da1/dslsbt.inc\" include \"M_da1/dsolbt.inc\" include \"M_da1/md.inc\" include \"M_da1/mdi.inc\" include \"M_da1/mdm.inc\" include \"M_da1/mdp.inc\" include \"M_da1/mdu.inc\" include \"M_da1/nnsc.inc\" include \"M_da1/nntc.inc\" include \"M_da1/cdrv.inc\" include \"M_da1/dainvg.inc\" include \"M_da1/dheqr.inc\" include \"M_da1/dhesl.inc\" include \"M_da1/dorthog.inc\" include \"M_da1/dusol.inc\" include \"M_da1/dhefa.inc\" include \"M_da1/dpcg.inc\" include \"M_da1/dspiom.inc\" include \"M_da1/dpcgs.inc\" include \"M_da1/nsfc.inc\" include \"M_da1/dspigmr.inc\" include \"M_da1/nroc.inc\" include \"M_da1/nnfc.inc\" include \"M_da1/dintdy.inc\" include \"M_da1/droots.inc\" include \"M_da1/dsolss.inc\" include \"M_da1/dsolsy.inc\" include \"M_da1/dsrcar.inc\" include \"M_da1/dsrckr.inc\" include \"M_da1/dsrcma.inc\" include \"M_da1/dsrcms.inc\" include \"M_da1/dsrcom.inc\" include \"M_da1/dsrcpk.inc\" include \"M_da1/dlhin.inc\" include \"M_da1/diprep.inc\" include \"M_da1/diprepi.inc\" include \"M_da1/dprepji.inc\" include \"M_da1/drchek.inc\" include \"M_da1/dsetpk.inc\" include \"M_da1/datv.inc\" include \"M_da1/dprjis.inc\" include \"M_da1/dprja.inc\" include \"M_da1/dpjibt.inc\" include \"M_da1/dpkset.inc\" include \"M_da1/dsolpk.inc\" include \"M_da1/dprjs.inc\" include \"M_da1/datp.inc\" include \"M_da1/dprepj.inc\" include \"M_da1/dstoda.inc\" include \"M_da1/dstoka.inc\" include \"M_da1/dstodpk.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! ! main routines include \"M_main/dlsodis.inc\" include \"M_main/dlsodi.inc\" include \"M_main/dlsoibt.inc\" include \"M_main/dlsodkr.inc\" include \"M_main/dlsodpk.inc\" include \"M_main/dlsode.inc\" include \"M_main/dlsoda.inc\" include \"M_main/dlsodes.inc\" include \"M_main/dlsodar.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! ! matrix routines include \"M_matrix/daxpy.inc\" include \"M_matrix/xsetun.inc\" include \"M_matrix/xsetf.inc\" include \"M_matrix/dscal.inc\" include \"M_matrix/idamax.inc\" include \"M_matrix/dcopy.inc\" include \"M_matrix/ixsav.inc\" include \"M_matrix/ddot.inc\" include \"M_matrix/xerrwd.inc\" include \"M_matrix/dgefa.inc\" include \"M_matrix/dgesl.inc\" include \"M_matrix/dgbsl.inc\" include \"M_matrix/dgbfa.inc\" include \"M_matrix/dnrm2.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !-include \"M_da1/dprep.inc\" !-include \"M_da1/dainvgs.inc\" !-include \"M_da1/dprepi.inc\" !-include \"M_da1/dstodi.inc\" !-include \"M_da1_/dstode.inc\" !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! end module M_odepack !----------------------------------------------------------------------------------------------------------------------------------! !()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()! !----------------------------------------------------------------------------------------------------------------------------------! !- TYPE MISMATCH include \"M_da1/dprep.inc\" include \"M_da1/dainvgs.inc\" include \"M_da1/dprepi.inc\" include \"M_da1/dstodi.inc\" include \"M_da1/dstode.inc\"","tags":"","loc":"sourcefile/m_odepack.f90.html"},{"title":"dprep – odepack","text":"subroutine dprep(Neq, Y, Yh, Savf, Ewt, Ftem, Ia, Ja, Wk, Iwk, Ipper, f, jac) Uses M_odepack proc~~dprep~~UsesGraph proc~dprep dprep module~m_odepack M_odepack proc~dprep->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This routine performs preprocessing related to the sparse linear\nsystems that must be solved if MITER = 1 or 2.\nThe operations that are performed here are:\n * compute sparseness structure of Jacobian according to MOSS,\n * compute grouping of column indices (MITER = 2),\n * compute a new ordering of rows and columns of the matrix,\n * reorder JA corresponding to the new ordering,\n * perform a symbolic LU factorization of the matrix, and\n * set pointers for segments of the IWK/WK array.\nIn addition to variables described previously, DPREP uses the\nfollowing for communication: YH the history array.  Only the first column, containing the\ncurrent Y vector, is used.  Used only if MOSS .ne. 0. SAVF a work array of length NEQ, used only if MOSS .ne. 0. EWT array of length NEQ containing (inverted) error weights.\nUsed only if MOSS = 2 or if ISTATE = MOSS = 1. FTEM a work array of length NEQ, identical to ACOR in the driver,\nused only if MOSS = 2. WK a real work array of length LENWK, identical to WM in\nthe driver. IWK integer work array, assumed to occupy the same space as WK. LENWK the length of the work arrays WK and IWK. ISTATC a copy of the driver input argument ISTATE (= 1 on the\nfirst call, = 3 on a continuation call). IYS flag value from ODRV or CDRV. IPPER output error flag with the following values and meanings:\n     0  no error.\n    -1  insufficient storage for internal structure pointers.\n    -2  insufficient storage for JGROUP.\n    -3  insufficient storage for ODRV.\n    -4  other error flag from ODRV (should never occur).\n    -5  insufficient storage for CDRV.\n    -6  other error flag from CDRV. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Ftem (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) real(kind=dp) :: Wk (*) integer, intent(inout) :: Iwk (*) integer, intent(out) :: Ipper real :: f integer :: jac Calls proc~~dprep~~CallsGraph proc~dprep dprep none~wrapup500 wrapup500 proc~dprep->none~wrapup500 none~wrapup400 wrapup400 proc~dprep->none~wrapup400 proc~odrv odrv proc~dprep->proc~odrv proc~adjlr adjlr proc~dprep->proc~adjlr proc~jgroup jgroup proc~dprep->proc~jgroup none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~cdrv cdrv proc~dprep->proc~cdrv proc~cntnzu cntnzu none~wrapup600->proc~cntnzu iwk iwk none~wrapup600->iwk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dprep~~CalledByGraph proc~dprep dprep proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp dq dyj erwt fac i ibr ier ipil ipiu iptt1 iptt2 j jfound k kmax kmin knew ldif lenigp liwk maxg np1 nzsut yj Subroutines wrapup400 wrapup500 wrapup600 wrapup700 Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dq real(kind=dp), public :: dyj real(kind=dp), public :: erwt real(kind=dp), public :: fac integer, public :: i integer, public :: ibr integer, public :: ier integer, public :: ipil integer, public :: ipiu integer, public :: iptt1 integer, public :: iptt2 integer, public :: j integer, public :: jfound integer, public :: k integer, public :: kmax integer, public :: kmin integer, public :: knew integer, public :: ldif integer, public :: lenigp integer, public :: liwk integer, public :: maxg integer, public :: np1 integer, public :: nzsut real(kind=dp), public :: yj Subroutines subroutine wrapup400() Arguments None subroutine wrapup500() Arguments None subroutine wrapup600() Arguments None subroutine wrapup700() Arguments None","tags":"","loc":"proc/dprep.html"},{"title":"dainvgs – odepack","text":"subroutine dainvgs(Neq, T, Y, Wk, Iwk, Tem, Ydot, Ier, res, adda) Uses M_odepack proc~~dainvgs~~UsesGraph proc~dainvgs dainvgs module~m_odepack M_odepack proc~dainvgs->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This subroutine computes the initial value of the vector YDOT\nsatisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSODIS for initialization\nonly, when ISTATE = 0.  The matrix A is subjected to LU\ndecomposition in CDRV.  Then the system A*YDOT = g(t,y) is solved\nin CDRV. In addition to variables described previously, communication\nwith DAINVGS uses the following: Y array of initial values. WK real work space for matrices.  On output it contains A and\n  its LU decomposition.  The LU decomposition is not entirely\n  sparse unless the structure of the matrix A is identical to\n  the structure of the Jacobian matrix dr/dy.\n  Storage of matrix elements starts at WK(3).\n  WK(1) = SQRT(UROUND), not used here. IWK integer work space for matrix-related data, assumed to\n  be equivalenced to WK.  In addition, WK(IPRSP) and WK(IPISP)\n  are assumed to have identical locations. TEM vector of work space of length N (ACOR in DSTODI). YDOT output vector containing the initial dy/dt. YDOT(i) contains\n  dy(i)/dt when the matrix A is non-singular. IER output error flag with the following values and meanings:\n  = 0  if DAINVGS was successful.\n  = 1  if the A-matrix was found to be singular.\n  = 2  if RES returned an error flag IRES = IER = 2.\n  = 3  if RES returned an error flag IRES = IER = 3.\n  = 4  if insufficient storage for CDRV (should not occur here).\n  = 5  if other error found in CDRV (should not occur here). Arguments Type Intent Optional Attributes Name integer :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: Tem (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Ier real :: res real :: adda Calls proc~~dainvgs~~CallsGraph proc~dainvgs dainvgs proc~cdrv cdrv proc~dainvgs->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dainvgs~~CalledByGraph proc~dainvgs dainvgs proc~dlsodis dlsodis proc~dlsodis->proc~dainvgs Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp i imul j k kmax kmin Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) integer, public :: i integer, public :: imul integer, public :: j integer, public :: k integer, public :: kmax integer, public :: kmin","tags":"","loc":"proc/dainvgs.html"},{"title":"dprepi – odepack","text":"subroutine dprepi(Neq, Y, S, Yh, Savr, Ewt, Rtem, Ia, Ja, Ic, Jc, Wk, Iwk, Ipper, res, jac, adda) Uses M_odepack proc~~dprepi~~UsesGraph proc~dprepi dprepi module~m_odepack M_odepack proc~dprepi->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. This routine performs preprocessing related to the sparse linear\nsystems that must be solved.\nThe operations that are performed here are: compute sparseness structure of the iteration matrix\n     P = A - con*J  according to MOSS, compute grouping of column indices (MITER = 2), compute a new ordering of rows and columns of the matrix, reorder JA corresponding to the new ordering, perform a symbolic LU factorization of the matrix, and set pointers for segments of the IWK/WK array. In addition to variables described previously, DPREPI uses the\nfollowing for communication: YH the history array.  Only the first column, containing the\ncurrent Y vector, is used.  Used only if MOSS .ne. 0. S array of length NEQ, identical to YDOTI in the driver, used\nonly if MOSS .ne. 0. SAVR a work array of length NEQ, used only if MOSS .ne. 0. EWT array of length NEQ containing (inverted) error weights.\nUsed only if MOSS = 2 or 4 or if ISTATE = MOSS = 1. RTEM a work array of length NEQ, identical to ACOR in the driver,\nused only if MOSS = 2 or 4. WK a real work array of length LENWK, identical to WM in\nthe driver. IWK integer work array, assumed to occupy the same space as WK. LENWK the length of the work arrays WK and IWK. ISTATC a copy of the driver input argument ISTATE (= 1 on the\nfirst call, = 3 on a continuation call). IYS flag value from ODRV or CDRV. IPPER output error flag, with the following values and meanings:\n   =   0  no error.\n   =  -1  insufficient storage for internal structure pointers.\n   =  -2  insufficient storage for JGROUP.\n   =  -3  insufficient storage for ODRV.\n   =  -4  other error flag from ODRV (should never occur).\n   =  -5  insufficient storage for CDRV.\n   =  -6  other error flag from CDRV.\n   =  -7  if the RES routine returned error flag IRES = IER = 2.\n   =  -8  if the RES routine returned error flag IRES = IER = 3. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(in) :: Yh (*) real(kind=dp), intent(inout) :: Savr (*) real(kind=dp), intent(in) :: Ewt (*) real(kind=dp), intent(inout) :: Rtem (*) integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(in) :: Ic (*) integer, intent(in) :: Jc (*) real(kind=dp), intent(inout) :: Wk (*) integer, intent(inout) :: Iwk (*) integer, intent(out) :: Ipper real :: res integer :: jac real :: adda Calls proc~~dprepi~~CallsGraph proc~dprepi dprepi proc~odrv odrv proc~dprepi->proc~odrv proc~adjlr adjlr proc~dprepi->proc~adjlr proc~jgroup jgroup proc~dprepi->proc~jgroup proc~cntnzu cntnzu proc~dprepi->proc~cntnzu proc~cdrv cdrv proc~dprepi->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dprepi~~CalledByGraph proc~dprepi dprepi proc~diprepi diprepi proc~diprepi->proc~dprepi proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dp erwt fac i ibr ier ipil ipiu iptt1 iptt2 j k kamax kamin kcmax kcmin knew ldif lenigp lenwk1 liwk ljfo maxg np1 nzsut yj Variables Type Visibility Attributes Name Initial integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: erwt real(kind=dp), public :: fac integer, public :: i integer, public :: ibr integer, public :: ier integer, public :: ipil integer, public :: ipiu integer, public :: iptt1 integer, public :: iptt2 integer, public :: j integer, public :: k integer, public :: kamax integer, public :: kamin integer, public :: kcmax integer, public :: kcmin integer, public :: knew integer, public :: ldif integer, public :: lenigp integer, public :: lenwk1 integer, public :: liwk integer, public :: ljfo integer, public :: maxg integer, public :: np1 integer, public :: nzsut real(kind=dp), public :: yj","tags":"","loc":"proc/dprepi.html"},{"title":"dstodi – odepack","text":"subroutine dstodi(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savr, Acor, Wm, Iwm, res, adda, jac, pjac, slvs) Uses M_odepack proc~~dstodi~~UsesGraph proc~dstodi dstodi module~m_odepack M_odepack proc~dstodi->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. DSTODI performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations.\nNote: DSTODI is independent of the value of the iteration method\nindicator MITER, and hence is independent\nof the type of chord method used, or the Jacobian structure.\nCommunication with DSTODI is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to RES, ADDA,\nand JAC. Y an array of length .ge. N used as the Y argument in\nall calls to RES, JAC, and ADDA. NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls tO RES, G, ADDA,\nand JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where LMAX MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N. also used for\ninput of YH(*,MAXORD+2) when JSTART = -1 and MAXORD is less\nthan the current order NQ.\nSame as YDOTI in the driver. SAVR an array of working storage, of length N. ACOR a work array of length N used for the accumulated\ncorrections. On a succesful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration. PJAC name of routine to evaluate and preprocess Jacobian matrix. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in H*EL0 before PJAC is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n  . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return , JSTART is set to 1 to facilitate continuation . KFLAG a completion code with the following meanings: 0 the step was succesful . - 1 the requested error could not be achieved . - 2 corrector convergence could not be achieved . - 3 RES ordered immediate return . - 4 error condition from RES could not be avoided . - 5 fatal error in PJAC or SLVS . A return with KFLAG = -1, -2, or -4 means either ABS(H) HMIN or 10 consecutive failures occurred. On a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls. MXNCF maximum number of convergence failures allowed.\nMETH/MITER = the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Savf real(kind=dp), dimension(*) :: Savr real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res real :: adda integer :: jac real :: pjac real :: slvs Calls proc~~dstodi~~CallsGraph proc~dstodi dstodi proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dvnorm dvnorm proc~dstodi->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstodi~~CalledByGraph proc~dstodi dstodi proc~dlsodi dlsodi proc~dlsodi->proc~dstodi proc~dlsodis dlsodis proc~dlsodis->proc~dstodi proc~dlsoibt dlsoibt proc~dlsoibt->proc~dstodi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dp dsm dup el1h eljh exdn exsm exup i i1 iredo ires iret j jb kgo m ncf newq r rh rhdn rhsm rhup told Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: el1h real(kind=dp), public :: eljh real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: ires integer, public :: iret integer, public :: j integer, public :: jb integer, public :: kgo integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told","tags":"","loc":"proc/dstodi.html"},{"title":"dstode – odepack","text":"subroutine dstode(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) Uses M_odepack proc~~dstode~~UsesGraph proc~dstode dstode module~m_odepack M_odepack proc~dstode->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. NAME dstode(3f) - [M_odepack] Performs one step of an ODEPACK integration. DESCRIPTION DSTODE performs one step of the integration of an initial value\n  problem for a system of ordinary differential equations.\n  Note:  DSTODE is independent of the value of the iteration method\n  indicator MITER, when this is .ne. 0, and hence is independent\n  of the type of chord method used, or the Jacobian structure.\n  Communication with DSTODE is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\n  passed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\n  all calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\n  and their approximate scaled derivatives, where\n  LMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\n  j-th derivative of y(i), scaled by h**j/factorial(j)\n  (j = 0,1,…,NQ).  on entry for the first step, the first\n  two columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\n  for local error measurements.  Local errors in Y(i) are\n  compared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\n  Also used for input of YH(*,MAXORD+2) when JSTART = -1\n  and MAXORD .lt. the current order NQ. ACOR a work array of length N, used for the accumulated\n  corrections.  On a successful return, ACOR(i) contains\n  the estimated one-step local error in Y(i). WM,IWM real and integer work arrays associated with matrix\n  operations in chord iteration (MITER .ne. 0). PJAC name of routine to evaluate and preprocess Jacobian matrix\n  and P = I - h el0 JAC, if a chord method is being used. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in h*el0 before PJAC is called. H the step size to be attempted on the next step.\n  H is altered by the error control algorithm during the\n  problem.  H can be either positive or negative, but its\n  sign must remain constant throughout the problem. HMIN the minimum absolute value of the step size h to be used. HMXI inverse of the maximum absolute value of h to be used.\n  HMXI = 0.0 is allowed and corresponds to an infinite hmax.\n  HMIN and HMXI may be changed at any time, but will not\n  take effect until the next change of h is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\n  values and meanings:\n            0  perform the first step.\n        .gt.0  take a new step continuing from the last.\n           -1  take the next step with a new value of H, MAXORD,\n               N, METH, MITER, and/or matrix parameters.\n           -2  take the next step with a new value of H,\n               but with other inputs unchanged.\n  On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings:\n        0  the step was succesful.\n       -1  the requested error could not be achieved.\n       -2  corrector convergence could not be achieved.\n       -3  fatal error in PJAC or SLVS. A return with KFLAG = -1 or -2 means either\n  abs(H) = HMIN or 10 consecutive failures occurred.\n  On a return with KFLAG negative, the values of TN and\n  the YH array are as of the beginning of the last\n  step, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH/MITER the method flags.  See description in driver. N the number of first-order differential equations. The values of CCMAX, H, HMIN, HMXI, TN, JSTART, KFLAG, MAXORD,\n  MAXCOR, MSBP, MXNCF, METH, MITER, and N are communicated via COMMON. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs Calls proc~~dstode~~CallsGraph proc~dstode dstode proc~dcfode dcfode proc~dstode->proc~dcfode proc~dvnorm dvnorm proc~dstode->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstode~~CalledByGraph proc~dstode dstode proc~dlsode dlsode proc~dlsode->proc~dstode proc~dlsodes dlsodes proc~dlsodes->proc~dstode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables dcon ddn del delp dp dsm dup exdn exsm exup i i1 iredo iret j jb m ncf newq r rh rhdn rhsm rhup told Variables Type Visibility Attributes Name Initial real(kind=dp), public :: dcon real(kind=dp), public :: ddn real(kind=dp), public :: del real(kind=dp), public :: delp integer, public, parameter :: dp = kind(0.0d0) real(kind=dp), public :: dsm real(kind=dp), public :: dup real(kind=dp), public :: exdn real(kind=dp), public :: exsm real(kind=dp), public :: exup integer, public :: i integer, public :: i1 integer, public :: iredo integer, public :: iret integer, public :: j integer, public :: jb integer, public :: m integer, public :: ncf integer, public :: newq real(kind=dp), public :: r real(kind=dp), public :: rh real(kind=dp), public :: rhdn real(kind=dp), public :: rhsm real(kind=dp), public :: rhup real(kind=dp), public :: told","tags":"","loc":"proc/dstode.html"},{"title":"dmnorm – odepack","text":"public pure function dmnorm(n, v, w) This function routine computes the weighted max-norm\nof the vector of length N contained in the array V, with weights\ncontained in the array w of length N:\n  DMNORM = MAX(i=1,…,N) ABS(V(i))*W(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dmnorm~~CalledByGraph proc~dmnorm dmnorm proc~dlsodar dlsodar proc~dlsodar->proc~dmnorm proc~dstoda dstoda proc~dlsodar->proc~dstoda proc~dprja dprja proc~dprja->proc~dmnorm proc~dstoda->proc~dmnorm proc~dlsoda dlsoda proc~dlsoda->proc~dmnorm proc~dlsoda->proc~dstoda Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dmnorm.html"},{"title":"dumach – odepack","text":"public function dumach() NAME dumach(3f) - [M_odepack] Compute the unit roundoff of the machine. SYNOPSIS a = dumach()\n    double precision :: dumach\n    double precision :: a DESCRIPTION The unit roundoff is defined as the smallest positive machine\n   number u such that  1.0 + u .ne. 1.0.  This is computed by DUMACH\n   in a machine-independent manner. RETURNS A the unit roundoff of the machine. Arguments None Return Value real(kind=dp) Called by proc~~dumach~~CalledByGraph proc~dumach dumach proc~dlsode dlsode proc~dlsode->proc~dumach proc~dlsodes dlsodes proc~dlsodes->proc~dumach proc~dlsoibt dlsoibt proc~dlsoibt->proc~dumach proc~dlsodar dlsodar proc~dlsodar->proc~dumach proc~dlsodkr dlsodkr proc~dlsodkr->proc~dumach proc~dlsodi dlsodi proc~dlsodi->proc~dumach proc~dlsodpk dlsodpk proc~dlsodpk->proc~dumach proc~dlsodis dlsodis proc~dlsodis->proc~dumach proc~dlsoda dlsoda proc~dlsoda->proc~dumach Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dumach.html"},{"title":"dvnorm – odepack","text":"public pure function dvnorm(n, v, w) NAME dvnorm(3f) - [M_odepack] Weighted root-mean-square vector norm. DESCRIPTION This function routine computes the weighted root-mean-square norm\n  of the vector of length N contained in the array V, with weights\n  contained in the array W of length N: DVNORM = SQRT( (1/N) * SUM( V(i)*W(i) )**2 ) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Called by proc~~dvnorm~~CalledByGraph proc~dvnorm dvnorm proc~dstodpk dstodpk proc~dstodpk->proc~dvnorm proc~dstoka dstoka proc~dstoka->proc~dvnorm proc~dstodi dstodi proc~dstodi->proc~dvnorm proc~dlsode dlsode proc~dlsode->proc~dvnorm proc~dstode dstode proc~dlsode->proc~dstode proc~dlsodes dlsodes proc~dlsodes->proc~dvnorm proc~dlsodes->proc~dstode proc~dlsoibt dlsoibt proc~dlsoibt->proc~dvnorm proc~dlsoibt->proc~dstodi proc~dprjs dprjs proc~dprjs->proc~dvnorm proc~dlsodkr dlsodkr proc~dlsodkr->proc~dvnorm proc~dlsodkr->proc~dstoka proc~dlhin dlhin proc~dlsodkr->proc~dlhin proc~dlsodi dlsodi proc~dlsodi->proc~dvnorm proc~dlsodi->proc~dstodi proc~dprepj dprepj proc~dprepj->proc~dvnorm proc~dlhin->proc~dvnorm proc~dlsodpk dlsodpk proc~dlsodpk->proc~dvnorm proc~dlsodpk->proc~dstodpk proc~dstode->proc~dvnorm proc~dlsodis dlsodis proc~dlsodis->proc~dvnorm proc~dlsodis->proc~dstodi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dvnorm.html"},{"title":"adjlr – odepack","text":"public subroutine adjlr(N, Isp, Ldif) This routine computes an adjustment, LDIF, to the required\ninteger storage space in IWK (sparse matrix work space). It is called only if the word length ratio is LRAT = 1.\nThis is to account for the possibility that the symbolic LU phase\nmay require more storage than the numerical LU and solution phases. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Isp (*) integer, intent(out) :: Ldif Called by proc~~adjlr~~CalledByGraph proc~adjlr adjlr proc~dprepi dprepi proc~dprepi->proc~adjlr proc~dprep dprep proc~dprep->proc~adjlr proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/adjlr.html"},{"title":"cdrv – odepack","text":"public subroutine cdrv(N, R, C, Ic, Ia, Ja, A, B, Z, Nsp, Isp, Rsp, Esp, Path, Flag) NAME cdrv(3f) - [M_odepack ] DESCRIPTION driver for subroutines for solving sparse nonsymmetric systems of\n   linear equations (compressed pointer storage) PARAMETERS class abbreviations are -- n - integer variable f - real variable v - supplies a value to the driver r - returns a result from the driver i - used internally by the driver a - array class - parameter the nonzero entries of the coefficient matrix m are stored\n   row-by-row in the array a.  to identify the individual nonzero\n   entries in each row, we need to know in which column each entry\n   lies.  the column indices which correspond to the nonzero entries\n   of m are stored in the array ja.  i.e., if  a(k) = m(i,j),  then\n   ja(k) = j.  in addition, we need to know where each row starts and\n   how long it is.  the index positions in ja and a where the rows of\n   m begin are stored in the array ia.  i.e., if m(i,j) is the first\n   nonzero entry (stored) in the i-th row and a(k) = m(i,j),  then\n   ia(i) = k.  moreover, the index in ja and a of the first location\n   following the last element in the last row is stored in ia(n+1).\n   thus, the number of entries in the i-th row is given by\n   ia(i+1) - ia(i),  the nonzero entries of the i-th row are stored\n   consecutively in a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), and the corresponding column indices are stored consecutively in ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). for example, the 5 by 5 matrix ( 1. 0. 2. 0. 0.)\n                ( 0. 3. 0. 0. 0.)\n            m = ( 0. 4. 5. 6. 0.)\n                ( 0. 0. 0. 7. 0.)\n                ( 0. 0. 0. 8. 9.) would be stored as - 1  2  3  4  5  6  7  8  9\n            ---+--------------------------\n            ia - 1  3  4  7  8 10\n            ja - 1  3  2  2  3  4  4  4  5\n             a - 1. 2. 3. 4. 5. 6. 7. 8. 9.         . nv    - n     - number of variables/equations.\n     fva   - a     - nonzero entries of the coefficient matrix m, stored\n           -           by rows.\n           -           size = number of nonzero entries in m.\n     nva   - ia    - pointers to delimit the rows in a.\n           -           size = n+1.\n     nva   - ja    - column numbers corresponding to the elements of a.\n           -           size = size of a.\n     fva   - b     - right-hand side b.  b and z can the same array.\n           -           size = n.\n     fra   - z     - solution x.  b and z can be the same array.\n           -           size = n. the rows and columns of the original matrix m can be\n   reordered (e.g., to reduce fillin or ensure numerical stability)\n   before calling the driver.  if no reordering is done, then set\n   r(i) = c(i) = ic(i) = i  for i=1,…,n.  the solution z is returned\n   in the original order. if the columns have been reordered (i.e.,  c(i).ne.i  for some\n   i), then the driver will call a subroutine (nroc) which rearranges\n   each row of ja and a, leaving the rows in the original order, but\n   placing the elements of each row in increasing order with respect\n   to the new ordering.  if  path.ne.1,  then nroc is assumed to have\n   been called already. nva   - r     - ordering of the rows of m.\n       -           size = n.\n nva   - c     - ordering of the columns of m.\n       -           size = n.\n nva   - ic    - inverse of the ordering of the columns of m.  i.e.,\n       -           ic(c(i)) = i  for i=1,...,n.\n       -           size = n. the solution of the system of linear equations is divided into\n   three stages – nsfc -- the matrix m is processed symbolically to determine where\n               fillin will occur during the numeric factorization.\n      nnfc -- the matrix m is factored numerically into the product ldu\n               of a unit lower triangular matrix l, a diagonal matrix\n               d, and a unit upper triangular matrix u, and the system\n               mx = b  is solved.\n      nnsc -- the linear system  mx = b  is solved using the ldu\n  or           factorization from nnfc.\n      nntc -- the transposed linear system  mt x = b  is solved using\n               the ldu factorization from nnf. for several systems whose coefficient matrices have the same\n   nonzero structure, nsfc need be done only once (for the first\n   system).  then nnfc is done once for each additional system.  for\n   several systems with the same coefficient matrix, nsfc and nnfc\n   need be done only once (for the first system).  then nnsc or nntc\n   is done once for each additional right-hand side. nv    - path  - path specification.  values and their meanings are --\n       -           1  perform nroc, nsfc, and nnfc.\n       -           2  perform nnfc only  (nsfc is assumed to have been\n       -               done in a manner compatible with the storage\n       -               allocation used in the driver).\n       -           3  perform nnsc only  (nsfc and nnfc are assumed to\n       -               have been done in a manner compatible with the\n       -               storage allocation used in the driver).\n       -           4  perform nntc only  (nsfc and nnfc are assumed to\n       -               have been done in a manner compatible with the\n       -               storage allocation used in the driver).\n       -           5  perform nroc and nsfc. various errors are detected by the driver and the individual\n   subroutines. nr    - flag  - error flag.  values and their meanings are --\n       -             0     no errors detected\n       -             n+k   null row in a  --  row = k\n       -            2n+k   duplicate entry in a  --  row = k\n       -            3n+k   insufficient storage in nsfc  --  row = k\n       -            4n+1   insufficient storage in nnfc\n       -            5n+k   null pivot  --  row = k\n       -            6n+k   insufficient storage in nsfc  --  row = k\n       -            7n+1   insufficient storage in nnfc\n       -            8n+k   zero pivot  --  row = k\n       -           10n+1   insufficient storage in cdrv\n       -           11n+1   illegal path specification working storage is needed for the factored form of the matrix\n   m plus various temporary vectors.  the arrays isp and rsp should be\n   equivalenced.  integer storage is allocated from the beginning of\n   isp and real storage from the end of rsp. nv    - nsp   - declared dimension of rsp.  nsp generally must\n                        be larger than  8n+2 + 2k  (where  k = (number of\n                        nonzero entries in m)).\n        nvira - isp   - integer working storage divided up into various arrays\n                        needed by the subroutines.  isp and rsp should be\n                        equivalenced.\n                             size = lratio*nsp.\n        fvira - rsp   - real working storage divided up into various arrays\n                        needed by the subroutines.  isp and rsp should be\n                        equivalenced.\n                             size = nsp.\n        nr    - esp   - if sufficient storage was available to perform the\n                        symbolic factorization (nsfc), then esp is set to\n                        the amount of excess storage provided (negative if\n                        insufficient storage was available to perform the\n                        numeric factorization (nnfc)). Arguments Type Intent Optional Attributes Name integer :: N integer :: R (*) integer :: C (*) integer :: Ic (*) integer :: Ia (*) integer :: Ja (*) real(kind=dp) :: A (*) real(kind=dp) :: B (*) real(kind=dp) :: Z (*) integer, intent(in) :: Nsp integer, intent(inout) :: Isp (*) real(kind=dp) :: Rsp (*) integer, intent(out) :: Esp integer, intent(in) :: Path integer, intent(inout) :: Flag Called by proc~~cdrv~~CalledByGraph proc~cdrv cdrv proc~dprjis dprjis proc~dprjis->proc~cdrv proc~dprep dprep proc~dprep->proc~cdrv proc~dainvgs dainvgs proc~dainvgs->proc~cdrv proc~dprepi dprepi proc~dprepi->proc~cdrv proc~dsolss dsolss proc~dsolss->proc~cdrv proc~diprepi diprepi proc~diprepi->proc~dprepi proc~dlsodis dlsodis proc~dlsodis->proc~dainvgs proc~dlsodis->proc~diprepi proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/cdrv.html"},{"title":"cntnzu – odepack","text":"public subroutine cntnzu(N, Ia, Ja, Nzsut) This routine counts the number of nonzero elements in the strict\nupper triangle of the matrix M + M(transpose), where the sparsity\nstructure of M is given by pointer arrays IA and JA.\nThis is needed to compute the storage requirements for the\nsparse matrix reordering operation in ODRV. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(out) :: Nzsut Called by proc~~cntnzu~~CalledByGraph proc~cntnzu cntnzu proc~dprepi dprepi proc~dprepi->proc~cntnzu none~wrapup600 wrapup600 none~wrapup600->proc~cntnzu proc~dprep dprep proc~dprep->none~wrapup600 proc~diprepi diprepi proc~diprepi->proc~dprepi proc~dlsodis dlsodis proc~dlsodis->proc~diprepi proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/cntnzu.html"},{"title":"daigbt – odepack","text":"public subroutine daigbt(res, adda, Neq, T, Y, Ydot, Mb, Nb, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSOIBT for\ninitialization only, when ISTATE = 0 .\nDAIGBT returns an error flag IER: IER = 0 means DAIGBT was successful . IER . ge . 2 means RES returned an error flag IRES = IER . IER . lt . 0 means the A matrix was found to have a singular diagonal block ( hence YDOT could not be solved for ) . Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: Neq (*) real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Mb integer, intent(inout) :: Nb real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier Called by proc~~daigbt~~CalledByGraph proc~daigbt daigbt proc~dlsoibt dlsoibt proc~dlsoibt->proc~daigbt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/daigbt.html"},{"title":"dainvg – odepack","text":"public subroutine dainvg(res, adda, Neq, T, Y, Ydot, Miter, Ml, Mu, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying A * YDOT = g(t,y) when A is nonsingular.  It is called by DLSODI for\ninitialization only, when ISTATE = 0 .\nDAINVG returns an error flag IER: IER  =  0  means DAINVG was successful.\nIER .ge. 2 means RES returned an error flag IRES = IER.\nIER .lt. 0 means the a-matrix was found to be singular. Arguments Type Intent Optional Attributes Name real :: res real :: adda integer, intent(inout) :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Miter integer, intent(inout) :: Ml integer, intent(inout) :: Mu real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier Calls proc~~dainvg~~CallsGraph proc~dainvg dainvg proc~dgesl dgesl proc~dainvg->proc~dgesl proc~dgefa dgefa proc~dainvg->proc~dgefa proc~daxpy daxpy proc~dgesl->proc~daxpy proc~dgefa->proc~daxpy proc~dscal dscal proc~dgefa->proc~dscal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dainvg~~CalledByGraph proc~dainvg dainvg proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dainvg.html"},{"title":"daxpy – odepack","text":"public subroutine daxpy(N, Da, Dx, Incx, Dy, Incy) NAME daxpy(3f) - [M_odepack::matrix] Compute a constant times a vector plus a vector. SYNOPSIS subroutine daxpy(N,Da,Dx,Incx,Dy,Incy)\ninteger,intent(in)          :: N\nreal(kind=dp),intent(in)    :: Da\nreal(kind=dp),intent(in)    :: Dx(*)\ninteger,intent(in)          :: Incx\nreal(kind=dp),intent(inout) :: Dy(*)\ninteger,intent(in)          :: Incy DESCRIPTION daxpy(3f) computes a constant times a vector plus a vector.\n   It uses unrolled loops for increments equal to one. Overwrite double precision DY with double precision DA DX + DY.\n   For I = 0 to N-1, replace  DY(LY+I INCY) with \n   DA DX(LX+I INCX) + DY(LY+I*INCY), where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. INPUT OPTIONS N number of elements in input vector(s) DA double precision scalar multiplier DX double precision vector with N elements INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY RETURNS DY double precision result (unchanged if N .LE. 0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(inout) :: Dy (*) integer, intent(in) :: Incy Called by proc~~daxpy~~CalledByGraph proc~daxpy daxpy proc~dgesl dgesl proc~dgesl->proc~daxpy proc~dgefa dgefa proc~dgefa->proc~daxpy proc~dsolsy dsolsy proc~dsolsy->proc~dgesl proc~dainvg dainvg proc~dainvg->proc~dgesl proc~dainvg->proc~dgefa proc~dprepj dprepj proc~dprepj->proc~dgefa proc~dprepji dprepji proc~dprepji->proc~dgefa proc~dprja dprja proc~dprja->proc~dgefa proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/daxpy.html"},{"title":"dcfode – odepack","text":"public subroutine dcfode(meth, elco, tesco) NAME dcfode(3f) - [M_odepack] Set ODE integrator coefficients. SYNOPSIS subroutine dcfode (meth, elco, tesco)\n     integer          :: meth\n     double precision :: elco(13,12)\n     double precision :: tesco(3,12) DESCRIPTION DCFODE is called by the integrator routine to set coefficients\n   needed there. DCFODE is called once at the beginning of the problem,\n   and is not called again unless and until METH is changed. OPTIONS METH The coefficients for the current method, as\n   given by the value of METH, are set for all orders and saved.\n   The maximum order assumed here is 12 if METH = 1 and 5 if METH = 2.\n   (A smaller value of the maximum order is also allowed.) ELCO The ELCO array contains the basic method coefficients.\n   The coefficients el(i), 1 .le. i .le. nq+1, for the method of\n   order nq are stored in ELCO(i,nq).  They are given by a genetrating\n   polynomial, i.e.,\n       l(x) = el(1) + el(2) x + … + el(nq+1) x nq.\n   For the implicit Adams methods, l(x) is given by\n       dl/dx = (x+1) (x+2) … (x+nq-1)/factorial(nq-1),    l(-1) = 0.\n   For the BDF methods, l(x) is given by\n       l(x) = (x+1) (x+2) … (x+nq)/K,\n   where \n       K = factorial(nq)*(1 + 1/2 + … + 1/nq). TESCO The TESCO array contains test constants used for the\n   local error test and the selection of step size and/or order.\n   At order nq, TESCO(k,nq) is used for the selection of step\n   size at order nq - 1 if k = 1, at order nq if k = 2, and at order\n   nq + 1 if k = 3. Arguments Type Intent Optional Attributes Name integer, intent(in) :: meth real(kind=dp), intent(inout) :: elco (13,12) real(kind=dp), intent(out) :: tesco (3,12) Called by proc~~dcfode~~CalledByGraph proc~dcfode dcfode proc~dstodpk dstodpk proc~dstodpk->proc~dcfode proc~dstoda dstoda proc~dstoda->proc~dcfode proc~dstoka dstoka proc~dstoka->proc~dcfode proc~dstodi dstodi proc~dstodi->proc~dcfode proc~dstode dstode proc~dstode->proc~dcfode proc~dlsode dlsode proc~dlsode->proc~dstode proc~dlsodes dlsodes proc~dlsodes->proc~dstode proc~dlsoibt dlsoibt proc~dlsoibt->proc~dstodi proc~dlsodar dlsodar proc~dlsodar->proc~dstoda proc~dlsodkr dlsodkr proc~dlsodkr->proc~dstoka proc~dlsodi dlsodi proc~dlsodi->proc~dstodi proc~dlsodpk dlsodpk proc~dlsodpk->proc~dstodpk proc~dlsodis dlsodis proc~dlsodis->proc~dstodi proc~dlsoda dlsoda proc~dlsoda->proc~dstoda Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dcfode.html"},{"title":"dcopy – odepack","text":"public subroutine dcopy(N, Dx, Incx, Dy, Incy) NAME dcopy(3f) - [M_odepack::matrix] copy a vector SYNOPSIS subroutine dcopy(N,Dx,Incx,Dy,Incy)\n\n    integer,intent(in)        :: N\n    real(kind=dp),intent(in)  :: Dx(*)\n    integer,intent(in)        :: Incx\n    real(kind=dp),intent(out) :: Dy(*)\n    integer,intent(in)        :: Incy DESCRIPTION Copy double precision DX to double precision DY.\n   For I = 0 to N-1, copy DX(LX+I INCX) to DY(LY+I INCY),\n   where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is\n   defined in a similar way using INCY. INPUT OPTIONS N number of elements in input vector(s) DX double precision vector with N elements INCX storage spacing between elements of DX DY double precision vector with N elements INCY storage spacing between elements of DY RETURNS DY copy of vector DX (unchanged if N .LE. 0) REFERENCES B L A S  Subprogram C . L . Lawson , R . J . Hanson , D . R . Kincaid and F . T . Krogh , Basic linear algebra subprograms for Fortran usage , Algorithm No . 539 , Transactions on Mathematical Software 5 , 3 ( September 1979 ) , pp . 308 - 323 . Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(out) :: Dy (*) integer, intent(in) :: Incy Called by proc~~dcopy~~CalledByGraph proc~dcopy dcopy proc~dlhin dlhin proc~dlhin->proc~dcopy proc~dlsodkr dlsodkr proc~dlsodkr->proc~dcopy proc~dlsodkr->proc~dlhin proc~drchek drchek proc~dlsodkr->proc~drchek proc~dlsodar dlsodar proc~dlsodar->proc~dcopy proc~dlsodar->proc~drchek proc~drchek->proc~dcopy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dcopy.html"},{"title":"dewset – odepack","text":"public subroutine dewset(N, Itol, Rtol, Atol, Ycur, Ewt) NAME dewset(3f) - [M_odepack] Set error weight vector. SYNOPSIS subroutine dewset(N,Itol,Rtol,Atol,Ycur,Ewt)\n    integer,intent(in)        :: N\n    integer,intent(in)        :: Itol\n    real(kind=dp),intent(in)  :: Rtol(*)\n    real(kind=dp),intent(in)  :: Atol(*)\n    real(kind=dp),intent(in)  :: Ycur(N)\n    real(kind=dp),intent(out) :: Ewt(N) DESCRIPTION This subroutine sets the error weight vector EWT according to EWT(i) = RTOL(i)*ABS(YCUR(i)) + ATOL(i),  i = 1,...,N, with the subscript on RTOL and/or ATOL possibly replaced by 1 above,\n  depending on the value of ITOL. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Itol real(kind=dp), intent(in) :: Rtol (*) real(kind=dp), intent(in) :: Atol (*) real(kind=dp), intent(in) :: Ycur (N) real(kind=dp), intent(out) :: Ewt (N) Called by proc~~dewset~~CalledByGraph proc~dewset dewset proc~dlsode dlsode proc~dlsode->proc~dewset proc~dlsodes dlsodes proc~dlsodes->proc~dewset proc~dlsoibt dlsoibt proc~dlsoibt->proc~dewset proc~dlsodar dlsodar proc~dlsodar->proc~dewset proc~dlsodkr dlsodkr proc~dlsodkr->proc~dewset proc~dlsodi dlsodi proc~dlsodi->proc~dewset proc~dlsodpk dlsodpk proc~dlsodpk->proc~dewset proc~dlsodis dlsodis proc~dlsodis->proc~dewset proc~dlsoda dlsoda proc~dlsoda->proc~dewset Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dewset.html"},{"title":"dgefa – odepack","text":"public subroutine dgefa(A, Lda, N, Ipvt, Info) dgefa(3f) - [M_odepack::matrix] Factor a matrix using Gaussian elimination. subroutine dgefa(A,Lda,N,Ipvt,Info)\n  real(kind=dp),intent(inout) :: A(Lda,*)\n  integer,intent(in)          :: Lda\n  integer,intent(in)          :: N\n  integer,intent(out)         :: Ipvt(*)\n  integer,intent(out)         :: Info DESCRIPTION DGEFA factors a double precision matrix by Gaussian elimination. DGEFA is usually called by DGECO, but it can be called\n   directly with a saving in time if  RCOND  is not needed.\n   (Time for DGECO) = (1 + 9/N)*(Time for DGEFA) . OPTIONS A the matrix to be factored. LDA the leading dimension of the array  A . N the order of the matrix  A . RETURNS A an upper triangular matrix and the multipliers\n   which were used to obtain it.\n   The factorization can be written  A = L*U  where L is a product of permutation and unit lower\n   triangular matrices and  U  is upper triangular. IPVT an integer vector of pivot indices. INFO = 0 normal value . = K if U ( K , K ) . EQ . 0 . 0 . This is not an error condition for this subroutine , but it does indicate that DGESL or DGEDI will divide by zero if called . Use RCOND in DGECO for a reliable indication of singularity . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(out) :: Ipvt (*) integer, intent(out) :: Info Calls proc~~dgefa~~CallsGraph proc~dgefa dgefa proc~daxpy daxpy proc~dgefa->proc~daxpy proc~dscal dscal proc~dgefa->proc~dscal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgefa~~CalledByGraph proc~dgefa dgefa proc~dprepj dprepj proc~dprepj->proc~dgefa proc~dprja dprja proc~dprja->proc~dgefa proc~dainvg dainvg proc~dainvg->proc~dgefa proc~dprepji dprepji proc~dprepji->proc~dgefa proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dgefa.html"},{"title":"dgesl – odepack","text":"public subroutine dgesl(A, Lda, N, Ipvt, B, Job) NAME dgesl(3f) - [M_odepack::matrix] Solve the real system A X=B or TRANS(A) X=B\n               using the factors computed by DGECO or DGEFA. SYNOPSIS subroutine dgesl(A,Lda,N,Ipvt,B,Job)\nreal(kind=dp)               :: A(Lda,*)\ninteger,intent(in)          :: Lda\ninteger,intent(in)          :: N\ninteger,intent(in)          :: Ipvt(*)\nreal(kind=dp),intent(inout) :: B(*)\ninteger,intent(in)          :: Job DESCRIPTION DGESL solves the double precision system A * X = B  or  TRANS(A) * X = B using the factors computed by DGECO or DGEFA. Error Condition A division by zero will occur if the input factor contains a zero on the diagonal . Technically this indicates singularity but it is often caused by improper arguments or improper setting of LDA . It will not occur if the subroutines are called correctly and if DGECO has set RCOND . GT . 0 . 0 or DGEFA has set INFO . EQ . 0 . To compute  INVERSE(A) * C  where  C  is a matrix\n   with  P  columns CALL DGECO ( A , LDA , N , IPVT , RCOND , Z ) IF ( RCOND is too small ) GO TO ... DO J = 1 , P CALL DGESL ( A , LDA , N , IPVT , C ( 1 , J ), 0 ) ENDDO ON ENTRY A the output from DGECO or DGEFA. LDA the leading dimension of the array  A . N the order of the matrix  A . IPVT the pivot vector from DGECO or DGEFA. B the right hand side vector. JOB :\n        = 0         to solve  A X = B ,\n        = nonzero   to solve  TRANS(A) X = B  where\n                    TRANS(A)  is the transpose. ON RETURN B the solution vector  X . REFERENCES J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W.\n   Stewart, LINPACK Users’ Guide, SIAM, 1979. Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) integer, intent(in) :: Job Calls proc~~dgesl~~CallsGraph proc~dgesl dgesl proc~daxpy daxpy proc~dgesl->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dgesl~~CalledByGraph proc~dgesl dgesl proc~dainvg dainvg proc~dainvg->proc~dgesl proc~dsolsy dsolsy proc~dsolsy->proc~dgesl proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dgesl.html"},{"title":"dintdy – odepack","text":"public subroutine dintdy(T, K, Yh, Nyh, Dky, Iflag) DESCRIPTION DINTDY computes interpolated values of the K-th derivative of the\n  dependent variable vector y, and stores it in DKY.  This routine\n  is called within the package with K = 0 and T = TOUT, but may\n  also be called by the user for any K up to the current order.\n  (See detailed instructions in the usage documentation.) The computed values in DKY are gotten by interpolation using the\n  Nordsieck history array YH.  This array corresponds uniquely to a\n  vector-valued polynomial of degree NQCUR or less, and DKY is set\n  to the K-th derivative of this polynomial at T.\n  The formula for DKY is:\n               q\n   DKY(i)  =  sum  c(j,K) * (T - tn) (j-K) * h (-j) * YH(i,j+1)\n              j=K\n  where  c(j,K) = j (j-1) …*(j-K+1), q = NQCUR, tn = TCUR, h = HCUR.\n  The quantities  nq = NQCUR, l = nq+1, N = NEQ, tn, and h are\n  communicated by COMMON.  The above sum is done in reverse order.\n  IFLAG is returned negative if either K or T is out of bounds. Arguments Type Intent Optional Attributes Name real(kind=dp) :: T integer :: K real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(inout) :: Dky (*) integer, intent(out) :: Iflag Calls proc~~dintdy~~CallsGraph proc~dintdy dintdy proc~xerrwd xerrwd proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dintdy~~CalledByGraph proc~dintdy dintdy proc~drchek drchek proc~drchek->proc~dintdy proc~dlsode dlsode proc~dlsode->proc~dintdy proc~dlsodes dlsodes proc~dlsodes->proc~dintdy proc~dlsoibt dlsoibt proc~dlsoibt->proc~dintdy proc~dlsodar dlsodar proc~dlsodar->proc~dintdy proc~dlsodar->proc~drchek proc~dlsodkr dlsodkr proc~dlsodkr->proc~dintdy proc~dlsodkr->proc~drchek proc~dlsodi dlsodi proc~dlsodi->proc~dintdy proc~dlsodpk dlsodpk proc~dlsodpk->proc~dintdy proc~dlsodis dlsodis proc~dlsodis->proc~dintdy proc~dlsoda dlsoda proc~dlsoda->proc~dintdy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dintdy.html"},{"title":"diprep – odepack","text":"public subroutine diprep(Neq, Y, Rwork, Ia, Ja, Ipflag, f, jac) This routine serves as an interface between the driver and\nSubroutine DPREP.  It is called only if MITER is 1 or 2.\nTasks performed here are:\n * call DPREP,\n * reset the required WM segment length LENWK,\n * move YH back to its final location (following WM in RWORK),\n * reset pointers for YH, SAVF, EWT, and ACOR, and\n * move EWT to its new position if ISTATE = 1. IPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREP error flag IPPER\nif there was trouble in Subroutine DPREP. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer, intent(inout) :: Ipflag real :: f integer :: jac Calls proc~~diprep~~CallsGraph proc~diprep diprep proc~dprep dprep proc~diprep->proc~dprep none~wrapup500 wrapup500 proc~dprep->none~wrapup500 none~wrapup400 wrapup400 proc~dprep->none~wrapup400 proc~odrv odrv proc~dprep->proc~odrv proc~adjlr adjlr proc~dprep->proc~adjlr proc~jgroup jgroup proc~dprep->proc~jgroup none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~cdrv cdrv proc~dprep->proc~cdrv proc~cntnzu cntnzu none~wrapup600->proc~cntnzu iwk iwk none~wrapup600->iwk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~diprep~~CalledByGraph proc~diprep diprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/diprep.html"},{"title":"diprepi – odepack","text":"public subroutine diprepi(Neq, Y, S, Rwork, Ia, Ja, Ic, Jc, Ipflag, res, jac, adda) This routine serves as an interface between the driver and\nSubroutine DPREPI.  Tasks performed here are:\n * call DPREPI,\n * reset the required WM segment length LENWK,\n * move YH back to its final location (following WM in RWORK),\n * reset pointers for YH, SAVR, EWT, and ACOR, and\n * move EWT to its new position if ISTATE = 0 or 1.\nIPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREPI error flag IPPER\nif there was trouble in Subroutine DPREPI. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer :: Ic (*) integer :: Jc (*) integer, intent(inout) :: Ipflag real :: res integer :: jac real :: adda Calls proc~~diprepi~~CallsGraph proc~diprepi diprepi proc~dprepi dprepi proc~diprepi->proc~dprepi proc~odrv odrv proc~dprepi->proc~odrv proc~adjlr adjlr proc~dprepi->proc~adjlr proc~jgroup jgroup proc~dprepi->proc~jgroup proc~cntnzu cntnzu proc~dprepi->proc~cntnzu proc~cdrv cdrv proc~dprepi->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~diprepi~~CalledByGraph proc~diprepi diprepi proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/diprepi.html"},{"title":"dlhin – odepack","text":"public subroutine dlhin(Neq, N, T0, Y0, Ydot, f, Tout, Uround, Ewt, Itol, Atol, Y, Temp, H0, Niter, Ier) This routine computes the step size, H0, to be attempted on the\n first step, when the user has not supplied a value for this. First we check that TOUT - T0 differs significantly from zero.  Then\n an iteration is done to approximate the initial second derivative\n and this is used to define H from WRMS-norm(H**2 * yddot / 2) = 1.\n A bias factor of 1/2 is applied to the resulting h.\n The sign of H0 is inferred from the initial values of TOUT and T0. Communication with DLHIN is done with the following variables: Call DLHIN(NEQ,N,T0,Y0,YDOT,F,TOUT,UROUND,EWT,ITOL,ATOL,Y,TEMP &\n & H0,NITER,IER Common block variables accessed – None Subroutines called by DLHIN: F, DCOPY\n Function routines called by DLHIN: DVNORM INPUT OPTIONS NEQ NEQ array of solver, passed to F. N size of ODE system, input. T0 initial value of independent variable, input. Y0 vector of initial conditions, input. YDOT vector of initial first derivatives, input. F name of subroutine for right-hand side f(t,y), input. TOUT first output value of independent variable UROUND machine unit roundoff EWT, ITOL, ATOL error weights and tolerance parameters\n as described in the driver routine, input. Y, TEMP work arrays of length N. RETURNS H0 step size to be attempted, output. NITER number of iterations (and of f evaluations) to compute H0,\n output. IER the error flag, returned with the value\n   IER = 0  if no trouble occurred, or\n   IER = -1 if TOUT and t0 are considered too close to proceed. Arguments Type Intent Optional Attributes Name integer :: Neq (*) integer :: N real(kind=dp), intent(in) :: T0 real(kind=dp) :: Y0 (*) real(kind=dp), intent(in) :: Ydot (*) real :: f real(kind=dp), intent(in) :: Tout real(kind=dp), intent(in) :: Uround real(kind=dp) :: Ewt (*) integer, intent(in) :: Itol real(kind=dp), intent(in) :: Atol (*) real(kind=dp) :: Y (*) real(kind=dp) :: Temp (*) real(kind=dp), intent(inout) :: H0 integer, intent(out) :: Niter integer, intent(out) :: Ier Calls proc~~dlhin~~CallsGraph proc~dlhin dlhin proc~dcopy dcopy proc~dlhin->proc~dcopy proc~dvnorm dvnorm proc~dlhin->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dlhin~~CalledByGraph proc~dlhin dlhin proc~dlsodkr dlsodkr proc~dlsodkr->proc~dlhin Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlhin.html"},{"title":"dlsoda – odepack","text":"public subroutine dlsoda(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt) Synopsis DLSODA : Livermore Solver for Ordinary Differential Equations, with\n         Automatic method switching for stiff and nonstiff problems. based on the 12 November 2003 version in double precision. DLSODA solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). This a variant version of the DLSODE package.\n It switches automatically between stiff and nonstiff methods.\n This means that the user does not have to determine whether the\n problem is stiff or not, and the solver will automatically choose the\n appropriate method.  It always starts with the nonstiff method. Summary of Usage Communication between the user and the DLSODA package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including alternative treatment of the Jacobian matrix,\n optional inputs and outputs, nonstandard options, and\n instructions for special situations.  See also the example\n problem (with program and output) following this summary. Section A. First provide a subroutine of the form: SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT(i) with f(i). Section B. Write a main program which calls Subroutine DLSODA once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODA .  On the first call to DLSODA , supply arguments as follows: F name of subroutine for right-hand side vector f.\n   This name must be declared External in calling program. NEQ number of first order ODEs. Y array of initial values, of length NEQ. T the initial value of the independent variable. TOUT first point where output is desired (.ne. T). ITOL 1 or 2 according as ATOL (below) is a scalar or array. RTOL relative tolerance parameter (scalar). ATOL absolute tolerance parameter (scalar or array).\n   the estimated local error in y(i) will be controlled so as\n   to be less than EWT ( i ) = RTOL * ABS ( Y ( i )) + ATOL if ITOL = 1 , or EWT ( i ) = RTOL * ABS ( Y ( i )) + ATOL ( i ) if ITOL = 2 . Thus the local error test passes if, in each component,\n   either the absolute error is less than ATOL (or ATOL(i)),\n   or the relative error is less than RTOL. Use RTOL = 0.0 for pure absolute error control, and\n   use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n   control.  Caution: actual (global) errors may exceed these\n   local tolerances, so choose them conservatively. ITASK 1 for normal computation of output values of y at t = TOUT. ISTATE integer flag (input and output).  Set ISTATE = 1. IOPT 0 to indicate no optional inputs used. RWORK real work array of length at least:\n         22 + NEQ * MAX(16, NEQ + 9). See also Section E below. LRW declared length of RWORK (in user’s dimension). IWORK integer work array of length at least  20 + NEQ. LIW declared length of IWORK (in user’s dimension). JAC name of subroutine for Jacobian matrix.\n   Use a dummy name.  See also Section E below. JT Jacobian type indicator.  Set JT = 2.\n   See also Section E below.\n   Note that the main program must declare arrays Y, RWORK, IWORK,\n   and possibly ATOL. Section C. The output from the first call (or any call) is: Y array of computed values of y(t) vector. T corresponding value of independent variable (normally TOUT). ISTATE Status values are returned in ISTATE: values descriptions 2 if DLSODA was successful, negative otherwise. -1 means excess work done on this call (perhaps wrong JT). -2 means excess accuracy requested (tolerances too small). -3 means illegal input detected (see printed message). -4 means repeated error test failures (check all inputs). -5 means repeated convergence failures (perhaps bad Jacobian supplied or wrong choice of JT or tolerances). -6 means error weight became zero during problem. (Solution component i vanished, and ATOL or ATOL(i) = 0.) -7 means work space insufficient to finish (see messages). Section D. To continue the integration after a successful return, simply\n reset TOUT and call DLSODA again.  No other parameters need be reset. Section E. Note : If and when DLSODA regards the problem as stiff, and\n switches methods accordingly, it must make use of the NEQ by NEQ\n Jacobian matrix, J = df/dy.  For the sake of simplicity, the\n inputs to DLSODA recommended in Section B above cause DLSODA to\n treat J as a full matrix, and to approximate it internally by\n difference quotients.  Alternatively, J can be treated as a band\n matrix (with great potential reduction in the size of the RWORK\n array).  Also, in either the full or banded case, the user can supply\n J in closed form, with a routine whose name is passed as the JAC\n argument.  These alternatives are described in the paragraphs on\n RWORK, JAC, and JT in the full description of the call sequence below. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODA .  The problem is from chemical\n kinetics, and consists of the following three rate equations: dy1/dt = -.04*y1 + 1.e4*y2*y3\n     dy2/dt = .04*y1 - 1.e4*y2*y3 - 3.e7*y2**2\n     dy3/dt = 3.e7*y2**2 on the interval from t = 0.0 to t = 4.e10, with initial conditions y1 = 1.0, y2 = y3 = 0.  The problem is stiff. The following coding solves this problem with DLSODA ,\n printing results at t = .4, 4., …, 4.e10.  It uses\n ITOL = 2, and ATOL much smaller for y2 than y1 or y3 because\n y2 has much smaller values.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsoda_ex use m_odepack implicit none external fex external jdum integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask integer :: itol , jt , liw , lrw , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 70 ) :: rwork neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 70 liw = 23 jt = 2 do iout = 1 , 12 call dlsoda ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , iopt ,& & rwork , lrw , iwork , liw , jdum , jt ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0. endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ), iwork ( 19 ), & & rwork ( 15 ) 99030 format ( / ' No. steps =' , i4 , '  No. f-s =' , i4 , '  No. J-s =' , & & i4 / ' Method last used =' , i2 , '   Last switch was at t =' ,& & d12 . 4 ) end program dlsoda_ex subroutine jdum () implicit none end subroutine jdum subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  4.0000e-01   y =  9.851712e-01  3.386380e-05  1.479493e-02\n   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02\n   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01\n   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01\n   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01\n   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01\n   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01\n   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01\n   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01\n   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01\n   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01\n   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00\n\n   No. steps = 361  No. f-s = 693  No. J-s =  64\n   Method last used = 2   Last switch was at t =  6.0092e-03 Full description of user interface to DLSODA . The user interface to DLSODA consists of the following parts. The call sequence to Subroutine DLSODA , which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODA package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of a subroutine in the DLSODA package,\n      which the user may replace with his/her own version, if desired.\n      this relates to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, JT, and those used for both input and output are Y, T, ISTATE. The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODA to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F the name of the user-supplied subroutine defining the\n ODE system.  The system must be put in the first-order\n form dy/dt = f(t,y), where f is a vector-valued function\n of the scalar t and the vector y.  Subroutine F is to\n compute the function f.  It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n is output.  Y and YDOT are arrays of length NEQ.\n Subroutine F should not alter Y(1),…,Y(NEQ).\n F must be declared External in the calling program. Subroutine F may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in F) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y below. If quantities computed in the F routine are needed\n externally to DLSODA , an extra call to F should be made\n for this purpose, for consistent and accurate results.\n If only the derivative dy/dt is needed, use DINTDY instead. NEQ the size of the ODE system (number of first order\n ordinary differential equations).  Used only for input.\n NEQ may be decreased, but not increased, during the problem.\n If NEQ is decreased (with ISTATE = 3 on input), the\n remaining components of Y should be left undisturbed, if\n these are to be accessed in F and/or JAC. Normally, NEQ is a scalar, and it is generally referred to\n as a scalar in this user interface description.  However,\n NEQ may be an array, with NEQ(1) set to the system size.\n (The DLSODA package accesses only NEQ(1).)  In either case,\n this parameter is passed as the NEQ argument in all calls\n to F and JAC.  Hence, if it is an array, locations\n NEQ(2),… may be used to store other integer data and pass\n it to F and/or JAC.  Subroutines F and/or JAC must include\n NEQ in a Dimension statement in that case. Y a real array for the vector of dependent variables, of\n length NEQ or more.  Used for both input and output on the\n first call (ISTATE = 1), and only for output on other calls.\n On the first call, Y must contain the vector of initial\n values.  On output, Y contains the computed solution vector,\n evaluated at T.  If desired, the Y array may be used\n for other purposes between calls to the solver. This array is passed as the Y argument in all calls to\n F and JAC.  Hence its length may exceed NEQ, and locations\n Y(NEQ+1),… may be used to store other real data and\n pass it to F and/or JAC.  (The DLSODA package accesses only\n Y(1),…,Y(NEQ).) T the independent variable.  On input, T is used only on the\n first call, as the initial point of the integration.\n on output, after each call, T is the value at which a\n computed solution Y is evaluated (usually the same as TOUT).\n on an error return, T is the farthest point reached. TOUT the next value of t at which a computed solution is desired.\n Used only for input. When starting the problem (ISTATE = 1), TOUT may be equal\n to T for one call, then should .ne. T for the next call.\n For the initial t, an input value of TOUT .ne. T is used\n in order to determine the direction of the integration\n (i.e. the algebraic sign of the step sizes) and the rough\n scale of the problem.  Integration in either direction\n (forward or backward in t) is permitted. If ITASK = 2 or 5 (one-step modes), TOUT is ignored after\n the first call (i.e. the first call with TOUT .ne. T).\n Otherwise, TOUT is required on every call. If ITASK = 1, 3, or 4, the values of TOUT need not be\n monotone, but a value of TOUT which backs up is limited\n to the current internal T interval, whose endpoints are\n TCUR - HU and TCUR (see optional outputs, below, for\n TCUR and HU). ITOL an indicator for the type of error control.  See\n description below under ATOL.  Used only for input. RTOL a relative error tolerance parameter, either a scalar or\n an array of length NEQ.  See description below under ATOL.\n Input only. ATOL an absolute error tolerance parameter, either a scalar or\n an array of length NEQ.  Input only. The input parameters ITOL, RTOL, and ATOL determine\n the error control performed by the solver.  The solver will\n control the vector E = (E(i)) of estimated local errors\n in y, according to an inequality of the form max-norm of ( E(i)/EWT(i) )   .le.   1, where EWT = (EWT(i)) is a vector of positive error weights.\n The values of RTOL and ATOL should all be non-negative.\n The following table gives the types (scalar/array) of\n RTOL and ATOL, and the corresponding form of EWT(i). ITOL RTOL ATOL EWT(i) 1 scalar scalar RTOL*ABS(Y(i)) + ATOL 2 scalar array RTOL*ABS(Y(i)) + ATOL(i) 3 array scalar RTOL(i)*ABS(Y(i)) + ATOL 4 array array RTOL(i)*ABS(Y(i)) + ATOL(i) When either of these parameters is a scalar, it need not\n be dimensioned in the user’s calling program. If none of the above choices (with ITOL, RTOL, and ATOL\n fixed throughout the problem) is suitable, more general\n error controls can be obtained by substituting a\n user-supplied routine for the setting of EWT.\n See Part 4 below. If global errors are to be estimated by making a repeated\n run on the same problem with smaller tolerances, then all\n components of RTOL and ATOL (i.e. of EWT) should be scaled\n down uniformly. ITASK an index specifying the task to be performed.\n Input only.  ITASK has the following values and meanings. value descriptions 1 means normal computation of output values of y(t) at t = TOUT (by overshooting and interpolating). 2 means take one step only and return. 3 means stop at the first internal mesh point at or beyond t = TOUT and return. 4 means normal computation of output values of y(t) at t = TOUT but without overshooting t = TCRIT. TCRIT must be input as RWORK(1).  TCRIT may be equal to or beyond TOUT, but not behind it in the direction of integration.  This option is useful if the problem has a singularity at or beyond t = TCRIT. 5 means take one step, without passing TCRIT, and return. TCRIT must be input as RWORK(1). Note:  If ITASK = 4 or 5 and the solver reaches TCRIT\n (within roundoff), it will return T = TCRIT (exactly) to\n indicate this (unless ITASK = 4 and TOUT comes before TCRIT,\n in which case answers at t = TOUT are returned first). ISTATE an index used for input and output to specify the\n the state of the calculation. On input, the values of ISTATE are as follows. value descriptions 1 means this is the first call for the problem (initializations will be done).  See note below. 2 means this is not the first call, and the calculation is to continue normally, with no change in any input parameters except possibly TOUT and ITASK. (If ITOL, RTOL, and/or ATOL are changed between calls with ISTATE = 2, the new values will be used but not tested for legality.) 3 means this is not the first call, and the calculation is to continue normally, but with a change in input parameters other than TOUT and ITASK.  Changes are allowed in NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU, and any optional inputs except H0, MXORDN, and MXORDS. (See IWORK description for ML and MU.) Note:  A preliminary call with TOUT = T is not counted\n as a first call here, as no initialization or checking of\n input is done.  (Such a call is sometimes useful for the\n purpose of outputting the initial conditions.)\n Thus the first call for which TOUT .ne. T requires\n ISTATE = 1 on input. On output, ISTATE has the following values and meanings. value. descriptions 1 means nothing was done; TOUT = T and ISTATE = 1 on input. 2 means the integration was performed successfully. -1 means an excessive amount of work (more than MXSTEP steps) was done on this call, before completing the requested task, but the integration was otherwise successful as far as T.  (MXSTEP is an optional input and is normally 500.)  To continue, the user may simply reset ISTATE to a value .gt. 1 and call again (the excess work step counter will be reset to 0). In addition, the user may increase MXSTEP to avoid this error return (see below on optional inputs). -2 means too much accuracy was requested for the precision of the machine being used.  This was detected before completing the requested task, but the integration was successful as far as T.  To continue, the tolerance parameters must be reset, and ISTATE must be set to 3.  The optional output TOLSF may be used for this purpose.  (Note: If this condition is detected before taking any steps, then an illegal input return (ISTATE = -3) occurs instead.) -3 means illegal input was detected, before taking any integration steps.  See written message for details. Note:  If the solver detects an infinite loop of calls to the solver with illegal input, it will cause the run to stop. -4 means there were repeated error test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. The problem may have a singularity, or the input may be inappropriate. -5 means there were repeated convergence test failures on one attempted step, before completing the requested task, but the integration was successful as far as T. This may be caused by an inaccurate Jacobian matrix, if one is being used. -6 means EWT(i) became zero for some i during the integration.  Pure relative error control (ATOL(i)=0.0) was requested on a variable which has now vanished. The integration was successful as far as T. -7 means the length of RWORK and/or IWORK was too small to proceed, but the integration was successful as far as T. This happens when DLSODA chooses to switch methods but LRW and/or LIW is too small for the new method. Note:  Since the normal output value of ISTATE is 2,\n it does not need to be reset for normal continuation.\n Also, since a negative input value of ISTATE will be\n regarded as illegal, a negative output value requires the\n user to change it, and possibly other inputs, before\n calling the solver again. IOPT an integer flag to specify whether or not any optional\n inputs are being used on this call.  Input only.\n The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK a real array (double precision) for work space, and (in the\n first 20 words) for conditional and optional inputs and\n optional outputs. As DLSODA switches automatically between stiff and nonstiff\n methods, the required length of RWORK can change during the\n problem.  Thus the RWORK array passed to DLSODA can either\n have a static (fixed) length large enough for both methods,\n or have a dynamic (changing) length altered by the calling\n program in response to output from DLSODA . --- Fixed Length Case ---\n   If the RWORK length is to be fixed, it should be at least\n        MAX (LRN, LRS),\n   where LRN and LRS are the RWORK lengths required when the\n   current method is nonstiff or stiff, respectively.\n\n   The separate RWORK length requirements LRN and LRS are\n   as follows:\n   IF NEQ is constant and the maximum method orders have\n   their default values, then\n      LRN = 20 + 16*NEQ,\n      LRS = 22 + 9*NEQ + NEQ**2           if JT = 1 or 2,\n      LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ   if JT = 4 or 5.\n   Under any other conditions, LRN and LRS are given by:\n      LRN = 20 + NYH*(MXORDN+1) + 3*NEQ,\n      LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT,\n   where\n      NYH    = the initial value of NEQ,\n      MXORDN = 12, unless a smaller value is given as an\n               optional input,\n      MXORDS = 5, unless a smaller value is given as an\n               optional input,\n      LMAT   = length of matrix work space:\n      LMAT   = NEQ**2 + 2              if JT = 1 or 2,\n      LMAT   = (2*ML + MU + 1)*NEQ + 2 if JT = 4 or 5. --- Dynamic Length Case ---\n If the length of RWORK is to be dynamic, then it should\n be at least LRN or LRS, as defined above, depending on the\n current method.  Initially, it must be at least LRN (since\n _DLSODA_ starts with the nonstiff method).  On any return\n from _DLSODA_, the optional output MCUR indicates the current\n method.  If MCUR differs from the value it had on the\n previous return, or if there has only been one call to\n _DLSODA_ and MCUR is now 2, then _DLSODA_ has switched\n methods during the last call, and the length of RWORK\n should be reset (to LRN if MCUR = 1, or to LRS if\n MCUR = 2).  (An increase in the RWORK length is required\n if _DLSODA_ returned ISTATE = -7, but not otherwise.)\n After resetting the length, call _DLSODA_ with ISTATE = 3\n to signal that change.\n\n LRW\n\n : the length of the array RWORK, as declared by the user.\n (This will be checked by the solver.)\n\n IWORK\n\n : an integer array for work space.\n As _DLSODA_ switches automatically between stiff and nonstiff\n methods, the required length of IWORK can change during\n problem, between\n             LIS = 20 + NEQ   and   LIN = 20,\n respectively.  Thus the IWORK array passed to _DLSODA_ can\n either have a fixed length of at least 20 + NEQ, or have a\n dynamic length of at least LIN or LIS, depending on the\n current method.  The comments on dynamic length under\n RWORK above apply here.  Initially, this length need\n only be at least LIN = 20.\n\n The first few words of IWORK are used for conditional and\n optional inputs and optional outputs.\n\n The following 2 words in IWORK are conditional inputs:\n```text\n   IWORK(1) = ML     these are the lower and upper\n   IWORK(2) = MU     half-bandwidths, respectively, of the\n              banded Jacobian, excluding the main diagonal.\n              The band is defined by the matrix locations\n              (i,j) with i-ML .le. j .le. i+MU.  ML and MU\n              must satisfy  0 .le.  ML,MU  .le. NEQ-1.\n              These are required if JT is 4 or 5, and\n              ignored otherwise.  ML and MU may in fact be\n              the band parameters for a matrix to which\n              df/dy is only approximately equal. LIW the length of the array IWORK, as declared by the user.\n (This will be checked by the solver.) Note: The base addresses of the work arrays must not be\n altered between calls to DLSODA for the same problem.\n The contents of the work arrays must not be altered\n between calls, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODA between calls, if\n desired (but not for use by F or JAC). JAC the name of the user-supplied routine to compute the\n Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine\n is optional, but if the problem is expected to be stiff much\n of the time, you are encouraged to supply JAC, for the sake\n of efficiency.  (Alternatively, set JT = 2 or 5 to have DLSODA compute df/dy internally by difference quotients.)\n If and when DLSODA uses df/dy, it treats this NEQ by NEQ\n matrix either as full (JT = 1 or 2), or as banded (JT =\n 4 or 5) with half-bandwidths ML and MU (discussed under\n IWORK above).  In either case, if JT = 1 or 4, the JAC\n routine must compute df/dy as a function of the scalar t\n and the vector y.  It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ, T, Y, ML, MU, and NROWPD are input and the array\n PD is to be loaded with partial derivatives (elements of\n the Jacobian matrix) on output.  PD must be given a first\n dimension of NROWPD.  T and Y have the same meaning as in\n Subroutine F. In the full matrix case (JT = 1), ML and MU are\n ignored, and the Jacobian is to be loaded into PD in\n columnwise manner, with df(i)/dy(j) loaded into PD(i,j). In the band matrix case (JT = 4), the elements\n within the band are to be loaded into PD in columnwise\n manner, with diagonal lines of df/dy loaded into the rows\n of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).\n ML and MU are the half-bandwidth parameters (see IWORK).\n The locations in PD in the two triangular areas which\n correspond to nonexistent matrix elements can be ignored\n or loaded arbitrarily, as they are overwritten by DLSODA . JAC need not provide df/dy exactly.  A crude\n approximation (possibly with a smaller bandwidth) will do. In either case, PD is preset to zero by the solver,\n so that only the nonzero elements need be loaded by JAC.\n Each call to JAC is preceded by a call to F with the same\n arguments NEQ, T, and Y.  Thus to gain some efficiency,\n intermediate quantities shared by both calculations may be\n saved in a user Common block by F and not recomputed by JAC,\n if desired.  Also, JAC may alter the Y array, if desired.\n JAC must be declared External in the calling program. Subroutine JAC may access user-defined quantities in\n NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n See the descriptions of NEQ and Y above. JT Jacobian type indicator.  Used only for input.\n JT specifies how the Jacobian matrix df/dy will be\n treated, if and when DLSODA requires this matrix.\n JT has the following values and meanings: value description 1 means a user-supplied full (NEQ by NEQ) Jacobian. 2 means an internally generated (difference quotient) full Jacobian (using NEQ extra calls to F per df/dy value). 4 means a user-supplied banded Jacobian. 5 means an internally generated banded Jacobian (using ML+MU+1 extra calls to F per df/dy evaluation). If JT = 1 or 4, the user must supply a Subroutine JAC\n (the name is arbitrary) as described above under JAC.\n If JT = 2 or 5, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name Location Meaning and Default Value H0 RWORK(5) the step size to be attempted on the first step. The default value is determined by the solver. HMAX RWORK(6) the maximum absolute step size allowed. The default value is infinite. HMIN RWORK(7) the minimum absolute step size allowed. The default value is 0.  (This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5.) IXPR IWORK(5) flag to generate extra printing at method switches. IXPR = 0 means no extra printing (the default). IXPR = 1 means print data on each switch. T, H, and NST will be printed on the same logical unit as used for error messages. MXSTEP IWORK(6) maximum number of (internally defined) steps allowed during one call to the solver. The default value is 500. MXHNIL IWORK(7) maximum number of messages printed (per problem) warning that T + H = T on a step (H = step size). This must be positive to result in a non-default value.  The default value is 10. MXORDN IWORK(8) the maximum order to be allowed for the nonstiff (Adams) method.  the default value is 12. if MXORDN exceeds the default value, it will be reduced to the default value. MXORDN is held constant during the problem. MXORDS IWORK(9) the maximum order to be allowed for the stiff (BDF) method.  The default value is 5. If MXORDS exceeds the default value, it will be reduced to the default value. MXORDS is held constant during the problem. Optional Outputs. As optional additional output from DLSODA , the variables listed\n below are quantities related to the performance of DLSODA which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODA , and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name Location Meaning HU RWORK(11) the step size in t last used (successfully). HCUR RWORK(12) the step size to be attempted on the next step. TCUR RWORK(13) the current value of the independent variable which the solver has actually reached, i.e. the current internal mesh point in t.  On output, TCUR will always be at least as far as the argument T, but may be farther (if interpolation was done). TOLSF RWORK(14) a tolerance scale factor, greater than 1.0, computed when a request for too much accuracy was detected (ISTATE = -3 if detected at the start of the problem, ISTATE = -2 otherwise).  If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call, then the solver is deemed likely to succeed. (The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate.) TSW RWORK(15) the value of t at the time of the last method switch, if any. NST IWORK(11) the number of steps taken for the problem so far. NFE IWORK(12) the number of f evaluations for the problem so far. NJE IWORK(13) the number of Jacobian evaluations (and of matrix LU decompositions) for the problem so far. NQU IWORK(14) the method order last used (successfully). NQCUR IWORK(15) the order to be attempted on the next step. IMXER IWORK(16) the index of the component of largest magnitude in the weighted local error vector ( E(i)/EWT(i) ), on an error return with ISTATE = -4 or -5. LENRW IWORK(17) the length of RWORK actually required, assuming that the length of RWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. LENIW IWORK(18) the length of IWORK actually required, assuming that the length of IWORK is to be fixed for the rest of the problem, and that switching may occur. This is defined on normal returns and on an illegal input return for insufficient storage. MUSED IWORK(19) the method indicator for the last successful step: 1 means Adams (nonstiff), 2 means BDF (stiff). MCUR IWORK(20) the current method indicator: 1 means Adams (nonstiff), 2 means BDF (stiff). This is the method to be attempted on the next step.  Thus it differs from MUSED only if a method switch has just been made. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name Base Address Description YH 21 the Nordsieck history array, of size NYH by (NQCUR + 1), where NYH is the initial value of NEQ.  For j = 0,1,…,NQCUR, column j+1 of YH contains HCUR**j/factorial(j) times the j-th derivative of the interpolating polynomial currently representing the solution, evaluated at T = TCUR. ACOR LACOR array of size NEQ used for the accumulated (from Common corrections on each step, scaled on output as noted) to represent the estimated local error in y on the last step.  This is the vector E in the description of the error control.  It is defined only on a successful return from DLSODA .  The base address LACOR is obtained by including in the user’s program the following 2 lines: COMMON /DLS001/ RLS(218), ILS(37) LACOR = ILS(22) Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODA .\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function\n   CALL XSETUN(LUN)          set the logical unit number, LUN, for\n                             output of messages from _DLSODA_, if\n                             the default is not desired.\n                             The default value of LUN is 6.\n\n   CALL XSETF(MFLAG)         set a flag to control the printing of\n                             messages by _DLSODA_.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default).\n\n                             Either of the above calls may be made at\n                             any time and will take effect immediately.\n\n   CALL DSRCMA(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             _DLSODA_ (see Part 3 below).\n                             RSAV must be a real array of length 240\n                             or more, and ISAV must be an integer\n                             array of length 46 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCMA is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with _DLSODA_.\n\n   CALL DINTDY(,,,,,)        provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from _DLSODA_. The detailed instructions for using DINTDY are as follows. The form of the call is: CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are: T value of independent variable where answers are desired\n (normally the same as the T last returned by DLSODA ).\n For valid results, T must lie between TCUR - HU and TCUR.\n (See optional outputs for TCUR and HU.) K integer order of the derivative desired.  K must satisfy\n 0 .le. K .le. NQCUR, where NQCUR is the current order\n (see optional outputs).  The capability corresponding\n to K = 0, i.e. computing y(T), is already provided\n by DLSODA directly.  Since NQCUR .ge. 1, the first\n derivative dy/dt is always available with DINTDY. RWORK(21) the base address of the history array YH. NYH column length of YH, equal to the initial value of NEQ. The output parameters are: DKY a real array of length NEQ containing the computed value\n of the K-th derivative of y(t). IFLAG integer flag, returned as 0 if K and T were legal,\n -1 if K was illegal, and -2 if T was illegal.\n On an error return, a message is also written. Part 3.  Interrupting and Continuing If the solution of a given problem by DLSODA is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODA call prior to the\n interruption, the contents of the call sequence variables and state\n and later restore these values before the\n next DLSODA call for that problem.  To save and restore the current\n state, use Subroutine DSRCMA (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below is a description of a routine in the DLSODA package which\n relates to the measurement of errors, and can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) DEWSET The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above: Subroutine DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ, ITOL, RTOL, and ATOL are as in the DLSODA call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the\n DMNORM routine, and also used by DLSODA in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements: DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). Authors: Alan C. Hindmarsh\n    Center for Applied Scientific Computing, L-561\n    Lawrence Livermore National Laboratory\n    Livermore, CA 94551 and Linda R. Petzold\n    Univ. of California at Santa Barbara\n    Dept. of Computer Science\n    Santa Barbara, CA 93106 References: Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Linda R. Petzold, Automatic Selection of Methods for Solving\n     Stiff and Nonstiff Systems of Ordinary Differential Equations,\n     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Other routines in the DLSODA package. In addition to Subroutine DLSODA , the DLSODA package includes the\n following subroutines and function routines: DINTDY computes an interpolated value of the y vector at t = TOUT. DSTODA is the core integrator, which does one step of the\n  integration and the associated error control. DCFODE sets all method coefficients and test constants. DPRJA computes and preprocesses the Jacobian matrix J = df/dy\n  and the Newton iteration matrix P = I - h l0 J. DSOLSY manages solution of linear system in chord iteration. DEWSET sets the error weight vector EWT before each step. DMNORM computes the weighted max-norm of a vector. DFNORM computes the norm of a full matrix consistent with the\n  weighted max-norm on vectors. DBNORM computes the norm of a band matrix consistent with the\n  weighted max-norm on vectors. DSRCMA is a user-callable routine to save and restore\n  the contents of the internal Common blocks. DGEFA and DGESL are routines from LINPACK for solving full\n  systems of linear algebraic equations. DGBFA and DGBSL are routines from LINPACK for solving banded\n  linear systems. DUMACH computes the unit roundoff in a machine-independent manner. XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n   error messages and warnings.  XERRWD is machine-dependent. Note : DMNORM , DFNORM , DBNORM , DUMACH , and IXSAV are\n function routines.  All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: jac integer :: Jt Calls proc~~dlsoda~~CallsGraph proc~dlsoda dlsoda proc~dewset dewset proc~dlsoda->proc~dewset proc~dmnorm dmnorm proc~dlsoda->proc~dmnorm proc~dstoda dstoda proc~dlsoda->proc~dstoda proc~xerrwd xerrwd proc~dlsoda->proc~xerrwd proc~dumach dumach proc~dlsoda->proc~dumach proc~dintdy dintdy proc~dlsoda->proc~dintdy proc~dstoda->proc~dmnorm proc~dcfode dcfode proc~dstoda->proc~dcfode proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsoda.html"},{"title":"dlsodar – odepack","text":"public subroutine dlsodar(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt, g, Ng, Jroot) This is the 12 November 2003 version of\n DLSODAR: Livermore Solver for Ordinary Differential Equations, with\n          Automatic method switching for stiff and nonstiff problems,\n          and with Root-finding. This version is in double precision. DLSODAR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs,\n     dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),…,y(NEQ)) (i = 1,…,NEQ).\n At the same time, it locates the roots of any of a set of functions\n     g(i) = g(i,t,y(1),…,y(NEQ))  (i = 1,…,ng). This a variant version of the DLSODE package.  It differs from it\n in two ways:\n (a) It switches automatically between stiff and nonstiff methods.\n This means that the user does not have to determine whether the\n problem is stiff or not, and the solver will automatically choose the\n appropriate method.  It always starts with the nonstiff method.\n (b) It finds the root of at least one of a set of constraint\n functions g(i) of the independent and dependent variables.\n It finds only those roots for which some g(i), as a function\n of t, changes sign in the interval of integration.\n It then returns the solution at the root, if that occurs\n sooner than the specified stop condition, and otherwise returns\n the solution according the specified stop condition. Authors:       Alan C. Hindmarsh,\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Linda R. Petzold\n                Univ. of California at Santa Barbara\n                Dept. of Computer Science\n                Santa Barbara, CA 93106 References:\n 1.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64.\n 2.  Linda R. Petzold, Automatic Selection of Methods for Solving\n     Stiff and Nonstiff Systems of Ordinary Differential Equations,\n     Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148.\n 3.  Kathie L. Hiebert and Lawrence F. Shampine, Implicitly Defined\n     Output Points for Solutions of ODEs, Sandia Report SAND80-0180,\n     February 1980. Summary of Usage. Communication between the user and the DLSODAR package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including alternative treatment of the Jacobian matrix,\n optional inputs and outputs, nonstandard options, and\n instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First provide a subroutine of the form:\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n which supplies the vector function f by loading YDOT(i) with f(i). B. Provide a subroutine of the form:\n               SUBROUTINE G (NEQ, T, Y, NG, GOUT)\n               DOUBLE PRECISION T, Y(*), GOUT(NG)\n which supplies the vector function g by loading GOUT(i) with\n g(i), the i-th constraint function whose root is sought. C. Write a main program which calls Subroutine DLSODAR once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODAR.  On the first call to DLSODAR, supply arguments as follows:\n F      = name of subroutine for right-hand side vector f.\n          This name must be declared External in calling program.\n NEQ    = number of first order ODEs.\n Y      = array of initial values, of length NEQ.\n T      = the initial value of the independent variable.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          the estimated local error in y(i) will be controlled so as\n          to be less than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             22 + NEQ * MAX(16, NEQ + 9) + 3*NG.\n          See also Paragraph F below.\n LRW    = declared length of RWORK (in user’s dimension).\n IWORK  = integer work array of length at least  20 + NEQ.\n LIW    = declared length of IWORK (in user’s dimension).\n JAC    = name of subroutine for Jacobian matrix.\n          Use a dummy name to a noop function.  See also Paragraph F below.\n JT     = Jacobian type indicator.  Set JT = 2.\n          See also Paragraph F below.\n G      = name of subroutine for constraint functions, whose\n          roots are desired during the integration.\n          This name must be declared External in calling program.\n NG     = number of constraint functions g(i).  If there are none,\n          set NG = 0, and pass a dummy name for G.\n JROOT  = integer array of length NG for output of root information.\n          See next paragraph.\n Note that the main program must declare arrays Y, RWORK, IWORK,\n JROOT, and possibly ATOL. D. The output from the first call (or any call) is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable.  This is\n          TOUT if ISTATE = 2, or the root location if ISTATE = 3,\n          or the farthest point reached if DLSODAR was unsuccessful.\n ISTATE = 2 or 3  if DLSODAR was successful, negative otherwise.\n           2 means no root was found, and TOUT was reached as desired.\n           3 means a root was found prior to reaching TOUT.\n          -1 means excess work done on this call (perhaps wrong JT).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad Jacobian\n             supplied or wrong choice of JT or tolerances).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 means work space insufficient to finish (see messages).\n JROOT  = array showing roots found if ISTATE = 3 on return.\n          JROOT(i) = 1 if g(i) has a root at t, or 0 otherwise. E. To continue the integration after a successful return, proceed\n as follows:\n  (a) If ISTATE = 2 on return, reset TOUT and call DLSODAR again.\n  (b) If ISTATE = 3 on return, reset ISTATE to 2, call DLSODAR again.\n In either case, no other parameters need be reset. F. Note: If and when DLSODAR regards the problem as stiff, and\n switches methods accordingly, it must make use of the NEQ by NEQ\n Jacobian matrix, J = df/dy.  For the sake of simplicity, the\n inputs to DLSODAR recommended in Paragraph C above cause DLSODAR to\n treat J as a full matrix, and to approximate it internally by\n difference quotients.  Alternatively, J can be treated as a band\n matrix (with great potential reduction in the size of the RWORK\n array).  Also, in either the full or banded case, the user can supply\n J in closed form, with a routine whose name is passed as the JAC\n argument.  These alternatives are described in the paragraphs on\n RWORK, JAC, and JT in the full description of the call sequence below. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODAR.  The problem is from chemical\n kinetics, and consists of the following three rate equations:\n     dy1/dt = -.04 y1 + 1.e4 y2 y3\n     dy2/dt = .04 y1 - 1.e4 y2 y3 - 3.e7 y2 2\n     dy3/dt = 3.e7 y2**2\n on the interval from t = 0.0 to t = 4.e10, with initial conditions\n y1 = 1.0, y2 = y3 = 0.  The problem is stiff.\n In addition, we want to find the values of t, y1, y2, and y3 at which\n   (1) y1 reaches the value 1.e-4, and\n   (2) y3 reaches the value 1.e-2. The following coding solves this problem with DLSODAR,\n printing results at t = .4, 4., …, 4.e10, and at the computed\n roots.  It uses ITOL = 2 and ATOL much smaller for y2 than y1 or y3\n because y2 has much smaller values.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsodar_ex use m_odepack implicit none external fex external gex external jdum integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask , itol , jt , liw , lrw , neq , ng integer , dimension ( 23 ) :: iwork integer , dimension ( 2 ) :: jroot real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 76 ) :: rwork neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 76 liw = 23 jt = 2 ng = 2 do iout = 1 , 12 do call dlsodar ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , & & iopt , rwork , lrw , iwork , liw , jdum , jt , gex , ng , jroot ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 elseif ( istate == 2 ) then tout = tout * 1 0. exit else write ( 6 , 99030 ) jroot ( 1 ), jroot ( 2 ) 99030 format ( 5 x , ' The above line is a root,  JROOT =' , 2 I5 ) istate = 2 endif enddo enddo write ( 6 , 99040 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ), iwork ( 10 ), & & iwork ( 19 ), rwork ( 15 ) 99040 format ( / ' No. steps =' , i4 , '  No. f-s =' , i4 , '  No. J-s =' , i4 , & & '  No. g-s =' , i4 / ' Method last used =' , i2 , & & '   Last switch was at t =' , d12 . 4 ) end program dlsodar_ex subroutine jdum () implicit none end subroutine jdum subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex subroutine gex ( Neq , T , Y , Ng , Gout ) implicit none integer :: Neq integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y integer :: Ng real ( kind = dp ), intent ( out ), dimension ( 2 ) :: Gout Gout ( 1 ) = Y ( 1 ) - 1.D-4 Gout ( 2 ) = Y ( 3 ) - 1.D-2 end subroutine gex The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  2.6400e-01   y =  9.899653e-01  3.470563e-05  1.000000e-02\n        The above line is a root,  JROOT =    0    1\n   At t =  4.0000e-01   Y =  9.851712e-01  3.386380e-05  1.479493e-02\n   At t =  4.0000e+00   Y =  9.055333e-01  2.240655e-05  9.444430e-02\n   At t =  4.0000e+01   Y =  7.158403e-01  9.186334e-06  2.841505e-01\n   At t =  4.0000e+02   Y =  4.505250e-01  3.222964e-06  5.494717e-01\n   At t =  4.0000e+03   Y =  1.831975e-01  8.941774e-07  8.168016e-01\n   At t =  4.0000e+04   Y =  3.898730e-02  1.621940e-07  9.610125e-01\n   At t =  4.0000e+05   Y =  4.936363e-03  1.984221e-08  9.950636e-01\n   At t =  4.0000e+06   Y =  5.161831e-04  2.065786e-09  9.994838e-01\n   At t =  2.0745e+07   Y =  1.000000e-04  4.000395e-10  9.999000e-01\n        The above line is a root,  JROOT =    1    0\n   At t =  4.0000e+07   Y =  5.179817e-05  2.072032e-10  9.999482e-01\n   At t =  4.0000e+08   Y =  5.283401e-06  2.113371e-11  9.999947e-01\n   At t =  4.0000e+09   Y =  4.659031e-07  1.863613e-12  9.999995e-01\n   At t =  4.0000e+10   Y =  1.404280e-08  5.617126e-14  1.000000e+00 No. steps = 361  No. f-s = 693  No. J-s =  64  No. g-s = 390\n   Method last used = 2   Last switch was at t =  6.0092e-03 Full Description of User Interface to DLSODAR. The user interface to DLSODAR consists of the following parts. The call sequence to Subroutine DLSODAR, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODAR package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of a subroutine in the DLSODAR package,\n      which the user may replace with his/her own version, if desired.\n      this relates to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC,\n     JT, G, and NG,\n that used only for output is  JROOT,\n and those used for both input and output are\n     Y, T, ISTATE.\n The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODAR to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F      = the name of the user-supplied subroutine defining the\n          ODE system.  The system must be put in the first-order\n          form dy/dt = f(t,y), where f is a vector-valued function\n          of the scalar t and the vector y.  Subroutine F is to\n          compute the function f.  It is to have the form\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n          where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n          is output.  Y and YDOT are arrays of length NEQ.\n          Subroutine F should not alter Y(1),…,Y(NEQ).\n          F must be declared External in the calling program. Subroutine F may access user - defined quantities in NEQ ( 2 ) ,... and / or in Y ( NEQ ( 1 ) + 1 ) ,... if NEQ is an array ( dimensioned in F ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y below . If quantities computed in the F routine are needed externally to DLSODAR , an extra call to F should be made for this purpose , for consistent and accurate results . If only the derivative dy / dt is needed , use DINTDY instead . NEQ    = the size of the ODE system (number of first order\n          ordinary differential equations).  Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in F and/or JAC. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODAR package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to F , JAC , and G . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to F , JAC , and G . Each such subroutine must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 1), and only for output on other calls.\n          On the first call, Y must contain the vector of initial\n          values.  On output, Y contains the computed solution vector,\n          evaluated at T.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F,\n      JAC, and G.  Hence its length may exceed NEQ, and locations\n      Y(NEQ+1),... may be used to store other real data and\n      pass it to F, JAC, and G.  (The DLSODAR package accesses only\n      Y(1),...,Y(NEQ).) T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          On output, after each call, T is the value at which a\n          computed solution y is evaluated (usually the same as TOUT).\n          If a root was found, T is the computed location of the\n          root reached first, on output.\n          On an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form max - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT = ( EWT ( i )) is a vector of positive error weights . The values of RTOL and ATOL should all be non - negative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array array RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting a user - supplied routine for the setting of EWT . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at t = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          the state of the calculation. On input , the values of ISTATE are as follows . 1 means this is the first call for the problem ( initializations will be done ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , JT , ML , MU , and any optional inputs except H0 , MXORDN , and MXORDS . ( See IWORK description for ML and MU . ) In addition , immediately following a return with ISTATE = 3 ( root found ), NG and G may be changed . ( But changing NG from 0 to . gt . 0 is not allowed . ) Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 1 on input . On output , ISTATE has the following values and meanings . 1 means nothing was done ; TOUT = t and ISTATE = 1 on input . 2 means the integration was performed successfully , and no roots were found . 3 means the integration was successful , and one or more roots were found before satisfying the stop condition specified by ITASK . See JROOT . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . This may be caused by an inaccurate Jacobian matrix , if one is being used . - 6 means EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . The integration was successful as far as T . - 7 means the length of RWORK and / or IWORK was too small to proceed , but the integration was successful as far as T . This happens when DLSODAR chooses to switch methods but LRW and / or LIW is too small for the new method . Note : Since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a real array (double precision) for work space, and (in the\n          first 20 words) for conditional and optional inputs and\n          optional outputs.\n          As DLSODAR switches automatically between stiff and nonstiff\n          methods, the required length of RWORK can change during the\n          problem.  Thus the RWORK array passed to DLSODAR can either\n          have a static (fixed) length large enough for both methods,\n          or have a dynamic (changing) length altered by the calling\n          program in response to output from DLSODAR. --- Fixed Length Case --- If the RWORK length is to be fixed , it should be at least max ( LRN , LRS ), where LRN and LRS are the RWORK lengths required when the current method is nonstiff or stiff , respectively . The separate RWORK length requirements LRN and LRS are as follows : If NEQ is constant and the maximum method orders have their default values , then LRN = 20 + 16 * NEQ + 3 * NG , LRS = 22 + 9 * NEQ + NEQ ** 2 + 3 * NG ( JT = 1 or 2 ), LRS = 22 + 10 * NEQ + ( 2 * ML + MU ) * NEQ + 3 * NG ( JT = 4 or 5 ) . Under any other conditions , LRN and LRS are given by : LRN = 20 + NYH * ( MXORDN + 1 ) + 3 * NEQ + 3 * NG , LRS = 20 + NYH * ( MXORDS + 1 ) + 3 * NEQ + LMAT + 3 * NG , where NYH = the initial value of NEQ , MXORDN = 12 , unless a smaller value is given as an optional input , MXORDS = 5 , unless a smaller value is given as an optional input , LMAT = length of matrix work space : LMAT = NEQ ** 2 + 2 if JT = 1 or 2 , LMAT = ( 2 * ML + MU + 1 ) * NEQ + 2 if JT = 4 or 5. --- Dynamic Length Case --- If the length of RWORK is to be dynamic , then it should be at least LRN or LRS , as defined above , depending on the current method . Initially , it must be at least LRN ( since DLSODAR starts with the nonstiff method ) . On any return from DLSODAR , the optional output MCUR indicates the current method . If MCUR differs from the value it had on the previous return , or if there has only been one call to DLSODAR and MCUR is now 2 , then DLSODAR has switched methods during the last call , and the length of RWORK should be reset ( to LRN if MCUR = 1 , or to LRS if MCUR = 2 ) . ( An increase in the RWORK length is required if DLSODAR returned ISTATE = - 7 , but not otherwise . ) After resetting the length , call DLSODAR with ISTATE = 3 to signal that change . LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer array for work space.\n          As DLSODAR switches automatically between stiff and nonstiff\n          methods, the required length of IWORK can change during\n          problem, between\n             LIS = 20 + NEQ   and   LIN = 20,\n          respectively.  Thus the IWORK array passed to DLSODAR can\n          either have a fixed length of at least 20 + NEQ, or have a\n          dynamic length of at least LIN or LIS, depending on the\n          current method.  The comments on dynamic length under\n          RWORK above apply here.  Initially, this length need\n          only be at least LIN = 20. The first few words of IWORK are used for conditional and optional inputs and optional outputs . The following 2 words in IWORK are conditional inputs : IWORK ( 1 ) = ML These are the lower and upper IWORK ( 2 ) = MU half - bandwidths , respectively , of the banded Jacobian , excluding the main diagonal . The band is defined by the matrix locations ( i , j ) with i - ML . le . j . le . i + MU . ML and MU must satisfy 0 . le . ML , MU . le . NEQ - 1 . These are required if JT is 4 or 5 , and ignored otherwise . ML and MU may in fact be the band parameters for a matrix to which df / dy is only approximately equal . LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note: The base addresses of the work arrays must not be\n altered between calls to DLSODAR for the same problem.\n The contents of the work arrays must not be altered\n between calls, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODAR between calls, if\n desired (but not for use by F, JAC, or G). JAC    = the name of the user-supplied routine to compute the\n          Jacobian matrix, df/dy, if JT = 1 or 4.  The JAC routine\n          is optional, but if the problem is expected to be stiff much\n          of the time, you are encouraged to supply JAC, for the sake\n          of efficiency.  (Alternatively, set JT = 2 or 5 to have\n          DLSODAR compute df/dy internally by difference quotients.)\n          If and when DLSODAR uses df/dy, it treats this NEQ by NEQ\n          matrix either as full (JT = 1 or 2), or as banded (JT =\n          4 or 5) with half-bandwidths ML and MU (discussed under\n          IWORK above).  In either case, if JT = 1 or 4, the JAC\n          routine must compute df/dy as a function of the scalar t\n          and the vector y.  It is to have the form\n               SUBROUTINE JAC (NEQ, T, Y, ML, MU, PD, NROWPD)\n               DOUBLE PRECISION T, Y( ), PD(NROWPD, )\n          where NEQ, T, Y, ML, MU, and NROWPD are input and the array\n          PD is to be loaded with partial derivatives (elements of\n          the Jacobian matrix) on output.  PD must be given a first\n          dimension of NROWPD.  T and Y have the same meaning as in\n          Subroutine F.\n               In the full matrix case (JT = 1), ML and MU are\n          ignored, and the Jacobian is to be loaded into PD in\n          columnwise manner, with df(i)/dy(j) loaded into pd(i,j).\n               In the band matrix case (JT = 4), the elements\n          within the band are to be loaded into PD in columnwise\n          manner, with diagonal lines of df/dy loaded into the rows\n          of PD.  Thus df(i)/dy(j) is to be loaded into PD(i-j+MU+1,j).\n          ML and MU are the half-bandwidth parameters (see IWORK).\n          The locations in PD in the two triangular areas which\n          correspond to nonexistent matrix elements can be ignored\n          or loaded arbitrarily, as they are overwritten by DLSODAR.\n               JAC need not provide df/dy exactly.  A crude\n          approximation (possibly with a smaller bandwidth) will do.\n               In either case, PD is preset to zero by the solver,\n          so that only the nonzero elements need be loaded by JAC.\n          Each call to JAC is preceded by a call to F with the same\n          arguments NEQ, T, and Y.  Thus to gain some efficiency,\n          intermediate quantities shared by both calculations may be\n          saved in a user Common block by F and not recomputed by JAC,\n          if desired.  Also, JAC may alter the Y array, if desired.\n          JAC must be declared External in the calling program.\n               Subroutine JAC may access user-defined quantities in\n          NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n          (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n          See the descriptions of NEQ and Y above. JT     = Jacobian type indicator.  Used only for input.\n          JT specifies how the Jacobian matrix df/dy will be\n          treated, if and when DLSODAR requires this matrix.\n          JT has the following values and meanings:\n           1 means a user-supplied full (NEQ by NEQ) Jacobian.\n           2 means an internally generated (difference quotient) full\n             Jacobian (using NEQ extra calls to F per df/dy value).\n           4 means a user-supplied banded Jacobian.\n           5 means an internally generated banded Jacobian (using\n             ML+MU+1 extra calls to F per df/dy evaluation).\n          If JT = 1 or 4, the user must supply a Subroutine JAC\n          (the name is arbitrary) as described above under JAC.\n          If JT = 2 or 5, a dummy argument can be used. G      = the name of subroutine for constraint functions, whose\n          roots are desired during the integration.  It is to have\n          the form\n               SUBROUTINE G (NEQ, T, Y, NG, GOUT)\n               DOUBLE PRECISION T, Y(*), GOUT(NG)\n          where NEQ, T, Y, and NG are input, and the array GOUT\n          is output.  NEQ, T, and Y have the same meaning as in\n          the F routine, and GOUT is an array of length NG.\n          For i = 1,…,NG, this routine is to load into GOUT(i)\n          the value at (T,Y) of the i-th constraint function g(i).\n          DLSODAR will find roots of the g(i) of odd multiplicity\n          (i.e. sign changes) as they occur during the integration.\n          G must be declared External in the calling program. Caution : Because of numerical errors in the functions g ( i ) due to roundoff and integration error , DLSODAR may return false roots , or return the same root at two or more nearly equal values of t . If such false roots are suspected , the user should consider smaller error tolerances and / or higher precision in the evaluation of the g ( i ) . If a root of some g ( i ) defines the end of the problem , the input to DLSODAR should nevertheless allow integration to a point slightly past that root , so that DLSODAR can locate the root by interpolation . Subroutine G may access user - defined quantities in NEQ ( 2 ) ,... and Y ( NEQ ( 1 ) + 1 ) ,... if NEQ is an array ( dimensioned in G ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y above . NG     = number of constraint functions g(i).  If there are none,\n          set NG = 0, and pass a dummy name for G. JROOT  = integer array of length NG.  Used only for output.\n          On a return with ISTATE = 3 (one or more roots found),\n          JROOT(i) = 1 if g(i) has a root at T, or JROOT(i) = 0 if not. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) IXPR    IWORK(5)  flag to generate extra printing at method switches.\n                   IXPR = 0 means no extra printing (the default).\n                   IXPR = 1 means print data on each switch.\n                   T, H, and NST will be printed on the same logical\n                   unit as used for error messages. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. MXORDN  IWORK(8)  the maximum order to be allowed for the nonstiff\n                   (Adams) method.  The default value is 12.\n                   If MXORDN exceeds the default value, it will\n                   be reduced to the default value.\n                   MXORDN is held constant during the problem. MXORDS  IWORK(9)  the maximum order to be allowed for the stiff\n                   (BDF) method.  The default value is 5.\n                   If MXORDS exceeds the default value, it will\n                   be reduced to the default value.\n                   MXORDS is held constant during the problem. Optional Outputs. As optional additional output from DLSODAR, the variables listed\n below are quantities related to the performance of DLSODAR\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODAR, and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) TSW     RWORK(15) the value of t at the time of the last method\n                   switch, if any. NGE     IWORK(10) the number of g evaluations for the problem so far. NST     IWORK(11) the number of steps taken for the problem so far. NFE     IWORK(12) the number of f evaluations for the problem so far. NJE     IWORK(13) the number of Jacobian evaluations (and of matrix\n                   LU decompositions) for the problem so far. NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required, assuming\n                   that the length of RWORK is to be fixed for the\n                   rest of the problem, and that switching may occur.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required, assuming\n                   that the length of IWORK is to be fixed for the\n                   rest of the problem, and that switching may occur.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. MUSED   IWORK(19) the method indicator for the last successful step:\n                   1 means Adams (nonstiff), 2 means BDF (stiff). MCUR    IWORK(20) the current method indicator:\n                   1 means Adams (nonstiff), 2 means BDF (stiff).\n                   This is the method to be attempted\n                   on the next step.  Thus it differs from MUSED\n                   only if a method switch has just been made. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name    Base Address      Description YH      21 + 3 NG      the Nordsieck history array, of size NYH by\n                        (NQCUR + 1), where NYH is the initial value\n                        of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR *j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR. ACOR     LACOR         array of size NEQ used for the accumulated\n         (from Common   corrections on each step, scaled on output\n           as noted)    to represent the estimated local error in y\n                        on the last step.  This is the vector E in\n                        the description of the error control.  It is\n                        defined only on a successful return from\n                        DLSODAR.  The base address LACOR is obtained by\n                        including in the user’s program the\n                        following 2 lines:\n                           COMMON /DLS001/ RLS(218), ILS(37)\n                           LACOR = ILS(22) Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODAR.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSODAR, if\n                             the default is not desired.\n                             The default value of LUN is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSODAR.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCAR(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSODAR (see Part 3 below).\n                             RSAV must be a real array of length 245\n                             or more, and ISAV must be an integer\n                             array of length 55 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCAR is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSODAR. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSODAR. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = 21 + 3*NG\n   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the T last returned by DLSODAR).\n             For valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (see optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(t), is already provided\n             by DLSODAR directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n LYH       = 21 + 3*NG = base address in RWORK of the history array YH.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSODAR is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSODAR, and\n   (2) the three internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         TYPE(DLSA01)::DLSA of length 31 (22 double precision words\n                      followed by  9 integer words).\n         /DLSR01/  of length   7  (3 double precision words\n                      followed by  4 integer words). If DLSODAR is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODAR is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODAR call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODAR call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCAR (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below is a description of a routine in the DLSODAR package which\n relates to the measurement of errors, and can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODAR call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the\n DMNORM routine, and also used by DLSODAR in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). REVISION HISTORY  (YYYYMMDD) 19811102  DATE WRITTEN\n 19820126  Fixed bug in tests of work space lengths;\n           minor corrections in main prologue and comments.\n 19820507  Fixed bug in RCHEK in setting HMING.\n 19870330  Major update: corrected comments throughout;\n           removed TRET from Common; rewrote EWSET with 4 loops;\n           fixed t test in INTDY; added Cray directives in STODA;\n           in STODA, fixed DELP init. and logic around PJAC call;\n           combined routines to save/restore Common;\n           passed LEVEL = 0 in error message calls (except run abort).\n 19970225  Fixed lines setting JSTART = -2 in Subroutine LSODAR.\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20010613  Revised excess accuracy test (to match rest of ODEPACK).\n 20010808  Fixed bug in DPRJA (matrix in DBNORM call).\n 20020502  Corrected declarations in descriptions of user routines.\n 20031105  Restored ‘own’ variables to Common blocks, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants. Other routines in the DLSODAR package. In addition to Subroutine DLSODAR, the DLSODAR package includes the\n following subroutines and function routines:\n  DRCHEK   does preliminary checking for roots, and serves as an\n           interface between Subroutine DLSODAR and Subroutine DROOTS.\n  DROOTS   finds the leftmost root of a set of functions.\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DSTODA   is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DPRJA    computes and preprocesses the Jacobian matrix J = df/dy\n           and the Newton iteration matrix P = I - h l0 J.\n  DSOLSY   manages solution of linear system in chord iteration.\n  DEWSET   sets the error weight vector EWT before each step.\n  DMNORM   computes the weighted max-norm of a vector.\n  DFNORM   computes the norm of a full matrix consistent with the\n           weighted max-norm on vectors.\n  DBNORM   computes the norm of a band matrix consistent with the\n           weighted max-norm on vectors.\n  DSRCAR   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  DGEFA and DGESL   are routines from LINPACK for solving full\n           systems of linear algebraic equations.\n  DGBFA and DGBSL   are routines from LINPACK for solving banded\n           linear systems.\n  DCOPY    is one of the basic linear algebra modules (BLAS).\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, and IXSAV  handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DMNORM, DFNORM, DBNORM, DUMACH, and IXSAV are\n function routines.  All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Jt real :: g integer :: Ng integer, dimension(Ng) :: Jroot Calls proc~~dlsodar~~CallsGraph proc~dlsodar dlsodar proc~dewset dewset proc~dlsodar->proc~dewset proc~dmnorm dmnorm proc~dlsodar->proc~dmnorm proc~dstoda dstoda proc~dlsodar->proc~dstoda proc~drchek drchek proc~dlsodar->proc~drchek proc~xerrwd xerrwd proc~dlsodar->proc~xerrwd proc~dumach dumach proc~dlsodar->proc~dumach proc~dcopy dcopy proc~dlsodar->proc~dcopy proc~dintdy dintdy proc~dlsodar->proc~dintdy proc~dstoda->proc~dmnorm proc~dcfode dcfode proc~dstoda->proc~dcfode proc~drchek->proc~dcopy proc~drchek->proc~dintdy proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodar.html"},{"title":"dlsode – odepack","text":"public subroutine dlsode(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) PURPOSE  Livermore Solver for Ordinary Differential Equations. DLSODE solves the initial - value problem for stiff or nonstiff systems of first - order ODE ' s, dy / dt = f ( t , y ) , or , in component form , dy ( i ) / dt = f ( i ) = f ( i , t , y ( 1 ) , y ( 2 ) ,..., y ( N )) , i = 1 ,..., N . DESCRIPTION NOTE : The \"Usage\" and \"Arguments\" sections treat only a subset of available options , in condensed fashion . The options covered and the information supplied will support most standard uses of DLSODE . For more sophisticated uses , full details on all options are given in the concluding section , headed \"Long Description.\" A synopsis of the DLSODE Long Description is provided at the beginning of that section ; general topics covered are : - Elements of the call sequence ; optional input and output - Optional supplemental routines in the DLSODE package - internal COMMON block USAGE Communication between the user and the DLSODE package , for normal situations , is summarized here . This summary describes a subset of the available options . See \" Long Description \" for complete details , including optional communication , nonstandard options , and instructions for special situations . A sample program is given in the \" Examples \" section . Refer to the argument descriptions for the definitions of the quantities that appear in the following sample declarations . For MF = 10 , PARAMETER ( LRW = 20 + 16 * NEQ , LIW = 20 ) For MF = 21 or 22 , PARAMETER ( LRW = 22 + 9 * NEQ + NEQ ** 2 , LIW = 20 + NEQ ) For MF = 24 or 25 , PARAMETER ( LRW = 22 + 10 * NEQ + ( 2 * ML + MU ) * NEQ , * LIW = 20 + NEQ ) EXTERNAL F , JAC INTEGER NEQ , ITOL , ITASK , ISTATE , IOPT , LRW , IWORK ( LIW ) , * LIW , MF DOUBLE PRECISION Y ( NEQ ) , T , TOUT , RTOL , ATOL ( ntol ) , RWORK ( LRW ) CALL DLSODE ( F , NEQ , Y , T , TOUT , ITOL , RTOL , ATOL , ITASK , * ISTATE , IOPT , RWORK , LRW , IWORK , LIW , JAC , MF ) ARGUMENTS F : EXT Name of subroutine for right - hand - side vector f . This name must be declared EXTERNAL in calling program . The form of F must be : SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) The inputs are NEQ , T , Y . F is to set YDOT ( i ) = f ( i , T , Y ( 1 ), Y ( 2 ), ... , Y ( NEQ )), i = 1 , ... , NEQ . NEQ : IN Number of first - order ODE 's. Y : INOUT Array of values of the y ( t ) vector , of length NEQ . Input : For the first call , Y should contain the values of y ( t ) at t = T . ( Y is an input variable only if ISTATE = 1. ) Output : On return , Y will contain the values at the new t - value . T : INOUT Value of the independent variable . On return it will be the current value of t ( normally TOUT ) . TOUT : IN Next point where output is desired ( . NE . T ) . ITOL : IN 1 or 2 according as ATOL ( below ) is a scalar or an array . RTOL : IN Relative tolerance parameter ( scalar ) . ATOL : IN Absolute tolerance parameter ( scalar or array ) . If ITOL = 1 , ATOL need not be dimensioned . If ITOL = 2 , ATOL must be dimensioned at least NEQ . The estimated local error in Y ( i ) will be controlled so as to be roughly less ( in magnitude ) than EWT ( i ) = RTOL * ABS ( Y ( i )) + ATOL if ITOL = 1 , or EWT ( i ) = RTOL * ABS ( Y ( i )) + ATOL ( i ) if ITOL = 2. Thus the local error test passes if , in each component , either the absolute error is less than ATOL ( or ATOL ( i )), or the relative error is less than RTOL . Use RTOL = 0.0 for pure absolute error control , and use ATOL = 0.0 ( or ATOL ( i ) = 0.0 ) for pure relative error control . Caution : Actual ( global ) errors may exceed these local tolerances , so choose them conservatively . ITASK : IN Flag indicating the task DLSODE is to perform . Use ITASK = 1 for normal computation of output values of y at t = TOUT . ISTATE : INOUT Index used for input and output to specify the state of the calculation . Input : 1 This is the first call for a problem . 2 This is a subsequent call . Output : 1 Nothing was done , because TOUT was equal to T . 2 DLSODE was successful ( otherwise , negative ) . Note that ISTATE need not be modified after a successful return . - 1 Excess work done on this call ( perhaps wrong MF ) . - 2 Excess accuracy requested ( tolerances too small ) . - 3 Illegal input detected ( see printed message ) . - 4 Repeated error test failures ( check all inputs ) . - 5 Repeated convergence failures ( perhaps bad Jacobian supplied or wrong choice of MF or tolerances ) . - 6 Error weight became zero during problem ( solution component i vanished , and ATOL or ATOL ( i ) = 0. ) . IOPT : IN Flag indicating whether optional inputs are used : 0 No . 1 Yes . ( See \"Optional inputs\" under \"Long Description , \" Part 1.) RWORK : WORK Real work array of length at least : 20 + 16 * NEQ for MF = 10 , 22 + 9 * NEQ + NEQ ** 2 for MF = 21 or 22 , 22 + 10 * NEQ + ( 2 * ML + MU ) * NEQ for MF = 24 or 25. LRW : IN Declared length of RWORK ( in user 's DIMENSION statement ) . IWORK : WORK Integer work array of length at least : 20 for MF = 10 , 20 + NEQ for MF = 21 , 22 , 24 , or 25. If MF = 24 or 25 , input in IWORK ( 1 ), IWORK ( 2 ) the lower and upper Jacobian half - bandwidths ML , MU . On return , IWORK contains information that may be of interest to the user : Name Location Meaning ----- --------- ----------------------------------------- NST IWORK ( 11 ) Number of steps taken for the problem so far . NFE IWORK ( 12 ) Number of f evaluations for the problem so far . NJE IWORK ( 13 ) Number of Jacobian evaluations ( and of matrix LU decompositions ) for the problem so far . NQU IWORK ( 14 ) Method order last used ( successfully ) . LENRW IWORK ( 17 ) Length of RWORK actually required . This is defined on normal returns and on an illegal input return for insufficient storage . LENIW IWORK ( 18 ) Length of IWORK actually required . This is defined on normal returns and on an illegal input return for insufficient storage . LIW : IN Declared length of IWORK ( in user 's DIMENSION statement ) . JAC : EXT Name of subroutine for Jacobian matrix ( MF = 21 or 24 ) . If used , this name must be declared EXTERNAL in calling program . If not used , pass a dummy name . The form of JAC must be : SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) INTEGER NEQ , ML , MU , NROWPD DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) See item c , under \"Description\" below for more information about JAC . MF : IN Method flag . Standard values are : 10 Nonstiff ( Adams ) method , no Jacobian used . 21 Stiff ( BDF ) method , user - supplied full Jacobian . 22 Stiff method , internally generated full Jacobian . 24 Stiff method , user - supplied banded Jacobian . 25 Stiff method , internally generated banded Jacobian . LONG DESCRIPTION DLSODE solves the initial value problem for stiff or nonstiff systems of first - order ODE 's, dy / dt = f ( t , y ) , or , in component form , dy ( i ) / dt = f ( i ) = f ( i , t , y ( 1 ), y ( 2 ), ... , y ( NEQ )) ( i = 1 , ... , NEQ ) . DLSODE is a package based on the GEAR and GEARB packages , and on the October 23 , 1978 , version of the tentative ODEPACK user interface standard , with minor modifications . The steps in solving such a problem are as follows . a . First write a subroutine of the form SUBROUTINE F ( NEQ , T , Y , YDOT ) INTEGER NEQ DOUBLE PRECISION T , Y ( * ), YDOT ( * ) which supplies the vector function f by loading YDOT ( i ) with f ( i ) . b . Next determine ( or guess ) whether or not the problem is stiff . Stiffness occurs when the Jacobian matrix df / dy has an eigenvalue whose real part is negative and large in magnitude compared to the reciprocal of the t span of interest . If the problem is nonstiff , use method flag MF = 10. If it is stiff , there are four standard choices for MF , and DLSODE requires the Jacobian matrix in some form . This matrix is regarded either as full ( MF = 21 or 22 ), or banded ( MF = 24 or 25 ) . In the banded case , DLSODE requires two half - bandwidth parameters ML and MU . These are , respectively , the widths of the lower and upper parts of the band , excluding the main diagonal . Thus the band consists of the locations ( i , j ) with i - ML <= j <= i + MU , and the full bandwidth is ML + MU + 1 . c . If the problem is stiff , you are encouraged to supply the Jacobian directly ( MF = 21 or 24 ), but if this is not feasible , DLSODE will compute it internally by difference quotients ( MF = 22 or 25 ) . If you are supplying the Jacobian , write a subroutine of the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) INTEGER NEQ , ML , MU , NRWOPD DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) which provides df / dy by loading PD as follows : - For a full Jacobian ( MF = 21 ), load PD ( i , j ) with df ( i ) / dy ( j ), the partial derivative of f ( i ) with respect to y ( j ) . ( Ignore the ML and MU arguments in this case . ) - For a banded Jacobian ( MF = 24 ), load PD ( i - j + MU + 1 , j ) with df ( i ) / dy ( j ); i . e . , load the diagonal lines of df / dy into the rows of PD from the top down . - In either case , only nonzero elements need be loaded . d . Write a main program that calls subroutine DLSODE once for each point at which answers are desired . This should also provide for possible use of logical unit 6 for output of error messages by DLSODE . Before the first call to DLSODE , set ISTATE = 1 , set Y and T to the initial values , and set TOUT to the first output point . To continue the integration after a successful return , simply reset TOUT and call DLSODE again . No other parameters need be reset . EXAMPLES The following is a simple example problem , with the coding needed for its solution by DLSODE . The problem is from chemical kinetics , and consists of the following three rate equations : dy1 / dt = - . 04 * y1 + 1 . E4 * y2 * y3 dy2 / dt = . 04 * y1 - 1 . E4 * y2 * y3 - 3 . E7 * y2 ** 2 dy3 / dt = 3 . E7 * y2 ** 2 on the interval from t = 0 . 0 to t = 4 . E10 , with initial conditions y1 = 1 . 0 , y2 = y3 = 0 . The problem is stiff . The following coding solves this problem with DLSODE , using MF = 21 and printing results at t = . 4 , 4 ., ..., 4 . E10 . It uses ITOL = 2 and ATOL much smaller for y2 than for y1 or y3 because y2 has much smaller values . At the end of the run , statistical quantities of interest are printed . program dlsode_ex use m_odepack implicit none external fex external jex integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y integer :: iopt , iout , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 58 ) :: rwork neq = 3 y ( 1 ) = 1.D0 y ( 2 ) = 0.D0 y ( 3 ) = 0.D0 t = 0.D0 tout = . 4 D0 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 58 liw = 23 mf = 21 do iout = 1 , 12 call dlsode ( fex ,[ neq ], y , t , tout , itol ,[ rtol ], atol , itask , istate , iopt , & & rwork , lrw , iwork , liw , jex , mf ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0.D0 endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99030 format ( / ' No. steps =' , i4 , ',  No. f-s =' , i4 , ',  No. J-s =' , i4 ) end program dlsode_ex subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( inout ), dimension ( 3 ) :: Ydot Ydot ( 1 ) = - . 04 D0 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) Ydot ( 3 ) = 3.D7 * Y ( 2 ) * Y ( 2 ) Ydot ( 2 ) = - Ydot ( 1 ) - Ydot ( 3 ) end subroutine fex subroutine jex ( Neq , T , Y , Ml , Mu , Pd , Nrpd ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y integer :: Ml integer :: Mu real ( kind = dp ), intent ( inout ), dimension ( Nrpd , 3 ) :: Pd integer , intent ( in ) :: Nrpd Pd ( 1 , 1 ) = - . 04 D0 Pd ( 1 , 2 ) = 1.D4 * Y ( 3 ) Pd ( 1 , 3 ) = 1.D4 * Y ( 2 ) Pd ( 2 , 1 ) = . 04 D0 Pd ( 2 , 3 ) = - Pd ( 1 , 3 ) Pd ( 3 , 2 ) = 6.D7 * Y ( 2 ) Pd ( 2 , 2 ) = - Pd ( 1 , 2 ) - Pd ( 3 , 2 ) end subroutine jex The output from this program (on a Cray-1 in single precision)\n is as follows.\n\n At t =  4.0000e-01   y =  9.851726e-01  3.386406e-05  1.479357e-02\n At t =  4.0000e+00   y =  9.055142e-01  2.240418e-05  9.446344e-02\n At t =  4.0000e+01   y =  7.158050e-01  9.184616e-06  2.841858e-01\n At t =  4.0000e+02   y =  4.504846e-01  3.222434e-06  5.495122e-01\n At t =  4.0000e+03   y =  1.831701e-01  8.940379e-07  8.168290e-01\n At t =  4.0000e+04   y =  3.897016e-02  1.621193e-07  9.610297e-01\n At t =  4.0000e+05   y =  4.935213e-03  1.983756e-08  9.950648e-01\n At t =  4.0000e+06   y =  5.159269e-04  2.064759e-09  9.994841e-01\n At t =  4.0000e+07   y =  5.306413e-05  2.122677e-10  9.999469e-01\n At t =  4.0000e+08   y =  5.494530e-06  2.197825e-11  9.999945e-01\n At t =  4.0000e+09   y =  5.129458e-07  2.051784e-12  9.999995e-01\n At t =  4.0000e+10   y = -7.170603e-08 -2.868241e-13  1.000000e+00\n\n No. steps = 330,  No. f-s = 405,  No. J-s = 69 *Accuracy:\n     The accuracy of the solution depends on the choice of tolerances\n     RTOL and ATOL.  Actual (global) errors may exceed these local\n     tolerances, so choose them conservatively. *Cautions:\n     The work arrays should not be altered between calls to DLSODE for\n     the same problem, except possibly for the conditional and optional\n     inputs. *Portability:\n     Since NEQ is dimensioned inside DLSODE, some compilers may object\n     to a call to DLSODE with NEQ a scalar variable.  In this event,\n     use DIMENSION NEQ(1).  Similar remarks apply to RTOL and ATOL. Note to Cray users : For maximum efficiency , use the CFT77 compiler . Appropriate compiler optimization directives have been inserted for CFT77 . *Reference:\n     Alan C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE\n     Solvers,” in Scientific Computing, R. S. Stepleman, et al., Eds.\n     (North-Holland, Amsterdam, 1983), pp. 55-64. *Long Description:\n     The following complete description of the user interface to\n     DLSODE consists of four parts: 1. The call sequence to subroutine DLSODE , which is a driver routine for the solver . This includes descriptions of both the call sequence arguments and user - supplied routines . Following these descriptions is a description of optional inputs available through the call sequence , and then a description of optional outputs in the work arrays . 2. Descriptions of other routines in the DLSODE package that may be ( optionally ) called by the user . These provide the ability to alter error message handling , save and restore the internal COMMON , and obtain specified derivatives of the solution y ( t ) . 3. Descriptions of COMMON block to be declared in overlay or similar environments , or to be saved when doing an interrupt of the problem and continued solution later . 4. Description of two routines in the DLSODE package , either of which the user may replace with his own version , if desired . These relate to the measurement of errors . Part 1. Call Sequence ---------------------- Arguments --------- The call sequence parameters used for input only are F , NEQ , TOUT , ITOL , RTOL , ATOL , ITASK , IOPT , LRW , LIW , JAC , MF , and those used for both input and output are Y , T , ISTATE . The work arrays RWORK and IWORK are also used for conditional and optional inputs and optional outputs . ( The term output here refers to the return from subroutine DLSODE to the user 's calling program . ) The legality of input parameters will be thoroughly checked on the initial call for the problem , but not checked thereafter unless a change in input parameters is flagged by ISTATE = 3 on input . The descriptions of the call arguments are as follows . F The name of the user - supplied subroutine defining the ODE system . The system must be put in the first - order form dy / dt = f ( t , y ), where f is a vector - valued function of the scalar t and the vector y . Subroutine F is to compute the function f . It is to have the form SUBROUTINE F ( NEQ , T , Y , YDOT ) DOUBLE PRECISION T , Y ( * ), YDOT ( * ) where NEQ , T , and Y are input , and the array YDOT = f ( T , Y ) is output . Y and YDOT are arrays of length NEQ . Subroutine F should not alter Y ( 1 ), ... , Y ( NEQ ) . F must be declared EXTERNAL in the calling program . Subroutine F may access user - defined quantities in NEQ ( 2 ), ... and / or in Y ( NEQ ( 1 ) + 1 ), ... , if NEQ is an array ( dimensioned in F ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y below . If quantities computed in the F routine are needed externally to DLSODE , an extra call to F should be made for this purpose , for consistent and accurate results . If only the derivative dy / dt is needed , use DINTDY instead . NEQ The size of the ODE system ( number of first - order ordinary differential equations ) . Used only for input . NEQ may be decreased , but not increased , during the problem . If NEQ is decreased ( with ISTATE = 3 on input ), the remaining components of Y should be left undisturbed , if these are to be accessed in F and / or JAC . Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODE package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to F and JAC . Hence , if it is an array , locations NEQ ( 2 ), ... may be used to store other integer data and pass it to F and / or JAC . Subroutines F and / or JAC must include NEQ in a DIMENSION statement in that case . Y A real array for the vector of dependent variables , of length NEQ or more . Used for both input and output on the first call ( ISTATE = 1 ), and only for output on other calls . On the first call , Y must contain the vector of initial values . On output , Y contains the computed solution vector , evaluated at T . If desired , the Y array may be used for other purposes between calls to the solver . This array is passed as the Y argument in all calls to F and JAC . Hence its length may exceed NEQ , and locations Y ( NEQ + 1 ), ... may be used to store other real data and pass it to F and / or JAC . ( The DLSODE package accesses only Y ( 1 ), ... , Y ( NEQ ) . ) T The independent variable . On input , T is used only on the first call , as the initial point of the integration . On output , after each call , T is the value at which a computed solution Y is evaluated ( usually the same as TOUT ) . On an error return , T is the farthest point reached . TOUT The next value of T at which a computed solution is desired . Used only for input . When starting the problem ( ISTATE = 1 ), TOUT may be equal to T for one call , then should not equal T for the next call . For the initial T , an input value of TOUT . NE . T is used in order to determine the direction of the integration ( i . e . , the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in T ) is permitted . If ITASK = 2 or 5 ( one - step modes ), TOUT is ignored after the first call ( i . e . , the first call with TOUT . NE . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR . ( See \"Optional Outputs\" below for TCUR and HU . ) ITOL An indicator for the type of error control . See description below under ATOL . Used only for input . RTOL A relative error tolerance parameter , either a scalar or an array of length NEQ . See description below under ATOL . Input only . ATOL An absolute error tolerance parameter , either a scalar or an array of length NEQ . Input only . The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector e = ( e ( i )) of estimated local errors in Y , according to an inequality of the form rms - norm of ( e ( i ) / EWT ( i ) ) <= 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ), and the rms - norm ( root - mean - square norm ) here is rms - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be nonnegative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) ---- ------ ------ ----------------------------- 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array array RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user 's calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . , of EWT ) should be scaled down uniformly . ITASK An index specifying the task to be performed . Input only . ITASK has the following values and meanings : 1 Normal computation of output values of y ( t ) at t = TOUT ( by overshooting and interpolating ) . 2 Take one step only and return . 3 Stop at the first internal mesh point at or beyond t = TOUT and return . 4 Normal computation of output values of y ( t ) at t = TOUT but without overshooting t = TCRIT . TCRIT must be input as RWORK ( 1 ) . TCRIT may be equal to or beyond TOUT , but not behind it in the direction of integration . This option is useful if the problem has a singularity at or beyond t = TCRIT . 5 Take one step , without passing TCRIT , and return . TCRIT must be input as RWORK ( 1 ) . Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ), it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at T = TOUT are returned first ) . ISTATE An index used for input and output to specify the state of the calculation . On input , the values of ISTATE are as follows : 1 This is the first call for the problem ( initializations will be done ) . See \"Note\" below . 2 This is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 This is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , ML , MU , and any of the optional inputs except H0 . ( See IWORK description for ML and MU . ) Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . NE . T requires ISTATE = 1 on input . On output , ISTATE has the following values and meanings : 1 Nothing was done , as TOUT was equal to T with ISTATE = 1 on input . 2 The integration was performed successfully . - 1 An excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value > 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ; see \"Optional Inputs\" below . - 2 Too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 Illegal input was detected , before taking any integration steps . See written message for details . ( Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . ) - 4 There were repeated error - test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 There were repeated convergence - test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . This may be caused by an inaccurate Jacobian matrix , if one is being used . - 6 EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . The integration was successful as far as T . Note : Since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT An integer flag to specify whether any optional inputs are being used on this call . Input only . The optional inputs are listed under a separate heading below . 0 No optional inputs are being used . Default values will be used in all cases . 1 One or more optional inputs are being used . RWORK A real working array ( double precision ) . The length of RWORK must be at least 20 + NYH * ( MAXORD + 1 ) + 3 * NEQ + LWM where NYH = the initial value of NEQ , MAXORD = 12 ( if METH = 1 ) or 5 ( if METH = 2 ) ( unless a smaller value is given as an optional input ), LWM = 0 if MITER = 0 , LWM = NEQ ** 2 + 2 if MITER = 1 or 2 , LWM = NEQ + 2 if MITER = 3 , and LWM = ( 2 * ML + MU + 1 ) * NEQ + 2 if MITER = 4 or 5. ( See the MF description below for METH and MITER . ) Thus if MAXORD has its default value and NEQ is constant , this length is : 20 + 16 * NEQ for MF = 10 , 22 + 16 * NEQ + NEQ ** 2 for MF = 11 or 12 , 22 + 17 * NEQ for MF = 13 , 22 + 17 * NEQ + ( 2 * ML + MU ) * NEQ for MF = 14 or 15 , 20 + 9 * NEQ for MF = 20 , 22 + 9 * NEQ + NEQ ** 2 for MF = 21 or 22 , 22 + 10 * NEQ for MF = 23 , 22 + 10 * NEQ + ( 2 * ML + MU ) * NEQ for MF = 24 or 25. The first 20 words of RWORK are reserved for conditional and optional inputs and optional outputs . The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT , the critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . See ITASK . LRW The length of the array RWORK , as declared by the user . ( This will be checked by the solver . ) IWORK An integer work array . Its length must be at least 20 if MITER = 0 or 3 ( MF = 10 , 13 , 20 , 23 ), or 20 + NEQ otherwise ( MF = 11 , 12 , 14 , 15 , 21 , 22 , 24 , 25 ) . ( See the MF description below for MITER . ) The first few words of IWORK are used for conditional and optional inputs and optional outputs . The following two words in IWORK are conditional inputs : IWORK ( 1 ) = ML These are the lower and upper half - IWORK ( 2 ) = MU bandwidths , respectively , of the banded Jacobian , excluding the main diagonal . The band is defined by the matrix locations ( i , j ) with i - ML <= j <= i + MU . ML and MU must satisfy 0 <= ML , MU <= NEQ - 1. These are required if MITER is 4 or 5 , and ignored otherwise . ML and MU may in fact be the band parameters for a matrix to which df / dy is only approximately equal . LIW The length of the array IWORK , as declared by the user . ( This will be checked by the solver . ) Note : The work arrays must not be altered between calls to DLSODE for the same problem , except possibly for the conditional and optional inputs , and except for the last 3 * NEQ words of RWORK . The latter space is used for internal scratch space , and so is available for use by the user outside DLSODE between calls , if desired ( but not for use by F or JAC ) . JAC The name of the user - supplied routine ( MITER = 1 or 4 ) to compute the Jacobian matrix , df / dy , as a function of the scalar t and the vector y . ( See the MF description below for MITER . ) It is to have the form SUBROUTINE JAC ( NEQ , T , Y , ML , MU , PD , NROWPD ) DOUBLE PRECISION T , Y ( * ), PD ( NROWPD , * ) where NEQ , T , Y , ML , MU , and NROWPD are input and the array PD is to be loaded with partial derivatives ( elements of the Jacobian matrix ) on output . PD must be given a first dimension of NROWPD . T and Y have the same meaning as in subroutine F . In the full matrix case ( MITER = 1 ), ML and MU are ignored , and the Jacobian is to be loaded into PD in columnwise manner , with df ( i ) / dy ( j ) loaded into PD ( i , j ) . In the band matrix case ( MITER = 4 ), the elements within the band are to be loaded into PD in columnwise manner , with diagonal lines of df / dy loaded into the rows of PD . Thus df ( i ) / dy ( j ) is to be loaded into PD ( i - j + MU + 1 , j ) . ML and MU are the half - bandwidth parameters ( see IWORK ) . The locations in PD in the two triangular areas which correspond to nonexistent matrix elements can be ignored or loaded arbitrarily , as they are overwritten by DLSODE . JAC need not provide df / dy exactly . A crude approximation ( possibly with a smaller bandwidth ) will do . In either case , PD is preset to zero by the solver , so that only the nonzero elements need be loaded by JAC . Each call to JAC is preceded by a call to F with the same arguments NEQ , T , and Y . Thus to gain some efficiency , intermediate quantities shared by both calculations may be saved in a user COMMON block by F and not recomputed by JAC , if desired . Also , JAC may alter the Y array , if desired . JAC must be declared EXTERNAL in the calling program . Subroutine JAC may access user - defined quantities in NEQ ( 2 ), ... and / or in Y ( NEQ ( 1 ) + 1 ), ... if NEQ is an array ( dimensioned in JAC ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y above . MF The method flag . Used only for input . The legal values of MF are 10 , 11 , 12 , 13 , 14 , 15 , 20 , 21 , 22 , 23 , 24 , and 25. MF has decimal digits METH and MITER : MF = 10 * METH + MITER . METH indicates the basic linear multistep method : 1 Implicit Adams method . 2 Method based on backward differentiation formulas ( BDF 's). MITER indicates the corrector iteration method : 0 Functional iteration ( no Jacobian matrix is involved ) . 1 Chord iteration with a user - supplied full ( NEQ by NEQ ) Jacobian . 2 Chord iteration with an internally generated ( difference quotient ) full Jacobian ( using NEQ extra calls to F per df / dy value ) . 3 Chord iteration with an internally generated diagonal Jacobian approximation ( using one extra call to F per df / dy evaluation ) . 4 Chord iteration with a user - supplied banded Jacobian . 5 Chord iteration with an internally generated banded Jacobian ( using ML + MU + 1 extra calls to F per df / dy evaluation ) . If MITER = 1 or 4 , the user must supply a subroutine JAC ( the name is arbitrary ) as described above under JAC . For other values of MITER , a dummy argument can be used . Optional Inputs --------------- The following is a list of the optional inputs provided for in the call sequence . ( See also Part 2. ) For each such input variable , this table lists its name as used in this documentation , its location in the call sequence , its meaning , and the default value . The use of any of these inputs requires IOPT = 1 , and in that case all of these inputs are examined . A value of zero for any of these optional inputs will cause the default value to be used . Thus to use a subset of the optional inputs , simply preload locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively , and then set those of interest to nonzero values . Name Location Meaning and default value ------ --------- ----------------------------------------------- H0 RWORK ( 5 ) Step size to be attempted on the first step . The default value is determined by the solver . HMAX RWORK ( 6 ) Maximum absolute step size allowed . The default value is infinite . HMIN RWORK ( 7 ) Minimum absolute step size allowed . The default value is 0. ( This lower bound is not enforced on the final step before reaching TCRIT when ITASK = 4 or 5. ) MAXORD IWORK ( 5 ) Maximum order to be allowed . The default value is 12 if METH = 1 , and 5 if METH = 2. ( See the MF description above for METH . ) If MAXORD exceeds the default value , it will be reduced to the default value . If MAXORD is changed during the problem , it may cause the current order to be reduced . MXSTEP IWORK ( 6 ) Maximum number of ( internally defined ) steps allowed during one call to the solver . The default value is 500. MXHNIL IWORK ( 7 ) Maximum number of messages printed ( per problem ) warning that T + H = T on a step ( H = step size ) . This must be positive to result in a nondefault value . The default value is 10. Optional Outputs ---------------- As optional additional output from DLSODE , the variables listed below are quantities related to the performance of DLSODE which are available to the user . These are communicated by way of the work arrays , but also have internal mnemonic names as shown . Except where stated otherwise , all of these outputs are defined on any successful return from DLSODE , and on any return with ISTATE = - 1 , - 2 , - 4 , - 5 , or - 6. On an illegal input return ( ISTATE = - 3 ), they will be unchanged from their existing values ( if any ), except possibly for TOLSF , LENRW , and LENIW . On any error return , outputs relevant to the error will be defined , as noted below . Name Location Meaning ----- --------- ------------------------------------------------ HU RWORK ( 11 ) Step size in t last used ( successfully ) . HCUR RWORK ( 12 ) Step size to be attempted on the next step . TCUR RWORK ( 13 ) Current value of the independent variable which the solver has actually reached , i . e . , the current internal mesh point in t . On output , TCUR will always be at least as far as the argument T , but may be farther ( if interpolation was done ) . TOLSF RWORK ( 14 ) Tolerance scale factor , greater than 1.0 , computed when a request for too much accuracy was detected ( ISTATE = - 3 if detected at the start of the problem , ISTATE = - 2 otherwise ) . If ITOL is left unaltered but RTOL and ATOL are uniformly scaled up by a factor of TOLSF for the next call , then the solver is deemed likely to succeed . ( The user may also ignore TOLSF and alter the tolerance parameters in any other way appropriate . ) NST IWORK ( 11 ) Number of steps taken for the problem so far . NFE IWORK ( 12 ) Number of F evaluations for the problem so far . NJE IWORK ( 13 ) Number of Jacobian evaluations ( and of matrix LU decompositions ) for the problem so far . NQU IWORK ( 14 ) Method order last used ( successfully ) . NQCUR IWORK ( 15 ) Order to be attempted on the next step . IMXER IWORK ( 16 ) Index of the component of largest magnitude in the weighted local error vector ( e ( i ) / EWT ( i ) ), on an error return with ISTATE = - 4 or - 5. LENRW IWORK ( 17 ) Length of RWORK actually required . This is defined on normal returns and on an illegal input return for insufficient storage . LENIW IWORK ( 18 ) Length of IWORK actually required . This is defined on normal returns and on an illegal input return for insufficient storage . The following two arrays are segments of the RWORK array which may also be of interest to the user as optional outputs . For each array , the table below gives its internal name , its base address in RWORK , and its description . Name Base address Description ---- ------------ ---------------------------------------------- YH 21 The Nordsieck history array , of size NYH by ( NQCUR + 1 ), where NYH is the initial value of NEQ . For j = 0 , 1 , ... , NQCUR , column j + 1 of YH contains HCUR ** j / factorial ( j ) times the jth derivative of the interpolating polynomial currently representing the solution , evaluated at t = TCUR . ACOR LENRW - NEQ + 1 Array of size NEQ used for the accumulated corrections on each step , scaled on output to represent the estimated local error in Y on the last step . This is the vector e in the description of the error control . It is defined only on successful return from DLSODE . Part 2. Other Callable Routines -------------------------------- The following are optional calls which the user may make to gain additional capabilities in conjunction with DLSODE . Form of call Function ------------------------ ---------------------------------------- CALL XSETUN ( LUN ) Set the logical unit number , LUN , for output of messages from DLSODE , if the default is not desired . The default value of LUN is 6. This call may be made at any time and will take effect immediately . CALL XSETF ( MFLAG ) Set a flag to control the printing of messages by DLSODE . MFLAG = 0 means do not print . ( Danger : this risks losing valuable information . ) MFLAG = 1 means print ( the default ) . This call may be made at any time and will take effect immediately . CALL DSRCOM ( RSAV , ISAV , JOB ) Saves and restores the contents of the internal COMMON blocks used by DLSODE ( see Part 3 below ) . RSAV must be a real array of length 218 or more , and ISAV must be an integer array of length 37 or more . JOB = 1 means save COMMON into RSAV / ISAV . JOB = 2 means restore COMMON from same . DSRCOM is useful if one is interrupting a run and restarting later , or alternating between two or more problems solved with DLSODE . CALL DINTDY (,,,,,) Provide derivatives of y , of various ( see below ) orders , at a specified point t , if desired . It may be called only after a successful return from DLSODE . Detailed instructions follow . Detailed instructions for using DINTDY -------------------------------------- The form of the CALL is : CALL DINTDY ( T , K , RWORK ( 21 ), NYH , DKY , IFLAG ) The input parameters are : T Value of independent variable where answers are desired ( normally the same as the T last returned by DLSODE ) . For valid results , T must lie between TCUR - HU and TCUR . ( See \"Optional Outputs\" above for TCUR and HU . ) K Integer order of the derivative desired . K must satisfy 0 <= K <= NQCUR , where NQCUR is the current order ( see \"Optional Outputs\" ) . The capability corresponding to K = 0 , i . e . , computing y ( t ), is already provided by DLSODE directly . Since NQCUR >= 1 , the first derivative dy / dt is always available with DINTDY . RWORK ( 21 ) The base address of the history array YH . NYH Column length of YH , equal to the initial value of NEQ . The output parameters are : DKY Real array of length NEQ containing the computed value of the Kth derivative of y ( t ) . IFLAG Integer flag , returned as 0 if K and T were legal , - 1 if K was illegal , and - 2 if T was illegal . On an error return , a message is also written . Part 3. Common Blocks ---------------------- If DLSODE is to be used in an overlay situation , the user must declare , in the primary overlay , the variables in : ( 1 ) the call sequence to DLSODE , ( 2 ) the internal COMMON block / DLS001 / , of length 255 ( 218 double precision words followed by 37 integer words ) . If DLSODE is used on a system in which the contents of internal COMMON blocks are not preserved between calls , the user should declare the above COMMON block in his main program to insure that its contents are preserved . If the solution of a given problem by DLSODE is to be interrupted and then later continued , as when restarting an interrupted run or alternating between two or more problems , the user should save , following the return from the last DLSODE call prior to the interruption , the contents of the call sequence variables and the internal COMMON block , and later restore these values before the next DLSODE call for that problem . In addition , if XSETUN and / or XSETF was called for non - default handling of error messages , then these calls must be repeated . To save and restore the COMMON block , use subroutine DSRCOM ( see Part 2 above ) . Part 4. Optionally Replaceable Solver Routines ----------------------------------------------- Below are descriptions of two routines in the DLSODE package which relate to the measurement of errors . Either routine can be replaced by a user - supplied version , if desired . However , since such a replacement may have a major impact on performance , it should be done only when absolutely necessary , and only with great caution . ( Note : The means by which the package version of a routine is superseded by the user 's version may be system- dependent . ) DEWSET ------ The following subroutine is called just before each internal integration step , and sets the array of error weights , EWT , as described under ITOL / RTOL / ATOL above : SUBROUTINE DEWSET ( NEQ , ITOL , RTOL , ATOL , YCUR , EWT ) where NEQ , ITOL , RTOL , and ATOL are as in the DLSODE call sequence , YCUR contains the current dependent variable vector , and EWT is the array of weights set by DEWSET . If the user supplies this subroutine , it must return in EWT ( i ) ( i = 1 , ... , NEQ ) a positive quantity suitable for comparing errors in Y ( i ) to . The EWT array returned by DEWSET is passed to the DVNORM routine ( see below ), and also used by DLSODE in the computation of the optional output IMXER , the diagonal Jacobian approximation , and the increments for difference quotient Jacobians . In the user - supplied version of DEWSET , it may be desirable to use the current values of derivatives of y . Derivatives up to order NQ are available from the history array YH , described above under optional outputs . In DEWSET , YH is identical to the YCUR array , extended to NQ + 1 columns with a column length of NYH and scale factors of H ** j / factorial ( j ) . On the first call for the problem , given by NST = 0 , NQ is 1 and H is temporarily set to 1.0 . NYH is the initial value of NEQ . The quantities NQ , H , and NST can be obtained by including in SEWSET the statements : DOUBLE PRECISION RLS COMMON / DLS001 / RLS ( 218 ), ILS ( 37 ) NQ = ILS ( 33 ) NST = ILS ( 34 ) H = RLS ( 212 ) Thus , for example , the current value of dy / dt can be obtained as YCUR ( NYH + i ) / H ( i = 1 , ... , NEQ ) ( and the division by H is unnecessary when NST = 0 ) . DVNORM ------ DVNORM is a real function routine which computes the weighted root - mean - square norm of a vector v : d = DVNORM ( n , v , w ) where : n = the length of the vector , v = real array of length n containing the vector , w = real array of length n containing weights , d = SQRT ( ( 1 / n ) * sum ( v ( i ) * w ( i )) ** 2 ) . DVNORM is called with n = NEQ and with w ( i ) = 1.0 / EWT ( i ), where EWT is as set by subroutine DEWSET . If the user supplies this function , it should return a nonnegative value of DVNORM suitable for use in the error control in DLSODE . None of the arguments should be altered by DVNORM . For example , a user - supplied DVNORM routine might : - Substitute a max - norm of ( v ( i ) * w ( i )) for the rms - norm , or - Ignore some components of v in the norm , with the effect of suppressing the error control on those components of Y . Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf Calls proc~~dlsode~~CallsGraph proc~dlsode dlsode proc~dewset dewset proc~dlsode->proc~dewset proc~dintdy dintdy proc~dlsode->proc~dintdy proc~xerrwd xerrwd proc~dlsode->proc~xerrwd proc~dumach dumach proc~dlsode->proc~dumach proc~dstode dstode proc~dlsode->proc~dstode proc~dvnorm dvnorm proc~dlsode->proc~dvnorm proc~dintdy->proc~xerrwd proc~dstode->proc~dvnorm proc~dcfode dcfode proc~dstode->proc~dcfode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsode.html"},{"title":"dlsodes – odepack","text":"public subroutine dlsodes(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) This is the 12 November 2003 version of\n DLSODES: Livermore Solver for Ordinary Differential Equations\n          with general Sparse Jacobian matrix. This version is in double precision. DLSODES solves the initial value problem for stiff or nonstiff\n systems of first order ODEs, dy/dt = f(t,y),  or, in component form,\n dy(i)/dt = f(i) = f(i,t,y(1),y(2),...,y(NEQ)) (i = 1,...,NEQ). DLSODES is a variant of the DLSODE package, and is intended for\n problems in which the Jacobian matrix df/dy has an arbitrary\n sparse structure (when the problem is stiff). Authors:       Alan C. Hindmarsh\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Andrew H. Sherman\n                J. S. Nolen and Associates\n                Houston, TX 77084 References:\n 1.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: I. The Symmetric Codes,\n     Int. J. Num. Meth. Eng., 18 (1982), pp. 1145-1151. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: II. The Nonsymmetric Codes,\n     Research Report No. 114, Dept. of Computer Sciences, Yale\n     University, 1977. Summary of Usage. Communication between the user and the DLSODES package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First provide a subroutine of the form:\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n which supplies the vector function f by loading YDOT(i) with f(i). B. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, there are two standard\n choices for the method flag, MF = 121 and MF = 222.  In both cases,\n DLSODES requires the Jacobian matrix in some form, and it treats this\n matrix in general sparse form, with sparsity structure determined\n internally.  (For options where the user supplies the sparsity\n structure, see the full description of MF below.) C. If the problem is stiff, you are encouraged to supply the Jacobian\n directly (MF = 121), but if this is not feasible, DLSODES will\n compute it internally by difference quotients (MF = 222).\n If you are supplying the Jacobian, provide a subroutine of the form:\n               SUBROUTINE JAC (NEQ, T, Y, J, IAN, JAN, PDJ)\n               DOUBLE PRECISION T, Y( ), IAN( ), JAN( ), PDJ( )\n Here NEQ, T, Y, and J are input arguments, and the JAC routine is to\n load the array PDJ (of length NEQ) with the J-th column of df/dy.\n I.e., load PDJ(i) with df(i)/dy(J) for all relevant values of i.\n The arguments IAN and JAN should be ignored for normal situations.\n DLSODES will call the JAC routine with J = 1,2,…,NEQ.\n Only nonzero elements need be loaded.  Usually, a crude approximation\n to df/dy, possibly with fewer nonzero elements, will suffice. D. Write a main program which calls Subroutine DLSODES once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODES.  On the first call to DLSODES, supply arguments as follows:\n F      = name of subroutine for right-hand side vector f.\n          This name must be declared External in calling program.\n NEQ    = number of first order ODEs.\n Y      = array of initial values, of length NEQ.\n T      = the initial value of the independent variable t.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          The estimated local error in Y(i) will be controlled so as\n          to be roughly less (in magnitude) than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of Y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             20 + 16 NEQ            for MF = 10,\n             20 + (2 + 1./LENRAT) NNZ + (11 + 9./LENRAT)*NEQ\n                                    for MF = 121 or 222,\n          where:\n          NNZ    = the number of nonzero elements in the sparse\n                   Jacobian (if this is unknown, use an estimate), and\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          In any case, the required size of RWORK cannot generally\n          be predicted in advance if MF = 121 or 222, and the value\n          above is a rough estimate of a crude lower bound.  Some\n          experimentation with this size may be necessary.\n          (When known, the correct required length is an optional\n          output, available in IWORK(17).)\n LRW    = declared length of RWORK (in user dimension).\n IWORK  = integer work array of length at least 30.\n LIW    = declared length of IWORK (in user dimension).\n JAC    = name of subroutine for Jacobian matrix (MF = 121).\n          If used, this name must be declared External in calling\n          program.  If not used, pass a dummy name.\n MF     = method flag.  Standard values are:\n          10  for nonstiff (Adams) method, no Jacobian used\n          121 for stiff (BDF) method, user-supplied sparse Jacobian\n          222 for stiff method, internally generated sparse Jacobian\n Note that the main program must declare arrays Y, RWORK, IWORK,\n and possibly ATOL. E. The output from the first call (or any call) is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable (normally TOUT).\n ISTATE = 2  if DLSODES was successful, negative otherwise.\n          -1 means excess work done on this call (perhaps wrong MF).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad Jacobian\n             supplied or wrong choice of MF or tolerances).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 means a fatal error return flag came from sparse solver\n             CDRV by way of DPRJS or DSOLSS.  Should never happen.\n          A return with ISTATE = -1, -4, or -5 may result from using\n          an inappropriate sparsity structure, one that is quite\n          different from the initial structure.  Consider calling\n          DLSODES again with ISTATE = 3 to force the structure to be\n          reevaluated.  See the full description of ISTATE below. F. To continue the integration after a successful return, simply\n reset TOUT and call DLSODES again.  No other parameters need be reset. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODES.  The problem is from chemical\n kinetics, and consists of the following 12 rate equations:\n    dy1/dt  = -rk1 y1\n    dy2/dt  = rk1 y1 + rk11 rk14 y4 + rk19 rk14 y5\n                - rk3 y2 y3 - rk15 y2 y12 - rk2 y2\n    dy3/dt  = rk2 y2 - rk5 y3 - rk3 y2 y3 - rk7 y10 y3\n                + rk11 rk14 y4 + rk12 rk14 y6\n    dy4/dt  = rk3 y2 y3 - rk11 rk14 y4 - rk4 y4\n    dy5/dt  = rk15 y2 y12 - rk19 rk14 y5 - rk16 y5\n    dy6/dt  = rk7 y10 y3 - rk12 rk14 y6 - rk8 y6\n    dy7/dt  = rk17 y10 y12 - rk20 rk14 y7 - rk18 y7\n    dy8/dt  = rk9 y10 - rk13 rk14 y8 - rk10 y8\n    dy9/dt  = rk4 y4 + rk16 y5 + rk8 y6 + rk18 y7\n    dy10/dt = rk5 y3 + rk12 rk14 y6 + rk20 rk14 y7\n                + rk13 rk14 y8 - rk7 y10 y3 - rk17 y10 y12\n                - rk6 y10 - rk9 y10\n    dy11/dt = rk10 y8\n    dy12/dt = rk6 y10 + rk19 rk14 y5 + rk20 rk14 y7\n                - rk15 y2 y12 - rk17 y10 y12 with rk1 = rk5 = 0.1,  rk4 = rk8 = rk16 = rk18 = 2.5,\n      rk10 = 5.0,  rk2 = rk6 = 10.0,  rk14 = 30.0,\n      rk3 = rk7 = rk9 = rk11 = rk12 = rk13 = rk19 = rk20 = 50.0,\n      rk15 = rk17 = 100.0. The t interval is from 0 to 1000, and the initial conditions\n are y1 = 1, y2 = y3 = … = y12 = 0.  The problem is stiff. The following coding solves this problem with DLSODES, using MF = 121\n and printing results at t = .1, 1., 10., 100., 1000.  It uses\n ITOL = 1 and mixed relative/absolute tolerance controls.\n During the run and at the end, statistical quantities of interest\n are printed (see optional outputs in the full description below). program dlsodes_ex use m_odepack implicit none external fex external jex integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: atol , rtol , t , tout integer :: i , iopt , iout , istate , itask , itol , leniw , lenrw , & & mf , neq , nfe , nje , nlu , nnz , nnzlu , nst integer , dimension ( 30 ) :: iwork integer , save :: liw , lrw real ( kind = dp ), dimension ( 500 ) :: rwork real ( kind = dp ), dimension ( 12 ) :: y data lrw / 500 / , liw / 30 / neq = 12 do i = 1 , neq y ( i ) = 0.0D0 enddo y ( 1 ) = 1.0D0 t = 0.0D0 tout = 0.1D0 itol = 1 rtol = 1.0D-4 atol = 1.0D-6 itask = 1 istate = 1 iopt = 0 mf = 121 do iout = 1 , 5 call dlsodes ( fex ,[ neq ], y , t , tout , itol ,[ rtol ],[ atol ], itask , istate , iopt ,& & rwork , lrw , iwork , liw , jex , mf ) write ( 6 , 99010 ) t , iwork ( 11 ), rwork ( 11 ),( y ( i ), i = 1 , neq ) 99010 format ( // ' At t =' , d11 . 3 , 4 x , ' No. steps =' , i5 , 4 x , ' Last step =' , & & d11 . 3 / '  Y array =  ' , 4 D14 . 5 / 13 x , 4 D14 . 5 / 13 x , 4 D14 . 5 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0.0D0 endif enddo lenrw = iwork ( 17 ) leniw = iwork ( 18 ) nst = iwork ( 11 ) nfe = iwork ( 12 ) nje = iwork ( 13 ) nlu = iwork ( 21 ) nnz = iwork ( 19 ) nnzlu = iwork ( 25 ) + iwork ( 26 ) + neq write ( 6 , 99030 ) lenrw , leniw , nst , nfe , nje , nlu , nnz , nnzlu 99030 format ( // ' Required RWORK size =' , i4 , '   IWORK size =' , & & i4 / ' No. steps =' , i4 , '   No. f-s =' , i4 , '   No. J-s =' , i4 , & & '   No. LU-s =' , i4 / ' No. of nonzeros in J =' , i5 , & & '   No. of nonzeros in LU =' , i5 ) end program dlsodes_ex subroutine fex ( Neq , T , Y , Ydot ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 12 ) :: Y real ( kind = dp ), intent ( out ), dimension ( 12 ) :: Ydot real ( kind = dp ), save :: rk1 , rk10 , rk11 , rk12 , rk13 , rk14 , rk15 , & & rk16 , rk17 , rk2 , rk3 , rk4 , rk5 , rk6 , rk7 ,& & rk8 , rk9 real , save :: rk18 , rk19 , rk20 data rk1 / 0.1D0 / , rk2 / 1 0.0D0 / , rk3 / 5 0.0D0 / , rk4 / 2.5D0 / , rk5 / 0.1D0 / ,& & rk6 / 1 0.0D0 / , rk7 / 5 0.0D0 / , rk8 / 2.5D0 / , rk9 / 5 0.0D0 / , & & rk10 / 5.0D0 / , rk11 / 5 0.0D0 / , rk12 / 5 0.0D0 / , rk13 / 5 0.0D0 / , & & rk14 / 3 0.0D0 / , rk15 / 10 0.0D0 / , rk16 / 2.5D0 / , rk17 / 10 0.0D0 / , & & rk18 / 2.5D0 / , rk19 / 5 0.0D0 / , rk20 / 5 0.0D0 / Ydot ( 1 ) = - rk1 * Y ( 1 ) Ydot ( 2 ) = rk1 * Y ( 1 ) + rk11 * rk14 * Y ( 4 ) + rk19 * rk14 * Y ( 5 ) - rk3 * Y ( 2 ) * Y ( 3 ) & & - rk15 * Y ( 2 ) * Y ( 12 ) - rk2 * Y ( 2 ) Ydot ( 3 ) = rk2 * Y ( 2 ) - rk5 * Y ( 3 ) - rk3 * Y ( 2 ) * Y ( 3 ) - rk7 * Y ( 10 ) * Y ( 3 ) & & + rk11 * rk14 * Y ( 4 ) + rk12 * rk14 * Y ( 6 ) Ydot ( 4 ) = rk3 * Y ( 2 ) * Y ( 3 ) - rk11 * rk14 * Y ( 4 ) - rk4 * Y ( 4 ) Ydot ( 5 ) = rk15 * Y ( 2 ) * Y ( 12 ) - rk19 * rk14 * Y ( 5 ) - rk16 * Y ( 5 ) Ydot ( 6 ) = rk7 * Y ( 10 ) * Y ( 3 ) - rk12 * rk14 * Y ( 6 ) - rk8 * Y ( 6 ) Ydot ( 7 ) = rk17 * Y ( 10 ) * Y ( 12 ) - rk20 * rk14 * Y ( 7 ) - rk18 * Y ( 7 ) Ydot ( 8 ) = rk9 * Y ( 10 ) - rk13 * rk14 * Y ( 8 ) - rk10 * Y ( 8 ) Ydot ( 9 ) = rk4 * Y ( 4 ) + rk16 * Y ( 5 ) + rk8 * Y ( 6 ) + rk18 * Y ( 7 ) Ydot ( 10 ) = rk5 * Y ( 3 ) + rk12 * rk14 * Y ( 6 ) + rk20 * rk14 * Y ( 7 ) + rk13 * rk14 * Y ( 8 ) & & - rk7 * Y ( 10 ) * Y ( 3 ) - rk17 * Y ( 10 ) * Y ( 12 ) - rk6 * Y ( 10 ) - rk9 * Y ( 10 ) Ydot ( 11 ) = rk10 * Y ( 8 ) Ydot ( 12 ) = rk6 * Y ( 10 ) + rk19 * rk14 * Y ( 5 ) + rk20 * rk14 * Y ( 7 ) - rk15 * Y ( 2 ) * Y ( 12 )& & - rk17 * Y ( 10 ) * Y ( 12 ) end subroutine fex subroutine jex ( Neq , T , Y , J , Ia , Ja , Pdj ) implicit none ! integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 12 ) :: Y integer , intent ( in ) :: J integer , dimension ( * ) :: Ia integer , dimension ( * ) :: Ja real ( kind = dp ), intent ( out ), dimension ( 12 ) :: Pdj ! real ( kind = dp ), save :: rk1 , rk10 , rk11 , rk12 , rk13 , rk14 , rk15 , & & rk16 , rk17 , rk2 , rk3 , rk4 , rk5 , rk6 , rk7 ,& & rk8 , rk9 real , save :: rk18 , rk19 , rk20 ! data rk1 / 0.1D0 / , rk2 / 1 0.0D0 / , rk3 / 5 0.0D0 / , rk4 / 2.5D0 / , rk5 / 0.1D0 / ,& & rk6 / 1 0.0D0 / , rk7 / 5 0.0D0 / , rk8 / 2.5D0 / , rk9 / 5 0.0D0 / , & & rk10 / 5.0D0 / , rk11 / 5 0.0D0 / , rk12 / 5 0.0D0 / , rk13 / 5 0.0D0 / , & & rk14 / 3 0.0D0 / , rk15 / 10 0.0D0 / , rk16 / 2.5D0 / , rk17 / 10 0.0D0 / , & & rk18 / 2.5D0 / , rk19 / 5 0.0D0 / , rk20 / 5 0.0D0 / select case ( J ) case ( 2 ) Pdj ( 2 ) = - rk3 * Y ( 3 ) - rk15 * Y ( 12 ) - rk2 Pdj ( 3 ) = rk2 - rk3 * Y ( 3 ) Pdj ( 4 ) = rk3 * Y ( 3 ) Pdj ( 5 ) = rk15 * Y ( 12 ) Pdj ( 12 ) = - rk15 * Y ( 12 ) case ( 3 ) Pdj ( 2 ) = - rk3 * Y ( 2 ) Pdj ( 3 ) = - rk5 - rk3 * Y ( 2 ) - rk7 * Y ( 10 ) Pdj ( 4 ) = rk3 * Y ( 2 ) Pdj ( 6 ) = rk7 * Y ( 10 ) Pdj ( 10 ) = rk5 - rk7 * Y ( 10 ) case ( 4 ) Pdj ( 2 ) = rk11 * rk14 Pdj ( 3 ) = rk11 * rk14 Pdj ( 4 ) = - rk11 * rk14 - rk4 Pdj ( 9 ) = rk4 case ( 5 ) Pdj ( 2 ) = rk19 * rk14 Pdj ( 5 ) = - rk19 * rk14 - rk16 Pdj ( 9 ) = rk16 Pdj ( 12 ) = rk19 * rk14 case ( 6 ) Pdj ( 3 ) = rk12 * rk14 Pdj ( 6 ) = - rk12 * rk14 - rk8 Pdj ( 9 ) = rk8 Pdj ( 10 ) = rk12 * rk14 case ( 7 ) Pdj ( 7 ) = - rk20 * rk14 - rk18 Pdj ( 9 ) = rk18 Pdj ( 10 ) = rk20 * rk14 Pdj ( 12 ) = rk20 * rk14 case ( 8 ) Pdj ( 8 ) = - rk13 * rk14 - rk10 Pdj ( 10 ) = rk13 * rk14 Pdj ( 11 ) = rk10 case ( 9 ) case ( 10 ) Pdj ( 3 ) = - rk7 * Y ( 3 ) Pdj ( 6 ) = rk7 * Y ( 3 ) Pdj ( 7 ) = rk17 * Y ( 12 ) Pdj ( 8 ) = rk9 Pdj ( 10 ) = - rk7 * Y ( 3 ) - rk17 * Y ( 12 ) - rk6 - rk9 Pdj ( 12 ) = rk6 - rk17 * Y ( 12 ) case ( 11 ) case ( 12 ) Pdj ( 2 ) = - rk15 * Y ( 2 ) Pdj ( 5 ) = rk15 * Y ( 2 ) Pdj ( 7 ) = rk17 * Y ( 10 ) Pdj ( 10 ) = - rk17 * Y ( 10 ) Pdj ( 12 ) = - rk15 * Y ( 2 ) - rk17 * Y ( 10 ) case default Pdj ( 1 ) = - rk1 Pdj ( 2 ) = rk1 endselect end subroutine jex The output of this program (on a Cray-1 in single precision)\n is as follows: At t =  1.000e-01     No. steps =   12     Last step =  1.515e-02\n  Y array =     9.90050e-01   6.28228e-03   3.65313e-03   7.51934e-07\n                1.12167e-09   1.18458e-09   1.77291e-12   3.26476e-07\n                5.46720e-08   9.99500e-06   4.48483e-08   2.76398e-06 At t =  1.000e+00     No. steps =   33     Last step =  7.880e-02\n  Y array =     9.04837e-01   9.13105e-03   8.20622e-02   2.49177e-05\n                1.85055e-06   1.96797e-06   1.46157e-07   2.39557e-05\n                3.26306e-05   7.21621e-04   5.06433e-05   3.05010e-03 At t =  1.000e+01     No. steps =   48     Last step =  1.239e+00\n  Y array =     3.67876e-01   3.68958e-03   3.65133e-01   4.48325e-05\n                6.10798e-05   4.33148e-05   5.90211e-05   1.18449e-04\n                3.15235e-03   3.56531e-03   4.15520e-03   2.48741e-01 At t =  1.000e+02     No. steps =   91     Last step =  3.764e+00\n  Y array =     4.44981e-05   4.42666e-07   4.47273e-04  -3.53257e-11\n                2.81577e-08  -9.67741e-11   2.77615e-07   1.45322e-07\n                1.56230e-02   4.37394e-06   1.60104e-02   9.52246e-01 At t =  1.000e+03     No. steps =  111     Last step =  4.156e+02\n  Y array =    -2.65492e-13   2.60539e-14  -8.59563e-12   6.29355e-14\n               -1.78066e-13   5.71471e-13  -1.47561e-12   4.58078e-15\n                1.56314e-02   1.37878e-13   1.60184e-02   9.52719e-01 Required RWORK size = 442   IWORK size =  30\n No. steps = 111   No. f-s = 142   No. J-s =   2   No. LU-s =  20\n No. of nonzeros in J =   44   No. of nonzeros in LU =   50 Full Description of User Interface to DLSODES. The user interface to DLSODES consists of the following parts. The call sequence to Subroutine DLSODES, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODES package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODES package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, MF,\n and those used for both input and output are\n     Y, T, ISTATE.\n The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODES to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F      = the name of the user-supplied subroutine defining the\n          ODE system.  The system must be put in the first-order\n          form dy/dt = f(t,y), where f is a vector-valued function\n          of the scalar t and the vector y.  Subroutine F is to\n          compute the function f.  It is to have the form\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n          where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n          is output.  Y and YDOT are arrays of length NEQ.\n          Subroutine F should not alter y(1),…,y(NEQ).\n          F must be declared External in the calling program. Subroutine F may access user - defined quantities in NEQ ( 2 ) ,... and / or in Y ( NEQ ( 1 ) + 1 ) ,... if NEQ is an array ( dimensioned in F ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y below . If quantities computed in the F routine are needed externally to DLSODES , an extra call to F should be made for this purpose , for consistent and accurate results . If only the derivative dy / dt is needed , use DINTDY instead . NEQ    = the size of the ODE system (number of first order\n          ordinary differential equations).  Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in F and/or JAC. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODES package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to F and JAC . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to F and / or JAC . Subroutines F and / or JAC must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 1), and only for output on other calls.\n          on the first call, Y must contain the vector of initial\n          values.  On output, Y contains the computed solution vector,\n          evaluated at T.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to\n      F and JAC.  Hence its length may exceed NEQ, and locations\n      Y(NEQ+1),... may be used to store other real data and\n      pass it to F and/or JAC.  (The DLSODES package accesses only\n      Y(1),...,Y(NEQ).) T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          on output, after each call, T is the value at which a\n          computed solution Y is evaluated (usually the same as TOUT).\n          On an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form RMS - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) , and the RMS - norm ( root - mean - square norm ) here is RMS - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be non - negative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array array RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          Input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at t = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          the state of the calculation. On input , the values of ISTATE are as follows . 1 means this is the first call for the problem ( initializations will be done ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , the conditional inputs IA and JA , and any of the optional inputs except H0 . In particular , if MITER = 1 or 2 , a call with ISTATE = 3 will cause the sparsity structure of the problem to be recomputed ( or reread from IA and JA if MOSS = 0 ) . Note : a preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 1 on input . On output , ISTATE has the following values and meanings . 1 means nothing was done ; TOUT = T and ISTATE = 1 on input . 2 means the integration was performed successfully . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . This may be caused by an inaccurate Jacobian matrix , if one is being used . - 6 means EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . The integration was successful as far as T . - 7 means a fatal error return flag came from the sparse solver CDRV by way of DPRJS or DSOLSS ( numerical factorization or backsolve ) . This should never happen . The integration was successful as far as T . Note : an error return with ISTATE = - 1 , - 4 , or - 5 and with MITER = 1 or 2 may mean that the sparsity structure of the problem has changed significantly since it was last determined ( or input ) . In that case , one can attempt to complete the integration by setting ISTATE = 3 on the next call , so that a new structure determination is done . Note : since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a work array used for a mixture of real (double precision)\n          and integer work space.\n          The length of RWORK (in real words) must be at least\n             20 + NYH (MAXORD + 1) + 3 NEQ + LWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LWM = 0                                    if MITER = 0,\n          LWM = 2 NNZ + 2 NEQ + (NNZ+9 NEQ)/LENRAT   if MITER = 1,\n          LWM = 2 NNZ + 2 NEQ + (NNZ+10 NEQ)/LENRAT  if MITER = 2,\n          LWM = NEQ + 2                              if MITER = 3.\n          In the above formulas,\n          NNZ    = number of nonzero elements in the Jacobian matrix.\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          (See the MF description for METH and MITER.)\n          Thus if MAXORD has its default value and NEQ is constant,\n          the minimum length of RWORK is:\n             20 + 16 NEQ        for MF = 10,\n             20 + 16 NEQ + LWM  for MF = 11, 111, 211, 12, 112, 212,\n             22 + 17 NEQ        for MF = 13,\n             20 +  9 NEQ        for MF = 20,\n             20 +  9 NEQ + LWM  for MF = 21, 121, 221, 22, 122, 222,\n             22 + 10 NEQ        for MF = 23.\n          If MITER = 1 or 2, the above formula for LWM is only a\n          crude lower bound.  The required length of RWORK cannot\n          be readily predicted in general, as it depends on the\n          sparsity structure of the problem.  Some experimentation\n          may be necessary. The first 20 words of RWORK are reserved for conditional and optional inputs and optional outputs . The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer work array.  The length of IWORK must be at least\n             31 + NEQ + NNZ   if MOSS = 0 and MITER = 1 or 2, or\n             30               otherwise.\n          (NNZ is the number of nonzero elements in df/dy.) In DLSODES , IWORK is used only for conditional and optional inputs and optional outputs . The following two blocks of words in IWORK are conditional inputs , required if MOSS = 0 and MITER = 1 or 2 , but not otherwise ( see the description of MF for MOSS ) . IWORK ( 30 + j ) = IA ( j ) ( j = 1 ,..., NEQ + 1 ) IWORK ( 31 + NEQ + k ) = JA ( k ) ( k = 1 ,..., NNZ ) The two arrays IA and JA describe the sparsity structure to be assumed for the Jacobian matrix . JA contains the row indices where nonzero elements occur , reading in columnwise order , and IA contains the starting locations in JA of the descriptions of columns 1 ,..., NEQ , in that order , with IA ( 1 ) = 1 . Thus , for each column index j = 1 ,..., NEQ , the values of the row index i in column j where a nonzero element may occur are given by i = JA ( k ) , where IA ( j ) . le . k . lt . IA ( j + 1 ) . If NNZ is the total number of nonzero locations assumed , then the length of the JA array is NNZ , and IA ( NEQ + 1 ) must be NNZ + 1 . Duplicate entries are not allowed . LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODES\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODES between calls, if\n desired (but not for use by F or JAC). JAC    = name of user-supplied routine (MITER = 1 or MOSS = 1) to\n          compute the Jacobian matrix, df/dy, as a function of\n          the scalar t and the vector y.  It is to have the form\n               SUBROUTINE JAC (NEQ, T, Y, J, IAN, JAN, PDJ)\n               DOUBLE PRECISION T, Y( ), IAN( ), JAN( ), PDJ( )\n          where NEQ, T, Y, J, IAN, and JAN are input, and the array\n          PDJ, of length NEQ, is to be loaded with column J\n          of the Jacobian on output.  Thus df(i)/dy(J) is to be\n          loaded into PDJ(i) for all relevant values of i.\n          Here T and Y have the same meaning as in Subroutine F,\n          and J is a column index (1 to NEQ).  IAN and JAN are\n          undefined in calls to JAC for structure determination\n          (MOSS = 1).  otherwise, IAN and JAN are structure\n          descriptors, as defined under optional outputs below, and\n          so can be used to determine the relevant row indices i, if\n          desired.\n               JAC need not provide df/dy exactly.  A crude\n          approximation (possibly with greater sparsity) will do.\n               In any case, PDJ is preset to zero by the solver,\n          so that only the nonzero elements need be loaded by JAC.\n          Calls to JAC are made with J = 1,…,NEQ, in that order, and\n          each such set of calls is preceded by a call to F with the\n          same arguments NEQ, T, and Y.  Thus to gain some efficiency,\n          intermediate quantities shared by both calculations may be\n          saved in a user Common block by F and not recomputed by JAC,\n          if desired.  JAC must not alter its input arguments.\n          JAC must be declared External in the calling program.\n               Subroutine JAC may access user-defined quantities in\n          NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n          (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n          See the descriptions of NEQ and Y above. MF     = the method flag.  Used only for input.\n          MF has three decimal digits– MOSS, METH, MITER–\n             MF = 100 MOSS + 10 METH + MITER.\n          MOSS indicates the method to be used to obtain the sparsity\n          structure of the Jacobian matrix if MITER = 1 or 2:\n            MOSS = 0 means the user has supplied IA and JA\n                     (see descriptions under IWORK above).\n            MOSS = 1 means the user has supplied JAC (see below)\n                     and the structure will be obtained from NEQ\n                     initial calls to JAC.\n            MOSS = 2 means the structure will be obtained from NEQ+1\n                     initial calls to F.\n          METH indicates the basic linear multistep method:\n            METH = 1 means the implicit Adams method.\n            METH = 2 means the method based on Backward\n                     Differentiation Formulas (BDFs).\n          MITER indicates the corrector iteration method:\n            MITER = 0 means functional iteration (no Jacobian matrix\n                      is involved).\n            MITER = 1 means chord iteration with a user-supplied\n                      sparse Jacobian, given by Subroutine JAC.\n            MITER = 2 means chord iteration with an internally\n                      generated (difference quotient) sparse Jacobian\n                      (using NGP extra calls to F per df/dy value,\n                      where NGP is an optional output described below.)\n            MITER = 3 means chord iteration with an internally\n                      generated diagonal Jacobian approximation\n                      (using 1 extra call to F per df/dy evaluation).\n          If MITER = 1 or MOSS = 1, the user must supply a Subroutine\n          JAC (the name is arbitrary) as described above under JAC.\n          Otherwise, a dummy argument can be used. The standard choices for MF are : MF = 10 for a nonstiff problem , MF = 21 or 22 for a stiff problem with IA / JA supplied ( 21 if JAC is supplied , 22 if not ) , MF = 121 for a stiff problem with JAC supplied , but not IA / JA , MF = 222 for a stiff problem with neither IA / JA nor JAC supplied . The sparseness structure can be changed during the problem by making a call to DLSODES with ISTATE = 3 . Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) SETH    RWORK(8)  the element threshhold for sparsity determination\n                   when MOSS = 1 or 2.  If the absolute value of\n                   an estimated Jacobian element is .le. SETH, it\n                   will be assumed to be absent in the structure.\n                   The default value of SETH is 0. MAXORD  IWORK(5)  the maximum order to be allowed.  The default\n                   value is 12 if METH = 1, and 5 if METH = 2.\n                   If MAXORD exceeds the default value, it will\n                   be reduced to the default value.\n                   If MAXORD is changed during the problem, it may\n                   cause the current order to be reduced. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. Optional Outputs. As optional additional output from DLSODES, the variables listed\n below are quantities related to the performance of DLSODES\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODES, and on any return with\n ISTATE = -1, -2, -4, -5, or -6.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) NST     IWORK(11) the number of steps taken for the problem so far. NFE     IWORK(12) the number of f evaluations for the problem so far,\n                   excluding those for structure determination\n                   (MOSS = 2). NJE     IWORK(13) the number of Jacobian evaluations for the problem\n                   so far, excluding those for structure determination\n                   (MOSS = 1). NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. NNZ     IWORK(19) the number of nonzero elements in the Jacobian\n                   matrix, including the diagonal (MITER = 1 or 2).\n                   (This may differ from that given by IA(NEQ+1)-1\n                   if MOSS = 0, because of added diagonal entries.) NGP     IWORK(20) the number of groups of column indices, used in\n                   difference quotient Jacobian aproximations if\n                   MITER = 2.  This is also the number of extra f\n                   evaluations needed for each Jacobian evaluation. NLU     IWORK(21) the number of sparse LU decompositions for the\n                   problem so far. LYH     IWORK(22) the base address in RWORK of the history array YH,\n                   described below in this list. IPIAN   IWORK(23) the base address of the structure descriptor array\n                   IAN, described below in this list. IPJAN   IWORK(24) the base address of the structure descriptor array\n                   JAN, described below in this list. NZL     IWORK(25) the number of nonzero elements in the strict lower\n                   triangle of the LU factorization used in the chord\n                   iteration (MITER = 1 or 2). NZU     IWORK(26) the number of nonzero elements in the strict upper\n                   triangle of the LU factorization used in the chord\n                   iteration (MITER = 1 or 2).\n                   The total number of nonzeros in the factorization\n                   is therefore NZL + NZU + NEQ. The following four arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address, and its description.\n For YH and ACOR, the base addresses are in RWORK (a real array).\n The integer arrays IAN and JAN are to be obtained by declaring an\n integer array IWK and identifying IWK(1) with RWORK(21), using either\n an equivalence statement or a subroutine call.  Then the base\n addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained\n as optional outputs IWORK(23) and IWORK(24), respectively.\n Thus IAN(1) is IWK(IPIAN), etc. Name    Base Address      Description IAN    IPIAN (in IWK)  structure descriptor array of size NEQ + 1.\n JAN    IPJAN (in IWK)  structure descriptor array of size NNZ.\n         (see above)    IAN and JAN together describe the sparsity\n                        structure of the Jacobian matrix, as used by\n                        DLSODES when MITER = 1 or 2.\n                        JAN contains the row indices of the nonzero\n                        locations, reading in columnwise order, and\n                        IAN contains the starting locations in JAN of\n                        the descriptions of columns 1,…,NEQ, in\n                        that order, with IAN(1) = 1.  Thus for each\n                        j = 1,…,NEQ, the row indices i of the\n                        nonzero locations in column j are\n                        i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1).\n                        Note that IAN(NEQ+1) = NNZ + 1.\n                        (If MOSS = 0, IAN/JAN may differ from the\n                        input IA/JA because of a different ordering\n                        in each column, and added diagonal entries.) YH      LYH            the Nordsieck history array, of size NYH by\n          (optional     (NQCUR + 1), where NYH is the initial value\n           output)      of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR**j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR.  The base address LYH\n                        is another optional output, listed above. ACOR     LENRW-NEQ+1   array of size NEQ used for the accumulated\n                        corrections on each step, scaled on output\n                        to represent the estimated local error in y\n                        on the last step.  This is the vector E  in\n                        the description of the error control.  It is\n                        defined only on a successful return from\n                        DLSODES. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODES.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSODES, if\n                             the default is not desired.\n                             The default value of LUN is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSODES.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCMS(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSODES (see Part 3 below).\n                             RSAV must be a real array of length 224\n                             or more, and ISAV must be an integer\n                             array of length 71 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCMS is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSODES. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSODES. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = IWORK(22)\n   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the T last returned by DLSODES).\n             For valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (See optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(T), is already provided\n             by DLSODES directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n LYH       = the base address of the history array YH, obtained\n             as an optional output as shown above.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSODES is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSODES, and\n   (2) the two internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         /DLSS01/  of length  40  (6 double precision words\n                      followed by 34 integer words), If DLSODES is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODES is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODES call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODES call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCMS (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODES package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     Subroutine DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODES call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODES in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM.\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v:\n     D = DVNORM (N, V, W)\n where\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i) W(i)) *2 ).\n DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODES.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n   -substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n   -ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. REVISION HISTORY  (YYYYMMDD) 19810120  DATE WRITTEN\n 19820315  Upgraded MDI in ODRV package: operates on M + M-transpose.\n 19820426  Numerous revisions in use of work arrays;\n           use wordlength ratio LENRAT; added IPISP & LRAT to Common;\n           added optional outputs IPIAN/IPJAN;\n           numerous corrections to comments.\n 19830503  Added routine CNTNZU; added NZL and NZU to /LSS001/;\n           changed ADJLR call logic; added optional outputs NZL & NZU;\n           revised counter initializations; revised PREP stmt. numbers;\n           corrections to comments throughout.\n 19870320  Corrected jump on test of umax in CDRV routine;\n           added ISTATE = -7 return.\n 19870330  Major update: corrected comments throughout;\n           removed TRET from Common; rewrote EWSET with 4 loops;\n           fixed t test in INTDY; added Cray directives in STODE;\n           in STODE, fixed DELP init. and logic around PJAC call;\n           combined routines to save/restore Common;\n           passed LEVEL = 0 in error message calls (except run abort).\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           converted arithmetic IF statements to logical IF statements;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20020502  Corrected declarations in descriptions of user routines.\n 20031105  Restored ‘own’ variables to Common blocks, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants. Other routines in the DLSODES package. In addition to Subroutine DLSODES, the DLSODES package includes the\n following subroutines and function routines:\n  DIPREP   acts as an iterface between DLSODES and DPREP, and also does\n           adjusting of work space pointers and work arrays.\n  DPREP    is called by DIPREP to compute sparsity and do sparse matrix\n           preprocessing if MITER = 1 or 2.\n  JGROUP   is called by DPREP to compute groups of Jacobian column\n           indices for use when MITER = 2.\n  ADJLR    adjusts the length of required sparse matrix work space.\n           It is called by DPREP.\n  CNTNZU   is called by DPREP and counts the nonzero elements in the\n           strict upper triangle of J + J-transpose, where J = df/dy.\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DSTODE   is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DPRJS    computes and preprocesses the Jacobian matrix J = df/dy\n           and the Newton iteration matrix P = I - h l0 J.\n  DSOLSS   manages solution of linear system in chord iteration.\n  DEWSET   sets the error weight vector EWT before each step.\n  DVNORM   computes the weighted RMS-norm of a vector.\n  DSRCMS   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  ODRV     constructs a reordering of the rows and columns of\n           a matrix by the minimum degree algorithm.  ODRV is a\n           driver routine which calls Subroutines MD, MDI, MDM,\n           MDP, MDU, and SRO.  See Ref. 2 for details.  (The ODRV\n           module has been modified since Ref. 2, however.)\n  CDRV     performs reordering, symbolic factorization, numerical\n           factorization, or linear system solution operations,\n           depending on a path argument ipath.  CDRV is a\n           driver routine which calls Subroutines NROC, NSFC,\n           NNFC, NNSC, and NNTC.  See Ref. 3 for details.\n           DLSODES uses CDRV to solve linear systems in which the\n           coefficient matrix is  P = I - con*J, where I is the\n           identity, con is a scalar, and J is an approximation to\n           the Jacobian df/dy.  Because CDRV deals with rowwise\n           sparsity descriptions, CDRV works with P-transpose, not P.\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DVNORM, DUMACH, and IXSAV are function routines.\n All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf Calls proc~~dlsodes~~CallsGraph proc~dlsodes dlsodes proc~dewset dewset proc~dlsodes->proc~dewset proc~diprep diprep proc~dlsodes->proc~diprep proc~xerrwd xerrwd proc~dlsodes->proc~xerrwd proc~dumach dumach proc~dlsodes->proc~dumach proc~dvnorm dvnorm proc~dlsodes->proc~dvnorm proc~dstode dstode proc~dlsodes->proc~dstode proc~dintdy dintdy proc~dlsodes->proc~dintdy proc~dprep dprep proc~diprep->proc~dprep proc~dstode->proc~dvnorm proc~dcfode dcfode proc~dstode->proc~dcfode proc~dintdy->proc~xerrwd none~wrapup500 wrapup500 proc~dprep->none~wrapup500 none~wrapup400 wrapup400 proc~dprep->none~wrapup400 proc~odrv odrv proc~dprep->proc~odrv proc~adjlr adjlr proc~dprep->proc~adjlr proc~jgroup jgroup proc~dprep->proc~jgroup none~wrapup600 wrapup600 proc~dprep->none~wrapup600 none~wrapup700 wrapup700 proc~dprep->none~wrapup700 proc~cdrv cdrv proc~dprep->proc~cdrv proc~cntnzu cntnzu none~wrapup600->proc~cntnzu iwk iwk none~wrapup600->iwk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodes.html"},{"title":"dlsodi – odepack","text":"public subroutine dlsodi(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) This is the 18 November 2003 version of\n DLSODI: Livermore Solver for Ordinary Differential Equations\n         (Implicit form). This version is in double precision. DLSODI solves the initial value problem for linearly implicit\n systems of first order ODEs,\n     A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix,\n or, in component form,\n     ( a   * ( dy / dt ))  + … +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n       i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSODI is a variant version of the DLSODE package. Reference:\n     Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Jeffrey F. Painter\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Summary of Usage. Communication between the user and the DLSODI package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form:\n               SUBROUTINE RES (NEQ, T, Y, S, R, IRES)\n               DOUBLE PRECISION T, Y( ), S( ), R(*)\n which computes the residual function\n     r = g(t,y)  -  A(t,y) * s ,\n as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSODI.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. Next, decide whether full or banded form is more economical\n for the storage of matrices.  DLSODI must deal internally with the\n matrices A and dr/dy, where r is the residual function defined above.\n DLSODI generates a linear combination of these two matrices, and\n this is treated in either full or banded form.\n     The matrix structure is communicated by a method flag MF,\n which is 21 or 22 for the full case, and 24 or 25 in the band case.\n     In the banded case, DLSODI requires two half-bandwidth\n parameters ML and MU.  These are, respectively, the widths of the\n lower and upper parts of the band, excluding the main diagonal.\n Thus the band consists of the locations (i,j) with\n i-ML .le. j .le. i+MU, and the full bandwidth is ML+MU+1.\n Note that the band must accommodate the nonzero elements of\n A(t,y), dg/dy, and d(A*s)/dy (s fixed).  Alternatively, one\n can define a band that encloses only the elements that are relatively\n large in magnitude, and gain some economy in storage and possibly\n also efficiency, although the appropriate threshhold for\n retaining matrix elements is highly problem-dependent. C. You must also provide a subroutine of the form:\n               SUBROUTINE ADDA (NEQ, T, Y, ML, MU, P, NROWP)\n               DOUBLE PRECISION T, Y( ), P(NROWP, )\n which adds the matrix A = A(t,y) to the contents of the array P.\n T and the Y array are input and should not be altered.\n     In the full matrix case, this routine should add elements of\n to P in the usual order.  I.e., add A(i,j) to P(i,j).  (Ignore the\n ML and MU arguments in this case.)\n     In the band matrix case, this routine should add element A(i,j)\n to P(i-j+MU+1,j).  I.e., add the diagonal lines of A to the rows of\n P from the top down (the top line of A added to the first row of P). D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y) s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21 or 24, and provide a subroutine of the form:\n               SUBROUTINE JAC (NEQ, T, Y, S, ML, MU, P, NROWP)\n               DOUBLE PRECISION T, Y( ), S( ), P(NROWP, )\n which computes dr/dy as a function of t, y, and s.  Here T, Y, and\n S are inputs, and the routine is to load dr/dy into P as follows:\n     In the full matrix case (MF = 21), load P(i,j) with dr(i)/dy(j),\n the partial derivative of r(i) with respect to y(j).  (Ignore the\n ML and MU arguments in this case.)\n     In the band matrix case (MF = 24), load P(i-j+mu+1,j) with\n dr(i)/dy(j), i.e. load the diagonal lines of dr/dy into the rows of\n P from the top down.\n     In either case, only nonzero elements need be loaded, and the\n indexing of P is the same as in the ADDA routine.\n     Note that if A is independent of y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy.\n     If it is not feasible to provide a JAC routine, use\n MF = 22 or 25, and DLSODI will compute an approximate Jacobian\n internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSODI compute\n this vector (ISTATE = 0).  (DLSODI will solve the system A s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI.\n The input array YDOTI and the initial Y array must be consistent with\n the equations A dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI  must be approximately zero. F. Write a main program which calls Subroutine DLSODI once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODI.  On the first call to DLSODI, supply arguments as follows:\n RES    = name of user subroutine for residual function r.\n ADDA   = name of user subroutine for computing and adding A(t,y).\n JAC    = name of user subroutine for Jacobian matrix dr/dy\n          (MF = 21 or 24).  If not used, pass a dummy name.\n Note: the names for the RES and ADDA routines and (if used) the\n        JAC routine must be declared External in the calling program.\n NEQ    = number of scalar equations in the system.\n Y      = array of initial values, of length NEQ.\n YDOTI  = array of length NEQ (containing initial dy/dt if ISTATE = 1).\n T      = the initial value of the independent variable.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          the estimated local error in y(i) will be controlled so as\n          to be roughly less (in magnitude) than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: Actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1 if the\n          initial dy/dt is supplied, and 0 otherwise.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             22 +  9 NEQ + NEQ 2           for MF = 21 or 22,\n             22 + 10 NEQ + (2 ML + MU) NEQ  for MF = 24 or 25.\n LRW    = declared length of RWORK (in user’s dimension).\n IWORK  = integer work array of length at least 20 + NEQ.\n          If MF = 24 or 25, input in IWORK(1),IWORK(2) the lower\n          and upper half-bandwidths ML,MU.\n LIW    = declared length of IWORK (in user’s dimension).\n MF     = method flag.  Standard values are:\n          21 for a user-supplied full Jacobian.\n          22 for an internally generated full Jacobian.\n          24 for a user-supplied banded Jacobian.\n          25 for an internally generated banded Jacobian.\n          for other choices of MF, see the paragraph on MF in\n          the full description below.\n Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call (or any call) is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable (normally TOUT).\n ISTATE = 2  if DLSODI was successful, negative otherwise.\n          -1 means excess work done on this call (check all inputs).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad Jacobian\n             supplied or wrong choice of tolerances).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 cannot occur in casual use.\n          -8 means DLSODI was unable to compute the initial dy/dt.\n             In casual use, this means A(t,y) is initially singular.\n             Supply YDOTI and use ISTATE = 1 on the first call. If DLSODI returns ISTATE = -1, -4, or -5, then the output of\n  DLSODI also includes YDOTI = array containing residual vector\n  r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSODI again.  No other parameters need be reset. Example Problem. The following is a simple example problem, with the coding\n needed for its solution by DLSODI.  The problem is from chemical\n kinetics, and consists of the following three equations:\n     dy1/dt = -.04 y1 + 1.e4 y2 y3\n     dy2/dt = .04 y1 - 1.e4 y2 y3 - 3.e7 y2 *2\n       0.   = y1 + y2 + y3 - 1.\n on the interval from t = 0.0 to t = 4.e10, with initial conditions\n y1 = 1.0, y2 = y3 = 0. The following coding solves this problem with DLSODI, using MF = 21\n and printing results at t = .4, 4., …, 4.e10.  It uses\n ITOL = 2 and ATOL much smaller for y2 than y1 or y3 because\n y2 has much smaller values.  dy/dt is supplied in YDOTI. We had\n obtained the initial value of dy3/dt by differentiating the\n third equation and evaluating the first two at t = 0.\n At the end of the run, statistical quantities of interest are\n printed (see optional outputs in the full description below). program dlsodi_ex use m_odepack implicit none external aplusp external dgbydy external resid integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ), dimension ( 3 ) :: atol , y , ydoti integer :: iopt , iout , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 23 ) :: iwork real ( kind = dp ) :: rtol , t , tout real ( kind = dp ), dimension ( 58 ) :: rwork call reference () neq = 3 y ( 1 ) = 1. y ( 2 ) = 0. y ( 3 ) = 0. ydoti ( 1 ) = - . 04 ydoti ( 2 ) = . 04 ydoti ( 3 ) = 0. t = 0. tout = . 4 itol = 2 rtol = 1.D-4 atol ( 1 ) = 1.D-6 atol ( 2 ) = 1.D-10 atol ( 3 ) = 1.D-6 itask = 1 istate = 1 iopt = 0 lrw = 58 liw = 23 mf = 21 do iout = 1 , 12 call dlsodi ( resid , aplusp , dgbydy ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & atol , itask , istate , iopt , rwork , lrw , iwork , liw , mf ) write ( 6 , 99010 ) t , y ( 1 ), y ( 2 ), y ( 3 ) 99010 format ( ' At t =' , d12 . 4 , '   Y =' , 3 D14 . 6 ) if ( istate < 0 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout * 1 0. endif enddo write ( 6 , 99030 ) iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99030 format ( / ' No. steps =' , i4 , '  No. r-s =' , i4 , '  No. J-s =' , i4 ) end program dlsodi_ex subroutine resid ( Neq , T , Y , S , R , Ires ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), intent ( in ), dimension ( 3 ) :: S real ( kind = dp ), intent ( out ), dimension ( 3 ) :: R integer :: Ires R ( 1 ) = - . 04 * Y ( 1 ) + 1.D4 * Y ( 2 ) * Y ( 3 ) - S ( 1 ) R ( 2 ) = . 04 * Y ( 1 ) - 1.D4 * Y ( 2 ) * Y ( 3 ) - 3.D7 * Y ( 2 ) * Y ( 2 ) - S ( 2 ) R ( 3 ) = Y ( 1 ) + Y ( 2 ) + Y ( 3 ) - 1. end subroutine resid subroutine aplusp ( Neq , T , Y , Ml , Mu , P , Nrowp ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), dimension ( 3 ) :: Y integer :: Ml integer :: Mu real ( kind = dp ), intent ( inout ), dimension ( Nrowp , 3 ) :: P integer , intent ( in ) :: Nrowp P ( 1 , 1 ) = P ( 1 , 1 ) + 1. P ( 2 , 2 ) = P ( 2 , 2 ) + 1. end subroutine aplusp subroutine dgbydy ( Neq , T , Y , S , Ml , Mu , P , Nrowp ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer :: Neq real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( 3 ) :: Y real ( kind = dp ), dimension ( 3 ) :: S integer :: Ml integer :: Mu real ( kind = dp ), intent ( out ), dimension ( Nrowp , 3 ) :: P integer , intent ( in ) :: Nrowp P ( 1 , 1 ) = - . 04 P ( 1 , 2 ) = 1.D4 * Y ( 3 ) P ( 1 , 3 ) = 1.D4 * Y ( 2 ) P ( 2 , 1 ) = . 04 P ( 2 , 2 ) = - 1.D4 * Y ( 3 ) - 6.D7 * Y ( 2 ) P ( 2 , 3 ) = - 1.D4 * Y ( 2 ) P ( 3 , 1 ) = 1. P ( 3 , 2 ) = 1. P ( 3 , 3 ) = 1. end subroutine dgbydy The output of this program (on a CDC-7600 in single precision)\n is as follows: At t =  4.0000e-01   Y =  9.851726e-01  3.386406e-05  1.479357e-02\n   At t =  4.0000e+00   Y =  9.055142e-01  2.240418e-05  9.446344e-02\n   At t =  4.0000e+01   Y =  7.158050e-01  9.184616e-06  2.841858e-01\n   At t =  4.0000e+02   Y =  4.504846e-01  3.222434e-06  5.495122e-01\n   At t =  4.0000e+03   Y =  1.831701e-01  8.940379e-07  8.168290e-01\n   At t =  4.0000e+04   Y =  3.897016e-02  1.621193e-07  9.610297e-01\n   At t =  4.0000e+05   Y =  4.935213e-03  1.983756e-08  9.950648e-01\n   At t =  4.0000e+06   Y =  5.159269e-04  2.064759e-09  9.994841e-01\n   At t =  4.0000e+07   Y =  5.306413e-05  2.122677e-10  9.999469e-01\n   At t =  4.0000e+08   Y =  5.494532e-06  2.197826e-11  9.999945e-01\n   At t =  4.0000e+09   Y =  5.129457e-07  2.051784e-12  9.999995e-01\n   At t =  4.0000e+10   Y = -7.170472e-08 -2.868188e-13  1.000000e+00 No. steps = 330  No. r-s = 404  No. J-s =  69 Full Description of User Interface to DLSODI. The user interface to DLSODI consists of the following parts. The call sequence to Subroutine DLSODI, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODI package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODI package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF,\n and those used for both input and output are\n     Y, T, ISTATE, YDOTI.\n The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODI to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES    = the name of the user-supplied subroutine which supplies\n          the residual vector for the ODE system, defined by\n            r = g(t,y) - A(t,y) * s\n          as a function of the scalar t and the vectors\n          s and y (s approximates dy/dt).  This subroutine\n          is to have the form\n               SUBROUTINE RES (NEQ, T, Y, S, R, IRES)\n               DOUBLE PRECISION T, Y( ), S( ), R( )\n          where NEQ, T, Y, S, and IRES are input, and R and\n          IRES are output.  Y, S, and R are arrays of length NEQ.\n             On input, IRES indicates how DLSODI will use the\n          returned array R, as follows:\n             IRES = 1  means that DLSODI needs the full residual,\n                       r = g - A s, exactly.\n             IRES = -1 means that DLSODI is using R only to compute\n                       the Jacobian dr/dy by difference quotients.\n          The RES routine can ignore IRES, or it can omit some terms\n          if IRES = -1.  If A does not depend on y, then RES can\n          just return R = g when IRES = -1.  If g - A*s contains other\n          additive terms that are independent of y, these can also be\n          dropped, if done consistently, when IRES = -1.\n             The subroutine should set the flag IRES if it\n          encounters a halt condition or illegal input.\n          Otherwise, it should not reset IRES.  On output,\n             IRES = 1 or -1 represents a normal return, and\n          DLSODI continues integrating the ODE.  Leave IRES\n          unchanged from its input value.\n             IRES = 2 tells DLSODI to immediately return control\n          to the calling program, with ISTATE = 3.  This lets\n          the calling program change parameters of the problem,\n          if necessary.\n             IRES = 3 represents an error condition (for example, an\n          illegal value of y).  DLSODI tries to integrate the system\n          without getting IRES = 3 from RES.  If it cannot, DLSODI\n          returns with ISTATE = -7 or -1.\n             On an DLSODI return with ISTATE = 3, -1, or -7, the values\n          of T and Y returned correspond to the last point reached\n          successfully without getting the flag IRES = 2 or 3.\n             The flag values IRES = 2 and 3 should not be used to\n          handle switches or root-stop conditions.  This is better\n          done by calling DLSODI in a one-step mode and checking the\n          stopping function for a sign change at each step.\n             If quantities computed in the RES routine are needed\n          externally to DLSODI, an extra call to RES should be made\n          for this purpose, for consistent and accurate results.\n          To get the current dy/dt for the S argument, use DINTDY.\n             RES must be declared External in the calling\n          program.  See note below for more about RES. ADDA   = the name of the user-supplied subroutine which adds the\n          matrix A = A(t,y) to another matrix stored in the same form\n          as A.  The storage form is determined by MITER (see MF).\n          This subroutine is to have the form\n               SUBROUTINE ADDA (NEQ, T, Y, ML, MU, P, NROWP)\n               DOUBLE PRECISION T, Y( ), P(NROWP, )\n          where NEQ, T, Y, ML, MU, and NROWP are input and P is\n          output.  Y is an array of length NEQ, and the matrix P is\n          stored in an NROWP by NEQ array.\n             In the full matrix case ( MITER = 1 or 2) ADDA should\n          add  A    to P(i,j).  ML and MU are ignored.\n                i,j\n             In the band matrix case ( MITER = 4 or 5) ADDA should\n          add  A    to  P(i-j+MU+1,j).\n                i,j\n          See JAC for details on this band storage form.\n             ADDA must be declared External in the calling program.\n          See note below for more information about ADDA. JAC    = the name of the user-supplied subroutine which supplies the\n          Jacobian matrix, dr/dy, where r = g - A s.  The form of the\n          Jacobian matrix is determined by MITER.  JAC is required\n          if MITER = 1 or 4 – otherwise a dummy name can be\n          passed.  This subroutine is to have the form\n               SUBROUTINE JAC ( NEQ, T, Y, S, ML, MU, P, NROWP )\n               DOUBLE PRECISION T, Y( ), S( ), P(NROWP, )\n          where NEQ, T, Y, S, ML, MU, and NROWP are input and P\n          is output.  Y and S are arrays of length NEQ, and the\n          matrix P is stored in an NROWP by NEQ array.\n          P is to be loaded with partial derivatives (elements\n          of the Jacobian matrix) on output.\n             In the full matrix case (MITER = 1), ML and MU\n          are ignored and the Jacobian is to be loaded into P\n          by columns– i.e., dr(i)/dy(j) is loaded into P(i,j).\n             In the band matrix case (MITER = 4), the elements\n          within the band are to be loaded into P by columns,\n          with diagonal lines of dr/dy loaded into the\n          rows of P.  Thus dr(i)/dy(j) is to be loaded\n          into P(i-j+MU+1,j).  The locations in P in the two\n          triangular areas which correspond to nonexistent matrix\n          elements can be ignored or loaded arbitrarily, as they\n          they are overwritten by DLSODI.  ML and MU are the\n          half-bandwidth parameters (see IWORK).\n               In either case, P is preset to zero by the solver,\n          so that only the nonzero elements need be loaded by JAC.\n          Each call to JAC is preceded by a call to RES with the same\n          arguments NEQ, T, Y, and S.  Thus to gain some efficiency,\n          intermediate quantities shared by both calculations may be\n          saved in a user Common block by RES and not recomputed by JAC\n          if desired.  Also, JAC may alter the Y array, if desired.\n               JAC need not provide dr/dy exactly.  A crude\n          approximation (possibly with a smaller bandwidth) will do.\n               JAC must be declared External in the calling program.\n               See note below for more about JAC. Note on RES , ADDA , and JAC : These subroutines may access user - defined quantities in NEQ ( 2 ), ... and / or in Y ( NEQ ( 1 ) + 1 ), ... if NEQ is an array ( dimensioned in the subroutines ) and / or Y has length exceeding NEQ ( 1 ) . However , these routines should not alter NEQ ( 1 ), Y ( 1 ), ... , Y ( NEQ ) or any other input variables . See the descriptions of NEQ and Y below . NEQ    = the size of the system (number of first order ordinary\n          differential equations or scalar algebraic equations).\n          Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in RES, ADDA, or JAC. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODI package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to RES , ADDA , and JAC . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to RES , ADDA , or JAC . Each such subroutine must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 0 or 1), and only for output on other\n          calls.  On the first call, Y must contain the vector of\n          initial values.  On output, Y contains the computed solution\n          vector, evaluated at T.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n      ADDA, and JAC.  Hence its length may exceed NEQ,\n      and locations Y(NEQ+1),... may be used to store other real\n      data and pass it to RES, ADDA, or JAC.  (The DLSODI\n      package accesses only Y(1),...,Y(NEQ). ) YDOTI  = a real array for the initial value of the vector\n          dy/dt and for work space, of dimension at least NEQ. On input : If ISTATE = 0 , then DLSODI will compute the initial value of dy / dt , if A is nonsingular . Thus YDOTI will serve only as work space and may have any value . If ISTATE = 1 , then YDOTI must contain the initial value of dy / dt . If ISTATE = 2 or 3 ( continuation calls ) , then YDOTI may have any value . Note : If the initial value of A is singular , then DLSODI cannot compute the initial value of dy / dt , so it must be provided in YDOTI , with ISTATE = 1 . On output , when DLSODI terminates abnormally with ISTATE = - 1 , - 4 , or - 5 , YDOTI will contain the residual r = g ( t , y ) - A ( t , y ) * ( dy / dt ) . If r is large , t is near its initial value , and YDOTI is supplied with ISTATE = 1 , then there may have been an incorrect input value of YDOTI = dy / dt , or the problem ( as given to DLSODI ) may not have a solution . If desired , the YDOTI array may be used for other purposes between calls to the solver . T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          On output, after each call, T is the value at which a\n          computed solution Y is evaluated (usually the same as TOUT).\n          on an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 0 or 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form RMS - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) , and the RMS - norm ( root - mean - square norm ) here is RMS - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be non - negative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          Input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at t = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          state of the calculation. On input , the values of ISTATE are as follows . 0 means this is the first call for the problem , and DLSODI is to compute the initial value of dy / dt ( while doing other initializations ) . See note below . 1 means this is the first call for the problem , and the initial value of dy / dt has been supplied in YDOTI ( DLSODI will do other initializations ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , ML , MU , and any of the optional inputs except H0 . ( See IWORK description for ML and MU . ) Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 0 or 1 on input . On output , ISTATE has the following values and meanings . 0 or 1 means nothing was done ; TOUT = t and ISTATE = 0 or 1 on input . 2 means that the integration was performed successfully . 3 means that the user - supplied Subroutine RES signalled DLSODI to halt the integration and return ( IRES = 2 ) . Integration as far as T was achieved with no occurrence of IRES = 2 , but this flag was set on attempting the next step . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . This may be caused by an inaccurate Jacobian matrix . - 6 means EWT ( i ) became zero for some i during the integration . pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . the integration was successful as far as T . - 7 means that the user - supplied Subroutine RES set its error flag ( IRES = 3 ) despite repeated tries by DLSODI to avoid that condition . - 8 means that ISTATE was 0 on input but DLSODI was unable to compute the initial value of dy / dt . See the printed message for details . Note : Since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Similarly , ISTATE ( = 3 ) need not be reset if RES told DLSODI to return because the calling program must change the parameters of the problem . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a real working array (double precision).\n          The length of RWORK must be at least\n             20 + NYH (MAXORD + 1) + 3 NEQ + LENWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENWM   = NEQ 2 + 2    if MITER is 1 or 2, and\n          LENWM   = (2 ML+MU+1) NEQ + 2 if MITER is 4 or 5.\n          (See MF description for the definition of METH and MITER.)\n          Thus if MAXORD has its default value and NEQ is constant,\n          this length is\n             22 + 16*NEQ + NEQ 2         for MF = 11 or 12,\n             22 + 17 NEQ + (2 ML+MU) NEQ  for MF = 14 or 15,\n             22 +  9 NEQ + NEQ 2         for MF = 21 or 22,\n             22 + 10 NEQ + (2 ML+MU)*NEQ  for MF = 24 or 25.\n          The first 20 words of RWORK are reserved for conditional\n          and optional inputs and optional outputs. The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer work array.  The length of IWORK must be at least\n          20 + NEQ .  The first few words of IWORK are used for\n          conditional and optional inputs and optional outputs. The following 2 words in IWORK are conditional inputs : IWORK ( 1 ) = ML These are the lower and upper IWORK ( 2 ) = MU half - bandwidths , respectively , of the matrices in the problem -- the Jacobian dr / dy and the left - hand side matrix A . These half - bandwidths exclude the main diagonal , so the total bandwidth is ML + MU + 1 . The band is defined by the matrix locations ( i , j ) with i - ML . le . j . le . i + MU . ML and MU must satisfy 0 . le . ML , MU . le . NEQ - 1 . These are required if MITER is 4 or 5 , and ignored otherwise . ML and MU may in fact be the band parameters for matrices to which dr / dy and A are only approximately equal . LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODI\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODI between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF     = the method flag.  Used only for input.  The legal values of\n          MF are 11, 12, 14, 15, 21, 22, 24, and 25.\n          MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n            METH indicates the basic linear multistep method:\n              METH = 1 means the implicit Adams method.\n              METH = 2 means the method based on Backward\n                       Differentiation Formulas (BDFs).\n                The BDF method is strongly preferred for stiff\n              problems, while the Adams method is preferred when\n              the problem is not stiff.  If the matrix A(t,y) is\n              nonsingular, stiffness here can be taken to mean that of\n              the explicit ODE system dy/dt = A-inverse * g.  If A is\n              singular, the concept of stiffness is not well defined.\n                If you do not know whether the problem is stiff, we\n              recommend using METH = 2.  If it is stiff, the advantage\n              of METH = 2 over METH = 1 will be great, while if it is\n              not stiff, the advantage of METH = 1 will be slight.\n              If maximum efficiency is important, some experimentation\n              with METH may be necessary.\n            MITER indicates the corrector iteration method:\n              MITER = 1 means chord iteration with a user-supplied\n                        full (NEQ by NEQ) Jacobian.\n              MITER = 2 means chord iteration with an internally\n                        generated (difference quotient) full Jacobian.\n                        This uses NEQ+1 extra calls to RES per dr/dy\n                        evaluation.\n              MITER = 4 means chord iteration with a user-supplied\n                        banded Jacobian.\n              MITER = 5 means chord iteration with an internally\n                        generated banded Jacobian (using ML+MU+2\n                        extra calls to RES per dr/dy evaluation).\n              If MITER = 1 or 4, the user must supply a Subroutine JAC\n              (the name is arbitrary) as described above under JAC.\n              For other values of MITER, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n the use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) MAXORD  IWORK(5)  the maximum order to be allowed.  The default\n                   value is 12 if METH = 1, and 5 if METH = 2.\n                   If MAXORD exceeds the default value, it will\n                   be reduced to the default value.\n                   If MAXORD is changed during the problem, it may\n                   cause the current order to be reduced. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. Optional Outputs. As optional additional output from DLSODI, the variables listed\n below are quantities related to the performance of DLSODI\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODI, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) NST     IWORK(11) the number of steps taken for the problem so far. NRE     IWORK(12) the number of residual evaluations (RES calls)\n                   for the problem so far. NJE     IWORK(13) the number of Jacobian evaluations (each involving\n                   an evaluation of A and dr/dy) for the problem so\n                   far.  This equals the number of calls to ADDA and\n                   (if MITER = 1 or 4) JAC, and the number of matrix\n                   LU decompositions. NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name    Base Address      Description YH      21             the Nordsieck history array, of size NYH by\n                        (NQCUR + 1), where NYH is the initial value\n                        of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR**j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR. ACOR     LENRW-NEQ+1   array of size NEQ used for the accumulated\n                        corrections on each step, scaled on output to\n                        represent the estimated local error in y on the\n                        last step. This is the vector E in the descrip-\n                        tion of the error control.  It is defined only\n                        on a return from DLSODI with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODI.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSODI, if\n                             the default is not desired.\n                             The default value of LUN is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSODI.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSODI (see Part 3 below).\n                             RSAV must be a real array of length 218\n                             or more, and ISAV must be an integer\n                             array of length 37 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCOM is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSODI. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSODI. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the T last returned by DLSODI).\n             For valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (see optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(T), is already provided\n             by DLSODI directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n RWORK(21) = the base address of the history array YH.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSODI is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSODI, and\n   (2) the internal Common block\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words), If DLSODI is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common block in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODI is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODI call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODI call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODI package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODI call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODI in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM.\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v:\n     D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i) W(i)) *2 ).\n DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODI.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n   -substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n   -ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. REVISION HISTORY  (YYYYMMDD) 19800424  DATE WRITTEN\n 19800519  Corrected access of YH on forced order reduction;\n           numerous corrections to prologues and other comments.\n 19800617  In main driver, added loading of SQRT(UROUND) in RWORK;\n           minor corrections to main prologue.\n 19800903  Corrected ISTATE logic; minor changes in prologue.\n 19800923  Added zero initialization of HU and NQU.\n 19801028  Reorganized RES calls in AINVG, STODI, and PREPJI;\n           in LSODI, corrected NRE increment and reset LDY0 at 580;\n           numerous corrections to main prologue.\n 19801218  Revised XERRWD routine; minor corrections to main prologue.\n 19810330  Added Common block /LSI001/; use LSODE’s INTDY and SOLSY;\n           minor corrections to XERRWD and error message at 604;\n           minor corrections to declarations; corrections to prologues.\n 19810818  Numerous revisions: replaced EWT by 1/EWT; used flags\n           JCUR, ICF, IERPJ, IERSL between STODI and subordinates;\n           added tuning parameters CCMAX, MAXCOR, MSBP, MXNCF;\n           reorganized returns from STODI; reorganized type decls.;\n           fixed message length in XERRWD; changed default LUNIT to 6;\n           changed Common lengths; changed comments throughout.\n 19820906  Corrected use of ABS(H) in STODI; minor comment fixes.\n 19830510  Numerous revisions: revised diff. quotient increment;\n           eliminated block /LSI001/, using IERPJ flag;\n           revised STODI logic after PJAC return;\n           revised tuning of H change and step attempts in STODI;\n           corrections to main prologue and internal comments.\n 19870330  Major update: corrected comments throughout;\n           removed TRET from Common; rewrote EWSET with 4 loops;\n           fixed t test in INTDY; added Cray directives in STODI;\n           in STODI, fixed DELP init. and logic around PJAC call;\n           combined routines to save/restore Common;\n           passed LEVEL = 0 in error message calls (except run abort).\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           converted arithmetic IF statements to logical IF statements;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20020502  Corrected declarations in descriptions of user routines.\n 20031105  Restored ‘own’ variables to Common block, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants.\n 20031117  Changed internal names NRE, LSAVR to NFE, LSAVF resp. Other routines in the DLSODI package. In addition to Subroutine DLSODI, the DLSODI package includes the\n following subroutines and function routines:\n  DAINVG   computes the initial value of the vector\n             dy/dt = A-inverse * g\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DSTODI   is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DPREPJI  computes and preprocesses the Jacobian matrix\n           and the Newton iteration matrix P.\n  DSOLSY   manages solution of linear system in chord iteration.\n  DEWSET   sets the error weight vector EWT before each step.\n  DVNORM   computes the weighted RMS-norm of a vector.\n  DSRCOM   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  DGEFA and DGESL   are routines from LINPACK for solving full\n           systems of linear algebraic equations.\n  DGBFA and DGBSL   are routines from LINPACK for solving banded\n           linear systems.\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DVNORM, DUMACH, and IXSAV are function routines.\n All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf Calls proc~~dlsodi~~CallsGraph proc~dlsodi dlsodi proc~dewset dewset proc~dlsodi->proc~dewset proc~dstodi dstodi proc~dlsodi->proc~dstodi proc~xerrwd xerrwd proc~dlsodi->proc~xerrwd proc~dumach dumach proc~dlsodi->proc~dumach proc~dainvg dainvg proc~dlsodi->proc~dainvg proc~dvnorm dvnorm proc~dlsodi->proc~dvnorm proc~dintdy dintdy proc~dlsodi->proc~dintdy proc~dstodi->proc~dvnorm proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dgesl dgesl proc~dainvg->proc~dgesl proc~dgefa dgefa proc~dainvg->proc~dgefa proc~dintdy->proc~xerrwd proc~daxpy daxpy proc~dgesl->proc~daxpy proc~dgefa->proc~daxpy proc~dscal dscal proc~dgefa->proc~dscal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodi.html"},{"title":"dlsodis – odepack","text":"public subroutine dlsodis(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) This is the 18 November 2003 version of\n DLSODIS: Livermore Solver for Ordinary Differential equations\n          (Implicit form) with general Sparse Jacobian matrices. This version is in double precision. DLSODIS solves the initial value problem for linearly implicit\n systems of first order ODEs, A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix, or, in component form, ( a   * ( dy / dt ))  + ... +  ( a     * ( dy   / dt ))  =\n    i,1      1                     i,NEQ      NEQ\n\n  =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n       i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSODIS is a variant version of the DLSODI package, and is intended\n for stiff problems in which the matrix A and the Jacobian matrix\n d(g - A*s)/dy have arbitrary sparse structures. Authors:       Alan C. Hindmarsh\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Sheila Balsdon\n                Zycor, Inc.\n                Austin, TX 78741 References:\n 1.  M. K. Seager and S. Balsdon,  LSODIS, A Sparse Implicit\n     ODE Solver, in Proceedings of the IMACS 10th World Congress,\n     Montreal, August 8-13, 1982. Alan C. Hindmarsh,  LSODE and LSODI, Two New Initial Value\n     Ordinary Differential Equation Solvers,\n     ACM-SIGNUM Newsletter, vol. 15, no. 4 (1980), pp. 10-11. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: I. The Symmetric Codes,\n     Int. J. Num. Meth. Eng., vol. 18 (1982), pp. 1145-1151. S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman,\n     Yale Sparse Matrix Package: II. The Nonsymmetric Codes,\n     Research Report No. 114, Dept. of Computer Sciences, Yale\n     University, 1977. Summary of Usage. Communication between the user and the DLSODIS package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form:\n                SUBROUTINE RES (NEQ, T, Y, S, R, IRES)\n                DOUBLE PRECISION T, Y( ), S( ), R(*)\n which computes the residual function\n      r = g(t,y)  -  A(t,y) * s ,\n as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSODIS.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. DLSODIS must deal internally with the matrices A and dr/dy, where\n r is the residual function defined above.  DLSODIS generates a linear\n combination of these two matrices in sparse form.\n      The matrix structure is communicated by a method flag, MF:\n         MF =  21 or  22     when the user provides the structures of\n                             matrix A and dr/dy,\n         MF = 121 or 222     when the user does not provide structure\n                             information, and\n         MF = 321 or 422     when the user provides the structure\n                             of matrix A. C. You must also provide a subroutine of the form:\n                SUBROUTINE ADDA (NEQ, T, Y, J, IAN, JAN, P)\n                DOUBLE PRECISION T, Y( ), P( )\n                INTEGER IAN( ), JAN( )\n which adds the matrix A = A(t,y) to the contents of the array P.\n NEQ, T, Y, and J are input arguments and should not be altered.\n This routine should add the J-th column of matrix A to the array\n P (of length NEQ).  I.e. add A(i,J) to P(i) for all relevant\n values of i.  The arguments IAN and JAN should be ignored for normal\n situations.  DLSODIS will call the ADDA routine with J = 1,2,…,NEQ. D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y) s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21, 121, or 321, and provide a subroutine of the form:\n               SUBROUTINE JAC (NEQ, T, Y, S, J, IAN, JAN, PDJ)\n               DOUBLE PRECISION T, Y( ), S( ), PDJ( )\n               INTEGER IAN( ), JAN( )\n which computes dr/dy as a function of t, y, and s.  Here NEQ, T, Y, S,\n and J are input arguments, and the JAC routine is to load the array\n PDJ (of length NEQ) with the J-th column of dr/dy.  I.e. load PDJ(i)\n with dr(i)/dy(J) for all relevant values of i.  The arguments IAN and\n JAN should be ignored for normal situations.  DLSODIS will call the\n JAC routine with J = 1,2,…,NEQ.\n      Only nonzero elements need be loaded.  A crude approximation\n to dr/dy, possibly with fewer nonzero elememts, will suffice.\n Note that if A is independent of y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy.\n      If it is not feasible to provide a JAC routine, use\n MF = 22, 222, or 422 and DLSODIS will compute an approximate\n Jacobian internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSODIS compute\n this vector (ISTATE = 0).  (DLSODIS will solve the system A s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI.\n The input array YDOTI and the initial Y array must be consistent with\n the equations A dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI   must be approximately zero. F. Write a main program which calls Subroutine DLSODIS once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODIS.  On the first call to DLSODIS, supply arguments as follows:\n RES    = name of user subroutine for residual function r.\n ADDA   = name of user subroutine for computing and adding A(t,y).\n JAC    = name of user subroutine for Jacobian matrix dr/dy\n          (MF = 121).  If not used, pass a dummy name.\n Note: The names for the RES and ADDA routines and (if used) the\n        JAC routine must be declared External in the calling program.\n NEQ    = number of scalar equations in the system.\n Y      = array of initial values, of length NEQ.\n YDOTI  = array of length NEQ (containing initial dy/dt if ISTATE = 1).\n T      = the initial value of the independent variable.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          The estimated local error in y(i) will be controlled so as\n          to be roughly less (in magnitude) than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: Actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1 if the\n          initial dy/dt is supplied, and 0 otherwise.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             20 + (2 + 1./LENRAT) NNZ + (11 + 9./LENRAT) NEQ\n          where:\n          NNZ    = the number of nonzero elements in the sparse\n                   iteration matrix  P = A - con*dr/dy (con = scalar)\n                   (If NNZ is unknown, use an estimate of it.)\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          In any case, the required size of RWORK cannot generally\n          be predicted in advance for any value of MF, and the\n          value above is a rough estimate of a crude lower bound.\n          Some experimentation with this size may be necessary.\n          (When known, the correct required length is an optional\n          output, available in IWORK(17).)\n LRW    = declared length of RWORK (in user’s dimension).\n IWORK  = integer work array of length at least 30.\n LIW    = declared length of IWORK (in user’s dimension).\n MF     = method flag.  Standard values are:\n          121 for a user-supplied sparse Jacobian.\n          222 for an internally generated sparse Jacobian.\n          For other choices of MF, see the paragraph on MF in\n          the full description below.\n Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call, or any call, is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable (normally TOUT).\n ISTATE =  2  if DLSODIS was successful, negative otherwise.\n          -1 means excess work done on this call (check all inputs).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad Jacobian\n             supplied or wrong choice of tolerances).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 cannot occur in casual use.\n          -8 means DLSODIS was unable to compute the initial dy/dt.\n             in casual use, this means A(t,y) is initially singular.\n             Supply YDOTI and use ISTATE = 1 on the first call.\n          -9 means a fatal error return flag came from sparse solver\n             CDRV by way of DPRJIS or DSOLSS.  Should never happen. A return with ISTATE = - 1 , - 4 , or - 5 , may result from using an inappropriate sparsity structure , one that is quite different from the initial structure . Consider calling DLSODIS again with ISTATE = 3 to force the structure to be reevaluated . See the full description of ISTATE below . If DLSODIS returns ISTATE = -1, -4  or -5, then the output of\n  DLSODIS also includes YDOTI = array containing residual vector\n  r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSODIS again.  No other parameters need be reset. Example Problem. The following is an example problem, with the coding needed\n for its solution by DLSODIS.  The problem comes from the partial\n differential equation (the Burgers equation)\n   du/dt  =  - u * du/dx  +  eta * d 2 u/dx 2,   eta = .05,\n on -1 .le. x .le. 1.  The boundary conditions are periodic:\n   u(-1,t) = u(1,t)  and  du/dx(-1,t) = du/dx(1,t)\n The initial profile is a square wave,\n   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere.\n The PDE is discretized in x by a simplified Galerkin method,\n using piecewise linear basis functions, on a grid of 40 intervals.\n The result is a system A * dy/dt = g(y), of size NEQ = 40,\n where y(i) is the approximation to u at x = x(i), with\n x(i) = -1 + (i-1) delx, delx = 2/NEQ = .05.\n The individual equations in the system are (in order):\n  (1/6)dy(NEQ)/dt+(4/6)dy(1)/dt+(1/6)dy(2)/dt\n       = r4d (y(NEQ) 2-y(2) 2)+eodsq (y(2)-2 y(1)+y(NEQ))\n for i = 2,3,…,nm1,\n  (1/6)dy(i-1)/dt+(4/6)dy(i)/dt+(1/6)dy(i+1)/dt\n       = r4d (y(i-1) 2-y(i+1) 2)+eodsq (y(i+1)-2 y(i)+y(i-1))\n and finally\n  (1/6)dy(nm1)/dt+(4/6)dy(NEQ)/dt+(1/6)dy(1)/dt\n       = r4d (y(nm1) 2-y(1) 2)+eodsq (y(1)-2 y(NEQ)+y(nm1))\n where r4d = 1/(4 delx), eodsq = eta/delx *2 and nm1 = NEQ-1.\n The following coding solves the problem with MF = 121, with output\n of solution statistics at t = .1, .2, .3, and .4, and of the\n solution vector at t = .4.  Optional outputs (run statistics) are\n also printed. module c_test1 implicit none integer , parameter , private :: dp = kind ( 0.0d0 ) real ( kind = dp ), public :: EODsq , R4D integer , public :: NM1 end module c_test1 program dlsodis_ex use m_odepack use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) external :: addasp external :: jacsp external :: resid real ( kind = dp ), save :: atol , rtol real ( kind = dp ) :: delx , t , tout integer :: i , io , istate , nnzlu integer , save :: iopt , itask , itol , liw , lrw , mf , neq integer , dimension ( 30 ) :: iw real ( kind = dp ), dimension ( 1409 ) :: rw real ( kind = dp ), dimension ( 40 ) :: y , ydoti data itol / 1 / , rtol / 1.0D-3 / , atol / 1.0D-3 / , itask / 1 / , iopt / 0 / data neq / 40 / , lrw / 1409 / , liw / 30 / , mf / 121 / delx = 2.0 / neq R4D = 0.25 / delx EODsq = 0.05 / delx ** 2 NM1 = neq - 1 do i = 1 , neq y ( i ) = 0.0 enddo y ( 11 ) = 0.5 do i = 12 , 30 y ( i ) = 1.0 enddo y ( 31 ) = 0.5 t = 0.0 tout = 0.1 istate = 0 do io = 1 , 4 call dlsodis ( resid , addasp , jacsp ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & [ atol ], itask , istate , iopt , rw , lrw , iw , liw , mf ) write ( 6 , 99010 ) t , iw ( 11 ), rw ( 11 ) 99010 format ( ' At t =' , f5 . 2 , '   No. steps =' , i4 , '    Last step =' , & & d12 . 4 ) if ( istate /= 2 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout + 0.1 endif enddo write ( 6 , 99030 ) ( y ( i ), i = 1 , neq ) 99030 format ( / ' Final solution values..' / 8 ( 5 D12 . 4 / )) write ( 6 , 99040 ) iw ( 17 ), iw ( 18 ), iw ( 11 ), iw ( 12 ), iw ( 13 ) 99040 format ( / ' Required RW size =' , i5 , '   IW size =' , & & i4 / ' No. steps =' , i4 , '   No. r-s =' , i4 , '   No. J-s =' , i4 ) nnzlu = iw ( 25 ) + iw ( 26 ) + neq write ( 6 , 99050 ) iw ( 19 ), nnzlu 99050 format ( ' No. of nonzeros in P matrix =' , i4 , & & '   No. of nonzeros in LU =' , i4 ) end program dlsodis_ex subroutine gfun ( N , T , Y , G ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), intent ( out ), dimension ( N ) :: G integer :: i G ( 1 ) = R4D * ( Y ( N ) ** 2 - Y ( 2 ) ** 2 ) + EODsq * ( Y ( 2 ) - 2.0 * Y ( 1 ) + Y ( N )) do i = 2 , NM1 G ( i ) = R4D * ( Y ( i - 1 ) ** 2 - Y ( i + 1 ) ** 2 ) + EODsq * ( Y ( i + 1 ) - 2.0 * Y ( i ) + Y ( i - 1 )) enddo G ( N ) = R4D * ( Y ( NM1 ) ** 2 - Y ( 1 ) ** 2 ) + EODsq * ( Y ( 1 ) - 2.0 * Y ( N ) + Y ( NM1 )) end subroutine gfun subroutine resid ( N , T , Y , S , R , Ires ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) external :: gfun integer :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y real ( kind = dp ), intent ( in ), dimension ( N ) :: S real ( kind = dp ), intent ( inout ), dimension ( N ) :: R integer :: Ires integer :: i call gfun ( N , T , Y , R ) R ( 1 ) = R ( 1 ) - ( S ( N ) + 4.0 * S ( 1 ) + S ( 2 )) / 6.0 do i = 2 , NM1 R ( i ) = R ( i ) - ( S ( i - 1 ) + 4.0 * S ( i ) + S ( i + 1 )) / 6.0 enddo R ( N ) = R ( N ) - ( S ( NM1 ) + 4.0 * S ( N ) + S ( 1 )) / 6.0 end subroutine resid subroutine addasp ( N , T , Y , J , Ip , Jp , P ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y integer , intent ( in ) :: J integer , dimension ( * ) :: Ip integer , dimension ( * ) :: Jp real ( kind = dp ), intent ( inout ), dimension ( N ) :: P integer :: jm1 , jp1 jm1 = J - 1 jp1 = J + 1 if ( J == N ) jp1 = 1 if ( J == 1 ) jm1 = N P ( J ) = P ( J ) + ( 2.0 / 3.0 ) P ( jp1 ) = P ( jp1 ) + ( 1.0 / 6.0 ) P ( jm1 ) = P ( jm1 ) + ( 1.0 / 6.0 ) end subroutine addasp subroutine jacsp ( N , T , Y , S , J , Ip , Jp , Pdj ) use c_test1 implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), dimension ( N ) :: S integer , intent ( in ) :: J integer , dimension ( * ) :: Ip integer , dimension ( * ) :: Jp real ( kind = dp ), intent ( out ), dimension ( N ) :: Pdj integer :: jm1 , jp1 jm1 = J - 1 jp1 = J + 1 if ( J == 1 ) jm1 = N if ( J == N ) jp1 = 1 Pdj ( jm1 ) = - 2.0 * R4D * Y ( J ) + EODsq Pdj ( J ) = - 2.0 * EODsq Pdj ( jp1 ) = 2.0 * R4D * Y ( J ) + EODsq end subroutine jacsp The output of this program (on a CDC-7600 in single precision)\n is as follows: At t = 0.10   No. steps =  15    Last step =  1.6863e-02\n At t = 0.20   No. steps =  19    Last step =  2.4101e-02\n At t = 0.30   No. steps =  22    Last step =  4.3143e-02\n At t = 0.40   No. steps =  24    Last step =  5.7819e-02 Final solution values..\n  1.8371e-02  1.3578e-02  1.5864e-02  2.3805e-02  3.7245e-02\n  5.6630e-02  8.2538e-02  1.1538e-01  1.5522e-01  2.0172e-01\n  2.5414e-01  3.1150e-01  3.7259e-01  4.3608e-01  5.0060e-01\n  5.6482e-01  6.2751e-01  6.8758e-01  7.4415e-01  7.9646e-01\n  8.4363e-01  8.8462e-01  9.1853e-01  9.4500e-01  9.6433e-01\n  9.7730e-01  9.8464e-01  9.8645e-01  9.8138e-01  9.6584e-01\n  9.3336e-01  8.7497e-01  7.8213e-01  6.5315e-01  4.9997e-01\n  3.4672e-01  2.1758e-01  1.2461e-01  6.6208e-02  3.3784e-02 Required RW size = 1409   IW size =  30\n No. steps =  24   No. r-s =  33   No. J-s =   8\n No. of nonzeros in P matrix = 120   No. of nonzeros in LU = 194 Full Description of User Interface to DLSODIS. The user interface to DLSODIS consists of the following parts. The call sequence to Subroutine DLSODIS, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODIS package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODIS package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF,\n and those used for both input and output are\n     Y, T, ISTATE, YDOTI.\n The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODIS to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES    = the name of the user-supplied subroutine which supplies\n          the residual vector for the ODE system, defined by\n            r = g(t,y) - A(t,y) * s\n          as a function of the scalar t and the vectors\n          s and y (s approximates dy/dt).  This subroutine\n          is to have the form\n               SUBROUTINE RES (NEQ, T, Y, S, R, IRES)\n               DOUBLE PRECISION T, Y( ), S( ), R( )\n          where NEQ, T, Y, S, and IRES are input, and R and\n          IRES are output.  Y, S, and R are arrays of length NEQ.\n             On input, IRES indicates how DLSODIS will use the\n          returned array R, as follows:\n             IRES = 1  means that DLSODIS needs the full residual,\n                       r = g - A s, exactly.\n             IRES = -1 means that DLSODIS is using R only to compute\n                       the Jacobian dr/dy by difference quotients.\n          The RES routine can ignore IRES, or it can omit some terms\n          if IRES = -1.  If A does not depend on y, then RES can\n          just return R = g when IRES = -1.  If g - A*s contains other\n          additive terms that are independent of y, these can also be\n          dropped, if done consistently, when IRES = -1.\n             The subroutine should set the flag IRES if it\n          encounters a halt condition or illegal input.\n          Otherwise, it should not reset IRES.  On output,\n             IRES = 1 or -1 represents a normal return, and\n          DLSODIS continues integrating the ODE.  Leave IRES\n          unchanged from its input value.\n             IRES = 2 tells DLSODIS to immediately return control\n          to the calling program, with ISTATE = 3.  This lets\n          the calling program change parameters of the problem\n          if necessary.\n             IRES = 3 represents an error condition (for example, an\n          illegal value of y).  DLSODIS tries to integrate the system\n          without getting IRES = 3 from RES.  If it cannot, DLSODIS\n          returns with ISTATE = -7 or -1.\n             On a return with ISTATE = 3, -1, or -7, the values\n          of T and Y returned correspond to the last point reached\n          successfully without getting the flag IRES = 2 or 3.\n             The flag values IRES = 2 and 3 should not be used to\n          handle switches or root-stop conditions.  This is better\n          done by calling DLSODIS in a one-step mode and checking the\n          stopping function for a sign change at each step.\n             If quantities computed in the RES routine are needed\n          externally to DLSODIS, an extra call to RES should be made\n          for this purpose, for consistent and accurate results.\n          To get the current dy/dt for the S argument, use DINTDY.\n             RES must be declared External in the calling\n          program.  See note below for more about RES. ADDA   = the name of the user-supplied subroutine which adds the\n          matrix A = A(t,y) to another matrix stored in sparse form.\n          This subroutine is to have the form\n               SUBROUTINE ADDA (NEQ, T, Y, J, IAN, JAN, P)\n               DOUBLE PRECISION T, Y( ), P( )\n               INTEGER IAN( ), JAN( )\n          where NEQ, T, Y, J, IAN, JAN, and P  are input.  This routine\n          should add the J-th column of matrix A to the array P, of\n          length NEQ.  Thus a(i,J) is to be added to P(i) for all\n          relevant values of i.  Here T and Y have the same meaning as\n          in Subroutine RES, and J is a column index (1 to NEQ).\n          IAN and JAN are undefined in calls to ADDA for structure\n          determination (MOSS .ne. 0).  Otherwise, IAN and JAN are\n          structure descriptors, as defined under optional outputs\n          below, and so can be used to determine the relevant row\n          indices i, if desired.\n               Calls to ADDA are made with J = 1,…,NEQ, in that\n          order.  ADDA must not alter its input arguments.\n               ADDA must be declared External in the calling program.\n          See note below for more information about ADDA. JAC    = the name of the user-supplied subroutine which supplies\n          the Jacobian matrix, dr/dy, where r = g - A s.  JAC is\n          required if MITER = 1, or MOSS = 1 or 3.  Otherwise a dummy\n          name can be passed.  This subroutine is to have the form\n               SUBROUTINE JAC (NEQ, T, Y, S, J, IAN, JAN, PDJ)\n               DOUBLE PRECISION T, Y( ), S( ), PDJ( )\n               INTEGER IAN( ), JAN( )\n         where NEQ, T, Y, S, J, IAN, and JAN are input.  The\n         array PDJ, of length NEQ, is to be loaded with column J\n         of the Jacobian on output.  Thus dr(i)/dy(J) is to be\n         loaded into PDJ(i) for all relevant values of i.\n         Here T, Y, and S have the same meaning as in Subroutine RES,\n         and J is a column index (1 to NEQ).  IAN and JAN\n         are undefined in calls to JAC for structure determination\n         (MOSS .ne. 0).  Otherwise, IAN and JAN are structure\n         descriptors, as defined under optional outputs below, and\n         so can be used to determine the relevant row indices i, if\n         desired.\n              JAC need not provide dr/dy exactly.  A crude\n         approximation (possibly with greater sparsity) will do.\n              In any case, PDJ is preset to zero by the solver,\n         so that only the nonzero elements need be loaded by JAC.\n         Calls to JAC are made with J = 1,…,NEQ, in that order, and\n         each such set of calls is preceded by a call to RES with the\n         same arguments NEQ, T, Y, S, and IRES.  Thus to gain some\n         efficiency intermediate quantities shared by both calculations\n         may be saved in a user Common block by RES and not recomputed\n         by JAC, if desired.  JAC must not alter its input arguments.\n              JAC must be declared External in the calling program.\n              See note below for more about JAC. Note on RES , ADDA , and JAC : These subroutines may access user - defined quantities in NEQ ( 2 ), ... and / or in Y ( NEQ ( 1 ) + 1 ), ... if NEQ is an array ( dimensioned in the subroutines ) and / or Y has length exceeding NEQ ( 1 ) . However , these subroutines should not alter NEQ ( 1 ), Y ( 1 ), ... , Y ( NEQ ) or any other input variables . See the descriptions of NEQ and Y below . NEQ    = the size of the system (number of first order ordinary\n          differential equations or scalar algebraic equations).\n          Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in RES, ADDA, or JAC. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODIS package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to RES , ADDA , and JAC . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to RES , ADDA , or JAC . Each such subroutine must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 0 or 1), and only for output on other\n          calls.  On the first call, Y must contain the vector of\n          initial values.  On output, Y contains the computed solution\n          vector, evaluated at T.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n      ADDA, and JAC.  Hence its length may exceed NEQ,\n      and locations Y(NEQ+1),... may be used to store other real\n      data and pass it to RES, ADDA, or JAC.  (The DLSODIS\n      package accesses only Y(1),...,Y(NEQ). ) YDOTI  = a real array for the initial value of the vector\n          dy/dt and for work space, of dimension at least NEQ. On input : If ISTATE = 0 then DLSODIS will compute the initial value of dy / dt , if A is nonsingular . Thus YDOTI will serve only as work space and may have any value . If ISTATE = 1 then YDOTI must contain the initial value of dy / dt . If ISTATE = 2 or 3 ( continuation calls ) then YDOTI may have any value . Note : If the initial value of A is singular , then DLSODIS cannot compute the initial value of dy / dt , so it must be provided in YDOTI , with ISTATE = 1 . On output , when DLSODIS terminates abnormally with ISTATE = - 1 , - 4 , or - 5 , YDOTI will contain the residual r = g ( t , y ) - A ( t , y ) * ( dy / dt ) . If r is large , t is near its initial value , and YDOTI is supplied with ISTATE = 1 , there may have been an incorrect input value of YDOTI = dy / dt , or the problem ( as given to DLSODIS ) may not have a solution . If desired , the YDOTI array may be used for other purposes between calls to the solver . T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          On output, after each call, T is the value at which a\n          computed solution y is evaluated (usually the same as TOUT).\n          On an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 0 or 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form RMS - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) , and the RMS - norm ( root - mean - square norm ) here is RMS - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be non - negative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          Input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at t = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          state of the calculation. On input , the values of ISTATE are as follows . 0 means this is the first call for the problem , and DLSODIS is to compute the initial value of dy / dt ( while doing other initializations ) . See note below . 1 means this is the first call for the problem , and the initial value of dy / dt has been supplied in YDOTI ( DLSODIS will do other initializations ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , the conditional inputs IA , JA , IC , and JC , and any of the optional inputs except H0 . A call with ISTATE = 3 will cause the sparsity structure of the problem to be recomputed . ( Structure information is reread from IA and JA if MOSS = 0 , 3 , or 4 and from IC and JC if MOSS = 0 ) . Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 0 or 1 on input . On output , ISTATE has the following values and meanings . 0 or 1 means nothing was done ; TOUT = T and ISTATE = 0 or 1 on input . 2 means that the integration was performed successfully . 3 means that the user - supplied Subroutine RES signalled DLSODIS to halt the integration and return ( IRES = 2 ) . Integration as far as T was achieved with no occurrence of IRES = 2 , but this flag was set on attempting the next step . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . This may be caused by an inaccurate Jacobian matrix . - 6 means EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . the integration was successful as far as T . - 7 means that the user - supplied Subroutine RES set its error flag ( IRES = 3 ) despite repeated tries by DLSODIS to avoid that condition . - 8 means that ISTATE was 0 on input but DLSODIS was unable to compute the initial value of dy / dt . See the printed message for details . - 9 means a fatal error return flag came from the sparse solver CDRV by way of DPRJIS or DSOLSS ( numerical factorization or backsolve ) . This should never happen . The integration was successful as far as T . Note : An error return with ISTATE = - 1 , - 4 , or - 5 may mean that the sparsity structure of the problem has changed significantly since it was last determined ( or input ) . In that case , one can attempt to complete the integration by setting ISTATE = 3 on the next call , so that a new structure determination is done . Note : Since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . similarly , ISTATE ( = 3 ) need not be reset if RES told DLSODIS to return because the calling program must change the parameters of the problem . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a work array used for a mixture of real (double precision)\n          and integer work space.\n          The length of RWORK (in real words) must be at least\n             20 + NYH (MAXORD + 1) + 3 NEQ + LWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LWM = 2 NNZ + 2 NEQ + (NNZ+9 NEQ)/LENRAT   if MITER = 1,\n          LWM = 2 NNZ + 2 NEQ + (NNZ+10 NEQ)/LENRAT  if MITER = 2.\n          in the above formulas,\n          NNZ    = number of nonzero elements in the iteration matrix\n                   P = A - con J  (con is a constant and J is the\n                   Jacobian matrix dr/dy).\n          LENRAT = the real to integer wordlength ratio (usually 1 in\n                   single precision and 2 in double precision).\n          (See the MF description for METH and MITER.)\n          Thus if MAXORD has its default value and NEQ is constant,\n          the minimum length of RWORK is:\n             20 + 16 NEQ + LWM  for MF = 11, 111, 311, 12, 212, 412,\n             20 +  9*NEQ + LWM  for MF = 21, 121, 321, 22, 222, 422.\n          The above formula for LWM is only a crude lower bound.\n          The required length of RWORK cannot be readily predicted\n          in general, as it depends on the sparsity structure\n          of the problem.  Some experimentation may be necessary. The first 20 words of RWORK are reserved for conditional and optional inputs and optional outputs . The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer work array.  The length of IWORK must be at least\n            32 + 2*NEQ + NZA + NZC   for MOSS = 0,\n            30                       for MOSS = 1 or 2,\n            31 + NEQ + NZA           for MOSS = 3 or 4.\n          (NZA is the number of nonzero elements in matrix A, and\n          NZC is the number of nonzero elements in dr/dy.) In DLSODIS , IWORK is used for conditional and optional inputs and optional outputs . The following two blocks of words in IWORK are conditional inputs , required if MOSS = 0 , 3 , or 4 , but not otherwise ( see the description of MF for MOSS ) . IWORK ( 30 + j ) = IA ( j ) ( j = 1 ,..., NEQ + 1 ) IWORK ( 31 + NEQ + k ) = JA ( k ) ( k = 1 ,..., NZA ) The two arrays IA and JA describe the sparsity structure to be assumed for the matrix A . JA contains the row indices where nonzero elements occur , reading in columnwise order , and IA contains the starting locations in JA of the descriptions of columns 1 ,..., NEQ , in that order , with IA ( 1 ) = 1 . Thus , for each column index j = 1 ,..., NEQ , the values of the row index i in column j where a nonzero element may occur are given by i = JA ( k ) , where IA ( j ) . le . k . lt . IA ( j + 1 ) . If NZA is the total number of nonzero locations assumed , then the length of the JA array is NZA , and IA ( NEQ + 1 ) must be NZA + 1 . Duplicate entries are not allowed . The following additional blocks of words are required if MOSS = 0 , but not otherwise . If LC = 31 + NEQ + NZA , then IWORK ( LC + j ) = IC ( j ) ( j = 1 ,..., NEQ + 1 ) , and IWORK ( LC + NEQ + 1 + k ) = JC ( k ) ( k = 1 ,..., NZC ) The two arrays IC and JC describe the sparsity structure to be assumed for the Jacobian matrix dr / dy . They are used in the same manner as the above IA and JA arrays . If NZC is the number of nonzero locations assumed , then the length of the JC array is NZC , and IC ( NEQ + 1 ) must be NZC + 1 . Duplicate entries are not allowed . LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODIS\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODIS between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF     = the method flag.  Used only for input.\n          MF has three decimal digits– MOSS, METH, and MITER.\n          For standard options:\n             MF = 100 MOSS + 10 METH + MITER.\n          MOSS indicates the method to be used to obtain the sparsity\n          structure of the Jacobian matrix:\n            MOSS = 0 means the user has supplied IA, JA, IC, and JC\n                     (see descriptions under IWORK above).\n            MOSS = 1 means the user has supplied JAC (see below) and\n                     the structure will be obtained from NEQ initial\n                     calls to JAC and NEQ initial calls to ADDA.\n            MOSS = 2 means the structure will be obtained from NEQ+1\n                     initial calls to RES and NEQ initial calls to ADDA\n            MOSS = 3 like MOSS = 1, except user has supplied IA and JA.\n            MOSS = 4 like MOSS = 2, except user has supplied IA and JA.\n          METH indicates the basic linear multistep method:\n            METH = 1 means the implicit Adams method.\n            METH = 2 means the method based on Backward\n                     Differentiation Formulas (BDFs).\n              The BDF method is strongly preferred for stiff problems,\n            while the Adams method is preferred when the problem is\n            not stiff.  If the matrix A(t,y) is nonsingular,\n            stiffness here can be taken to mean that of the explicit\n            ODE system dy/dt = A-inverse * g.  If A is singular,\n            the concept of stiffness is not well defined.\n              If you do not know whether the problem is stiff, we\n            recommend using METH = 2.  If it is stiff, the advantage\n            of METH = 2 over METH = 1 will be great, while if it is\n            not stiff, the advantage of METH = 1 will be slight.\n            If maximum efficiency is important, some experimentation\n            with METH may be necessary.\n          MITER indicates the corrector iteration method:\n            MITER = 1 means chord iteration with a user-supplied\n                      sparse Jacobian, given by Subroutine JAC.\n            MITER = 2 means chord iteration with an internally\n                      generated (difference quotient) sparse\n                      Jacobian (using NGP extra calls to RES per\n                      dr/dy value, where NGP is an optional\n                      output described below.)\n            If MITER = 1 or MOSS = 1 or 3 the user must supply a\n            Subroutine JAC (the name is arbitrary) as described above\n            under JAC.  Otherwise, a dummy argument can be used. The standard choices for MF are : MF = 21 or 22 for a stiff problem with IA / JA and IC / JC supplied , MF = 121 for a stiff problem with JAC supplied , but not IA / JA or IC / JC , MF = 222 for a stiff problem with neither IA / JA , IC / JC / , nor JAC supplied , MF = 321 for a stiff problem with IA / JA and JAC supplied , but not IC / JC , MF = 422 for a stiff problem with IA / JA supplied , but not IC / JC or JAC . The sparseness structure can be changed during the problem by making a call to DLSODIS with ISTATE = 3 . Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) MAXORD  IWORK(5)  the maximum order to be allowed.  The default\n                   value is 12 if METH = 1, and 5 if METH = 2.\n                   If MAXORD exceeds the default value, it will\n                   be reduced to the default value.\n                   If MAXORD is changed during the problem, it may\n                   cause the current order to be reduced. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. Optional Outputs. As optional additional output from DLSODIS, the variables listed\n below are quantities related to the performance of DLSODIS\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODIS, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) NST     IWORK(11) the number of steps taken for the problem so far. NRE     IWORK(12) the number of residual evaluations (RES calls)\n                   for the problem so far, excluding those for\n                   structure determination (MOSS = 2 or 4). NJE     IWORK(13) the number of Jacobian evaluations (each involving\n                   an evaluation of A and dr/dy) for the problem so\n                   far, excluding those for structure determination\n                   (MOSS = 1 or 3).  This equals the number of calls\n                   to ADDA and (if MITER = 1) JAC. NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. NNZ     IWORK(19) the number of nonzero elements in the iteration\n                   matrix  P = A - con*J  (con is a constant and\n                   J is the Jacobian matrix dr/dy). NGP     IWORK(20) the number of groups of column indices, used in\n                   difference quotient Jacobian aproximations if\n                   MITER = 2.  This is also the number of extra RES\n                   evaluations needed for each Jacobian evaluation. NLU     IWORK(21) the number of sparse LU decompositions for the\n                   problem so far. (Excludes the LU decomposition\n                   necessary when ISTATE = 0.) LYH     IWORK(22) the base address in RWORK of the history array YH,\n                   described below in this list. IPIAN   IWORK(23) the base address of the structure descriptor array\n                   IAN, described below in this list. IPJAN   IWORK(24) the base address of the structure descriptor array\n                   JAN, described below in this list. NZL     IWORK(25) the number of nonzero elements in the strict lower\n                   triangle of the LU factorization used in the chord\n                   iteration. NZU     IWORK(26) the number of nonzero elements in the strict upper\n                   triangle of the LU factorization used in the chord\n                   iteration.  The total number of nonzeros in the\n                   factorization is therefore NZL + NZU + NEQ. The following four arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address, and its description.\n For YH and ACOR, the base addresses are in RWORK (a real array).\n The integer arrays IAN and JAN are to be obtained by declaring an\n integer array IWK and identifying IWK(1) with RWORK(21), using either\n an equivalence statement or a subroutine call.  Then the base\n addresses IPIAN (of IAN) and IPJAN (of JAN) in IWK are to be obtained\n as optional outputs IWORK(23) and IWORK(24), respectively.\n Thus IAN(1) is IWK(ipian), etc. Name    Base Address      Description IAN    IPIAN (in IWK)  structure descriptor array of size NEQ + 1.\n JAN    IPJAN (in IWK)  structure descriptor array of size NNZ.\n         (see above)    IAN and JAN together describe the sparsity\n                        structure of the iteration matrix\n                          P = A - con J,  as used by DLSODIS.\n                        JAN contains the row indices of the nonzero\n                        locations, reading in columnwise order, and\n                        IAN contains the starting locations in JAN of\n                        the descriptions of columns 1,…,NEQ, in\n                        that order, with IAN(1) = 1.  Thus for each\n                        j = 1,…,NEQ, the row indices i of the\n                        nonzero locations in column j are\n                        i = JAN(k),  IAN(j) .le. k .lt. IAN(j+1).\n                        Note that IAN(NEQ+1) = NNZ + 1.\n YH      LYH            the Nordsieck history array, of size NYH by\n          (optional     (NQCUR + 1), where NYH is the initial value\n           output)      of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR *j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR.  The base address LYH\n                        is another optional output, listed above. ACOR     LENRW-NEQ+1   array of size NEQ used for the accumulated\n                        corrections on each step, scaled on output to\n                        represent the estimated local error in y on the\n                        last step.  This is the vector E in the\n                        description of the error control. It is defined\n                        only on a return from DLSODIS with ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODIS.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSODIS, if\n                             The default is not desired.\n                             The default value of LUN is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSODIS.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCMS(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSODIS (see Part 3 below).\n                             RSAV must be a real array of length 224\n                             or more, and ISAV must be an integer\n                             array of length 71 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCMS is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSODIS. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSODIS. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = IWORK(22)\n   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the T last returned by DLSODIS).\n             For valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (see optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(t), is already provided\n             by DLSODIS directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n LYH       = the base address of the history array YH, obtained\n             as an optional output as shown above.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSODIS is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSODIS, and\n   (2) the two internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         /DLSS01/  of length  40  (6 double precision words\n                      followed by 34 integer words). If DLSODIS is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODIS is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODIS call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODIS call for that problem.  To save and restore the Common\n blocks, use Subroutines DSRCMS (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODIS package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODIS call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODIS in the computation\n of the optional output IMXER, and the increments for difference\n quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM.\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v:\n     D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i) W(i)) *2 ).\n DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODIS.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n   -substitute a max-norm of (V(i)*w(I)) for the RMS-norm, or\n   -ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. REVISION HISTORY  (YYYYMMDD) 19820714  DATE WRITTEN\n 19830812  Major update, based on recent LSODI and LSODES revisions:\n           Upgraded MDI in ODRV package: operates on M + M-transpose.\n           Numerous revisions in use of work arrays;\n           use wordlength ratio LENRAT; added IPISP & LRAT to Common;\n           added optional outputs IPIAN/IPJAN;\n           Added routine CNTNZU; added NZL and NZU to /LSS001/;\n           changed ADJLR call logic; added optional outputs NZL & NZU;\n           revised counter initializations; revised PREPI stmt. nos.;\n           revised difference quotient increment;\n           eliminated block /LSI001/, using IERPJ flag;\n           revised STODI logic after PJAC return;\n           revised tuning of H change and step attempts in STODI;\n           corrections to main prologue and comments throughout.\n 19870320  Corrected jump on test of umax in CDRV routine.\n 20010125  Numerous revisions: corrected comments throughout;\n           removed TRET from Common; rewrote EWSET with 4 loops;\n           fixed t test in INTDY; added Cray directives in STODI;\n           in STODI, fixed DELP init. and logic around PJAC call;\n           combined routines to save/restore Common;\n           passed LEVEL = 0 in error message calls (except run abort).\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           converted arithmetic IF statements to logical IF statements;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20020502  Corrected declarations in descriptions of user routines.\n 20031021  Fixed address offset bugs in Subroutine DPREPI.\n 20031027  Changed 0. to 0.0D0 in Subroutine DPREPI.\n 20031105  Restored ‘own’ variables to Common blocks, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants.\n 20031117  Changed internal names NRE, LSAVR to NFE, LSAVF resp. Other routines in the DLSODIS package. In addition to Subroutine DLSODIS, the DLSODIS package includes the\n following subroutines and function routines:\n  DIPREPI  acts as an interface between DLSODIS and DPREPI, and also\n           does adjusting of work space pointers and work arrays.\n  DPREPI   is called by DIPREPI to compute sparsity and do sparse\n           matrix preprocessing.\n  DAINVGS  computes the initial value of the vector\n             dy/dt = A-inverse * g\n  ADJLR    adjusts the length of required sparse matrix work space.\n           It is called by DPREPI.\n  CNTNZU   is called by DPREPI and counts the nonzero elements in the\n           strict upper triangle of P + P-transpose.\n  JGROUP   is called by DPREPI to compute groups of Jacobian column\n           indices for use when MITER = 2.\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DSTODI   is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DPRJIS   computes and preprocesses the Jacobian matrix J = dr/dy\n           and the Newton iteration matrix P = A - h l0 J.\n  DSOLSS   manages solution of linear system in chord iteration.\n  DEWSET   sets the error weight vector EWT before each step.\n  DVNORM   computes the weighted RMS-norm of a vector.\n  DSRCMS   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  ODRV     constructs a reordering of the rows and columns of\n           a matrix by the minimum degree algorithm.  ODRV is a\n           driver routine which calls Subroutines MD, MDI, MDM,\n           MDP, MDU, and SRO.  See Ref. 2 for details.  (The ODRV\n           module has been modified since Ref. 2, however.)\n  CDRV     performs reordering, symbolic factorization, numerical\n           factorization, or linear system solution operations,\n           depending on a path argument IPATH.  CDRV is a\n           driver routine which calls Subroutines NROC, NSFC,\n           NNFC, NNSC, and NNTC.  See Ref. 3 for details.\n           DLSODIS uses CDRV to solve linear systems in which the\n           coefficient matrix is  P = A - con J, where A is the\n           matrix for the linear system A(t,y) dy/dt = g(t,y),\n           con is a scalar, and J is an approximation to\n           the Jacobian dr/dy.  Because CDRV deals with rowwise\n           sparsity descriptions, CDRV works with P-transpose, not P.\n           DLSODIS also uses CDRV to solve the linear system\n             A(t,y)*dy/dt = g(t,y)  for dy/dt when ISTATE = 0.\n           (For this, CDRV works with A-transpose, not A.)\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, IXSAV, and handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DVNORM, DUMACH, IXSAV, and are function routines.\n All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf Calls proc~~dlsodis~~CallsGraph proc~dlsodis dlsodis proc~dewset dewset proc~dlsodis->proc~dewset proc~dstodi dstodi proc~dlsodis->proc~dstodi proc~dainvgs dainvgs proc~dlsodis->proc~dainvgs proc~xerrwd xerrwd proc~dlsodis->proc~xerrwd proc~dumach dumach proc~dlsodis->proc~dumach proc~dvnorm dvnorm proc~dlsodis->proc~dvnorm proc~diprepi diprepi proc~dlsodis->proc~diprepi proc~dintdy dintdy proc~dlsodis->proc~dintdy proc~dstodi->proc~dvnorm proc~dcfode dcfode proc~dstodi->proc~dcfode proc~cdrv cdrv proc~dainvgs->proc~cdrv proc~dprepi dprepi proc~diprepi->proc~dprepi proc~dintdy->proc~xerrwd proc~dprepi->proc~cdrv proc~adjlr adjlr proc~dprepi->proc~adjlr proc~cntnzu cntnzu proc~dprepi->proc~cntnzu proc~odrv odrv proc~dprepi->proc~odrv proc~jgroup jgroup proc~dprepi->proc~jgroup Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodis.html"},{"title":"dlsodkr – odepack","text":"public subroutine dlsodkr(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf, g, Ng, Jroot) *DECK DLSODKR This is the 18 November 2003 version of\n DLSODKR: Livermore Solver for Ordinary Differential equations,\n          with preconditioned Krylov iteration methods for the\n          Newton correction linear systems, and with Rootfinding. This version is in double precision. DLSODKR solves the initial value problem for stiff or nonstiff\n systems of first order ODEs,\n     dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),…,y(NEQ)) (i = 1,…,NEQ).\n At the same time, it locates the roots of any of a set of functions\n     g(i) = g(i,t,y(1),…,y(NEQ))  (i = 1,…,ng). Introduction. This is a modification of the DLSODE package, and differs from it\n in five ways:\n (a) It uses various preconditioned Krylov subspace iteration methods\n for the linear algebraic systems that arise in the case of stiff\n systems.  See the introductory notes below.\n (b) It does automatic switching between functional (fixpoint)\n iteration and Newton iteration in the corrector iteration.\n (c) It finds the root of at least one of a set of constraint\n functions g(i) of the independent and dependent variables.\n It finds only those roots for which some g(i), as a function\n of t, changes sign in the interval of integration.\n It then returns the solution at the root, if that occurs\n sooner than the specified stop condition, and otherwise returns\n the solution according the specified stop condition.\n (d) It supplies to JAC an input flag, JOK, which indicates whether\n JAC may (optionally) bypass the evaluation of Jacobian matrix data\n and instead process saved data (with the current value of scalar hl0).\n (e) It contains a new subroutine that calculates the initial step\n size to be attempted. Introduction to the Krylov methods in DLSODKR: The linear systems that must be solved have the form\n   A * x  = b,  where  A = identity - hl0 * (df/dy) .\n Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial\n derivatives of f (NEQ by NEQ). The particular Krylov method is chosen by setting the second digit,\n MITER, in the method flag MF.\n Currently, the values of MITER have the following meanings: MITER = 1 means the Scaled Preconditioned Incomplete\n            Orthogonalization Method (SPIOM). 2 means an incomplete version of the preconditioned scaled Generalized Minimal Residual method ( SPIGMR ) . This is the best choice in general . 3 means the Preconditioned Conjugate Gradient method ( PCG ) . Recommended only when df / dy is symmetric or nearly so . 4 means the scaled Preconditioned Conjugate Gradient method ( PCGS ) . Recommended only when D - inverse * df / dy * D is symmetric or nearly so , where D is the diagonal scaling matrix with elements 1 / EWT ( i ) ( see RTOL / ATOL description ) . 9 means that only a user - supplied matrix P ( approximating A ) will be used , with no Krylov iteration done . This option allows the user to provide the complete linear system solution algorithm , if desired . The user can apply preconditioning to the linear system A x = b,\n by means of arbitrary matrices (the preconditioners).\n     In the case of SPIOM and SPIGMR, one can apply left and right\n preconditioners P1 and P2, and the basic iterative method is then\n applied to the matrix (P1-inverse) A (P2-inverse) instead of to the\n matrix A.  The product P1 P2 should be an approximation to matrix A\n such that linear systems with P1 or P2 are easier to solve than with\n A.  Preconditioning from the left only or right only means using\n P2 = identity or P1 = identity, respectively.\n     In the case of the PCG and PCGS methods, there is only one\n preconditioner matrix P (but it can be the product of more than one).\n It should approximate the matrix A but allow for relatively\n easy solution of linear systems with coefficient matrix P.\n For PCG, P should be positive definite symmetric, or nearly so,\n and for PCGS, the scaled preconditioner D-inverse * P * D\n should be symmetric or nearly so.\n     If the Jacobian J = df/dy splits in a natural way into a sum\n J = J1 + J2, then one possible choice of preconditioners is\n     P1 = identity - hl0 * J1  and  P2 = identity - hl0 * J2\n provided each of these is easy to solve (or approximately solve). References:\n 1.  Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix\n     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989),\n     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987.\n 2.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Peter N. Brown\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Summary of Usage. Communication between the user and the DLSODKR package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the demonstration\n program distributed with this solver. A. First provide a subroutine of the form:\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n which supplies the vector function f by loading YDOT(i) with f(i). B. Provide a subroutine of the form:\n               SUBROUTINE G (NEQ, T, Y, NG, GOUT)\n               DOUBLE PRECISION T, Y(*), GOUT(NG)\n which supplies the vector function g by loading GOUT(i) with\n g(i), the i-th constraint function whose root is sought. C. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, MF should be between 21\n and 24, or possibly 29.  MF = 22 is generally the best choice.\n Use 23 or 24 only if symmetry is present.  Use MF = 29 if the\n complete linear system solution is to be provided by the user.\n The following four parameters must also be set.\n  IWORK(1) = LWP  = length of real array WP for preconditioning.\n  IWORK(2) = LIWP = length of integer array IWP for preconditioning.\n  IWORK(3) = JPRE = preconditioner type flag:\n                  = 0 for no preconditioning (P1 = P2 = P = identity)\n                  = 1 for left-only preconditioning (P2 = identity)\n                  = 2 for right-only preconditioning (P1 = identity)\n                  = 3 for two-sided preconditioning (and PCG or PCGS)\n  IWORK(4) = JACFLG = flag for whether JAC is called.\n                    = 0 if JAC is not to be called,\n                    = 1 if JAC is to be called.\n  Use JACFLG = 1 if JAC computes any nonconstant data for use in\n  preconditioning, such as Jacobian elements.\n  The arrays WP and IWP are work arrays under the user’s control,\n  for use in the routines that perform preconditioning operations. D. If the problem is stiff, you must supply two routines that deal\n with the preconditioning of the linear systems to be solved.\n These are as follows: SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , HL0 , JOK , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ) , YSV ( * ) , REWT ( * ) , FTY ( * ) , V ( * ) , HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the Jacobian matrix df / dy involved in the preconditioners P1 , P2 , P . The Y and FTY arrays contain the current values of y and f ( t , y ) , respectively , and YSV also contains the current value of y . The array V is work space of length NEQ . JAC must multiply all computed Jacobian elements by the scalar - HL0 , add the identity matrix , and do any factorization operations called for , in preparation for solving linear systems with a coefficient matrix of P1 , P2 , or P . The matrix P1 * P2 or P should be an approximation to identity - hl0 * ( df / dy ) . JAC should return IER = 0 if successful , and IER . ne . 0 if not . ( If IER . ne . 0 , a smaller time step will be tried . ) JAC may alter Y and V , but not YSV , REWT , FTY , or HL0 . The JOK argument can be ignored ( or see full description below ) . SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ) , FTY ( * ) , WK ( * ) , HL0 , WP ( * ) , B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right - hand side and one of the preconditioning matrices , P1 , P2 , or P , as coefficient matrix , and return the solution vector in B . LR is a flag concerning left vs right preconditioning , input to PSOL . PSOL is to use P1 if LR = 1 and P2 if LR = 2 . In the case of the PCG or PCGS method , LR will be 3 , and PSOL should solve the system P * x = B with the preconditioner matrix P . In the case MF = 29 ( no Krylov iteration ) , LR will be 0 , and PSOL is to return in B the desired approximate solution to A * x = B , where A = identity - hl0 * ( df / dy ) . PSOL can use data generated in the JAC routine and stored in WP and IWP . WK is a work array of length NEQ . The argument HL0 is the current value of the scalar appearing in the linear system . If the old value , at the time of the last JAC call , is needed , it must have been saved by JAC in WP . on return , PSOL should set the error flag IER as follows : IER = 0 if PSOL was successful , IER . gt . 0 if a recoverable error occurred , meaning that the time step will be retried , IER . lt . 0 if an unrecoverable error occurred , meaning that the solver is to stop immediately . E. Write a main program which calls Subroutine DLSODKR once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages\n by DLSODKR.  On the first call to DLSODKR, supply arguments as\n follows:\n F      = name of subroutine for right-hand side vector f.\n          This name must be declared External in calling program.\n NEQ    = number of first order ODEs.\n Y      = array of initial values, of length NEQ.\n T      = the initial value of the independent variable.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          The estimated local error in y(i) will be controlled so as\n          to be roughly less (in magnitude) than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: Actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             20 + 16 NEQ + 3 NG           for MF = 10,\n             45 + 17 NEQ + 3 NG + LWP     for MF = 21,\n             61 + 17 NEQ + 3 NG + LWP     for MF = 22,\n             20 + 15 NEQ + 3 NG + LWP     for MF = 23 or 24,\n             20 + 12 NEQ + 3 NG + LWP     for MF = 29.\n LRW    = declared length of RWORK (in user’s dimension).\n IWORK  = integer work array of length at least:\n             30            for MF = 10,\n             35 + LIWP     for MF = 21,\n             30 + LIWP     for MF = 22, 23, 24, or 29.\n LIW    = declared length of IWORK (in user’s dimension).\n JAC,PSOL = names of subroutines for preconditioning.\n          These names must be declared External in the calling program.\n MF     = method flag.  Standard values are:\n          10 for nonstiff (Adams) method.\n          21 for stiff (BDF) method, with preconditioned SIOM.\n          22 for stiff method, with preconditioned GMRES method.\n          23 for stiff method, with preconditioned CG method.\n          24 for stiff method, with scaled preconditioned CG method.\n          29 for stiff method, with user’s PSOL routine only.\n G      = name of subroutine for constraint functions, whose\n          roots are desired during the integration.\n          This name must be declared External in calling program.\n NG     = number of constraint functions g(i).  If there are none,\n          set NG = 0, and pass a dummy name for G.\n JROOT  = integer array of length NG for output of root information.\n          See next paragraph.\n Note that the main program must declare arrays Y, RWORK, IWORK,\n JROOT, and possibly ATOL. F. The output from the first call (or any call) is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable (normally TOUT).\n ISTATE = 2 or 3  if DLSODKR was successful, negative otherwise.\n           2 means no root was found, and TOUT was reached as desired.\n           3 means a root was found prior to reaching TOUT.\n          -1 means excess work done on this call (perhaps wrong MF).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad JAC\n             or PSOL routine supplied or wrong choice of MF or\n             tolerances, or this solver is inappropriate).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 means an unrecoverable error occurred in PSOL.\n JROOT  = array showing roots found if ISTATE = 3 on return.\n          JROOT(i) = 1 if g(i) has a root at T, or 0 otherwise. G. To continue the integration after a successful return, proceed\n as follows:\n (a) If ISTATE = 2 on return, reset TOUT and call DLSODKR again.\n (b) If ISTATE = 3 on return, reset ISTATE to 2 and call DLSODKR again.\n In either case, no other parameters need be reset. Full Description of User Interface to DLSODKR. The user interface to DLSODKR consists of the following parts. The call sequence to Subroutine DLSODKR, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODKR package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODKR package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF,\n  G, and NG,\n that used only for output is  JROOT,\n and those used for both input and output are\n  Y, T, ISTATE.\n The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODKR to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F      = the name of the user-supplied subroutine defining the\n          ODE system.  The system must be put in the first-order\n          form dy/dt = f(t,y), where f is a vector-valued function\n          of the scalar t and the vector y.  Subroutine F is to\n          compute the function f.  It is to have the form\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n          where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n          is output.  Y and YDOT are arrays of length NEQ.\n          Subroutine F should not alter Y(1),…,Y(NEQ).\n          F must be declared External in the calling program. Subroutine F may access user - defined quantities in NEQ ( 2 ) ,... and / or in Y ( NEQ ( 1 ) + 1 ) ,... if NEQ is an array ( dimensioned in F ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y below . If quantities computed in the F routine are needed externally to DLSODKR , an extra call to F should be made for this purpose , for consistent and accurate results . If only the derivative dy / dt is needed , use DINTDY instead . NEQ    = the size of the ODE system (number of first order\n          ordinary differential equations).  Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in the user-supplied routines. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODKR package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to the user - supplied routines . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to the user - supplied routines . Each such routine must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 1), and only for output on other calls.\n          On the first call, Y must contain the vector of initial\n          values.  On output, Y contains the computed solution vector,\n          evaluated at T.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F, G,\n      JAC, and PSOL.  Hence its length may exceed NEQ, and\n      locations Y(NEQ+1),... may be used to store other real data\n      and pass it to the user-supplied routines.\n      (The DLSODKR package accesses only Y(1),...,Y(NEQ).) T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          On output, after each call, T is the value at which a\n          computed solution y is evaluated (usually the same as TOUT).\n          If a root was found, T is the computed location of the\n          root reached first, on output.\n          On an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form RMS - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) , and the RMS - norm ( root - mean - square norm ) here is RMS - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be non - negative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array array RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          Input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at T = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          the state of the calculation. On input , the values of ISTATE are as follows . 1 means this is the first call for the problem ( initializations will be done ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , and any of the optional inputs except H0 . In addition , immediately following a return with ISTATE = 3 ( root found ), NG and G may be changed . ( But changing NG from 0 to . gt . 0 is not allowed . ) Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 1 on input . On output , ISTATE has the following values and meanings . 1 means nothing was done ; TOUT = T and ISTATE = 1 on input . 2 means the integration was performed successfully . 3 means the integration was successful , and one or more roots were found before satisfying the stop condition specified by ITASK . See JROOT . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . - 6 means EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . The integration was successful as far as T . - 7 means the PSOL routine returned an unrecoverable error flag ( IER . lt . 0 ) . The integration was successful as far as T . Note : Since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a real working array (double precision).\n          The length of RWORK must be at least\n             20 + NYH (MAXORD+1) + 3 NEQ + 3 NG + LENLS + LWP    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENLS = length of work space for linear system (Krylov)\n                  method, excluding preconditioning:\n            LENLS = 0                               if MITER = 0,\n            LENLS = NEQ (MAXL+3) + MAXL 2          if MITER = 1,\n            LENLS = NEQ (MAXL+3+MIN(1,MAXL-KMP))\n                 + (MAXL+3) MAXL + 1                if MITER = 2,\n            LENLS = 6 NEQ                           if MITER = 3 or 4,\n            LENLS = 3 NEQ                           if MITER = 9.\n          (See the MF description for METH and MITER, and the\n          list of optional inputs for MAXL and KMP.)\n          LWP = length of real user work space for preconditioning\n          (see JAC/PSOL).\n          Thus if default values are used and NEQ is constant,\n          this length is:\n             20 + 16 NEQ + 3 NG           for MF = 10,\n             45 + 24 NEQ + 3 NG + LWP     for MF = 11,\n             61 + 24 NEQ + 3 NG + LWP     for MF = 12,\n             20 + 22 NEQ + 3 NG + LWP     for MF = 13 or 14,\n             20 + 19 NEQ + 3 NG + LWP     for MF = 19,\n             20 + 9 NEQ + 3 NG            for MF = 20,\n             45 + 17 NEQ + 3 NG + LWP     for MF = 21,\n             61 + 17 NEQ + 3 NG + LWP     for MF = 22,\n             20 + 15 NEQ + 3 NG + LWP     for MF = 23 or 24,\n             20 + 12 NEQ + 3 NG + LWP     for MF = 29.\n          The first 20 words of RWORK are reserved for conditional\n          and optional inputs and optional outputs. The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer work array.  The length of IWORK must be at least\n             30                 if MITER = 0 (MF = 10 or 20),\n             30 + MAXL + LIWP   if MITER = 1 (MF = 11, 21),\n             30 + LIWP          if MITER = 2, 3, 4, or 9.\n          MAXL = 5 unless a different optional input value is given.\n          LIWP = length of integer user work space for preconditioning\n          (see conditional input list following).\n          The first few words of IWORK are used for conditional and\n          optional inputs and optional outputs. The following 4 words in IWORK are conditional inputs , required if MITER . ge . 1 : IWORK ( 1 ) = LWP = length of real array WP for use in preconditioning ( part of RWORK array ) . IWORK ( 2 ) = LIWP = length of integer array IWP for use in preconditioning ( part of IWORK array ) . The arrays WP and IWP are work arrays under the user 's control, for use in the routines that perform preconditioning operations ( JAC and PSOL ) . IWORK ( 3 ) = JPRE = preconditioner type flag : = 0 for no preconditioning ( P1 = P2 = P = identity ) = 1 for left - only preconditioning ( P2 = identity ) = 2 for right - only preconditioning ( P1 = identity ) = 3 for two - sided preconditioning ( and PCG or PCGS ) IWORK ( 4 ) = JACFLG = flag for whether JAC is called . = 0 if JAC is not to be called , = 1 if JAC is to be called . Use JACFLG = 1 if JAC computes any nonconstant data needed in preconditioning operations , such as some of the Jacobian elements . LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODKR\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODKR between calls, if\n desired (but not for use by any of the user-supplied routines). JAC    = the name of the user-supplied routine to compute any\n          Jacobian elements (or approximations) involved in the\n          matrix preconditioning operations (MITER .ge. 1).\n          It is to have the form\n            SUBROUTINE JAC (F, NEQ, T, Y, YSV, REWT, FTY, V,\n           1                HL0, JOK, WP, IWP, IER)\n            DOUBLE PRECISION T, Y( ), YSV( ), REWT( ), FTY( ), V( ),\n           1                 HL0, WP( )\n            INTEGER IWP( )\n          This routine must evaluate and preprocess any parts of the\n          Jacobian matrix df/dy used in the preconditioners P1, P2, P.\n          The Y and FTY arrays contain the current values of y and\n          f(t,y), respectively, and the YSV array also contains\n          the current y vector.  The array V is work space of length\n          NEQ for use by JAC.  REWT is the array of reciprocal error\n          weights (1/EWT).  JAC must multiply all computed Jacobian\n          elements by the scalar -HL0, add the identity matrix, and do\n          any factorization operations called for, in preparation\n          for solving linear systems with a coefficient matrix of\n          P1, P2, or P.  The matrix P1 P2 or P should be an\n          approximation to  identity - hl0 * (df/dy).  JAC should\n          return IER = 0 if successful, and IER .ne. 0 if not.\n          (If IER .ne. 0, a smaller time step will be tried.)\n          The arrays WP (of length LWP) and IWP (of length LIWP)\n          are for use by JAC and PSOL for work space and for storage\n          of data needed for the solution of the preconditioner\n          linear systems.  Their lengths and contents are under the\n          user’s control.\n               The argument JOK is an input flag for optional use\n          by JAC in deciding whether to recompute Jacobian elements\n          or use saved values.  If JOK = -1, then JAC must compute\n          any relevant Jacobian elements (or approximations) used in\n          the preconditioners.  Optionally, JAC may also save these\n          elements for later reuse.  If JOK = 1, the integrator has\n          made a judgement (based on the convergence history and the\n          value of HL0) that JAC need not recompute Jacobian elements,\n          but instead use saved values, and the current value of HL0,\n          to reconstruct the preconditioner matrices, followed by\n          any required factorizations.  This may be cost-effective if\n          Jacobian elements are costly and storage is available.\n               JAC may alter Y and V, but not YSV, REWT, FTY, or HL0.\n          JAC must be declared External in the calling program.\n               Subroutine JAC may access user-defined quantities in\n          NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n          (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n          See the descriptions of NEQ and Y above. PSOL   = the name of the user-supplied routine for the\n          solution of preconditioner linear systems.\n          It is to have the form\n            SUBROUTINE PSOL (NEQ, T, Y, FTY, WK,HL0, WP,IWP, B, LR,IER)\n            DOUBLE PRECISION T, Y( ), FTY( ), WK( ), HL0, WP( ), B( )\n            INTEGER IWP( )\n          This routine must solve a linear system with B as right-hand\n          side and one of the preconditioning matrices, P1, P2, or P,\n          as coefficient matrix, and return the solution vector in B.\n          LR is a flag concerning left vs right preconditioning, input\n          to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2.\n          In the case of the PCG or PCGS method, LR will be 3, and PSOL\n          should solve the system P*x = B with the preconditioner P.\n          In the case MITER = 9 (no Krylov iteration), LR will be 0,\n          and PSOL is to return in B the desired approximate solution\n          to A * x = B, where A = identity - hl0 * (df/dy).\n          PSOL can use data generated in the JAC routine and stored in\n          WP and IWP.\n          The Y and FTY arrays contain the current values of y and\n          f(t,y), respectively.  The array WK is work space of length\n          NEQ for use by PSOL.\n          The argument HL0 is the current value of the scalar appearing\n          in the linear system.  If the old value, as of the last\n          JAC call, is needed, it must have been saved by JAC in WP.\n          On return, PSOL should set the error flag IER as follows:\n            IER = 0 if PSOL was successful,\n            IER .gt. 0 on a recoverable error, meaning that the\n                   time step will be retried,\n            IER .lt. 0 on an unrecoverable error, meaning that the\n                   solver is to stop immediately.\n          PSOL may not alter Y, FTY, or HL0.\n          PSOL must be declared External in the calling program.\n               Subroutine PSOL may access user-defined quantities in\n          NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n          (dimensioned in PSOL) and/or Y has length exceeding NEQ(1).\n          See the descriptions of NEQ and Y above. MF     = the method flag.  Used only for input.  The legal values of\n          MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29.\n          MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n          METH indicates the basic linear multistep method:\n            METH = 1 means the implicit Adams method.\n            METH = 2 means the method based on Backward\n                     Differentiation Formulas (BDFs).\n          MITER indicates the corrector iteration method:\n            MITER = 0 means functional iteration (no linear system\n                      is involved).\n            MITER = 1 means Newton iteration with Scaled Preconditioned\n                      Incomplete Orthogonalization Method (SPIOM)\n                      for the linear systems.\n            MITER = 2 means Newton iteration with Scaled Preconditioned\n                      Incomplete Generalized Minimal Residual method\n                      (SPIGMR) for the linear systems.\n            MITER = 3 means Newton iteration with Preconditioned\n                      Conjugate Gradient method (PCG)\n                      for the linear systems.\n            MITER = 4 means Newton iteration with scaled preconditioned\n                      Conjugate Gradient method (PCGS)\n                      for the linear systems.\n            MITER = 9 means Newton iteration with only the\n                      user-supplied PSOL routine called (no Krylov\n                      iteration) for the linear systems.\n                      JPRE is ignored, and PSOL is called with LR = 0.\n          See comments in the introduction about the choice of MITER.\n          If MITER .ge. 1, the user must supply routines JAC and PSOL\n          (the names are arbitrary) as described above.\n          For MITER = 0, a dummy argument can be used. G      = the name of subroutine for constraint functions, whose\n          roots are desired during the integration.  It is to have\n          the form\n               SUBROUTINE G (NEQ, T, Y, NG, GOUT)\n               DOUBLE PRECISION T, Y(*), GOUT(NG)\n          where NEQ, T, Y, and NG are input, and the array GOUT\n          is output.  NEQ, T, and Y have the same meaning as in\n          the F routine, and GOUT is an array of length NG.\n          For i = 1,…,NG, this routine is to load into GOUT(i)\n          the value at (t,y) of the i-th constraint function g(i).\n          DLSODKR will find roots of the g(i) of odd multiplicity\n          (i.e. sign changes) as they occur during the integration.\n          G must be declared External in the calling program. Caution : Because of numerical errors in the functions g ( i ) due to roundoff and integration error , DLSODKR may return false roots , or return the same root at two or more nearly equal values of t . If such false roots are suspected , the user should consider smaller error tolerances and / or higher precision in the evaluation of the g ( i ) . If a root of some g ( i ) defines the end of the problem , the input to DLSODKR should nevertheless allow integration to a point slightly past that root , so that DLSODKR can locate the root by interpolation . Subroutine G may access user - defined quantities in NEQ ( 2 ) ,... and Y ( NEQ ( 1 ) + 1 ) ,... if NEQ is an array ( dimensioned in G ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y above . NG     = number of constraint functions g(i).  If there are none,\n          set NG = 0, and pass a dummy name for G. JROOT  = integer array of length NG.  Used only for output.\n          On a return with ISTATE = 3 (one or more roots found),\n          JROOT(i) = 1 if g(i) has a root at t, or JROOT(i) = 0 if not. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) DELT    RWORK(8)  convergence test constant in Krylov iteration\n                   algorithm.  The default is .05. MAXORD  IWORK(5)  the maximum order to be allowed.  The default\n                   value is 12 if METH = 1, and 5 if METH = 2.\n                   If MAXORD exceeds the default value, it will\n                   be reduced to the default value.\n                   If MAXORD is changed during the problem, it may\n                   cause the current order to be reduced. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. MAXL    IWORK(8)  maximum number of iterations in the SPIOM, SPIGMR,\n                   PCG, or PCGS algorithm (.le. NEQ).\n                   The default is MAXL = MIN(5,NEQ). KMP     IWORK(9)  number of vectors on which orthogonalization\n                   is done in SPIOM or SPIGMR algorithm (.le. MAXL).\n                   The default is KMP = MAXL.\n                   Note:  When KMP .lt. MAXL and MF = 22, the length\n                          of RWORK must be defined accordingly.  See\n                          the definition of RWORK above. Optional Outputs. As optional additional output from DLSODKR, the variables listed\n below are quantities related to the performance of DLSODKR\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODKR, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) NGE     IWORK(10) the number of g evaluations for the problem so far. NST     IWORK(11) the number of steps taken for the problem so far. NFE     IWORK(12) the number of f evaluations for the problem so far. NPE     IWORK(13) the number of calls to JAC so far (for evaluation\n                   of preconditioners). NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. NNI     IWORK(19) number of nonlinear iterations so far (each of\n                   which calls an iterative linear solver). NLI     IWORK(20) number of linear iterations so far.\n                   Note: A measure of the success of algorithm is\n                   the average number of linear iterations per\n                   nonlinear iteration, given by NLI/NNI.\n                   If this is close to MAXL, MAXL may be too small. NPS     IWORK(21) number of preconditioning solve operations\n                   (PSOL calls) so far. NCFN    IWORK(22) number of convergence failures of the nonlinear\n                   (Newton) iteration so far.\n                   Note: A measure of success is the overall\n                   rate of nonlinear convergence failures, NCFN/NST. NCFL    IWORK(23) number of convergence failures of the linear\n                   iteration so far.\n                   Note: A measure of success is the overall\n                   rate of linear convergence failures, NCFL/NNI. NSFI    IWORK(24) number of functional iteration steps so far.\n                   Note: A measure of the extent to which the\n                   problem is nonstiff is the ratio NSFI/NST. NJEV    IWORK(25) number of JAC calls with JOK = -1 so far\n                   (number of evaluations of Jacobian data). The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name    Base Address      Description YH      21 + 3 NG      the Nordsieck history array, of size NYH by\n                        (NQCUR + 1), where NYH is the initial value\n                        of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR *j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR. ACOR     LENRW-NEQ+1   array of size NEQ used for the accumulated\n                        corrections on each step, scaled on output\n                        to represent the estimated local error in y\n                        on the last step.  This is the vector E in\n                        the description of the error control.  It is\n                        defined only on a successful return from\n                        DLSODKR. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODKR.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSODKR, if\n                             the default is not desired.\n                             The default value of LUN is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSODKR.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCKR(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSODKR (see Part 3 below).\n                             RSAV must be a real array of length 228\n                             or more, and ISAV must be an integer\n                             array of length 63 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCKR is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSODKR. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSODKR. The detailed instructions for using DINTDY are as follows.\n The form of the call is: LYH = 21 + 3*NG\n   CALL DINTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the T last returned by DLSODKR).\n             For valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (see optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(T), is already provided\n             by DLSODKR directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n LYH       = 21 + 3*NG = base address in RWORK of the history array YH.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSODKR is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSODKR, and\n   (2) the four internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         /DLS002/  of length   5  (1 double precision word\n                      followed by  4 integer words),\n         /DLPK01/  of length  17  (4 double precision words\n                      followed by 13 integer words),\n         /DLSR01/  of length  14     (5 double precision words\n                      followed by  9 integer words). If DLSODKR is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODKR is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODKR call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODKR call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCKR (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSODKR package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODKR call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODKR in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM.\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v:\n     D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i) W(i)) *2 ).\n DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODKR.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n   -substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n   -ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. REVISION HISTORY  (YYYYMMDD) 19900117  DATE WRITTEN\n 19900503  Added iteration switching (functional/Newton).\n 19900802  Added flag for Jacobian-saving in user preconditioner.\n 19900910  Added new initial stepsize routine LHIN.\n 19901019  Corrected LHIN - y array restored.\n 19910909  Changed names STOPK to STOKA, PKSET to SETPK;\n           removed unused variables in driver declarations;\n           minor corrections to main prologue.\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20020502  Corrected declarations in descriptions of user routines.\n 20030603  Corrected duplicate type declaration for DUMACH.\n 20031105  Restored ‘own’ variables to Common blocks, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants.\n 20031117  Changed internal name NPE to NJE. Other routines in the DLSODKR package. In addition to Subroutine DLSODKR, the DLSODKR package includes the\n following subroutines and function routines:\n  DLHIN    calculates a step size to be attempted initially.\n  DRCHEK   does preliminary checking for roots, and serves as an\n           interface between Subroutine DLSODKR and Subroutine DROOTS.\n  DROOTS   finds the leftmost root of a set of functions.\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DEWSET   sets the error weight vector EWT before each step.\n  DVNORM   computes the weighted RMS-norm of a vector.\n  DSTOKA   is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DSETPK   interfaces between DSTOKA and the JAC routine.\n  DSOLPK   manages solution of linear system in Newton iteration.\n  DSPIOM   performs the SPIOM algorithm.\n  DATV     computes a scaled, preconditioned product (I-hl0 J) v.\n  DORTHOG  orthogonalizes a vector against previous basis vectors.\n  DHEFA    generates an LU factorization of a Hessenberg matrix.\n  DHESL    solves a Hessenberg square linear system.\n  DSPIGMR  performs the SPIGMR algorithm.\n  DHEQR    generates a QR factorization of a Hessenberg matrix.\n  DHELS    finds the least squares solution of a Hessenberg system.\n  DPCG     performs preconditioned conjugate gradient algorithm (PCG).\n  DPCGS    performs the PCGS algorithm.\n  DATP     computes the product A p, where A = I - hl0 df/dy.\n  DUSOL    interfaces to the user’s PSOL routine (MITER = 9).\n  DSRCKR   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  DAXPY, DCOPY, DDOT, DNRM2, and DSCAL   are basic linear\n           algebra modules (from the BLAS collection).\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DVNORM, DDOT, DNRM2, DUMACH, and IXSAV are function\n routines.  All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf real :: g integer :: Ng integer :: Jroot (*) Calls proc~~dlsodkr~~CallsGraph proc~dlsodkr dlsodkr proc~dewset dewset proc~dlsodkr->proc~dewset proc~dintdy dintdy proc~dlsodkr->proc~dintdy proc~dstoka dstoka proc~dlsodkr->proc~dstoka proc~drchek drchek proc~dlsodkr->proc~drchek proc~xerrwd xerrwd proc~dlsodkr->proc~xerrwd proc~dumach dumach proc~dlsodkr->proc~dumach proc~dlhin dlhin proc~dlsodkr->proc~dlhin proc~dcopy dcopy proc~dlsodkr->proc~dcopy proc~dvnorm dvnorm proc~dlsodkr->proc~dvnorm proc~dintdy->proc~xerrwd proc~dstoka->proc~dvnorm proc~dcfode dcfode proc~dstoka->proc~dcfode proc~drchek->proc~dintdy proc~drchek->proc~dcopy proc~dlhin->proc~dcopy proc~dlhin->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodkr.html"},{"title":"dlsodpk – odepack","text":"public subroutine dlsodpk(f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf) *DECK DLSODPK This is the 18 November 2003 version of\n DLSODPK: Livermore Solver for Ordinary Differential equations,\n          with Preconditioned Krylov iteration methods for the\n          Newton correction linear systems. This version is in double precision. DLSODPK solves the initial value problem for stiff or nonstiff\n systems of first order ODEs,\n     dy/dt = f(t,y),  or, in component form,\n     dy(i)/dt = f(i) = f(i,t,y(1),y(2),…,y(NEQ)) (i = 1,…,NEQ). Introduction. This is a modification of the DLSODE package which incorporates\n various preconditioned Krylov subspace iteration methods for the\n linear algebraic systems that arise in the case of stiff systems. The linear systems that must be solved have the form\n   A * x  = b,  where  A = identity - hl0 * (df/dy) .\n Here hl0 is a scalar, and df/dy is the Jacobian matrix of partial\n derivatives of f (NEQ by NEQ). The particular Krylov method is chosen by setting the second digit,\n MITER, in the method flag MF.\n Currently, the values of MITER have the following meanings: MITER = 1 means the preconditioned Scaled Incomplete\n            Orthogonalization Method (SPIOM). 2 means an incomplete version of the Preconditioned Scaled Generalized Minimal Residual method ( SPIGMR ) . This is the best choice in general . 3 means the Preconditioned Conjugate Gradient method ( PCG ) . Recommended only when df / dy is symmetric or nearly so . 4 means the scaled Preconditioned Conjugate Gradient method ( PCGS ) . Recommended only when D - inverse * df / dy * D is symmetric or nearly so , where D is the diagonal scaling matrix with elements 1 / EWT ( i ) ( see RTOL / ATOL description ) . 9 means that only a user - supplied matrix P ( approximating A ) will be used , with no Krylov iteration done . This option allows the user to provide the complete linear system solution algorithm , if desired . The user can apply preconditioning to the linear system A x = b,\n by means of arbitrary matrices (the preconditioners).\n     In the case of SPIOM and SPIGMR, one can apply left and right\n preconditioners P1 and P2, and the basic iterative method is then\n applied to the matrix (P1-inverse) A (P2-inverse) instead of to the\n matrix A.  The product P1 P2 should be an approximation to matrix A\n such that linear systems with P1 or P2 are easier to solve than with\n A.  Preconditioning from the left only or right only means using\n P2 = identity or P1 = identity, respectively.\n     In the case of the PCG and PCGS methods, there is only one\n preconditioner matrix P (but it can be the product of more than one).\n It should approximate the matrix A but allow for relatively\n easy solution of linear systems with coefficient matrix P.\n For PCG, P should be positive definite symmetric, or nearly so,\n and for PCGS, the scaled preconditioner D-inverse * P * D\n should be symmetric or nearly so.\n     If the Jacobian J = df/dy splits in a natural way into a sum\n J = J1 + J2, then one possible choice of preconditioners is\n     P1 = identity - hl0 * J1  and  P2 = identity - hl0 * J2\n provided each of these is easy to solve (or approximately solve). References:\n 1.  Peter N. Brown and Alan C. Hindmarsh, Reduced Storage Matrix\n     Methods in Stiff ODE Systems, J. Appl. Math. & Comp., 31 (1989),\n     pp. 40-91; also  L.L.N.L. Report UCRL-95088, Rev. 1, June 1987.\n 2.  Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing, R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Peter N. Brown\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551 Summary of Usage. Communication between the user and the DLSODPK package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the demonstration\n program distributed with this solver. A. First provide a subroutine of the form:\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n which supplies the vector function f by loading YDOT(i) with f(i). B. Next determine (or guess) whether or not the problem is stiff.\n Stiffness occurs when the Jacobian matrix df/dy has an eigenvalue\n whose real part is negative and large in magnitude, compared to the\n reciprocal of the t span of interest.  If the problem is nonstiff,\n use a method flag MF = 10.  If it is stiff, MF should be between 21\n and 24, or possibly 29.  MF = 22 is generally the best choice.\n Use 23 or 24 only if symmetry is present.  Use MF = 29 if the\n complete linear system solution is to be provided by the user.\n The following four parameters must also be set.\n  IWORK(1) = LWP  = length of real array WP for preconditioning.\n  IWORK(2) = LIWP = length of integer array IWP for preconditioning.\n  IWORK(3) = JPRE = preconditioner type flag:\n                  = 0 for no preconditioning (P1 = P2 = P = identity)\n                  = 1 for left-only preconditioning (P2 = identity)\n                  = 2 for right-only preconditioning (P1 = identity)\n                  = 3 for two-sided preconditioning (and PCG or PCGS)\n  IWORK(4) = JACFLG = flag for whether JAC is called.\n                    = 0 if JAC is not to be called,\n                    = 1 if JAC is to be called.\n  Use JACFLG = 1 if JAC computes any nonconstant data for use in\n  preconditioning, such as Jacobian elements.\n  The arrays WP and IWP are work arrays under the user’s control,\n  for use in the routines that perform preconditioning operations. C. If the problem is stiff, you must supply two routines that deal\n with the preconditioning of the linear systems to be solved.\n These are as follows: SUBROUTINE JAC ( F , NEQ , T , Y , YSV , REWT , FTY , V , HL0 , WP , IWP , IER ) DOUBLE PRECISION T , Y ( * ) , YSV ( * ) , REWT ( * ) , FTY ( * ) , V ( * ) , HL0 , WP ( * ) INTEGER IWP ( * ) This routine must evaluate and preprocess any parts of the Jacobian matrix df / dy involved in the preconditioners P1 , P2 , P . The Y and FTY arrays contain the current values of y and f ( t , y ) , respectively , and YSV also contains the current value of y . The array V is work space of length NEQ . JAC must multiply all computed Jacobian elements by the scalar - HL0 , add the identity matrix , and do any factorization operations called for , in preparation for solving linear systems with a coefficient matrix of P1 , P2 , or P . The matrix P1 * P2 or P should be an approximation to identity - HL0 * ( df / dy ) . JAC should return IER = 0 if successful , and IER . ne . 0 if not . ( If IER . ne . 0 , a smaller time step will be tried . ) SUBROUTINE PSOL ( NEQ , T , Y , FTY , WK , HL0 , WP , IWP , B , LR , IER ) DOUBLE PRECISION T , Y ( * ) , FTY ( * ) , WK ( * ) , HL0 , WP ( * ) , B ( * ) INTEGER IWP ( * ) This routine must solve a linear system with B as right - hand side and one of the preconditioning matrices , P1 , P2 , or P , as coefficient matrix , and return the solution vector in B . LR is a flag concerning left vs right preconditioning , input to PSOL . PSOL is to use P1 if LR = 1 and P2 if LR = 2 . In the case of the PCG or PCGS method , LR will be 3 , and PSOL should solve the system P * x = B with the preconditioner matrix P . In the case MF = 29 ( no Krylov iteration ) , LR will be 0 , and PSOL is to return in B the desired approximate solution to A * x = B , where A = identity - HL0 * ( df / dy ) . PSOL can use data generated in the JAC routine and stored in WP and IWP . WK is a work array of length NEQ . The argument HL0 is the current value of the scalar appearing in the linear system . If the old value , at the time of the last JAC call , is needed , it must have been saved by JAC in WP . On return , PSOL should set the error flag IER as follows : IER = 0 if PSOL was successful , IER . gt . 0 if a recoverable error occurred , meaning that the time step will be retried , IER . lt . 0 if an unrecoverable error occurred , meaning that the solver is to stop immediately . D. Write a main program which calls Subroutine DLSODPK once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSODPK.  On the first call to DLSODPK, supply arguments as follows:\n F      = name of subroutine for right-hand side vector f.\n          This name must be declared External in calling program.\n NEQ    = number of first order ODEs.\n Y      = array of initial values, of length NEQ.\n T      = the initial value of the independent variable.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          the estimated local error in y(i) will be controlled so as\n          to be roughly less (in magnitude) than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: Actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             20 + 16 NEQ           for MF = 10,\n             45 + 17 NEQ + LWP     for MF = 21,\n             61 + 17 NEQ + LWP     for MF = 22,\n             20 + 15 NEQ + LWP     for MF = 23 or 24,\n             20 + 12*NEQ + LWP     for MF = 29.\n LRW    = declared length of RWORK (in user’s dimension).\n IWORK  = integer work array of length at least:\n             30            for MF = 10,\n             35 + LIWP     for MF = 21,\n             30 + LIWP     for MF = 22, 23, 24, or 29.\n LIW    = declared length of IWORK (in user’s dimension).\n JAC,PSOL = names of subroutines for preconditioning.\n          These names must be declared External in the calling program.\n MF     = method flag.  Standard values are:\n          10 for nonstiff (Adams) method.\n          21 for stiff (BDF) method, with preconditioned SIOM.\n          22 for stiff method, with preconditioned GMRES method.\n          23 for stiff method, with preconditioned CG method.\n          24 for stiff method, with scaled preconditioned CG method.\n          29 for stiff method, with user’s PSOL routine only.\n Note that the main program must declare arrays Y, RWORK, IWORK,\n and possibly ATOL. E. The output from the first call (or any call) is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable (normally TOUT).\n ISTATE = 2  if DLSODPK was successful, negative otherwise.\n          -1 means excess work done on this call (perhaps wrong MF).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad JAC\n             or PSOL routine supplied or wrong choice of MF or\n             tolerances, or this solver is inappropriate).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 means an unrecoverable error occurred in PSOL. F. To continue the integration after a successful return, simply\n reset TOUT and call DLSODPK again.  No other parameters need be reset. ----------------------------------------------------------------------- Full Description of User Interface to DLSODPK. The user interface to DLSODPK consists of the following parts. The call sequence to Subroutine DLSODPK, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSODPK package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSODPK package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n  F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC, PSOL, MF,\n and those used for both input and output are\n  Y, T, ISTATE.\n The work arrays RWORK and IWORK are also used for conditional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSODPK to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. F      = the name of the user-supplied subroutine defining the\n          ODE system.  The system must be put in the first-order\n          form dy/dt = f(t,y), where f is a vector-valued function\n          of the scalar t and the vector y.  Subroutine F is to\n          compute the function f.  It is to have the form\n               SUBROUTINE F (NEQ, T, Y, YDOT)\n               DOUBLE PRECISION T, Y( ), YDOT( )\n          where NEQ, T, and Y are input, and the array YDOT = f(t,y)\n          is output.  Y and YDOT are arrays of length NEQ.\n          Subroutine F should not alter Y(1),…,Y(NEQ).\n          F must be declared External in the calling program. Subroutine F may access user - defined quantities in NEQ ( 2 ) ,... and / or in Y ( NEQ ( 1 ) + 1 ) ,... if NEQ is an array ( dimensioned in F ) and / or Y has length exceeding NEQ ( 1 ) . See the descriptions of NEQ and Y below . If quantities computed in the F routine are needed externally to DLSODPK , an extra call to F should be made for this purpose , for consistent and accurate results . If only the derivative dy / dt is needed , use DINTDY instead . NEQ    = the size of the ODE system (number of first order\n          ordinary differential equations).  Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in the user-supplied subroutines. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSODPK package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to F , JAC , and PSOL . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to the user - supplied subroutines . Each such routine must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 1), and only for output on other calls.\n          On the first call, Y must contain the vector of initial\n          values.  On output, Y contains the computed solution vector,\n          evaluated at T.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to F,\n      JAC, and PSOL. Hence its length may exceed NEQ, and locations\n      Y(NEQ+1),... may be used to store other real data and\n      pass it to the user-supplied subroutines.  (The DLSODPK\n      package accesses only Y(1),...,Y(NEQ).) T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          On output, after each call, T is the value at which a\n          computed solution y is evaluated (usually the same as TOUT).\n          On an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form RMS - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) , and the RMS - norm ( root - mean - square norm ) here is RMS - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be non - negative . the following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array array RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          Input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at t = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          the state of the calculation. On input , the values of ISTATE are as follows . 1 means this is the first call for the problem ( initializations will be done ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , and any of the optional inputs except H0 . Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 1 on input . On output , ISTATE has the following values and meanings . 1 means nothing was done ; TOUT = T and ISTATE = 1 on input . 2 means the integration was performed successfully . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . - 6 means EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . The integration was successful as far as T . - 7 means the PSOL routine returned an unrecoverable error flag ( IER . lt . 0 ) . The integration was successful as far as T . Note : since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a real working array (double precision).\n          The length of RWORK must be at least\n             20 + NYH (MAXORD + 1) + 3 NEQ + LENLS + LWP    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENLS = length of work space for linear system (Krylov)\n                  method, excluding preconditioning:\n            LENLS = 0                               if MITER = 0,\n            LENLS = NEQ (MAXL+3) + MAXL 2          if MITER = 1,\n            LENLS = NEQ (MAXL+3+MIN(1,MAXL-KMP))\n                 + (MAXL+3) MAXL + 1                if MITER = 2,\n            LENLS = 6 NEQ                           if MITER = 3 or 4,\n            LENLS = 3 NEQ                           if MITER = 9.\n          (See the MF description for METH and MITER, and the\n          list of optional inputs for MAXL and KMP.)\n          LWP = length of real user work space for preconditioning\n          (see JAC/PSOL).\n          Thus if default values are used and NEQ is constant,\n          this length is:\n             20 + 16 NEQ           for MF = 10,\n             45 + 24 NEQ + LWP     FOR MF = 11,\n             61 + 24 NEQ + LWP     FOR MF = 12,\n             20 + 22 NEQ + LWP     FOR MF = 13 OR 14,\n             20 + 19 NEQ + LWP     FOR MF = 19,\n             20 + 9 NEQ            FOR MF = 20,\n             45 + 17 NEQ + LWP     FOR MF = 21,\n             61 + 17 NEQ + LWP     FOR MF = 22,\n             20 + 15 NEQ + LWP     FOR MF = 23 OR 24,\n             20 + 12*NEQ + LWP     for MF = 29.\n          The first 20 words of RWORK are reserved for conditional\n          and optional inputs and optional outputs. The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer work array.  The length of IWORK must be at least\n             30                 if MITER = 0 (MF = 10 or 20),\n             30 + MAXL + LIWP   if MITER = 1 (MF = 11, 21),\n             30 + LIWP          if MITER = 2, 3, 4, or 9.\n          MAXL = 5 unless a different optional input value is given.\n          LIWP = length of integer user work space for preconditioning\n          (see conditional input list following).\n          The first few words of IWORK are used for conditional and\n          optional inputs and optional outputs. The following 4 words in IWORK are conditional inputs , required if MITER . ge . 1 : IWORK ( 1 ) = LWP = length of real array WP for use in preconditioning ( part of RWORK array ) . IWORK ( 2 ) = LIWP = length of integer array IWP for use in preconditioning ( part of IWORK array ) . The arrays WP and IWP are work arrays under the user 's control, for use in the routines that perform preconditioning operations ( JAC and PSOL ) . IWORK ( 3 ) = JPRE = preconditioner type flag : = 0 for no preconditioning ( P1 = P2 = P = identity ) = 1 for left - only preconditioning ( P2 = identity ) = 2 for right - only preconditioning ( P1 = identity ) = 3 for two - sided preconditioning ( and PCG or PCGS ) IWORK ( 4 ) = JACFLG = flag for whether JAC is called . = 0 if JAC is not to be called , = 1 if JAC is to be called . Use JACFLG = 1 if JAC computes any nonconstant data needed in preconditioning operations , such as some of the Jacobian elements . LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSODPK\n for the same problem, except possibly for the conditional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSODPK between calls, if\n desired (but not for use by any of the user-supplied subroutines). JAC    = the name of the user-supplied routine to compute any\n          Jacobian elements (or approximations) involved in the\n          matrix preconditioning operations (MITER .ge. 1).\n          It is to have the form\n            SUBROUTINE JAC (F, NEQ, T, Y, YSV, REWT, FTY, V,\n           1                HL0, WP, IWP, IER)\n            DOUBLE PRECISION T, Y( ),YSV( ), REWT( ), FTY( ), V( ),\n           1                 HL0, WP( )\n            INTEGER IWP( )\n          This routine must evaluate and preprocess any parts of the\n          Jacobian matrix df/dy used in the preconditioners P1, P2, P.\n          the Y and FTY arrays contain the current values of y and\n          f(t,y), respectively, and YSV also contains the current\n          value of y.  The array V is work space of length\n          NEQ for use by JAC.  REWT is the array of reciprocal error\n          weights (1/EWT).  JAC must multiply all computed Jacobian\n          elements by the scalar -HL0, add the identity matrix, and do\n          any factorization operations called for, in preparation\n          for solving linear systems with a coefficient matrix of\n          P1, P2, or P.  The matrix P1 P2 or P should be an\n          approximation to  identity - HL0 * (df/dy).  JAC should\n          return IER = 0 if successful, and IER .ne. 0 if not.\n          (If IER .ne. 0, a smaller time step will be tried.)\n          The arrays WP (of length LWP) and IWP (of length LIWP)\n          are for use by JAC and PSOL for work space and for storage\n          of data needed for the solution of the preconditioner\n          linear systems.  Their lengths and contents are under the\n          user’s control.\n          The JAC routine may save relevant Jacobian elements (or\n          approximations) used in the preconditioners, along with the\n          value of HL0, and use these to reconstruct preconditioner\n          matrices later without reevaluationg those elements.\n          This may be cost-effective if JAC is called with HL0\n          considerably different from its earlier value, indicating\n          that a corrector convergence failure has occurred because\n          of the change in HL0, not because of changes in the\n          value of the Jacobian.  In doing this, use the saved and\n          current values of HL0 to decide whether to use saved\n          or reevaluated elements.\n          JAC may alter V, but may not alter Y, YSV, REWT, FTY, or HL0.\n          JAC must be declared External in the calling program.\n               Subroutine JAC may access user-defined quantities in\n          NEQ(2),… and/or in Y(NEQ(1)+1),… if NEQ is an array\n          (dimensioned in JAC) and/or Y has length exceeding NEQ(1).\n          See the descriptions of NEQ and Y above. PSOL   = the name of the user-supplied routine for the\n          solution of preconditioner linear systems.\n          It is to have the form\n            SUBROUTINE PSOL (NEQ, T, Y, FTY, WK,HL0, WP,IWP, B, LR,IER)\n            DOUBLE PRECISION T, Y( ), FTY( ), WK( ), HL0, WP( ), B( )\n            INTEGER IWP( )\n          This routine must solve a linear system with B as right-hand\n          side and one of the preconditioning matrices, P1, P2, or P,\n          as coefficient matrix, and return the solution vector in B.\n          LR is a flag concerning left vs right preconditioning, input\n          to PSOL.  PSOL is to use P1 if LR = 1 and P2 if LR = 2.\n          In the case of the PCG or PCGS method, LR will be 3, and PSOL\n          should solve the system P*x = B with the preconditioner P.\n          In the case MITER = 9 (no Krylov iteration), LR will be 0,\n          and PSOL is to return in B the desired approximate solution\n          to A * x = B, where A = identity - HL0 * (df/dy).\n          PSOL can use data generated in the JAC routine and stored in\n          WP and IWP.\n          The Y and FTY arrays contain the current values of y and\n          f(t,y), respectively.  The array WK is work space of length\n          NEQ for use by PSOL.\n          The argument HL0 is the current value of the scalar appearing\n          in the linear system.  If the old value, as of the last\n          JAC call, is needed, it must have been saved by JAC in WP.\n          On return, PSOL should set the error flag IER as follows:\n            IER = 0 if PSOL was successful,\n            IER .gt. 0 on a recoverable error, meaning that the\n                   time step will be retried,\n            IER .lt. 0 on an unrecoverable error, meaning that the\n                   solver is to stop immediately.\n          PSOL may not alter Y, FTY, or HL0.\n          PSOL must be declared External in the calling program.\n               Subroutine PSOL may access user-defined quantities in\n          NEQ(2),… and Y(NEQ(1)+1),… if NEQ is an array\n          (dimensioned in PSOL) and/or Y has length exceeding NEQ(1).\n          See the descriptions of NEQ and Y above. MF     = the method flag.  Used only for input.  The legal values of\n          MF are 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, and 29.\n          MF has decimal digits METH and MITER: MF = 10*METH + MITER.\n          METH indicates the basic linear multistep method:\n            METH = 1 means the implicit Adams method.\n            METH = 2 means the method based on Backward\n                     Differentiation Formulas (BDFs).\n          MITER indicates the corrector iteration method:\n            MITER = 0 means functional iteration (no linear system\n                      is involved).\n            MITER = 1 means Newton iteration with Scaled Preconditioned\n                      Incomplete Orthogonalization Method (SPIOM)\n                      for the linear systems.\n            MITER = 2 means Newton iteration with Scaled Preconditioned\n                      Generalized Minimal Residual method (SPIGMR)\n                      for the linear systems.\n            MITER = 3 means Newton iteration with Preconditioned\n                      Conjugate Gradient method (PCG)\n                      for the linear systems.\n            MITER = 4 means Newton iteration with scaled Preconditioned\n                      Conjugate Gradient method (PCGS)\n                      for the linear systems.\n            MITER = 9 means Newton iteration with only the\n                      user-supplied PSOL routine called (no Krylov\n                      iteration) for the linear systems.\n                      JPRE is ignored, and PSOL is called with LR = 0.\n          See comments in the introduction about the choice of MITER.\n          If MITER .ge. 1, the user must supply routines JAC and PSOL\n          (the names are arbitrary) as described above.\n          For MITER = 0, dummy arguments can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) DELT    RWORK(8)  convergence test constant in Krylov iteration\n                   algorithm.  The default is .05. MAXORD  IWORK(5)  the maximum order to be allowed.  The default\n                   value is 12 if METH = 1, and 5 if METH = 2.\n                   If MAXORD exceeds the default value, it will\n                   be reduced to the default value.\n                   If MAXORD is changed during the problem, it may\n                   cause the current order to be reduced. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. MAXL    IWORK(8)  maximum number of iterations in the SPIOM, SPIGMR,\n                   PCG, or PCGS algorithm (.le. NEQ).\n                   The default is MAXL = MIN(5,NEQ). KMP     IWORK(9)  number of vectors on which orthogonalization\n                   is done in SPIOM or SPIGMR algorithm (.le. MAXL).\n                   The default is KMP = MAXL.\n                   Note:  When KMP .lt. MAXL and MF = 22, the length\n                          of RWORK must be defined accordingly.  See\n                          the definition of RWORK above. Optional Outputs. As optional additional output from DLSODPK, the variables listed\n below are quantities related to the performance of DLSODPK\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSODPK, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On an illegal input return\n (ISTATE = -3), they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) NST     IWORK(11) the number of steps taken for the problem so far. NFE     IWORK(12) the number of f evaluations for the problem so far. NPE     IWORK(13) the number of calls to JAC so far (for Jacobian\n                   evaluation associated with preconditioning). NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. NNI     IWORK(19) number of nonlinear iterations so far (each of\n                   which calls an iterative linear solver). NLI     IWORK(20) number of linear iterations so far.\n                   Note: A measure of the success of algorithm is\n                   the average number of linear iterations per\n                   nonlinear iteration, given by NLI/NNI.\n                   If this is close to MAXL, MAXL may be too small. NPS     IWORK(21) number of preconditioning solve operations\n                   (PSOL calls) so far. NCFN    IWORK(22) number of convergence failures of the nonlinear\n                   (Newton) iteration so far.\n                   Note: A measure of success is the overall\n                   rate of nonlinear convergence failures, NCFN/NST. NCFL    IWORK(23) number of convergence failures of the linear\n                   iteration so far.\n                   Note: A measure of success is the overall\n                   rate of linear convergence failures, NCFL/NNI. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name    Base Address      Description YH      21             the Nordsieck history array, of size NYH by\n                        (NQCUR + 1), where NYH is the initial value\n                        of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR**j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR. ACOR     LENRW-NEQ+1   array of size NEQ used for the accumulated\n                        corrections on each step, scaled on output\n                        to represent the estimated local error in y\n                        on the last step.  This is the vector E in\n                        the description of the error control.  It is\n                        defined only on a successful return from\n                        DLSODPK. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSODPK.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSODPK, if\n                             the default is not desired.\n                             The default value of lun is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSODPK.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCPK(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSODPK (see Part 3 below).\n                             RSAV must be a real array of length 222\n                             or more, and ISAV must be an integer\n                             array of length 50 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCPK is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSODPK. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (See below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSODPK. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the T last returned by DLSODPK).\n             for valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (see optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(T), is already provided\n             by DLSODPK directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n RWORK(21) = the base address of the history array YH.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSODPK is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSODPK, and\n   (2) the two internal Common blocks\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words),\n         /DLPK01/  of length  17  (4 double precision words\n                      followed by 13 integer words). If DLSODPK is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common blocks in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSODPK is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSODPK call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSODPK call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCPK (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. below are descriptions of two routines in the DLSODPK package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSODPK call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSODPK in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM.\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v:\n     D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i) W(i)) *2 ).\n DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSODPK.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n   -substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n   -ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. REVISION HISTORY  (YYYYMMDD) 19860901  DATE WRITTEN\n 19861010  Numerous minor revisions to SPIOM and SPGMR routines;\n           minor corrections to prologues and comments.\n 19870114  Changed name SPGMR to SPIGMR; revised residual norm\n           calculation in SPIGMR (for incomplete case);\n           revised error return logic in SPIGMR;\n 19870330  Major update: corrected comments throughout;\n           removed TRET from Common; rewrote EWSET with 4 loops;\n           fixed t test in INTDY; added Cray directives in STODPK;\n           in STODPK, fixed DELP init. and logic around PJAC call;\n           combined routines to save/restore Common;\n           passed LEVEL = 0 in error message calls (except run abort).\n 19871130  Added option MITER = 9; shortened WM array by 2;\n           revised early return from SPIOM and SPIGMR;\n           replaced copy loops with SCOPY/DCOPY calls;\n           minor corrections/revisions to SOLPK, SPIGMR, ATV, ATP;\n           corrections to main prologue and internal comments.\n 19880304  Corrections to type declarations in SOLPK, SPIOM, USOL.\n 19891025  Added ISTATE = -7 return; minor revisions to USOL;\n           added initialization of JACFLG in main driver;\n           removed YH and NYH from PKSET call list;\n           minor revisions to SPIOM and SPIGMR;\n           corrections to main prologue and internal comments.\n 19900803  Added YSV to JAC call list; minor comment corrections.\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20020502  Corrected declarations in descriptions of user routines.\n 20030603  Corrected duplicate type declaration for DUMACH.\n 20031105  Restored ‘own’ variables to Common blocks, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants.\n 20031117  Changed internal name NPE to NJE. Other routines in the DLSODPK package. In addition to Subroutine DLSODPK, the DLSODPK package includes the\n following subroutines and function routines:\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DEWSET   sets the error weight vector EWT before each step.\n  DVNORM   computes the weighted RMS-norm of a vector.\n  DSTODPK  is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DPKSET   interfaces between DSTODPK and the JAC routine.\n  DSOLPK   manages solution of linear system in Newton iteration.\n  DSPIOM   performs the SPIOM algorithm.\n  DATV     computes a scaled, preconditioned product (I-hl0 J) v.\n  DORTHOG  orthogonalizes a vector against previous basis vectors.\n  DHEFA    generates an LU factorization of a Hessenberg matrix.\n  DHESL    solves a Hessenberg square linear system.\n  DSPIGMR  performs the SPIGMR algorithm.\n  DHEQR    generates a QR factorization of a Hessenberg matrix.\n  DHELS    finds the least squares solution of a Hessenberg system.\n  DPCG     performs Preconditioned Conjugate Gradient algorithm (PCG).\n  DPCGS    performs the PCGS algorithm.\n  DATP     computes the product A p, where A = I - hl0 df/dy.\n  DUSOL    interfaces to the user’s PSOL routine (MITER = 9).\n  DSRCPK   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  DAXPY, DCOPY, DDOT, DNRM2, and DSCAL   are basic linear\n           algebra modules (from the BLAS collection).\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DVNORM, DDOT, DNRM2, DUMACH, and IXSAV are function\n routines.  All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf Calls proc~~dlsodpk~~CallsGraph proc~dlsodpk dlsodpk proc~dewset dewset proc~dlsodpk->proc~dewset proc~dintdy dintdy proc~dlsodpk->proc~dintdy proc~dstodpk dstodpk proc~dlsodpk->proc~dstodpk proc~xerrwd xerrwd proc~dlsodpk->proc~xerrwd proc~dumach dumach proc~dlsodpk->proc~dumach proc~dvnorm dvnorm proc~dlsodpk->proc~dvnorm proc~dintdy->proc~xerrwd proc~dstodpk->proc~dvnorm proc~dcfode dcfode proc~dstodpk->proc~dcfode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsodpk.html"},{"title":"dlsoibt – odepack","text":"public subroutine dlsoibt(res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) This is the 18 November 2003 version of\n DLSOIBT: Livermore Solver for Ordinary differential equations given\n          in Implicit form, with Block-Tridiagonal Jacobian treatment. This version is in double precision. DLSOIBT solves the initial value problem for linearly implicit\n systems of first order ODEs,\n     A(t,y) * dy/dt = g(t,y),  where A(t,y) is a square matrix,\n or, in component form,\n     ( a   * ( dy / dt ))  + … +  ( a     * ( dy   / dt ))  =\n        i,1      1                     i,NEQ      NEQ =   g ( t, y, y ,..., y    )   ( i = 1,...,NEQ )\n       i      1   2       NEQ If A is singular, this is a differential-algebraic system. DLSOIBT is a variant version of the DLSODI package, for the case where\n the matrices A, dg/dy, and d(A*s)/dy are all block-tridiagonal. Reference:\n     Alan C. Hindmarsh,  ODEPACK, A Systematized Collection of ODE\n     Solvers, in Scientific Computing,  R. S. Stepleman et al. (Eds.),\n     North-Holland, Amsterdam, 1983, pp. 55-64. Authors:       Alan C. Hindmarsh and Jeffrey F. Painter\n                Center for Applied Scientific Computing, L-561\n                Lawrence Livermore National Laboratory\n                Livermore, CA 94551\n and\n                Charles S. Kenney\n formerly at:   Naval Weapons Center\n                China Lake, CA 93555 Summary of Usage. Communication between the user and the DLSOIBT package, for normal\n situations, is summarized here.  This summary describes only a subset\n of the full set of options available.  See the full description for\n details, including optional communication, nonstandard options,\n and instructions for special situations.  See also the example\n problem (with program and output) following this summary. A. First, provide a subroutine of the form:\n               SUBROUTINE RES (NEQ, T, Y, S, R, IRES)\n               DOUBLE PRECISION T, Y( ), S( ), R(*)\n which computes the residual function\n     r = g(t,y)  -  A(t,y) * s ,\n as a function of t and the vectors y and s.  (s is an internally\n generated approximation to dy/dt.)  The arrays Y and S are inputs\n to the RES routine and should not be altered.  The residual\n vector is to be stored in the array R.  The argument IRES should be\n ignored for casual use of DLSOIBT.  (For uses of IRES, see the\n paragraph on RES in the full description below.) B. Next, identify the block structure of the matrices A = A(t,y) and\n dr/dy.  DLSOIBT must deal internally with a linear combination, P, of\n these two matrices.  The matrix P (hence both A and dr/dy) must have\n a block-tridiagonal form with fixed structure parameters\n     MB = block size, MB .ge. 1, and\n     NB = number of blocks in each direction, NB .ge. 4,\n with MB NB = NEQ.  In each of the NB block-rows of the matrix P\n (each consisting of MB consecutive rows), the nonzero elements are\n to lie in three consecutive MB by MB blocks.  In block-rows\n 2 through NB - 1, these are centered about the main diagonal.\n in block-rows 1 and NB, they are the diagonal blocks and the two\n blocks adjacent to the diagonal block.  (Thus block positions (1,3)\n and (NB,NB-2) can be nonzero.)\n Alternatively, P (hence A and dr/dy) may be only approximately\n equal to matrices with this form, and DLSOIBT should still succeed.\n The block-tridiagonal matrix P is described by three arrays,\n each of size MB by MB by NB:\n     PA = array of diagonal blocks,\n     PB = array of superdiagonal (and one subdiagonal) blocks, and\n     PC = array of subdiagonal (and one superdiagonal) blocks.\n Specifically, the three MB by MB blocks in the k-th block-row of P\n are stored in (reading across):\n     PC( , ,k) = block to the left of the diagonal block,\n     PA( , ,k) = diagonal block, and\n     PB( , ,k) = block to the right of the diagonal block,\n except for k = 1, where the three blocks (reading across) are\n     PA( , ,1) (= diagonal block), PB( , ,1), and PC( , ,1),\n and k = NB, where they are\n     PB( , ,NB), PC( , ,NB), and PA( ,*,NB) (= diagonal block).\n (Each asterisk * stands for an index that ranges from 1 to MB.) C. You must also provide a subroutine of the form:\n     SUBROUTINE ADDA (NEQ, T, Y, MB, NB, PA, PB, PC)\n     DOUBLE PRECISION T, Y(*), PA(MB,MB,NB), PB(MB,MB,NB), PC(MB,MB,NB)\n which adds the nonzero blocks of the matrix A = A(t,y) to the\n contents of the arrays PA, PB, and PC, following the structure\n description in Paragraph B above.\n T and the Y array are input and should not be altered.\n Thus the affect of ADDA should be the following:\n     DO K = 1,NB\n       DO J = 1,MB\n         DO I = 1,MB\n           PA(I,J,K) = PA(I,J,K) +\n             ( (I,J) element of K-th diagonal block of A)\n           PB(I,J,K) = PB(I,J,K) +\n             ( (I,J) element of block in block position (K,K+1) of A,\n             or in block position (NB,NB-2) if K = NB)\n           PC(I,J,K) = PC(I,J,K) +\n             ( (I,J) element of block in block position (K,K-1) of A,\n             or in block position (1,3) if K = 1)\n         ENDDO\n       ENDDO\n     ENDDO D. For the sake of efficiency, you are encouraged to supply the\n Jacobian matrix dr/dy in closed form, where r = g(t,y) - A(t,y) s\n (s = a fixed vector) as above.  If dr/dy is being supplied,\n use MF = 21, and provide a subroutine of the form:\n     SUBROUTINE JAC (NEQ, T, Y, S, MB, NB, PA, PB, PC)\n     DOUBLE PRECISION T, Y( ), S( ), PA(MB,MB,NB), PB(MB,MB,NB),\n    1                 PC(MB,MB,NB)\n which computes dr/dy as a function of t, y, and s.  Here T, Y, and\n S are inputs, and the routine is to load dr/dy into PA, PB, PC,\n according to the structure description in Paragraph B above.\n That is, load the diagonal blocks into PA, the superdiagonal blocks\n (and block (NB,NB-2) ) into PB, and the subdiagonal blocks (and\n block (1,3) ) into PC.  The blocks in block-row k of dr/dy are to\n be loaded into PA( , ,k), PB( , ,k), and PC( ,*,k).\n     Only nonzero elements need be loaded, and the indexing\n of PA, PB, and PC is the same as in the ADDA routine.\n     Note that if A is independent of Y (or this dependence\n is weak enough to be ignored) then JAC is to compute dg/dy.\n     If it is not feasible to provide a JAC routine, use\n MF = 22, and DLSOIBT will compute an approximate Jacobian\n internally by difference quotients. E. Next decide whether or not to provide the initial value of the\n derivative vector dy/dt.  If the initial value of A(t,y) is\n nonsingular (and not too ill-conditioned), you may let DLSOIBT compute\n this vector (ISTATE = 0).  (DLSOIBT will solve the system A s = g for\n s, with initial values of A and g.)  If A(t,y) is initially\n singular, then the system is a differential-algebraic system, and\n you must make use of the particular form of the system to compute the\n initial values of y and dy/dt.  In that case, use ISTATE = 1 and\n load the initial value of dy/dt into the array YDOTI.\n The input array YDOTI and the initial Y array must be consistent with\n the equations A dy/dt = g.  This implies that the initial residual\n r = g(t,y) - A(t,y)*YDOTI  must be approximately zero. F. Write a main program which calls Subroutine DLSOIBT once for\n each point at which answers are desired.  This should also provide\n for possible use of logical unit 6 for output of error messages by\n DLSOIBT.  on the first call to DLSOIBT, supply arguments as follows:\n RES    = name of user subroutine for residual function r.\n ADDA   = name of user subroutine for computing and adding A(t,y).\n JAC    = name of user subroutine for Jacobian matrix dr/dy\n          (MF = 21).  If not used, pass a dummy name.\n Note: the names for the RES and ADDA routines and (if used) the\n        JAC routine must be declared External in the calling program.\n NEQ    = number of scalar equations in the system.\n Y      = array of initial values, of length NEQ.\n YDOTI  = array of length NEQ (containing initial dy/dt if ISTATE = 1).\n T      = the initial value of the independent variable.\n TOUT   = first point where output is desired (.ne. T).\n ITOL   = 1 or 2 according as ATOL (below) is a scalar or array.\n RTOL   = relative tolerance parameter (scalar).\n ATOL   = absolute tolerance parameter (scalar or array).\n          the estimated local error in y(i) will be controlled so as\n          to be roughly less (in magnitude) than\n             EWT(i) = RTOL ABS(Y(i)) + ATOL     if ITOL = 1, or\n             EWT(i) = RTOL ABS(Y(i)) + ATOL(i)  if ITOL = 2.\n          Thus the local error test passes if, in each component,\n          either the absolute error is less than ATOL (or ATOL(i)),\n          or the relative error is less than RTOL.\n          Use RTOL = 0.0 for pure absolute error control, and\n          use ATOL = 0.0 (or ATOL(i) = 0.0) for pure relative error\n          control.  Caution: Actual (global) errors may exceed these\n          local tolerances, so choose them conservatively.\n ITASK  = 1 for normal computation of output values of y at t = TOUT.\n ISTATE = integer flag (input and output).  Set ISTATE = 1 if the\n          initial dy/dt is supplied, and 0 otherwise.\n IOPT   = 0 to indicate no optional inputs used.\n RWORK  = real work array of length at least:\n             22 + 9 NEQ + 3 MB MB NB        for MF = 21 or 22.\n LRW    = declared length of RWORK (in user’s dimension).\n IWORK  = integer work array of length at least 20 + NEQ.\n          Input in IWORK(1) the block size MB and in IWORK(2) the\n          number NB of blocks in each direction along the matrix A.\n          These must satisfy  MB .ge. 1, NB .ge. 4, and MB*NB = NEQ.\n LIW    = declared length of IWORK (in user’s dimension).\n MF     = method flag.  Standard values are:\n          21 for a user-supplied Jacobian.\n          22 for an internally generated Jacobian.\n          For other choices of MF, see the paragraph on MF in\n          the full description below.\n Note that the main program must declare arrays Y, YDOTI, RWORK, IWORK,\n and possibly ATOL. G. The output from the first call (or any call) is:\n      Y = array of computed values of y(t) vector.\n      T = corresponding value of independent variable (normally TOUT).\n ISTATE = 2  if DLSOIBT was successful, negative otherwise.\n          -1 means excess work done on this call (check all inputs).\n          -2 means excess accuracy requested (tolerances too small).\n          -3 means illegal input detected (see printed message).\n          -4 means repeated error test failures (check all inputs).\n          -5 means repeated convergence failures (perhaps bad Jacobian\n             supplied or wrong choice of tolerances).\n          -6 means error weight became zero during problem. (Solution\n             component i vanished, and ATOL or ATOL(i) = 0.)\n          -7 cannot occur in casual use.\n          -8 means DLSOIBT was unable to compute the initial dy/dt.\n             In casual use, this means A(t,y) is initially singular.\n             Supply YDOTI and use ISTATE = 1 on the first call. If DLSOIBT returns ISTATE = -1, -4, or -5, then the output of\n  DLSOIBT also includes YDOTI = array containing residual vector\n  r = g - A * dy/dt  evaluated at the current t, y, and dy/dt. H. To continue the integration after a successful return, simply\n reset TOUT and call DLSOIBT again.  No other parameters need be reset. Example Problem. The following is an example problem, with the coding needed\n for its solution by DLSOIBT.  The problem comes from the partial\n differential equation (the Burgers equation)\n   du/dt  =  - u * du/dx  +  eta * d 2 u/dx 2,   eta = .05,\n on -1 .le. x .le. 1.  The boundary conditions are\n   du/dx = 0  at x = -1 and at x = 1.\n The initial profile is a square wave,\n   u = 1 in ABS(x) .lt. .5,  u = .5 at ABS(x) = .5,  u = 0 elsewhere.\n The PDE is discretized in x by a simplified Galerkin method,\n using piecewise linear basis functions, on a grid of 40 intervals.\n The equations at x = -1 and 1 use a 3-point difference approximation\n for the right-hand side.  The result is a system A * dy/dt = g(y),\n of size NEQ = 41, where y(i) is the approximation to u at x = x(i),\n with x(i) = -1 + (i-1) delx, delx = 2/(NEQ-1) = .05.  The individual\n equations in the system are\n   dy(1)/dt = ( y(3) - 2 y(2) + y(1) ) * eta / delx 2,\n   dy(NEQ)/dt = ( y(NEQ-2) - 2*y(NEQ-1) + y(NEQ) ) * eta / delx 2,\n and for i = 2, 3, …, NEQ-1,\n   (1/6) dy(i-1)/dt + (4/6) dy(i)/dt + (1/6) dy(i+1)/dt\n       = ( y(i-1) 2 - y(i+1) 2 ) / (4 delx)\n         + ( y(i+1) - 2 y(i) + y(i-1) ) * eta / delx**2.\n The following coding solves the problem with MF = 21, with output\n of solution statistics at t = .1, .2, .3, and .4, and of the\n solution vector at t = .4.  Here the block size is just MB = 1. program dlsoibt_ex use m_odepack implicit none external addabt external jacbt external resid integer , parameter :: dp = kind ( 0.0d0 ) real ( kind = dp ) :: atol , rtol , t , tout integer :: i , io , iopt , istate , itask , itol , liw , lrw , mf , neq integer , dimension ( 61 ) :: iwork real ( kind = dp ), dimension ( 514 ) :: rwork real ( kind = dp ), dimension ( 41 ) :: y , ydoti neq = 41 do i = 1 , neq y ( i ) = 0.0 enddo y ( 11 ) = 0.5 do i = 12 , 30 y ( i ) = 1.0 enddo y ( 31 ) = 0.5 t = 0.0 tout = 0.1 itol = 1 rtol = 1.0D-4 atol = 1.0D-5 itask = 1 istate = 0 iopt = 0 lrw = 514 liw = 61 iwork ( 1 ) = 1 iwork ( 2 ) = neq mf = 21 do io = 1 , 4 call dlsoibt ( resid , addabt , jacbt ,[ neq ], y , ydoti , t , tout , itol ,[ rtol ], & & [ atol ], itask , istate , iopt , rwork , lrw , iwork , liw , mf ) write ( 6 , 99010 ) t , iwork ( 11 ), iwork ( 12 ), iwork ( 13 ) 99010 format ( ' At t =' , f5 . 2 , '   No. steps =' , i4 , '  No. r-s =' , i4 , & & '  No. J-s =' , i3 ) if ( istate /= 2 ) then write ( 6 , 99020 ) istate 99020 format ( /// ' Error halt.. ISTATE =' , i3 ) stop 1 else tout = tout + 0.1 endif enddo write ( 6 , 99030 ) ( y ( i ), i = 1 , neq ) 99030 format ( / ' Final solution values..' / 9 ( 5 D12 . 4 / )) end program dlsoibt_ex subroutine resid ( N , T , Y , S , R , Ires ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), intent ( in ), dimension ( N ) :: S real ( kind = dp ), intent ( out ), dimension ( N ) :: R integer :: Ires real ( kind = dp ), save :: delx , eta real ( kind = dp ) :: eodsq integer :: i , nm1 data eta / 0.05 / , delx / 0.05 / eodsq = eta / delx ** 2 R ( 1 ) = eodsq * ( Y ( 3 ) - 2.0 * Y ( 2 ) + Y ( 1 )) - S ( 1 ) nm1 = N - 1 do i = 2 , nm1 R ( i ) = ( Y ( i - 1 ) ** 2 - Y ( i + 1 ) ** 2 ) / ( 4.0 * delx ) & & + eodsq * ( Y ( i + 1 ) - 2.0 * Y ( i ) + Y ( i - 1 )) - ( S ( i - 1 ) + 4.0 * S ( i ) + S ( i + 1 )) & & / 6.0 enddo R ( N ) = eodsq * ( Y ( N - 2 ) - 2.0 * Y ( nm1 ) + Y ( N )) - S ( N ) end subroutine resid subroutine addabt ( N , T , Y , Mb , Nb , Pa , Pb , Pc ) implicit                                         none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), dimension ( N ) :: Y integer , intent ( in ) :: Mb integer , intent ( in ) :: Nb real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pa real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pb real ( kind = dp ), intent ( inout ), dimension ( Mb , Mb , Nb ) :: Pc integer :: k , nm1 Pa ( 1 , 1 , 1 ) = Pa ( 1 , 1 , 1 ) + 1.0 nm1 = N - 1 do k = 2 , nm1 Pa ( 1 , 1 , k ) = Pa ( 1 , 1 , k ) + ( 4.0 / 6.0 ) Pb ( 1 , 1 , k ) = Pb ( 1 , 1 , k ) + ( 1.0 / 6.0 ) Pc ( 1 , 1 , k ) = Pc ( 1 , 1 , k ) + ( 1.0 / 6.0 ) enddo Pa ( 1 , 1 , N ) = Pa ( 1 , 1 , N ) + 1.0 end subroutine addabt subroutine jacbt ( N , T , Y , S , Mb , Nb , Pa , Pb , Pc ) implicit none integer , parameter :: dp = kind ( 0.0d0 ) integer , intent ( in ) :: N real ( kind = dp ) :: T real ( kind = dp ), intent ( in ), dimension ( N ) :: Y real ( kind = dp ), dimension ( N ) :: S integer , intent ( in ) :: Mb integer , intent ( in ) :: Nb real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pa real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pb real ( kind = dp ), intent ( out ), dimension ( Mb , Mb , Nb ) :: Pc real ( kind = dp ), save :: delx , eta real ( kind = dp ) :: eodsq integer :: k data eta / 0.05 / , delx / 0.05 / eodsq = eta / delx ** 2 Pa ( 1 , 1 , 1 ) = eodsq Pb ( 1 , 1 , 1 ) = - 2.0 * eodsq Pc ( 1 , 1 , 1 ) = eodsq do k = 2 , N Pa ( 1 , 1 , k ) = - 2.0 * eodsq Pb ( 1 , 1 , k ) = - Y ( k + 1 ) * ( 0.5 / delx ) + eodsq Pc ( 1 , 1 , k ) = Y ( k - 1 ) * ( 0.5 / delx ) + eodsq enddo Pb ( 1 , 1 , N ) = eodsq Pc ( 1 , 1 , N ) = - 2.0 * eodsq Pa ( 1 , 1 , N ) = eodsq end subroutine jacbt The output of this program (on a CDC-7600 in single precision)\n is as follows: At t = 0.10   No. steps =  35  No. r-s =  45  No. J-s =  9\n At t = 0.20   No. steps =  43  No. r-s =  54  No. J-s = 10\n At t = 0.30   No. steps =  48  No. r-s =  60  No. J-s = 11\n At t = 0.40   No. steps =  51  No. r-s =  64  No. J-s = 12 Final solution values..\n  1.2747e-02  1.1997e-02  1.5560e-02  2.3767e-02  3.7224e-02\n  5.6646e-02  8.2645e-02  1.1557e-01  1.5541e-01  2.0177e-01\n  2.5397e-01  3.1104e-01  3.7189e-01  4.3530e-01  5.0000e-01\n  5.6472e-01  6.2816e-01  6.8903e-01  7.4612e-01  7.9829e-01\n  8.4460e-01  8.8438e-01  9.1727e-01  9.4330e-01  9.6281e-01\n  9.7632e-01  9.8426e-01  9.8648e-01  9.8162e-01  9.6617e-01\n  9.3374e-01  8.7535e-01  7.8236e-01  6.5321e-01  5.0003e-01\n  3.4709e-01  2.1876e-01  1.2771e-01  7.3671e-02  5.0642e-02\n  5.4496e-02 Full Description of User Interface to DLSOIBT. The user interface to DLSOIBT consists of the following parts. The call sequence to Subroutine DLSOIBT, which is a driver\n      routine for the solver.  This includes descriptions of both\n      the call sequence arguments and of user-supplied routines.\n      Following these descriptions is a description of\n      optional inputs available through the call sequence, and then\n      a description of optional outputs (in the work arrays). Descriptions of other routines in the DLSOIBT package that may be\n      (optionally) called by the user.  These provide the ability to\n      alter error message handling, save and restore the internal\n      Common, and obtain specified derivatives of the solution y(t). Descriptions of Common blocks to be declared in overlay\n      or similar environments, or to be saved when doing an interrupt\n      of the problem and continued solution later. Description of two routines in the DLSOIBT package, either of\n      which the user may replace with his/her own version, if desired.\n      These relate to the measurement of errors. Part 1.  Call Sequence. The call sequence parameters used for input only are\n     RES, ADDA, JAC, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK,\n     IOPT, LRW, LIW, MF,\n and those used for both input and output are\n     Y, T, ISTATE, YDOTI.\n The work arrays RWORK and IWORK are also used for additional and\n optional inputs and optional outputs.  (The term output here refers\n to the return from Subroutine DLSOIBT to the user’s calling program.) The legality of input parameters will be thoroughly checked on the\n initial call for the problem, but not checked thereafter unless a\n change in input parameters is flagged by ISTATE = 3 on input. The descriptions of the call arguments are as follows. RES    = the name of the user-supplied subroutine which supplies\n          the residual vector for the ODE system, defined by\n            r = g(t,y) - A(t,y) * s\n          as a function of the scalar t and the vectors\n          s and y (s approximates dy/dt).  This subroutine\n          is to have the form\n              SUBROUTINE RES (NEQ, T, Y, S, R, IRES)\n              DOUBLE PRECISION T, Y( ), S( ), R( )\n          where NEQ, T, Y, S, and IRES are input, and R and\n          IRES are output. Y, S, and R are arrays of length NEQ.\n             On input, IRES indicates how DLSOIBT will use the\n          returned array R, as follows:\n             IRES = 1  means that DLSOIBT needs the full residual,\n                       r = g - A s, exactly.\n             IRES = -1 means that DLSOIBT is using R only to compute\n                       the Jacobian dr/dy by difference quotients.\n          The RES routine can ignore IRES, or it can omit some terms\n          if IRES = -1.  If A does not depend on y, then RES can\n          just return R = g when IRES = -1.  If g - A*s contains other\n          additive terms that are independent of y, these can also be\n          dropped, if done consistently, when IRES = -1.\n             The subroutine should set the flag IRES if it\n          encounters a halt condition or illegal input.\n          Otherwise, it should not reset IRES.  On output,\n             IRES = 1 or -1 represents a normal return, and\n          DLSOIBT continues integrating the ODE.  Leave IRES\n          unchanged from its input value.\n             IRES = 2 tells DLSOIBT to immediately return control\n          to the calling program, with ISTATE = 3.  This lets\n          the calling program change parameters of the problem\n          if necessary.\n             IRES = 3 represents an error condition (for example, an\n          illegal value of y).  DLSOIBT tries to integrate the system\n          without getting IRES = 3 from RES.  If it cannot, DLSOIBT\n          returns with ISTATE = -7 or -1.\n             On an DLSOIBT return with ISTATE = 3, -1, or -7, the\n          values of T and Y returned correspond to the last point\n          reached successfully without getting the flag IRES = 2 or 3.\n             The flag values IRES = 2 and 3 should not be used to\n          handle switches or root-stop conditions.  This is better\n          done by calling DLSOIBT in a one-step mode and checking the\n          stopping function for a sign change at each step.\n             If quantities computed in the RES routine are needed\n          externally to DLSOIBT, an extra call to RES should be made\n          for this purpose, for consistent and accurate results.\n          To get the current dy/dt for the S argument, use DINTDY.\n             RES must be declared External in the calling\n          program. See note below for more about RES. ADDA   = the name of the user-supplied subroutine which adds the\n          matrix A = A(t,y) to another matrix, P, stored in\n          block-tridiagonal form.  This routine is to have the form\n               SUBROUTINE ADDA (NEQ, T, Y, MB, NB, PA, PB, PC)\n               DOUBLE PRECISION T, Y(*), PA(MB,MB,NB), PB(MB,MB,NB),\n              1                 PC(MB,MB,NB)\n          where NEQ, T, Y, MB, NB, and the arrays PA, PB, and PC\n          are input, and the arrays PA, PB, and PC are output.\n          Y is an array of length NEQ, and the arrays PA, PB, PC\n          are all MB by MB by NB.\n             Here a block-tridiagonal structure is assumed for A(t,y),\n          and also for the matrix P to which A is added here,\n          as described in Paragraph B of the Summary of Usage above.\n          Thus the affect of ADDA should be the following:\n               DO K = 1,NB\n                 DO J = 1,MB\n                   DO I = 1,MB\n                     PA(I,J,K) = PA(I,J,K) +\n                       ( (I,J) element of K-th diagonal block of A)\n                     PB(I,J,K) = PB(I,J,K) +\n                       ( (I,J) element of block (K,K+1) of A,\n                       or block (NB,NB-2) if K = NB)\n                     PC(I,J,K) = PC(I,J,K) +\n                       ( (I,J) element of block (K,K-1) of A,\n                       or block (1,3) if K = 1)\n                   ENDDO\n                 ENDDO\n               ENDDO\n             ADDA must be declared External in the calling program.\n          See note below for more information about ADDA. JAC    = the name of the user-supplied subroutine which supplies\n          the Jacobian matrix, dr/dy, where r = g - A s.  JAC is\n          required if MITER = 1.  Otherwise a dummy name can be\n          passed.  This subroutine is to have the form\n               SUBROUTINE JAC (NEQ, T, Y, S, MB, NB, PA, PB, PC)\n               DOUBLE PRECISION T, Y( ), S( ), PA(MB,MB,NB),\n              1                 PB(MB,MB,NB), PC(MB,MB,NB)\n          where NEQ, T, Y, S, MB, NB, and the arrays PA, PB, and PC\n          are input, and the arrays PA, PB, and PC are output.\n          Y and S are arrays of length NEQ, and the arrays PA, PB, PC\n          are all MB by MB by NB.\n          PA, PB, and PC are to be loaded with partial derivatives\n          (elements of the Jacobian matrix) on output, in terms of the\n          block-tridiagonal structure assumed, as described\n          in Paragraph B of the Summary of Usage above.\n          That is, load the diagonal blocks into PA, the\n          superdiagonal blocks (and block (NB,NB-2) ) into PB, and\n          the subdiagonal blocks (and block (1,3) ) into PC.\n          The blocks in block-row k of dr/dy are to be loaded into\n          PA( , ,k), PB( , ,k), and PC( ,*,k).\n          Thus the affect of JAC should be the following:\n               DO K = 1,NB\n                 DO J = 1,MB\n                   DO I = 1,MB\n                     PA(I,J,K) = ( (I,J) element of\n                       K-th diagonal block of dr/dy)\n                     PB(I,J,K) = ( (I,J) element of block (K,K+1)\n                       of dr/dy, or block (NB,NB-2) if K = NB)\n                     PC(I,J,K) = ( (I,J) element of block (K,K-1)\n                       of dr/dy, or block (1,3) if K = 1)\n                   ENDDO\n                 ENDDO\n               ENDDO\n               PA, PB, and PC are preset to zero by the solver,\n          so that only the nonzero elements need be loaded by JAC.\n          Each call to JAC is preceded by a call to RES with the same\n          arguments NEQ, T, Y, and S.  Thus to gain some efficiency,\n          intermediate quantities shared by both calculations may be\n          saved in a user Common block by RES and not recomputed by JAC\n          if desired.  Also, JAC may alter the Y array, if desired.\n               JAC need not provide dr/dy exactly.  A crude\n          approximation will do, so that DLSOIBT may be used when\n          A and dr/dy are not really block-tridiagonal, but are close\n          to matrices that are.\n               JAC must be declared External in the calling program.\n               See note below for more about JAC. Note on RES , ADDA , and JAC : These subroutines may access user - defined quantities in NEQ ( 2 ), ... and / or in Y ( NEQ ( 1 ) + 1 ), ... if NEQ is an array ( dimensioned in the subroutines ) and / or Y has length exceeding NEQ ( 1 ) . However , these routines should not alter NEQ ( 1 ), Y ( 1 ), ... , Y ( NEQ ) or any other input variables . See the descriptions of NEQ and Y below . NEQ    = the size of the system (number of first order ordinary\n          differential equations or scalar algebraic equations).\n          Used only for input.\n          NEQ may be decreased, but not increased, during the problem.\n          If NEQ is decreased (with ISTATE = 3 on input), the\n          remaining components of Y should be left undisturbed, if\n          these are to be accessed in RES, ADDA, or JAC. Normally , NEQ is a scalar , and it is generally referred to as a scalar in this user interface description . However , NEQ may be an array , with NEQ ( 1 ) set to the system size . ( The DLSOIBT package accesses only NEQ ( 1 ) . ) In either case , this parameter is passed as the NEQ argument in all calls to RES , ADDA , and JAC . Hence , if it is an array , locations NEQ ( 2 ) ,... may be used to store other integer data and pass it to RES , ADDA , or JAC . Each such subroutine must include NEQ in a Dimension statement in that case . Y      = a real array for the vector of dependent variables, of\n          length NEQ or more.  Used for both input and output on the\n          first call (ISTATE = 0 or 1), and only for output on other\n          calls.  On the first call, Y must contain the vector of\n          initial values.  On output, Y contains the computed solution\n          vector, evaluated at t.  If desired, the Y array may be used\n          for other purposes between calls to the solver. This array is passed as the Y argument in all calls to RES,\n      ADDA, and JAC.  Hence its length may exceed NEQ,\n      and locations Y(NEQ+1),... may be used to store other real\n      data and pass it to RES, ADDA, or JAC.  (The DLSOIBT\n      package accesses only Y(1),...,Y(NEQ). ) YDOTI  = a real array for the initial value of the vector\n          dy/dt and for work space, of dimension at least NEQ. On input : If ISTATE = 0 then DLSOIBT will compute the initial value of dy / dt , if A is nonsingular . Thus YDOTI will serve only as work space and may have any value . If ISTATE = 1 then YDOTI must contain the initial value of dy / dt . If ISTATE = 2 or 3 ( continuation calls ) then YDOTI may have any value . Note : If the initial value of A is singular , then DLSOIBT cannot compute the initial value of dy / dt , so it must be provided in YDOTI , with ISTATE = 1 . On output , when DLSOIBT terminates abnormally with ISTATE = - 1 , - 4 , or - 5 , YDOTI will contain the residual r = g ( t , y ) - A ( t , y ) * ( dy / dt ) . If r is large , t is near its initial value , and YDOTI is supplied with ISTATE = 1 , there may have been an incorrect input value of YDOTI = dy / dt , or the problem ( as given to DLSOIBT ) may not have a solution . If desired , the YDOTI array may be used for other purposes between calls to the solver . T      = the independent variable.  On input, T is used only on the\n          first call, as the initial point of the integration.\n          On output, after each call, T is the value at which a\n          computed solution y is evaluated (usually the same as TOUT).\n          On an error return, T is the farthest point reached. TOUT   = the next value of t at which a computed solution is desired.\n          Used only for input. When starting the problem ( ISTATE = 0 or 1 ) , TOUT may be equal to T for one call , then should . ne . T for the next call . For the initial T , an input value of TOUT . ne . T is used in order to determine the direction of the integration ( i . e . the algebraic sign of the step sizes ) and the rough scale of the problem . Integration in either direction ( forward or backward in t ) is permitted . If ITASK = 2 or 5 ( one - step modes ) , TOUT is ignored after the first call ( i . e . the first call with TOUT . ne . T ) . Otherwise , TOUT is required on every call . If ITASK = 1 , 3 , or 4 , the values of TOUT need not be monotone , but a value of TOUT which backs up is limited to the current internal T interval , whose endpoints are TCUR - HU and TCUR ( see optional outputs , below , for TCUR and HU ) . ITOL   = an indicator for the type of error control.  See\n          description below under ATOL.  Used only for input. RTOL   = a relative error tolerance parameter, either a scalar or\n          an array of length NEQ.  See description below under ATOL.\n          Input only. ATOL   = an absolute error tolerance parameter, either a scalar or\n          an array of length NEQ.  Input only. The input parameters ITOL , RTOL , and ATOL determine the error control performed by the solver . The solver will control the vector E = ( E ( i )) of estimated local errors in y , according to an inequality of the form RMS - norm of ( E ( i ) / EWT ( i ) ) . le . 1 , where EWT ( i ) = RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) , and the RMS - norm ( root - mean - square norm ) here is RMS - norm ( v ) = SQRT ( sum v ( i ) ** 2 / NEQ ) . Here EWT = ( EWT ( i )) is a vector of weights which must always be positive , and the values of RTOL and ATOL should all be non - negative . The following table gives the types ( scalar / array ) of RTOL and ATOL , and the corresponding form of EWT ( i ) . ITOL RTOL ATOL EWT ( i ) 1 scalar scalar RTOL * ABS ( Y ( i )) + ATOL 2 scalar array RTOL * ABS ( Y ( i )) + ATOL ( i ) 3 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL 4 array scalar RTOL ( i ) * ABS ( Y ( i )) + ATOL ( i ) When either of these parameters is a scalar , it need not be dimensioned in the user ' s calling program. If none of the above choices ( with ITOL , RTOL , and ATOL fixed throughout the problem ) is suitable , more general error controls can be obtained by substituting user - supplied routines for the setting of EWT and / or for the norm calculation . See Part 4 below . If global errors are to be estimated by making a repeated run on the same problem with smaller tolerances , then all components of RTOL and ATOL ( i . e . of EWT ) should be scaled down uniformly . ITASK  = an index specifying the task to be performed.\n          Input only.  ITASK has the following values and meanings.\n          1  means normal computation of output values of y(t) at\n             t = TOUT (by overshooting and interpolating).\n          2  means take one step only and return.\n          3  means stop at the first internal mesh point at or\n             beyond t = TOUT and return.\n          4  means normal computation of output values of y(t) at\n             t = TOUT but without overshooting t = TCRIT.\n             TCRIT must be input as RWORK(1).  TCRIT may be equal to\n             or beyond TOUT, but not behind it in the direction of\n             integration.  This option is useful if the problem\n             has a singularity at or beyond t = TCRIT.\n          5  means take one step, without passing TCRIT, and return.\n             TCRIT must be input as RWORK(1). Note : If ITASK = 4 or 5 and the solver reaches TCRIT ( within roundoff ) , it will return T = TCRIT ( exactly ) to indicate this ( unless ITASK = 4 and TOUT comes before TCRIT , in which case answers at t = TOUT are returned first ) . ISTATE = an index used for input and output to specify the\n          state of the calculation. On input , the values of ISTATE are as follows . 0 means this is the first call for the problem , and DLSOIBT is to compute the initial value of dy / dt ( while doing other initializations ) . See note below . 1 means this is the first call for the problem , and the initial value of dy / dt has been supplied in YDOTI ( DLSOIBT will do other initializations ) . See note below . 2 means this is not the first call , and the calculation is to continue normally , with no change in any input parameters except possibly TOUT and ITASK . ( If ITOL , RTOL , and / or ATOL are changed between calls with ISTATE = 2 , the new values will be used but not tested for legality . ) 3 means this is not the first call , and the calculation is to continue normally , but with a change in input parameters other than TOUT and ITASK . Changes are allowed in NEQ , ITOL , RTOL , ATOL , IOPT , LRW , LIW , MF , MB , NB , and any of the optional inputs except H0 . ( See IWORK description for MB and NB . ) Note : A preliminary call with TOUT = T is not counted as a first call here , as no initialization or checking of input is done . ( Such a call is sometimes useful for the purpose of outputting the initial conditions . ) Thus the first call for which TOUT . ne . T requires ISTATE = 0 or 1 on input . On output , ISTATE has the following values and meanings . 0 or 1 means nothing was done ; TOUT = t and ISTATE = 0 or 1 on input . 2 means that the integration was performed successfully . 3 means that the user - supplied Subroutine RES signalled DLSOIBT to halt the integration and return ( IRES = 2 ) . Integration as far as T was achieved with no occurrence of IRES = 2 , but this flag was set on attempting the next step . - 1 means an excessive amount of work ( more than MXSTEP steps ) was done on this call , before completing the requested task , but the integration was otherwise successful as far as T . ( MXSTEP is an optional input and is normally 500. ) To continue , the user may simply reset ISTATE to a value . gt . 1 and call again ( the excess work step counter will be reset to 0 ) . In addition , the user may increase MXSTEP to avoid this error return ( see below on optional inputs ) . - 2 means too much accuracy was requested for the precision of the machine being used . This was detected before completing the requested task , but the integration was successful as far as T . To continue , the tolerance parameters must be reset , and ISTATE must be set to 3. The optional output TOLSF may be used for this purpose . ( Note : If this condition is detected before taking any steps , then an illegal input return ( ISTATE = - 3 ) occurs instead . ) - 3 means illegal input was detected , before taking any integration steps . See written message for details . Note : If the solver detects an infinite loop of calls to the solver with illegal input , it will cause the run to stop . - 4 means there were repeated error test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . The problem may have a singularity , or the input may be inappropriate . - 5 means there were repeated convergence test failures on one attempted step , before completing the requested task , but the integration was successful as far as T . This may be caused by an inaccurate Jacobian matrix . - 6 means EWT ( i ) became zero for some i during the integration . Pure relative error control ( ATOL ( i ) = 0.0 ) was requested on a variable which has now vanished . The integration was successful as far as T . - 7 means that the user - supplied Subroutine RES set its error flag ( IRES = 3 ) despite repeated tries by DLSOIBT to avoid that condition . - 8 means that ISTATE was 0 on input but DLSOIBT was unable to compute the initial value of dy / dt . See the printed message for details . Note : Since the normal output value of ISTATE is 2 , it does not need to be reset for normal continuation . Similarly , ISTATE ( = 3 ) need not be reset if RES told DLSOIBT to return because the calling program must change the parameters of the problem . Also , since a negative input value of ISTATE will be regarded as illegal , a negative output value requires the user to change it , and possibly other inputs , before calling the solver again . IOPT   = an integer flag to specify whether or not any optional\n          inputs are being used on this call.  Input only.\n          The optional inputs are listed separately below.\n          IOPT = 0 means no optional inputs are being used.\n                   Default values will be used in all cases.\n          IOPT = 1 means one or more optional inputs are being used. RWORK  = a real working array (double precision).\n          The length of RWORK must be at least\n             20 + NYH (MAXORD + 1) + 3 NEQ + LENWM    where\n          NYH    = the initial value of NEQ,\n          MAXORD = 12 (if METH = 1) or 5 (if METH = 2) (unless a\n                   smaller value is given as an optional input),\n          LENWM  = 3 MB MB NB + 2.\n          (See MF description for the definition of METH.)\n          Thus if MAXORD has its default value and NEQ is constant,\n          this length is\n             22 + 16 NEQ + 3 MB MB NB     for MF = 11 or 12,\n             22 + 9 NEQ + 3 MB MB*NB      for MF = 21 or 22.\n          The first 20 words of RWORK are reserved for conditional\n          and optional inputs and optional outputs. The following word in RWORK is a conditional input : RWORK ( 1 ) = TCRIT = critical value of t which the solver is not to overshoot . Required if ITASK is 4 or 5 , and ignored otherwise . ( See ITASK . ) LRW    = the length of the array RWORK, as declared by the user.\n          (This will be checked by the solver.) IWORK  = an integer work array.  The length of IWORK must be at least\n          20 + NEQ .  The first few words of IWORK are used for\n          additional and optional inputs and optional outputs. The following 2 words in IWORK are additional required\n      inputs to DLSOIBT:\n        IWORK(1) = MB = block size\n        IWORK(2) = NB = number of blocks in the main diagonal\n      These must satisfy  MB .ge. 1, NB .ge. 4, and MB*NB = NEQ. LIW    = the length of the array IWORK, as declared by the user.\n          (This will be checked by the solver.) Note:  The work arrays must not be altered between calls to DLSOIBT\n for the same problem, except possibly for the additional and\n optional inputs, and except for the last 3*NEQ words of RWORK.\n The latter space is used for internal scratch space, and so is\n available for use by the user outside DLSOIBT between calls, if\n desired (but not for use by RES, ADDA, or JAC). MF     = the method flag.  used only for input.  The legal values of\n          MF are 11, 12, 21, and 22.\n          MF has decimal digits METH and MITER: MF = 10 METH + MITER.\n            METH indicates the basic linear multistep method:\n              METH = 1 means the implicit Adams method.\n              METH = 2 means the method based on Backward\n                       Differentiation Formulas (BDFS).\n                The BDF method is strongly preferred for stiff\n              problems, while the Adams method is preferred when the\n              problem is not stiff.  If the matrix A(t,y) is\n              nonsingular, stiffness here can be taken to mean that of\n              the explicit ODE system dy/dt = A-inverse * g.  If A is\n              singular, the concept of stiffness is not well defined.\n                If you do not know whether the problem is stiff, we\n              recommend using METH = 2.  If it is stiff, the advantage\n              of METH = 2 over METH = 1 will be great, while if it is\n              not stiff, the advantage of METH = 1 will be slight.\n              If maximum efficiency is important, some experimentation\n              with METH may be necessary.\n            MITER indicates the corrector iteration method:\n              MITER = 1 means chord iteration with a user-supplied\n                        block-tridiagonal Jacobian.\n              MITER = 2 means chord iteration with an internally\n                        generated (difference quotient) block-\n                        tridiagonal Jacobian approximation, using\n                        3 MB+1 extra calls to RES per dr/dy evaluation.\n              If MITER = 1, the user must supply a Subroutine JAC\n              (the name is arbitrary) as described above under JAC.\n              For MITER = 2, a dummy argument can be used. Optional Inputs. The following is a list of the optional inputs provided for in the\n call sequence.  (See also Part 2.)  For each such input variable,\n this table lists its name as used in this documentation, its\n location in the call sequence, its meaning, and the default value.\n The use of any of these inputs requires IOPT = 1, and in that\n case all of these inputs are examined.  A value of zero for any\n of these optional inputs will cause the default value to be used.\n Thus to use a subset of the optional inputs, simply preload\n locations 5 to 10 in RWORK and IWORK to 0.0 and 0 respectively, and\n then set those of interest to nonzero values. Name    Location      Meaning and Default Value H0      RWORK(5)  the step size to be attempted on the first step.\n                   The default value is determined by the solver. HMAX    RWORK(6)  the maximum absolute step size allowed.\n                   The default value is infinite. HMIN    RWORK(7)  the minimum absolute step size allowed.\n                   The default value is 0.  (This lower bound is not\n                   enforced on the final step before reaching TCRIT\n                   when ITASK = 4 or 5.) MAXORD  IWORK(5)  the maximum order to be allowed.  The default\n                   value is 12 if METH = 1, and 5 if METH = 2.\n                   If MAXORD exceeds the default value, it will\n                   be reduced to the default value.\n                   If MAXORD is changed during the problem, it may\n                   cause the current order to be reduced. MXSTEP  IWORK(6)  maximum number of (internally defined) steps\n                   allowed during one call to the solver.\n                   The default value is 500. MXHNIL  IWORK(7)  maximum number of messages printed (per problem)\n                   warning that T + H = T on a step (H = step size).\n                   This must be positive to result in a non-default\n                   value.  The default value is 10. Optional Outputs. As optional additional output from DLSOIBT, the variables listed\n below are quantities related to the performance of DLSOIBT\n which are available to the user.  These are communicated by way of\n the work arrays, but also have internal mnemonic names as shown.\n Except where stated otherwise, all of these outputs are defined\n on any successful return from DLSOIBT, and on any return with\n ISTATE = -1, -2, -4, -5, -6, or -7.  On a return with -3 (illegal\n input) or -8, they will be unchanged from their existing values\n (if any), except possibly for TOLSF, LENRW, and LENIW.\n On any error return, outputs relevant to the error will be defined,\n as noted below. Name    Location      Meaning HU      RWORK(11) the step size in t last used (successfully). HCUR    RWORK(12) the step size to be attempted on the next step. TCUR    RWORK(13) the current value of the independent variable\n                   which the solver has actually reached, i.e. the\n                   current internal mesh point in t.  On output, TCUR\n                   will always be at least as far as the argument\n                   T, but may be farther (if interpolation was done). TOLSF   RWORK(14) a tolerance scale factor, greater than 1.0,\n                   computed when a request for too much accuracy was\n                   detected (ISTATE = -3 if detected at the start of\n                   the problem, ISTATE = -2 otherwise).  If ITOL is\n                   left unaltered but RTOL and ATOL are uniformly\n                   scaled up by a factor of TOLSF for the next call,\n                   then the solver is deemed likely to succeed.\n                   (The user may also ignore TOLSF and alter the\n                   tolerance parameters in any other way appropriate.) NST     IWORK(11) the number of steps taken for the problem so far. NRE     IWORK(12) the number of residual evaluations (RES calls)\n                   for the problem so far. NJE     IWORK(13) the number of Jacobian evaluations (each involving\n                   an evaluation of a and dr/dy) for the problem so\n                   far.  This equals the number of calls to ADDA and\n                   (if MITER = 1) to JAC, and the number of matrix\n                   LU decompositions. NQU     IWORK(14) the method order last used (successfully). NQCUR   IWORK(15) the order to be attempted on the next step. IMXER   IWORK(16) the index of the component of largest magnitude in\n                   the weighted local error vector ( E(i)/EWT(i) ),\n                   on an error return with ISTATE = -4 or -5. LENRW   IWORK(17) the length of RWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. LENIW   IWORK(18) the length of IWORK actually required.\n                   This is defined on normal returns and on an illegal\n                   input return for insufficient storage. The following two arrays are segments of the RWORK array which\n may also be of interest to the user as optional outputs.\n For each array, the table below gives its internal name,\n its base address in RWORK, and its description. Name    Base Address      Description YH      21             the Nordsieck history array, of size NYH by\n                        (NQCUR + 1), where NYH is the initial value\n                        of NEQ.  For j = 0,1,…,NQCUR, column j+1\n                        of YH contains HCUR**j/factorial(j) times\n                        the j-th derivative of the interpolating\n                        polynomial currently representing the solution,\n                        evaluated at t = TCUR. ACOR     LENRW-NEQ+1   array of size NEQ used for the accumulated\n                        corrections on each step, scaled on output to\n                        represent the estimated local error in y on\n                        the last step.  This is the vector E in the\n                        description of the error control.  It is\n                        defined only on a return from DLSOIBT with\n                        ISTATE = 2. Part 2.  Other Routines Callable. The following are optional calls which the user may make to\n gain additional capabilities in conjunction with DLSOIBT.\n (The routines XSETUN and XSETF are designed to conform to the\n SLATEC error handling package.) Form of Call                  Function CALL XSETUN(LUN)          Set the logical unit number, LUN, for\n                             output of messages from DLSOIBT, if\n                             the default is not desired.\n                             The default value of LUN is 6. CALL XSETF(MFLAG)         Set a flag to control the printing of\n                             messages by DLSOIBT.\n                             MFLAG = 0 means do not print. (Danger:\n                             This risks losing valuable information.)\n                             MFLAG = 1 means print (the default). Either of the above calls may be made at\n                         any time and will take effect immediately. CALL DSRCOM(RSAV,ISAV,JOB) saves and restores the contents of\n                             the internal Common blocks used by\n                             DLSOIBT (see Part 3 below).\n                             RSAV must be a real array of length 218\n                             or more, and ISAV must be an integer\n                             array of length 37 or more.\n                             JOB=1 means save Common into RSAV/ISAV.\n                             JOB=2 means restore Common from RSAV/ISAV.\n                                DSRCOM is useful if one is\n                             interrupting a run and restarting\n                             later, or alternating between two or\n                             more problems solved with DLSOIBT. CALL DINTDY(,,,,,)        Provide derivatives of y, of various\n        (see below)          orders, at a specified point t, if\n                             desired.  It may be called only after\n                             a successful return from DLSOIBT. The detailed instructions for using DINTDY are as follows.\n The form of the call is: CALL DINTDY (T, K, RWORK(21), NYH, DKY, IFLAG) The input parameters are: T         = value of independent variable where answers are desired\n             (normally the same as the t last returned by DLSOIBT).\n             For valid results, T must lie between TCUR - HU and TCUR.\n             (See optional outputs for TCUR and HU.)\n K         = integer order of the derivative desired.  K must satisfy\n             0 .le. K .le. NQCUR, where NQCUR is the current order\n             (see optional outputs).  The capability corresponding\n             to K = 0, i.e. computing y(t), is already provided\n             by DLSOIBT directly.  Since NQCUR .ge. 1, the first\n             derivative dy/dt is always available with DINTDY.\n RWORK(21) = the base address of the history array YH.\n NYH       = column length of YH, equal to the initial value of NEQ. The output parameters are: DKY       = a real array of length NEQ containing the computed value\n             of the K-th derivative of y(t).\n IFLAG     = integer flag, returned as 0 if K and T were legal,\n             -1 if K was illegal, and -2 if T was illegal.\n             On an error return, a message is also written. Part 3.  Common Blocks. If DLSOIBT is to be used in an overlay situation, the user\n must declare, in the primary overlay, the variables in:\n   (1) the call sequence to DLSOIBT, and\n   (2) the internal Common block\n         /DLS001/  of length  255  (218 double precision words\n                      followed by 37 integer words), If DLSOIBT is used on a system in which the contents of internal\n Common blocks are not preserved between calls, the user should\n declare the above Common block in the calling program to insure\n that their contents are preserved. If the solution of a given problem by DLSOIBT is to be interrupted\n and then later continued, such as when restarting an interrupted run\n or alternating between two or more problems, the user should save,\n following the return from the last DLSOIBT call prior to the\n interruption, the contents of the call sequence variables and the\n internal Common blocks, and later restore these values before the\n next DLSOIBT call for that problem.  To save and restore the Common\n blocks, use Subroutine DSRCOM (see Part 2 above). Part 4.  Optionally Replaceable Solver Routines. Below are descriptions of two routines in the DLSOIBT package which\n relate to the measurement of errors.  Either routine can be\n replaced by a user-supplied version, if desired.  However, since such\n a replacement may have a major impact on performance, it should be\n done only when absolutely necessary, and only with great caution.\n (Note: The means by which the package version of a routine is\n superseded by the user’s version may be system-dependent.) (a) DEWSET.\n The following subroutine is called just before each internal\n integration step, and sets the array of error weights, EWT, as\n described under ITOL/RTOL/ATOL above:\n     SUBROUTINE DEWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)\n where NEQ, ITOL, RTOL, and ATOL are as in the DLSOIBT call sequence,\n YCUR contains the current dependent variable vector, and\n EWT is the array of weights set by DEWSET. If the user supplies this subroutine, it must return in EWT(i)\n (i = 1,…,NEQ) a positive quantity suitable for comparing errors\n in y(i) to.  The EWT array returned by DEWSET is passed to the DVNORM\n routine (see below), and also used by DLSOIBT in the computation\n of the optional output IMXER, the diagonal Jacobian approximation,\n and the increments for difference quotient Jacobians. In the user-supplied version of DEWSET, it may be desirable to use\n the current values of derivatives of y.  Derivatives up to order NQ\n are available from the history array YH, described above under\n optional outputs.  In DEWSET, YH is identical to the YCUR array,\n extended to NQ + 1 columns with a column length of NYH and scale\n factors of H**j/factorial(j).  On the first call for the problem,\n given by NST = 0, NQ is 1 and H is temporarily set to 1.0.\n NYH is the initial value of NEQ.  The quantities NQ, H, and NST\n can be obtained by including in DEWSET the statements:\n     DOUBLE PRECISION RLS\n     COMMON /DLS001/ RLS(218),ILS(37)\n     NQ = ILS(33)\n     NST = ILS(34)\n     H = RLS(212)\n Thus, for example, the current value of dy/dt can be obtained as\n YCUR(NYH+i)/H  (i=1,…,NEQ)  (and the division by H is\n unnecessary when NST = 0). (b) DVNORM.\n The following is a real function routine which computes the weighted\n root-mean-square norm of a vector v:\n     D = DVNORM (N, V, W)\n where:\n   N = the length of the vector,\n   V = real array of length N containing the vector,\n   W = real array of length N containing weights,\n   D = SQRT( (1/N) * sum(V(i) W(i)) *2 ).\n DVNORM is called with N = NEQ and with W(i) = 1.0/EWT(i), where\n EWT is as set by Subroutine DEWSET. If the user supplies this function, it should return a non-negative\n value of DVNORM suitable for use in the error control in DLSOIBT.\n None of the arguments should be altered by DVNORM.\n For example, a user-supplied DVNORM routine might:\n   -substitute a max-norm of (V(i)*W(i)) for the RMS-norm, or\n   -ignore some components of V in the norm, with the effect of\n    suppressing the error control on those components of y. REVISION HISTORY  (YYYYMMDD) 19840625  DATE WRITTEN\n 19870330  Major update: corrected comments throughout;\n           removed TRET from Common; rewrote EWSET with 4 loops;\n           fixed t test in INTDY; added Cray directives in STODI;\n           in STODI, fixed DELP init. and logic around PJAC call;\n           combined routines to save/restore Common;\n           passed LEVEL = 0 in error message calls (except run abort).\n 20010425  Major update: convert source lines to upper case;\n           added *DECK lines; changed from 1 to * in dummy dimensions;\n           changed names R1MACH/D1MACH to RUMACH/DUMACH;\n           renamed routines for uniqueness across single/double prec.;\n           converted intrinsic names to generic form;\n           removed ILLIN and NTREP (data loaded) from Common;\n           removed all ‘own’ variables from Common;\n           changed error messages to quoted strings;\n           replaced XERRWV/XERRWD with 1993 revised version;\n           converted prologues, comments, error messages to mixed case;\n           converted arithmetic IF statements to logical IF statements;\n           numerous corrections to prologues and internal comments.\n 20010507  Converted single precision source to double precision.\n 20020502  Corrected declarations in descriptions of user routines.\n 20031105  Restored ‘own’ variables to Common block, to enable\n           interrupt/restart feature.\n 20031112  Added SAVE statements for data-loaded constants.\n 20031117  Changed internal names NRE, LSAVR to NFE, LSAVF resp. Other routines in the DLSOIBT package. In addition to Subroutine DLSOIBT, the DLSOIBT package includes the\n following subroutines and function routines:\n  DAIGBT   computes the initial value of the vector\n             dy/dt = A-inverse * g\n  DINTDY   computes an interpolated value of the y vector at t = TOUT.\n  DSTODI   is the core integrator, which does one step of the\n           integration and the associated error control.\n  DCFODE   sets all method coefficients and test constants.\n  DEWSET   sets the error weight vector EWT before each step.\n  DVNORM   computes the weighted RMS-norm of a vector.\n  DSRCOM   is a user-callable routine to save and restore\n           the contents of the internal Common blocks.\n  DPJIBT   computes and preprocesses the Jacobian matrix\n           and the Newton iteration matrix P.\n  DSLSBT   manages solution of linear system in chord iteration.\n  DDECBT and DSOLBT   are routines for solving block-tridiagonal\n           systems of linear algebraic equations.\n  DGEFA and DGESL   are routines from LINPACK for solving full\n           systems of linear algebraic equations.\n  DDOT     is one of the basic linear algebra modules (BLAS).\n  DUMACH   computes the unit roundoff in a machine-independent manner.\n  XERRWD, XSETUN, XSETF, and IXSAV handle the printing of all\n           error messages and warnings.  XERRWD is machine-dependent.\n Note:  DVNORM, DDOT, DUMACH, and IXSAV are function routines.\n All the others are subroutines. Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Ydoti real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: Mf Calls proc~~dlsoibt~~CallsGraph proc~dlsoibt dlsoibt proc~dewset dewset proc~dlsoibt->proc~dewset proc~dstodi dstodi proc~dlsoibt->proc~dstodi proc~daigbt daigbt proc~dlsoibt->proc~daigbt proc~xerrwd xerrwd proc~dlsoibt->proc~xerrwd proc~dumach dumach proc~dlsoibt->proc~dumach proc~dvnorm dvnorm proc~dlsoibt->proc~dvnorm proc~dintdy dintdy proc~dlsoibt->proc~dintdy proc~dstodi->proc~dvnorm proc~dcfode dcfode proc~dstodi->proc~dcfode proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlsoibt.html"},{"title":"dpjibt – odepack","text":"public subroutine dpjibt(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPJIBT is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nand r = g(t,y) - A(t,y)*s.  Here J is computed by the user-supplied\nroutine JAC if MITER = 1, or by finite differencing if MITER = 2.\nJ is stored in WM, rescaled, and ADDA is called to generate P.\nP is then subjected to LU decomposition by DDECBT in preparation\nfor later solution of linear systems with P as coefficient matrix. In addition to variables described previously, communication\nwith DPJIBT uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array used for output only.  On output it contains the\nresidual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains block structure parameters\nMB = IWM(1) and NB = IWM(2).\nEL0 EL(1) (input). IERPJ output error flag.\n    = 0 if no trouble occurred,\n    = 1 if the P matrix was found to be unfactorable,\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res integer :: jac real :: adda Contents None","tags":"","loc":"proc/dpjibt.html"},{"title":"dprepj – odepack","text":"public subroutine dprepj(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) NAME dprepj ( 3 f ) - [ M_odepack ] Compute and process Newton iteration matrix . DESCRIPTION DPREPJ is called by DSTODE to compute and process the matrix\n  P = I - dls1%h el(1) J , where J is an approximation to the Jacobian.\n  Here J is computed by the user-supplied routine JAC if\n  MITER = 1 or 4, or by finite differencing if MITER = 2, 3, or 5.\n  If MITER = 3, a diagonal approximation to J is used.\n  J is stored in WM and replaced by P.  If MITER .ne. 3, P is then\n  subjected to LU decomposition in preparation for later solution\n  of linear systems with P as coefficient matrix.  This is done\n  by DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. In addition to variables described in DSTODE and DLSODE prologues,\n  communication with DPREPJ uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODE). SAVF array containing f evaluated at predicted y. WM real work space for matrices.  On output it contains the\ninverse diagonal matrix if MITER = 3 and the LU decomposition\nof P if MITER is 1, 2 , 4, or 5.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments.\nWM(2) = H*EL0, saved for later use if MITER = 3. IWM integer work space containing pivot information, starting at\nIWM(21), if MITER is 1, 2, 4, or 5.  IWM also contains band\nparameters ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 EL(1) (input). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nP matrix found to be singular. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the COMMON variables EL0, H, TN, UROUND,\n  MITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac Calls proc~~dprepj~~CallsGraph proc~dprepj dprepj proc~dgefa dgefa proc~dprepj->proc~dgefa proc~dvnorm dvnorm proc~dprepj->proc~dvnorm proc~daxpy daxpy proc~dgefa->proc~daxpy proc~dscal dscal proc~dgefa->proc~dscal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprepj.html"},{"title":"dprepji – odepack","text":"public subroutine dprepji(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPREPJI is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s.  Here J is computed by the user-supplied\nroutine JAC if MITER = 1 or 4, or by finite differencing if MITER =\n2 or 5.  J is stored in WM, rescaled, and ADDA is called to generate\nP. P is then subjected to LU decomposition in preparation\nfor later solution of linear systems with P as coefficient\nmatrix.  This is done by DGEFA if MITER = 1 or 2, and by\nDGBFA if MITER = 4 or 5. In addition to variables described previously, communication\nwith DPREPJI uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array used for output only.  On output it contains the\nresidual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains the band parameters\nML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 el(1) (input). IERPJ output error flag.\n    = 0 if no trouble occurred,\n    = 1 if the P matrix was found to be singular,\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Rtem (*) real(kind=dp) :: Savr (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: res integer :: jac real :: adda Calls proc~~dprepji~~CallsGraph proc~dprepji dprepji proc~dgefa dgefa proc~dprepji->proc~dgefa proc~daxpy daxpy proc~dgefa->proc~daxpy proc~dscal dscal proc~dgefa->proc~dscal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprepji.html"},{"title":"dprja – odepack","text":"public subroutine dprja(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPRJA is called by DSTODA to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nHere J is computed by the user-supplied routine JAC if\nMITER = 1 or 4 or by finite differencing if MITER = 2 or 5.\nJ, scaled by -H*EL(1), is stored in WM.  Then the norm of J (the\nmatrix norm consistent with the weighted max-norm on vectors given\nby DMNORM) is computed, and J is overwritten by P.  P is then\nsubjected to LU decomposition in preparation for later solution\nof linear systems with P as coefficient matrix.  This is done\nby DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. In addition to variables described previously, communication\nwith DPRJA uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODA). SAVF array containing f evaluated at predicted y. WM real work space for matrices.  On output it contains the\nLU decomposition of P.\nStorage of matrix elements starts at WM(3).\nWM also contains the following matrix-related data:\nWM(1) = SQRT(UROUND), used in numerical Jacobian increments. IWM integer work space containing pivot information, starting at\nIWM(21).   IWM also contains the band parameters\nML = IWM(1) and MU = IWM(2) if MITER is 4 or 5. EL0 EL(1) (input). PDNORM norm of Jacobian matrix. (Output). IERPJ output error flag,  = 0 if no trouble, .gt. 0 if\nP matrix found to be singular. JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses the Common variables EL0, H, TN, UROUND,\nMITER, N, NFE, and NJE. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Ftem real(kind=dp), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac Calls proc~~dprja~~CallsGraph proc~dprja dprja proc~dmnorm dmnorm proc~dprja->proc~dmnorm proc~dgefa dgefa proc~dprja->proc~dgefa proc~daxpy daxpy proc~dgefa->proc~daxpy proc~dscal dscal proc~dgefa->proc~dscal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprja.html"},{"title":"dprjis – odepack","text":"public subroutine dprjis(Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wk, Iwk, res, jac, adda) DPRJIS is called to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s.  J is computed by columns, either by\nthe user-supplied routine JAC if MITER = 1, or by finite differencing\nif MITER = 2.  J is stored in WK, rescaled, and ADDA is called to\ngenerate P.  The matrix P is subjected to LU decomposition in CDRV.\nP and its LU decomposition are stored separately in WK. In addition to variables described previously, communication\nwith DPRJIS uses the following: Y array containing predicted values on entry. RTEM work array of length N (ACOR in DSTODI). SAVR array containing r evaluated at predicted y. On output it\ncontains the residual evaluated at current values of t and y. S array containing predicted values of dy/dt (SAVF in DSTODI). WK real work space for matrices.  On output it contains P and\nits sparse LU decomposition.  Storage of matrix elements\nstarts at WK(3).\nWK also contains the following matrix-related data.\nWK(1) = SQRT(UROUND), used in numerical Jacobian increments. IWK integer work space for matrix-related data, assumed to be\nequivalenced to WK.  In addition,  WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. EL0 EL(1) (input). IERPJ output error flag (in COMMON).\n    =  0 if no error.\n    =  1 if zero pivot found in CDRV.\n    = IRES (= 2 or 3) if RES returned IRES = 2 or 3.\n    = -1 if insufficient storage for CDRV (should not occur).\n    = -2 if other error found in CDRV (should not occur here). JCUR output flag = 1 to indicate that the Jacobian matrix\n(or approximation) is now current. This routine also uses other variables in Common. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wk integer, dimension(*) :: Iwk real :: res integer :: jac real :: adda Calls proc~~dprjis~~CallsGraph proc~dprjis dprjis proc~cdrv cdrv proc~dprjis->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprjis.html"},{"title":"dprjs – odepack","text":"public subroutine dprjs(Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wk, Iwk, f, jac) DPRJS is called to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nJ is computed by columns, either by the user-supplied routine JAC\nif MITER = 1, or by finite differencing if MITER = 2.\nif MITER = 3, a diagonal approximation to J is used.\nif MITER = 1 or 2, and if the existing value of the Jacobian\n(as contained in P) is considered acceptable, then a new value of\nP is reconstructed from the old value.  In any case, when MITER\nis 1 or 2, the P matrix is subjected to LU decomposition in CDRV.\nP and its LU decomposition are stored (separately) in WK. In addition to variables described previously, communication\nwith DPRJS uses the following: Y array containing predicted values on entry. FTEM work array of length N (ACOR in DSTODE). SAVF array containing f evaluated at predicted y. WK real work space for matrices.  On output it contains the\ninverse diagonal matrix if MITER = 3, and P and its sparse\nLU decomposition if MITER is 1 or 2.\nStorage of matrix elements starts at WK(3).\nWK also contains the following matrix-related data:\nWK(1) = SQRT(UROUND), used in numerical Jacobian increments.\nWK(2) = H*EL0, saved for later use if MITER = 3. IWK integer work space for matrix-related data, assumed to\nbe equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\nare assumed to have identical locations. EL0 EL(1) (input). IERPJ output error flag (in Common).\n  = 0 if no error.\n  = 1  if zero pivot found in CDRV.\n  = 2  if a singular matrix arose with MITER = 3.\n  = -1 if insufficient storage for CDRV (should not occur here).\n  = -2 if other error found in CDRV (should not occur here). JCUR output flag showing status of (approximate) Jacobian matrix:\n  = 1 to indicate that the Jacobian is now current, or\n  = 0 to indicate that a saved value was used. This routine also uses other variables in Common. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real :: f integer :: jac Calls proc~~dprjs~~CallsGraph proc~dprjs dprjs proc~dvnorm dvnorm proc~dprjs->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dprjs.html"},{"title":"drchek – odepack","text":"public subroutine drchek(Job, g_sub, Neq, Y, Yh, Nyh, G0, G1, Gx, Jroot, Irt) This routine checks for the presence of a root in the vicinity of\nthe current T, in a manner depending on the input flag JOB.  It calls\nSubroutine DROOTS to locate the root as precisely as possible. In addition to variables described previously, DRCHEK\nuses the following for communication: JOB integer flag indicating type of call:\n     JOB = 1 means the problem is being initialized, and DRCHEK\n             is to look for a root at or very near the initial T.\n     JOB = 2 means a continuation call to the solver was just\n             made, and DRCHEK is to check for a root in the\n             relevant part of the step dlsr taken.\n     JOB = 3 means a successful step was just taken, and DRCHEK\n             is to look for a root in the interval of the step. G0 array of length NG, containing the value of g at T = T0. G0 is input for JOB .ge. 2, and output in all cases. G1,GX arrays of length NG for work space. IRT completion flag:\n     IRT = 0  means no root was found.\n     IRT = -1 means JOB = 1 and a root was found too near to T.\n     IRT = 1  means a legitimate root was found (JOB = 2 or 3). On return, T0 is the root location, and Y is the\ncorresponding solution vector. T0 value of T at one endpoint of interval of interest.  Only\n     roots beyond T0 in the direction of integration are sought.\n     T0 is input if JOB .ge. 2, and output in all cases.\n     T0 is updated by DRCHEK, whether a root is found or not. TLAST dlsr value of T returned by the solver (input only). TOUTC copy of TOUT (input only). IRFND input flag showing whether the dlsr step taken had a root.\nIRFND = 1 if it did, = 0 if not. ITASKC copy of ITASK (input only). NGC copy of NG (input only). Arguments Type Intent Optional Attributes Name integer, intent(in) :: Job real :: g_sub integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: G0 (*) real(kind=dp) :: G1 (*) real(kind=dp) :: Gx (*) integer :: Jroot (*) integer, intent(out) :: Irt Calls proc~~drchek~~CallsGraph proc~drchek drchek proc~dcopy dcopy proc~drchek->proc~dcopy proc~dintdy dintdy proc~drchek->proc~dintdy proc~xerrwd xerrwd proc~dintdy->proc~xerrwd Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~drchek~~CalledByGraph proc~drchek drchek proc~dlsodar dlsodar proc~dlsodar->proc~drchek proc~dlsodkr dlsodkr proc~dlsodkr->proc~drchek Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/drchek.html"},{"title":"dscal – odepack","text":"public subroutine dscal(N, Da, Dx, Incx) NAME dscal(3f) - [M_odepack::matrix] Multiply a vector by a constant. SYNOPSIS subroutine dscal(N,Da,Dx,Incx)\ninteger , intent(in) :: N\nreal(kind=dp) , intent(in) :: Da\nreal(kind=dp) , intent(inout) , dimension(*) :: Dx\ninteger , intent(in) :: Incx DESCRIPTION Replace double precision DX by double precision DA DX.\n   For I = 0 to N-1, replace DX(IX+I INCX) with  DA * DX(IX+I INCX),\n   where IX = 1 if INCX .GE. 0, else IX = 1+(1-N) INCX. OPTIONS N number of elements in input vector(s) DA double precision scale factor DX double precision vector with N elements INCX storage spacing between elements of DX RETURNS DX double precision result (unchanged if N.LE.0) REFERENCES B L A S  Subprogram C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.\n   Krogh, Basic linear algebra subprograms for Fortran\n   usage, Algorithm No. 539, Transactions on Mathematical\n   Software 5, 3 (September 1979), pp. 308-323. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(inout) :: Dx (*) integer, intent(in) :: Incx Called by proc~~dscal~~CalledByGraph proc~dscal dscal proc~dgefa dgefa proc~dgefa->proc~dscal proc~dprepj dprepj proc~dprepj->proc~dgefa proc~dprja dprja proc~dprja->proc~dgefa proc~dainvg dainvg proc~dainvg->proc~dgefa proc~dprepji dprepji proc~dprepji->proc~dgefa proc~dlsodi dlsodi proc~dlsodi->proc~dainvg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dscal.html"},{"title":"dslsbt – odepack","text":"public subroutine dslsbt(Wm, Iwm, X, Tem) This routine acts as an interface between the core integrator\nroutine and the DSOLBT routine for the solution of the linear system\narising from chord iteration.\nCommunication with DSLSBT uses the following variables: WM real work space containing the LU decomposition,\nstarting at WM(3). IWM integer work space containing pivot information, starting at\nIWM(21).  IWM also contains block structure parameters\nMB = IWM(1) and NB = IWM(2). X the right-hand side vector on input, and the solution vector\non output, of length N. TEM vector of work space of length N, not used in this version. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Wm (*) integer :: Iwm (*) real(kind=dp) :: X (*) real(kind=dp) :: Tem (*) Contents None","tags":"","loc":"proc/dslsbt.html"},{"title":"dsolss – odepack","text":"public subroutine dsolss(Wk, Iwk, X, Tem) This routine manages the solution of the linear system arising from\na chord iteration.  It is called if MITER .ne. 0.\nIf MITER is 1 or 2, it calls CDRV to accomplish this.\nIf MITER = 3 it updates the coefficient H EL0 in the diagonal\nmatrix, and then computes the solution.\ncommunication with DSOLSS uses the following variables:\nWK    = real work space containing the inverse diagonal matrix if\n        MITER = 3 and the LU decomposition of the matrix otherwise.\n        Storage of matrix elements starts at WK(3).\n        WK also contains the following matrix-related data:\n        WK(1) = SQRT(UROUND) (not used here),\n        WK(2) = HL0, the previous value of H EL0, used if MITER = 3.\nIWK   = integer work space for matrix-related data, assumed to\n        be equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\n        are assumed to have identical locations.\nX     = the right-hand side vector on input, and the solution vector\n        on output, of length N.\nTEM   = vector of work space of length N, not used in this version.\nIERSL = output flag (in Common).\n        IERSL = 0  if no trouble occurred.\n        IERSL = -1 if CDRV returned an error flag (MITER = 1 or 2).\n                   This should never occur and is considered fatal.\n        IERSL = 1  if a singular matrix arose with MITER = 3.\nThis routine also uses other variables in Common. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dsolss~~CallsGraph proc~dsolss dsolss proc~cdrv cdrv proc~dsolss->proc~cdrv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dsolss.html"},{"title":"dsolsy – odepack","text":"public subroutine dsolsy(Wm, Iwm, X, Tem) DESCRIPTION This routine manages the solution of the linear system arising from\n  a chord iteration.  It is called if MITER .ne. 0.\n  If MITER is 1 or 2, it calls DGESL to accomplish this.\n  If MITER = 3 it updates the coefficient h EL0 in the diagonal\n  matrix, and then computes the solution.\n  If MITER is 4 or 5, it calls DGBSL.\n  Communication with DSOLSY uses the following variables:\n  WM    = real work space containing the inverse diagonal matrix if\n          MITER = 3 and the LU decomposition of the matrix otherwise.\n          Storage of matrix elements starts at WM(3).\n          WM also contains the following matrix-related data:\n          WM(1) = SQRT(UROUND) (not used here),\n          WM(2) = HL0, the previous value of h EL0, used if MITER = 3.\n  IWM   = integer work space containing pivot information, starting at\n          IWM(21), if MITER is 1, 2, 4, or 5.  IWM also contains band\n          parameters ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5.\n  X     = the right-hand side vector on input, and the solution vector\n          on output, of length N.\n  TEM   = vector of work space of length N, not used in this version.\n  IERSL = output flag (in COMMON).  IERSL = 0 if no trouble occurred.\n          IERSL = 1 if a singular matrix arose with MITER = 3.\n  This routine also uses the COMMON variables EL0, H, MITER, and N. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) Calls proc~~dsolsy~~CallsGraph proc~dsolsy dsolsy proc~dgesl dgesl proc~dsolsy->proc~dgesl proc~daxpy daxpy proc~dgesl->proc~daxpy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dsolsy.html"},{"title":"dsrcar – odepack","text":"public subroutine dsrcar(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(dlsa01)::DLSA, DLSR01, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 245 or more. ISAV integer array of length 55 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcar.html"},{"title":"dsrckr – odepack","text":"public subroutine dsrckr(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSR01, DLPK01, which\nare used internally by the DLSODKR solver. RSAV real array of length 228 or more. ISAV integer array of length 63 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrckr.html"},{"title":"dsrcma – odepack","text":"public subroutine dsrcma(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(DLSA01)::DLSA, which are used\ninternally by one or more ODEPACK solvers. RSAV real array of length 240 or more. ISAV integer array of length 46 or more. JOB flag indicating to save or restore the Common blocks: JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n   JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n   A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcma.html"},{"title":"dsrcms – odepack","text":"public subroutine dsrcms(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSS01, which are used\ninternally by one or more ODEPACK solvers. RSAV = real array of length 224 or more.\nISAV = integer array of length 71 or more.\nJOB  = flag indicating to save or restore the Common blocks:\n       JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n       JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n       A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcms.html"},{"title":"dsrcom – odepack","text":"public subroutine dsrcom(Rsav, Isav, Job) NAME dsrcom(3f) - [M_odepack] Save/restore ODEPACK COMMON blocks. DESCRIPTION This routine saves or restores (depending on JOB) the contents of\n  the COMMON block DLS001, which is used internally\n  by one or more ODEPACK solvers. VALUES RSAV real array of length 218 or more. ISAV integer array of length 37 or more. JOB flag indicating to save or restore the COMMON blocks:\n          JOB  = 1 if COMMON is to be saved (written to RSAV/ISAV)\n          JOB  = 2 if COMMON is to be restored (read from RSAV/ISAV) A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcom.html"},{"title":"dsrcpk – odepack","text":"public subroutine dsrcpk(Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLPK01, which are used\ninternally by the DLSODPK solver. RSAV = real array of length 222 or more.\nISAV = integer array of length 50 or more.\nJOB  = flag indicating to save or restore the Common blocks:\n       JOB  = 1 if Common is to be saved (written to RSAV/ISAV)\n       JOB  = 2 if Common is to be restored (read from RSAV/ISAV)\n       A call with JOB = 2 presumes a prior call with JOB = 1. Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job Contents None","tags":"","loc":"proc/dsrcpk.html"},{"title":"dstoda – odepack","text":"public subroutine dstoda(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) DSTODA performs one step of the integration of an initial value\nproblem for a system of ordinary differential equations.\nNote: DSTODA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure.\nCommunication with DSTODA is done with the following variables: Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). PJAC name of routine to evaluate and preprocess Jacobian matrix\nand P = I - H EL0 Jac, if a chord method is being used.\nIt also returns an estimate of norm(Jac) in PDNORM. SLVS name of routine to solve linear system in chord iteration. CCMAX maximum relative change in H*EL0 before PJAC is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings:\n              0  perform the first step.\n          .gt.0  take a new step continuing from the last.\n             -1  take the next step with a new value of H,\n                   N, METH, MITER, and/or matrix parameters.\n             -2  take the next step with a new value of H,\n                   but with other inputs unchanged.\n         On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings:\n          0  the step was succesful.\n         -1  the requested error could not be achieved.\n         -2  corrector convergence could not be achieved.\n         -3  fatal error in PJAC or SLVS. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between PJAC calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH current method.\n     METH = 1 means Adams method (nonstiff)\n     METH = 2 means BDF method (stiff)\n     METH may be reset by DSTODA. MITER corrector iteration method.\nMITER = 0 means functional iteration.\nMITER = JT .gt. 0 means a chord iteration corresponding\nto Jacobian type JT.  (The DLSODA/DLSODAR argument JT is\ncommunicated here as JTYP, but is not used in DSTODA\nexcept to load MITER following a method switch.)\nMITER may be reset by DSTODA. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs Calls proc~~dstoda~~CallsGraph proc~dstoda dstoda proc~dmnorm dmnorm proc~dstoda->proc~dmnorm proc~dcfode dcfode proc~dstoda->proc~dcfode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstoda~~CalledByGraph proc~dstoda dstoda proc~dlsodar dlsodar proc~dlsodar->proc~dstoda proc~dlsoda dlsoda proc~dlsoda->proc~dstoda Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dstoda.html"},{"title":"dstodpk – odepack","text":"public subroutine dstodpk(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTODPK performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations.\nThe following changes were made to generate Subroutine DSTODPK\nfrom Subroutine DSTODE: The array SAVX was added to the call sequence. PJAC and SLVS were replaced by PSOL in the call sequence. The Common block /DLPK01/ was added for communication. The test constant EPCON is loaded into Common below statement\n   numbers 125 and 155, and used below statement 400. The Newton iteration counter MNEWT is set below 220 and 400. The call to PJAC was replaced with a call to DPKSET (fixed name),\n   with a longer call sequence, called depending on JACFLG. The corrector residual is stored in SAVX (not Y) at 360,\n   and the solution vector is in SAVX in the 380 loop. SLVS was renamed DSOLPK and includes NEQ, SAVX, EWT, F, and JAC.\n   SAVX was added because DSOLPK now needs Y and SAVF undisturbed. The nonlinear convergence failure count NCFN is set at 430. Note: DSTODPK is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure.\nCommunication with DSTODPK is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\nAlso used for input of YH(*,MAXORD+2) when JSTART = -1\nand MAXORD .lt. the current order NQ. SAVX an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). CCMAX maximum relative change in H*EL0 before DPKSET is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used.\nHMXI = 0.0 is allowed and corresponds to an infinite HMAX.\nHMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings: 0  the step was succesful.\n    -1  the requested error could not be achieved.\n    -2  corrector convergence could not be achieved.\n    -3  fatal error in DPKSET or DSOLPK. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between DPKSET calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed. METH/MITER the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol Calls proc~~dstodpk~~CallsGraph proc~dstodpk dstodpk proc~dcfode dcfode proc~dstodpk->proc~dcfode proc~dvnorm dvnorm proc~dstodpk->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstodpk~~CalledByGraph proc~dstodpk dstodpk proc~dlsodpk dlsodpk proc~dlsodpk->proc~dstodpk Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dstodpk.html"},{"title":"dstoka – odepack","text":"public subroutine dstoka(Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTOKA performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. This routine was derived from Subroutine DSTODPK in the DLSODPK\npackage by the addition of automatic functional/Newton iteration\nswitching and logic for re-use of Jacobian data. Note: DSTOKA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure.\nCommunication with DSTOKA is done with the following variables: NEQ integer array containing problem size in NEQ(1), and\npassed as the NEQ argument in all calls to F and JAC. Y an array of length .ge. N used as the Y argument in\nall calls to F and JAC. YH an NYH by LMAX array containing the dependent variables\nand their approximate scaled derivatives, where\nLMAX = MAXORD + 1.  YH(i,j+1) contains the approximate\nj-th derivative of y(i), scaled by H**j/factorial(j)\n(j = 0,1,…,NQ).  On entry for the first step, the first\ntwo columns of YH must be set from the initial values. NYH a constant integer .ge. N, the first dimension of YH. YH1 a one-dimensional array occupying the same space as YH. EWT an array of length N containing multiplicative weights\nfor local error measurements.  Local errors in y(i) are\ncompared to 1.0/EWT(i) in various error tests. SAVF an array of working storage, of length N.\nAlso used for input of YH(*,MAXORD+2) when JSTART = -1\nand MAXORD .lt. the current order NQ. SAVX an array of working storage, of length N. ACOR a work array of length N, used for the accumulated\ncorrections.  On a successful return, ACOR(i) contains\nthe estimated one-step local error in y(i). WM,IWM real and integer work arrays associated with matrix\noperations in chord iteration (MITER .ne. 0). CCMAX maximum relative change in H*EL0 before DSETPK is called. H the step size to be attempted on the next step.\nH is altered by the error control algorithm during the\nproblem.  H can be either positive or negative, but its\nsign must remain constant throughout the problem. HMIN the minimum absolute value of the step size H to be used. HMXI inverse of the maximum absolute value of H to be used. HMXI = 0.0 is allowed and corresponds to an infinite HMAX. HMIN and HMXI may be changed at any time, but will not\ntake effect until the next change of H is considered. TN the independent variable. TN is updated on each step taken. JSTART an integer used for input only, with the following\nvalues and meanings: 0 perform the first step .\n  . gt . 0 take a new step continuing from the last . - 1 take the next step with a new value of H , MAXORD , N , METH , MITER , and / or matrix parameters . - 2 take the next step with a new value of H , but with other inputs unchanged . On return, JSTART is set to 1 to facilitate continuation. KFLAG a completion code with the following meanings: 0  the step was succesful.\n      -1  the requested error could not be achieved.\n      -2  corrector convergence could not be achieved.\n      -3  fatal error in DSETPK or DSOLPK. A return with KFLAG = -1 or -2 means either\nABS(H) = HMIN or 10 consecutive failures occurred.\nOn a return with KFLAG negative, the values of TN and\nthe YH array are as of the beginning of the last\nstep, and H is the last step size attempted. MAXORD the maximum order of integration method to be allowed. MAXCOR the maximum number of corrector iterations allowed. MSBP maximum number of steps between DSETPK calls (MITER .gt. 0). MXNCF maximum number of convergence failures allowed.\nMETH/MITER = the method flags.  See description in driver. N the number of first-order differential equations. Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol Calls proc~~dstoka~~CallsGraph proc~dstoka dstoka proc~dcfode dcfode proc~dstoka->proc~dcfode proc~dvnorm dvnorm proc~dstoka->proc~dvnorm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dstoka~~CalledByGraph proc~dstoka dstoka proc~dlsodkr dlsodkr proc~dlsodkr->proc~dstoka Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dstoka.html"},{"title":"jgroup – odepack","text":"public subroutine jgroup(N, Ia, Ja, Maxg, Ngrp, Igp, Jgp, Incl, Jdone, Ier) This subroutine constructs groupings of the column indices of\n the Jacobian matrix, used in the numerical evaluation of the\n Jacobian by finite differences. Input: N the order of the matrix. IA,JA sparse structure descriptors of the matrix by rows. MAXG length of available storage in the IGP array. Output: NGRP number of groups. JGP array of length N containing the column indices by groups. IGP pointer array of length NGRP + 1 to the locations in JGP\n of the beginning of each group. IER error indicator.  IER = 0 if no error occurred, or 1 if\n MAXG was insufficient. INCL and JDONE are working arrays of length N. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: Ia integer, intent(in), dimension(*) :: Ja integer, intent(in) :: Maxg integer, intent(out) :: Ngrp integer, intent(inout), dimension(*) :: Igp integer, intent(out), dimension(*) :: Jgp integer, intent(inout), dimension(*) :: Incl integer, intent(inout), dimension(*) :: Jdone integer, intent(out) :: Ier Called by proc~~jgroup~~CalledByGraph proc~jgroup jgroup proc~dprepi dprepi proc~dprepi->proc~jgroup proc~dprep dprep proc~dprep->proc~jgroup proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/jgroup.html"},{"title":"odrv – odepack","text":"public subroutine odrv(N, Ia, Ja, A, P, Ip, Nsp, Isp, Path, Flag) Name odrv(3f) [M_odepack] - driver for sparse matrix reordering routines Description odrv finds a minimum degree ordering of the rows and columns\n   of a matrix m stored in (ia,ja,a) format (see below).  for the\n   reordered matrix, the work and storage required to perform\n   gaussian elimination is (usually) significantly less. note.. odrv and its subordinate routines have been modified to\n   compute orderings for general matrices, not necessarily having any\n   symmetry.  the miminum degree ordering is computed for the\n   structure of the symmetric matrix  m + m-transpose.\n   modifications to the original odrv module have been made in\n   the coding in subroutine mdi, and in the initial comments in\n   subroutines odrv and md. if only the nonzero entries in the upper triangle of m are being\n   stored, then odrv symmetrically reorders (ia,ja,a), (optionally)\n   with the diagonal entries placed first in each row.  this is to\n   ensure that if m(i,j) will be in the upper triangle of m with\n   respect to the new ordering, then m(i,j) is stored in row i (and\n   thus m(j,i) is not stored),  whereas if m(i,j) will be in the\n   strict lower triangle of m, then m(j,i) is stored in row j (and\n   thus m(i,j) is not stored). storage of sparse matrices the nonzero entries of the matrix m are stored row-by-row in the\n   array a.  to identify the individual nonzero entries in each row,\n   we need to know in which column each entry lies.  these column\n   indices are stored in the array ja.  i.e., if  a(k) = m(i,j),  then\n   ja(k) = j.  to identify the individual rows, we need to know where\n   each row starts.  these row pointers are stored in the array ia.\n   i.e., if m(i,j) is the first nonzero entry (stored) in the i-th row\n   and  a(k) = m(i,j),  then  ia(i) = k.  moreover, ia(n+1) points to\n   the first location following the last element in the last row.\n   thus, the number of entries in the i-th row is  ia(i+1) - ia(i),\n   the nonzero entries in the i-th row are stored consecutively in a(ia(i)),  a(ia(i)+1),  ..., a(ia(i+1)-1), and the corresponding column indices are stored consecutively in ja(ia(i)), ja(ia(i)+1), ..., ja(ia(i+1)-1). when the coefficient matrix is symmetric, only the nonzero entries\n   in the upper triangle need be stored.  for example, the matrix ( 1  0  2  3  0 )\n             ( 0  4  0  0  0 )\n         m = ( 2  0  5  6  0 )\n             ( 3  0  6  7  8 )\n             ( 0  0  0  8  9 ) could be stored as - 1  2  3  4  5  6  7  8  9 10 11 12 13\n         ---+--------------------------------------\n         ia - 1  4  5  8 12 14\n         ja - 1  3  4  2  1  3  4  1  3  4  5  4  5\n          a - 1  2  3  4  2  5  6  3  6  7  8  8  9 or (symmetrically) as - 1  2  3  4  5  6  7  8  9\n         ---+--------------------------\n         ia - 1  4  5  7  9 10\n         ja - 1  3  4  2  3  4  4  5  5\n          a - 1  2  3  4  5  6  7  8  9          . parameters n    - order of the matrix\n\n    ia   - integer one-dimensional array containing pointers to delimit\n           rows in ja and a.  dimension = n+1\n\n    ja   - integer one-dimensional array containing the column indices\n           corresponding to the elements of a.  dimension = number of\n           nonzero entries in (the upper triangle of) m\n\n    a    - real one-dimensional array containing the nonzero entries in\n           (the upper triangle of) m, stored by rows.  dimension =\n           number of nonzero entries in (the upper triangle of) m\n\n    p    - integer one-dimensional array used to return the permutation\n           of the rows and columns of m corresponding to the minimum\n           degree ordering.  dimension = n\n\n    ip   - integer one-dimensional array used to return the inverse of\n           the permutation returned in p.  dimension = n\n\n    nsp  - declared dimension of the one-dimensional array isp.  nsp\n           must be at least  3n+4k,  where k is the number of nonzeroes\n           in the strict upper triangle of m\n\n    isp  - integer one-dimensional array used for working storage.\n           dimension = nsp\n\n    path - integer path specification.  values and their meanings are -\n             1  find minimum degree ordering only\n             2  find minimum degree ordering and reorder symmetrically\n                  stored matrix (used when only the nonzero entries in\n                  the upper triangle of m are being stored)\n             3  reorder symmetrically stored matrix as specified by\n                  input permutation (used when an ordering has already\n                  been determined and only the nonzero entries in the\n                  upper triangle of m are being stored)\n             4  same as 2 but put diagonal entries at start of each row\n             5  same as 3 but put diagonal entries at start of each row\n\n    flag - integer error flag.  values and their meanings are -\n               0    no errors detected\n              9n+k  insufficient storage in md\n             10n+1  insufficient storage in odrv\n             11n+1  illegal path specification Arguments Type Intent Optional Attributes Name integer :: N integer, dimension(*) :: Ia integer, dimension(*) :: Ja real(kind=dp), dimension(*) :: A integer, dimension(*) :: P integer, dimension(*) :: Ip integer, intent(in) :: Nsp integer, dimension(*) :: Isp integer, intent(in) :: Path integer, intent(inout) :: Flag Called by proc~~odrv~~CalledByGraph proc~odrv odrv proc~dprepi dprepi proc~dprepi->proc~odrv proc~dprep dprep proc~dprep->proc~odrv proc~diprepi diprepi proc~diprepi->proc~dprepi proc~diprep diprep proc~diprep->proc~dprep proc~dlsodes dlsodes proc~dlsodes->proc~diprep proc~dlsodis dlsodis proc~dlsodis->proc~diprepi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/odrv.html"},{"title":"xerrwd – odepack","text":"public subroutine xerrwd(Msg, Nmes, Nerr, Level, Ni, I1, I2, Nr, R1, R2) xerrwd(3f) - [M_odepack::Matrix] Write error message with values. subroutine xerrwd(Msg,Nmes,Nerr,Level,Ni,I1,I2,Nr,R1,R2)\n\n  character(len=*),intent(in) :: Msg\n  integer                     :: Nmes\n  integer                     :: Nerr\n  integer,intent(in)          :: Level\n  integer,intent(in)          :: Ni\n  integer,intent(in)          :: I1\n  integer,intent(in)          :: I2\n  integer,intent(in)          :: Nr\n  real(kind=dp),intent(in)    :: R1\n  real(kind=dp),intent(in)    :: R2 DESCRIPTION Subroutines XERRWD, XSETF, XSETUN, and the function routine IXSAV,\n  as given here, constitute a simplified version of the SLATEC error\n  handling package. OPTIONS All arguments are input arguments. MSG The message (character array). NMES The length of MSG (number of characters). NERR The error number (not used). LEVEL The error level..\n        0 or 1 means recoverable (control returns to caller).\n        2 means fatal (run is aborted–see note below). NI Number of integers (0, 1, or 2) to be printed with message. I1,I2 Integers to be printed, depending on NI. NR Number of reals (0, 1, or 2) to be printed with message. R1,R2 Reals to be printed, depending on NR. Note..  this routine is machine-dependent and specialized for use\n   in limited context, in the following ways.. The argument MSG is assumed to be of type CHARACTER, and\n      the message is printed with a format of (1X,A). The message is assumed to take only one line.\n      Multi-line messages are generated by repeated calls. If LEVEL = 2, control passes to the statement   STOP\n      to abort the run.  This statement may be machine-dependent. R1 and R2 are assumed to be in double precision and are printed\n      in D21.13 format. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: Msg integer :: Nmes integer :: Nerr integer, intent(in) :: Level integer, intent(in) :: Ni integer, intent(in) :: I1 integer, intent(in) :: I2 integer, intent(in) :: Nr real(kind=dp), intent(in) :: R1 real(kind=dp), intent(in) :: R2 Called by proc~~xerrwd~~CalledByGraph proc~xerrwd xerrwd proc~dlsode dlsode proc~dlsode->proc~xerrwd proc~dintdy dintdy proc~dlsode->proc~dintdy proc~dlsodes dlsodes proc~dlsodes->proc~xerrwd proc~dlsodes->proc~dintdy proc~dlsoibt dlsoibt proc~dlsoibt->proc~xerrwd proc~dlsoibt->proc~dintdy proc~dlsodar dlsodar proc~dlsodar->proc~xerrwd proc~dlsodar->proc~dintdy proc~drchek drchek proc~dlsodar->proc~drchek proc~dlsodkr dlsodkr proc~dlsodkr->proc~xerrwd proc~dlsodkr->proc~dintdy proc~dlsodkr->proc~drchek proc~dlsodi dlsodi proc~dlsodi->proc~xerrwd proc~dlsodi->proc~dintdy proc~dlsodpk dlsodpk proc~dlsodpk->proc~xerrwd proc~dlsodpk->proc~dintdy proc~dlsodis dlsodis proc~dlsodis->proc~xerrwd proc~dlsodis->proc~dintdy proc~dlsoda dlsoda proc~dlsoda->proc~xerrwd proc~dlsoda->proc~dintdy proc~dintdy->proc~xerrwd proc~drchek->proc~dintdy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/xerrwd.html"},{"title":"xsetf – odepack","text":"public subroutine xsetf(mflag) NAME xsetf(3f) - [M_odepack::matrix] Reset the error print control flag. SYNOPSIS subroutine xsetf (mflag)\ninteger mflag DESCRIPTION XSETF sets the error print control flag to MFLAG: OPTIONS MFLAG MFLAG=1 means print all messages (the default). MFLAG=0 means no printing. Arguments Type Intent Optional Attributes Name integer :: mflag Contents None","tags":"","loc":"proc/xsetf.html"},{"title":"xsetun – odepack","text":"public subroutine xsetun(lun) Name xsetun(3f) - [M_odepack::matrix] Reset the logical unit number for error messages. Synopsis subroutine xsetun (lun)\ninteger,intent(in) :: lun Description XSETUN sets the logical unit number for error messages to LUN. Options LUN logical unit number used for error messages Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun Contents None","tags":"","loc":"proc/xsetun.html"},{"title":"M_odepack – odepack","text":"Used by module~~m_odepack~~UsedByGraph module~m_odepack M_odepack proc~dstodi dstodi proc~dstodi->module~m_odepack proc~dprep dprep proc~dprep->module~m_odepack proc~dainvgs dainvgs proc~dainvgs->module~m_odepack proc~dprepi dprepi proc~dprepi->module~m_odepack proc~dstode dstode proc~dstode->module~m_odepack Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables dlpk dls dls1 dlsa dlsr dlss dp Functions dmnorm dumach dvnorm Subroutines adjlr cdrv cntnzu daigbt dainvg daxpy dcfode dcopy dewset dgefa dgesl dintdy diprep diprepi dlhin dlsoda dlsodar dlsode dlsodes dlsodi dlsodis dlsodkr dlsodpk dlsoibt dpjibt dprepj dprepji dprja dprjis dprjs drchek dscal dslsbt dsolss dsolsy dsrcar dsrckr dsrcma dsrcms dsrcom dsrcpk dstoda dstodpk dstoka jgroup odrv xerrwd xsetf xsetun Variables Type Visibility Attributes Name Initial type(dlpk01), public, save :: dlpk type(dls002), public, save :: dls type(dls001), public, save :: dls1 type(dlsa01), public, save :: dlsa type(dlsr01), public, save :: dlsr type(dlss01), public, save :: dlss integer, public, parameter :: dp = kind(0.0d0) Functions public pure function dmnorm (n, v, w) This function routine computes the weighted max-norm\nof the vector of length N contained in the array V, with weights\ncontained in the array w of length N:\n  DMNORM = MAX(i=1,…,N) ABS(V(i))*W(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) public function dumach () dumach(3f) - [M_odepack] Compute the unit roundoff of the machine. Read more… Arguments None Return Value real(kind=dp) public pure function dvnorm (n, v, w) dvnorm(3f) - [M_odepack] Weighted root-mean-square vector norm. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: n real(kind=dp), intent(in) :: v (n) real(kind=dp), intent(in) :: w (n) Return Value real(kind=dp) Subroutines public subroutine adjlr (N, Isp, Ldif) This routine computes an adjustment, LDIF, to the required\ninteger storage space in IWK (sparse matrix work space). Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Isp (*) integer, intent(out) :: Ldif public subroutine cdrv (N, R, C, Ic, Ia, Ja, A, B, Z, Nsp, Isp, Rsp, Esp, Path, Flag) cdrv(3f) - [M_odepack ] Read more… Arguments Type Intent Optional Attributes Name integer :: N integer :: R (*) integer :: C (*) integer :: Ic (*) integer :: Ia (*) integer :: Ja (*) real(kind=dp) :: A (*) real(kind=dp) :: B (*) real(kind=dp) :: Z (*) integer, intent(in) :: Nsp integer, intent(inout) :: Isp (*) real(kind=dp) :: Rsp (*) integer, intent(out) :: Esp integer, intent(in) :: Path integer, intent(inout) :: Flag public subroutine cntnzu (N, Ia, Ja, Nzsut) This routine counts the number of nonzero elements in the strict\nupper triangle of the matrix M + M(transpose), where the sparsity\nstructure of M is given by pointer arrays IA and JA.\nThis is needed to compute the storage requirements for the\nsparse matrix reordering operation in ODRV. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Ia (*) integer, intent(in) :: Ja (*) integer, intent(out) :: Nzsut public subroutine daigbt (res, adda, Neq, T, Y, Ydot, Mb, Nb, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: Neq (*) real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Mb integer, intent(inout) :: Nb real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier public subroutine dainvg (res, adda, Neq, T, Y, Ydot, Miter, Ml, Mu, Pw, Ipvt, Ier) This subroutine computes the initial value\nof the vector YDOT satisfying Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer, intent(inout) :: Neq real(kind=dp) :: T real(kind=dp) :: Y (*) real(kind=dp) :: Ydot (*) integer, intent(inout) :: Miter integer, intent(inout) :: Ml integer, intent(inout) :: Mu real(kind=dp) :: Pw (*) integer :: Ipvt (*) integer, intent(inout) :: Ier public subroutine daxpy (N, Da, Dx, Incx, Dy, Incy) daxpy(3f) - [M_odepack::matrix] Compute a constant times a vector plus a vector. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(inout) :: Dy (*) integer, intent(in) :: Incy public subroutine dcfode (meth, elco, tesco) dcfode(3f) - [M_odepack] Set ODE integrator coefficients. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: meth real(kind=dp), intent(inout) :: elco (13,12) real(kind=dp), intent(out) :: tesco (3,12) public subroutine dcopy (N, Dx, Incx, Dy, Incy) dcopy(3f) - [M_odepack::matrix] copy a vector Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Dx (*) integer, intent(in) :: Incx real(kind=dp), intent(out) :: Dy (*) integer, intent(in) :: Incy public subroutine dewset (N, Itol, Rtol, Atol, Ycur, Ewt) dewset(3f) - [M_odepack] Set error weight vector. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in) :: Itol real(kind=dp), intent(in) :: Rtol (*) real(kind=dp), intent(in) :: Atol (*) real(kind=dp), intent(in) :: Ycur (N) real(kind=dp), intent(out) :: Ewt (N) public subroutine dgefa (A, Lda, N, Ipvt, Info) dgefa(3f) - [M_odepack::matrix] Factor a matrix using Gaussian elimination. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(out) :: Ipvt (*) integer, intent(out) :: Info public subroutine dgesl (A, Lda, N, Ipvt, B, Job) dgesl(3f) - [M_odepack::matrix] Solve the real system A X=B or TRANS(A) X=B\n               using the factors computed by DGECO or DGEFA. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: A (Lda,*) integer, intent(in) :: Lda integer, intent(in) :: N integer, intent(in) :: Ipvt (*) real(kind=dp), intent(inout) :: B (*) integer, intent(in) :: Job public subroutine dintdy (T, K, Yh, Nyh, Dky, Iflag) DINTDY computes interpolated values of the K-th derivative of the\n  dependent variable vector y, and stores it in DKY.  This routine\n  is called within the package with K = 0 and T = TOUT, but may\n  also be called by the user for any K up to the current order.\n  (See detailed instructions in the usage documentation.) Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: T integer :: K real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(inout) :: Dky (*) integer, intent(out) :: Iflag public subroutine diprep (Neq, Y, Rwork, Ia, Ja, Ipflag, f, jac) This routine serves as an interface between the driver and\nSubroutine DPREP.  It is called only if MITER is 1 or 2.\nTasks performed here are:\n * call DPREP,\n * reset the required WM segment length LENWK,\n * move YH back to its final location (following WM in RWORK),\n * reset pointers for YH, SAVF, EWT, and ACOR, and\n * move EWT to its new position if ISTATE = 1. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer, intent(inout) :: Ipflag real :: f integer :: jac public subroutine diprepi (Neq, Y, S, Rwork, Ia, Ja, Ic, Jc, Ipflag, res, jac, adda) This routine serves as an interface between the driver and\nSubroutine DPREPI.  Tasks performed here are:\n * call DPREPI,\n * reset the required WM segment length LENWK,\n * move YH back to its final location (following WM in RWORK),\n * reset pointers for YH, SAVR, EWT, and ACOR, and\n * move EWT to its new position if ISTATE = 0 or 1.\nIPFLAG is an output error indication flag.  IPFLAG = 0 if there was\nno trouble, and IPFLAG is the value of the DPREPI error flag IPPER\nif there was trouble in Subroutine DPREPI. Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Rwork (*) integer :: Ia (*) integer :: Ja (*) integer :: Ic (*) integer :: Jc (*) integer, intent(inout) :: Ipflag real :: res integer :: jac real :: adda public subroutine dlhin (Neq, N, T0, Y0, Ydot, f, Tout, Uround, Ewt, Itol, Atol, Y, Temp, H0, Niter, Ier) This routine computes the step size, H0, to be attempted on the\n first step, when the user has not supplied a value for this. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) integer :: N real(kind=dp), intent(in) :: T0 real(kind=dp) :: Y0 (*) real(kind=dp), intent(in) :: Ydot (*) real :: f real(kind=dp), intent(in) :: Tout real(kind=dp), intent(in) :: Uround real(kind=dp) :: Ewt (*) integer, intent(in) :: Itol real(kind=dp), intent(in) :: Atol (*) real(kind=dp) :: Y (*) real(kind=dp) :: Temp (*) real(kind=dp), intent(inout) :: H0 integer, intent(out) :: Niter integer, intent(out) :: Ier public subroutine dlsoda (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt) DLSODA : Livermore Solver for Ordinary Differential Equations, with\n         Automatic method switching for stiff and nonstiff problems. Read more… Arguments Type Intent Optional Attributes Name real :: f integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: jac integer :: Jt public subroutine dlsodar (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Jt, g, Ng, Jroot) This is the 12 November 2003 version of\n DLSODAR: Livermore Solver for Ordinary Differential Equations, with\n          Automatic method switching for stiff and nonstiff problems,\n          and with Root-finding. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Jt real :: g integer :: Ng integer, dimension(Ng) :: Jroot public subroutine dlsode (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) *Accuracy:\n     The accuracy of the solution depends on the choice of tolerances\n     RTOL and ATOL.  Actual (global) errors may exceed these local\n     tolerances, so choose them conservatively. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf public subroutine dlsodes (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, Mf) This is the 12 November 2003 version of\n DLSODES: Livermore Solver for Ordinary Differential Equations\n          with general Sparse Jacobian matrix. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac integer :: Mf public subroutine dlsodi (res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) This is the 18 November 2003 version of\n DLSODI: Livermore Solver for Ordinary Differential Equations\n         (Implicit form). Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf public subroutine dlsodis (res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) This is the 18 November 2003 version of\n DLSODIS: Livermore Solver for Ordinary Differential equations\n          (Implicit form) with general Sparse Jacobian matrices. Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Ydoti (*) real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp) :: Rtol (*) real(kind=dp) :: Atol (*) integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout) :: Rwork (Lrw) integer :: Lrw integer, intent(inout) :: Iwork (Liw) integer :: Liw integer :: Mf public subroutine dlsodkr (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf, g, Ng, Jroot) This is the 18 November 2003 version of\n DLSODKR: Livermore Solver for Ordinary Differential equations,\n          with preconditioned Krylov iteration methods for the\n          Newton correction linear systems, and with Rootfinding. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf real :: g integer :: Ng integer :: Jroot (*) public subroutine dlsodpk (f, Neq, Y, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, jac, psol, Mf) This is the 18 November 2003 version of\n DLSODPK: Livermore Solver for Ordinary Differential equations,\n          with Preconditioned Krylov iteration methods for the\n          Newton correction linear systems. Read more… Arguments Type Intent Optional Attributes Name real :: f integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: jac real :: psol integer :: Mf public subroutine dlsoibt (res, adda, jac, Neq, Y, Ydoti, T, Tout, Itol, Rtol, Atol, Itask, Istate, Iopt, Rwork, Lrw, Iwork, Liw, Mf) This is the 18 November 2003 version of\n DLSOIBT: Livermore Solver for Ordinary differential equations given\n          in Implicit form, with Block-Tridiagonal Jacobian treatment. Read more… Arguments Type Intent Optional Attributes Name real :: res real :: adda integer :: jac integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), dimension(*) :: Ydoti real(kind=dp), intent(inout) :: T real(kind=dp), intent(inout) :: Tout integer :: Itol real(kind=dp), dimension(*) :: Rtol real(kind=dp), dimension(*) :: Atol integer :: Itask integer :: Istate integer :: Iopt real(kind=dp), intent(inout), dimension(Lrw) :: Rwork integer :: Lrw integer, intent(inout), dimension(Liw) :: Iwork integer :: Liw integer :: Mf public subroutine dpjibt (Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPJIBT is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nand r = g(t,y) - A(t,y)*s.  Here J is computed by the user-supplied\nroutine JAC if MITER = 1, or by finite differencing if MITER = 2.\nJ is stored in WM, rescaled, and ADDA is called to generate P.\nP is then subjected to LU decomposition by DDECBT in preparation\nfor later solution of linear systems with P as coefficient matrix. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: res integer :: jac real :: adda public subroutine dprepj (Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPREPJ is called by DSTODE to compute and process the matrix\n  P = I - dls1%h el(1) J , where J is an approximation to the Jacobian.\n  Here J is computed by the user-supplied routine JAC if\n  MITER = 1 or 4, or by finite differencing if MITER = 2, 3, or 5.\n  If MITER = 3, a diagonal approximation to J is used.\n  J is stored in WM and replaced by P.  If MITER .ne. 3, P is then\n  subjected to LU decomposition in preparation for later solution\n  of linear systems with P as coefficient matrix.  This is done\n  by DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac public subroutine dprepji (Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wm, Iwm, res, jac, adda) DPREPJI is called by DSTODI to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s.  Here J is computed by the user-supplied\nroutine JAC if MITER = 1 or 4, or by finite differencing if MITER =\n2 or 5.  J is stored in WM, rescaled, and ADDA is called to generate\nP. P is then subjected to LU decomposition in preparation\nfor later solution of linear systems with P as coefficient\nmatrix.  This is done by DGEFA if MITER = 1 or 2, and by\nDGBFA if MITER = 4 or 5. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp), intent(in) :: Ewt (*) real(kind=dp) :: Rtem (*) real(kind=dp) :: Savr (*) real(kind=dp) :: S (*) real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real :: res integer :: jac real :: adda public subroutine dprja (Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wm, Iwm, f, jac) DPRJA is called by DSTODA to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nHere J is computed by the user-supplied routine JAC if\nMITER = 1 or 4 or by finite differencing if MITER = 2 or 5.\nJ, scaled by -H*EL(1), is stored in WM.  Then the norm of J (the\nmatrix norm consistent with the weighted max-norm on vectors given\nby DMNORM) is computed, and J is overwritten by P.  P is then\nsubjected to LU decomposition in preparation for later solution\nof linear systems with P as coefficient matrix.  This is done\nby DGEFA if MITER = 1 or 2, and by DGBFA if MITER = 4 or 5. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), dimension(*) :: Ewt real(kind=dp), dimension(*) :: Ftem real(kind=dp), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac public subroutine dprjis (Neq, Y, Yh, Nyh, Ewt, Rtem, Savr, S, Wk, Iwk, res, jac, adda) DPRJIS is called to compute and process the matrix\nP = A - H EL(1) J, where J is an approximation to the Jacobian dr/dy,\nwhere r = g(t,y) - A(t,y)*s.  J is computed by columns, either by\nthe user-supplied routine JAC if MITER = 1, or by finite differencing\nif MITER = 2.  J is stored in WK, rescaled, and ADDA is called to\ngenerate P.  The matrix P is subjected to LU decomposition in CDRV.\nP and its LU decomposition are stored separately in WK. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), intent(inout), dimension(*) :: Y real(kind=dp), intent(in), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(in), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Rtem real(kind=dp), dimension(*) :: Savr real(kind=dp), dimension(*) :: S real(kind=dp), intent(inout), dimension(*) :: Wk integer, dimension(*) :: Iwk real :: res integer :: jac real :: adda public subroutine dprjs (Neq, Y, Yh, Nyh, Ewt, Ftem, Savf, Wk, Iwk, f, jac) DPRJS is called to compute and process the matrix\nP = I - H EL(1) J, where J is an approximation to the Jacobian.\nJ is computed by columns, either by the user-supplied routine JAC\nif MITER = 1, or by finite differencing if MITER = 2.\nif MITER = 3, a diagonal approximation to J is used.\nif MITER = 1 or 2, and if the existing value of the Jacobian\n(as contained in P) is considered acceptable, then a new value of\nP is reconstructed from the old value.  In any case, when MITER\nis 1 or 2, the P matrix is subjected to LU decomposition in CDRV.\nP and its LU decomposition are stored (separately) in WK. Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(in) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Ftem (*) real(kind=dp) :: Savf (*) real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real :: f integer :: jac public subroutine drchek (Job, g_sub, Neq, Y, Yh, Nyh, G0, G1, Gx, Jroot, Irt) This routine checks for the presence of a root in the vicinity of\nthe current T, in a manner depending on the input flag JOB.  It calls\nSubroutine DROOTS to locate the root as precisely as possible. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: Job real :: g_sub integer :: Neq (*) real(kind=dp) :: Y (*) real(kind=dp) :: Yh (Nyh,*) integer, intent(in) :: Nyh real(kind=dp) :: G0 (*) real(kind=dp) :: G1 (*) real(kind=dp) :: Gx (*) integer :: Jroot (*) integer, intent(out) :: Irt public subroutine dscal (N, Da, Dx, Incx) dscal(3f) - [M_odepack::matrix] Multiply a vector by a constant. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N real(kind=dp), intent(in) :: Da real(kind=dp), intent(inout) :: Dx (*) integer, intent(in) :: Incx public subroutine dslsbt (Wm, Iwm, X, Tem) This routine acts as an interface between the core integrator\nroutine and the DSOLBT routine for the solution of the linear system\narising from chord iteration.\nCommunication with DSLSBT uses the following variables: Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: Wm (*) integer :: Iwm (*) real(kind=dp) :: X (*) real(kind=dp) :: Tem (*) public subroutine dsolss (Wk, Iwk, X, Tem) This routine manages the solution of the linear system arising from\na chord iteration.  It is called if MITER .ne. 0.\nIf MITER is 1 or 2, it calls CDRV to accomplish this.\nIf MITER = 3 it updates the coefficient H EL0 in the diagonal\nmatrix, and then computes the solution.\ncommunication with DSOLSS uses the following variables:\nWK    = real work space containing the inverse diagonal matrix if\n        MITER = 3 and the LU decomposition of the matrix otherwise.\n        Storage of matrix elements starts at WK(3).\n        WK also contains the following matrix-related data:\n        WK(1) = SQRT(UROUND) (not used here),\n        WK(2) = HL0, the previous value of H EL0, used if MITER = 3.\nIWK   = integer work space for matrix-related data, assumed to\n        be equivalenced to WK.  In addition, WK(IPRSP) and IWK(IPISP)\n        are assumed to have identical locations.\nX     = the right-hand side vector on input, and the solution vector\n        on output, of length N.\nTEM   = vector of work space of length N, not used in this version.\nIERSL = output flag (in Common).\n        IERSL = 0  if no trouble occurred.\n        IERSL = -1 if CDRV returned an error flag (MITER = 1 or 2).\n                   This should never occur and is considered fatal.\n        IERSL = 1  if a singular matrix arose with MITER = 3.\nThis routine also uses other variables in Common. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wk (*) integer :: Iwk (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) public subroutine dsolsy (Wm, Iwm, X, Tem) This routine manages the solution of the linear system arising from\n  a chord iteration.  It is called if MITER .ne. 0.\n  If MITER is 1 or 2, it calls DGESL to accomplish this.\n  If MITER = 3 it updates the coefficient h EL0 in the diagonal\n  matrix, and then computes the solution.\n  If MITER is 4 or 5, it calls DGBSL.\n  Communication with DSOLSY uses the following variables:\n  WM    = real work space containing the inverse diagonal matrix if\n          MITER = 3 and the LU decomposition of the matrix otherwise.\n          Storage of matrix elements starts at WM(3).\n          WM also contains the following matrix-related data:\n          WM(1) = SQRT(UROUND) (not used here),\n          WM(2) = HL0, the previous value of h EL0, used if MITER = 3.\n  IWM   = integer work space containing pivot information, starting at\n          IWM(21), if MITER is 1, 2, 4, or 5.  IWM also contains band\n          parameters ML = IWM(1) and MU = IWM(2) if MITER is 4 or 5.\n  X     = the right-hand side vector on input, and the solution vector\n          on output, of length N.\n  TEM   = vector of work space of length N, not used in this version.\n  IERSL = output flag (in COMMON).  IERSL = 0 if no trouble occurred.\n          IERSL = 1 if a singular matrix arose with MITER = 3.\n  This routine also uses the COMMON variables EL0, H, MITER, and N. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Wm (*) integer :: Iwm (*) real(kind=dp), intent(inout) :: X (*) real(kind=dp) :: Tem (*) public subroutine dsrcar (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(dlsa01)::DLSA, DLSR01, which are used\ninternally by one or more ODEPACK solvers. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrckr (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSR01, DLPK01, which\nare used internally by the DLSODKR solver. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrcma (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, type(DLSA01)::DLSA, which are used\ninternally by one or more ODEPACK solvers. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrcms (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLSS01, which are used\ninternally by one or more ODEPACK solvers. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: Rsav (*) integer, intent(inout) :: Isav (*) integer, intent(in) :: Job public subroutine dsrcom (Rsav, Isav, Job) dsrcom(3f) - [M_odepack] Save/restore ODEPACK COMMON blocks. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job public subroutine dsrcpk (Rsav, Isav, Job) This routine saves or restores (depending on JOB) the contents of\nthe Common blocks DLS001, DLPK01, which are used\ninternally by the DLSODPK solver. Read more… Arguments Type Intent Optional Attributes Name real(kind=dp) :: Rsav (*) integer :: Isav (*) integer, intent(in) :: Job public subroutine dstoda (Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Acor, Wm, Iwm, f, jac, pjac, slvs) DSTODA performs one step of the integration of an initial value\nproblem for a system of ordinary differential equations.\nNote: DSTODA is independent of the value of the iteration method\nindicator MITER, when this is .ne. 0, and hence is independent\nof the type of chord method used, or the Jacobian structure.\nCommunication with DSTODA is done with the following variables: Read more… Arguments Type Intent Optional Attributes Name integer :: Neq (*) real(kind=dp), intent(inout) :: Y (*) real(kind=dp), intent(inout) :: Yh (Nyh,*) integer :: Nyh real(kind=dp), intent(inout) :: Yh1 (*) real(kind=dp) :: Ewt (*) real(kind=dp), intent(inout) :: Savf (*) real(kind=dp), intent(inout) :: Acor (*) real(kind=dp) :: Wm (*) integer :: Iwm (*) real :: f integer :: jac real :: pjac real :: slvs public subroutine dstodpk (Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTODPK performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations.\nThe following changes were made to generate Subroutine DSTODPK\nfrom Subroutine DSTODE: Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol public subroutine dstoka (Neq, Y, Yh, Nyh, Yh1, Ewt, Savf, Savx, Acor, Wm, Iwm, f, jac, psol) DSTOKA performs one step of the integration of an initial value\nproblem for a system of Ordinary Differential Equations. Read more… Arguments Type Intent Optional Attributes Name integer, dimension(*) :: Neq real(kind=dp), dimension(*) :: Y real(kind=dp), intent(inout), dimension(Nyh,*) :: Yh integer, intent(in) :: Nyh real(kind=dp), intent(inout), dimension(*) :: Yh1 real(kind=dp), dimension(*) :: Ewt real(kind=dp), intent(inout), dimension(*) :: Savf real(kind=dp), intent(inout), dimension(*) :: Savx real(kind=dp), intent(inout), dimension(*) :: Acor real(kind=dp), dimension(*) :: Wm integer, dimension(*) :: Iwm real :: f integer :: jac real :: psol public subroutine jgroup (N, Ia, Ja, Maxg, Ngrp, Igp, Jgp, Incl, Jdone, Ier) This subroutine constructs groupings of the column indices of\n the Jacobian matrix, used in the numerical evaluation of the\n Jacobian by finite differences. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: N integer, intent(in), dimension(*) :: Ia integer, intent(in), dimension(*) :: Ja integer, intent(in) :: Maxg integer, intent(out) :: Ngrp integer, intent(inout), dimension(*) :: Igp integer, intent(out), dimension(*) :: Jgp integer, intent(inout), dimension(*) :: Incl integer, intent(inout), dimension(*) :: Jdone integer, intent(out) :: Ier public subroutine odrv (N, Ia, Ja, A, P, Ip, Nsp, Isp, Path, Flag) odrv(3f) [M_odepack] - driver for sparse matrix reordering routines Read more… Arguments Type Intent Optional Attributes Name integer :: N integer, dimension(*) :: Ia integer, dimension(*) :: Ja real(kind=dp), dimension(*) :: A integer, dimension(*) :: P integer, dimension(*) :: Ip integer, intent(in) :: Nsp integer, dimension(*) :: Isp integer, intent(in) :: Path integer, intent(inout) :: Flag public subroutine xerrwd (Msg, Nmes, Nerr, Level, Ni, I1, I2, Nr, R1, R2) xerrwd(3f) - [M_odepack::Matrix] Write error message with values. Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: Msg integer :: Nmes integer :: Nerr integer, intent(in) :: Level integer, intent(in) :: Ni integer, intent(in) :: I1 integer, intent(in) :: I2 integer, intent(in) :: Nr real(kind=dp), intent(in) :: R1 real(kind=dp), intent(in) :: R2 public subroutine xsetf (mflag) xsetf(3f) - [M_odepack::matrix] Reset the error print control flag. Read more… Arguments Type Intent Optional Attributes Name integer :: mflag public subroutine xsetun (lun) xsetun(3f) - [M_odepack::matrix] Reset the logical unit number for error messages. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun","tags":"","loc":"module/m_odepack.html"}]}